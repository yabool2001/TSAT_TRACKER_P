
TSAT_TRACKER_P.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008978  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001d00  08008a34  08008a34  00018a34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a734  0800a734  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  0800a734  0800a734  0001a734  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a73c  0800a73c  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a73c  0800a73c  0001a73c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a740  0800a740  0001a740  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  0800a744  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001524  20000060  0800a7a4  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001584  0800a7a4  00021584  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a1e0  00000000  00000000  000200cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000031bc  00000000  00000000  0003a2ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001840  00000000  00000000  0003d468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000131a  00000000  00000000  0003eca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f49f  00000000  00000000  0003ffc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b578  00000000  00000000  0005f461  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c99da  00000000  00000000  0007a9d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005f1c  00000000  00000000  001443b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004d  00000000  00000000  0014a2d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000060 	.word	0x20000060
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08008a1c 	.word	0x08008a1c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000064 	.word	0x20000064
 8000100:	08008a1c 	.word	0x08008a1c

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_shi>:
 8000114:	b403      	push	{r0, r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0040      	lsls	r0, r0, #1
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	5e09      	ldrsh	r1, [r1, r0]
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	448e      	add	lr, r1
 8000124:	bc03      	pop	{r0, r1}
 8000126:	4770      	bx	lr

08000128 <__udivsi3>:
 8000128:	2200      	movs	r2, #0
 800012a:	0843      	lsrs	r3, r0, #1
 800012c:	428b      	cmp	r3, r1
 800012e:	d374      	bcc.n	800021a <__udivsi3+0xf2>
 8000130:	0903      	lsrs	r3, r0, #4
 8000132:	428b      	cmp	r3, r1
 8000134:	d35f      	bcc.n	80001f6 <__udivsi3+0xce>
 8000136:	0a03      	lsrs	r3, r0, #8
 8000138:	428b      	cmp	r3, r1
 800013a:	d344      	bcc.n	80001c6 <__udivsi3+0x9e>
 800013c:	0b03      	lsrs	r3, r0, #12
 800013e:	428b      	cmp	r3, r1
 8000140:	d328      	bcc.n	8000194 <__udivsi3+0x6c>
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d30d      	bcc.n	8000164 <__udivsi3+0x3c>
 8000148:	22ff      	movs	r2, #255	; 0xff
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	ba12      	rev	r2, r2
 800014e:	0c03      	lsrs	r3, r0, #16
 8000150:	428b      	cmp	r3, r1
 8000152:	d302      	bcc.n	800015a <__udivsi3+0x32>
 8000154:	1212      	asrs	r2, r2, #8
 8000156:	0209      	lsls	r1, r1, #8
 8000158:	d065      	beq.n	8000226 <__udivsi3+0xfe>
 800015a:	0b03      	lsrs	r3, r0, #12
 800015c:	428b      	cmp	r3, r1
 800015e:	d319      	bcc.n	8000194 <__udivsi3+0x6c>
 8000160:	e000      	b.n	8000164 <__udivsi3+0x3c>
 8000162:	0a09      	lsrs	r1, r1, #8
 8000164:	0bc3      	lsrs	r3, r0, #15
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x46>
 800016a:	03cb      	lsls	r3, r1, #15
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b83      	lsrs	r3, r0, #14
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x52>
 8000176:	038b      	lsls	r3, r1, #14
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b43      	lsrs	r3, r0, #13
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x5e>
 8000182:	034b      	lsls	r3, r1, #13
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b03      	lsrs	r3, r0, #12
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x6a>
 800018e:	030b      	lsls	r3, r1, #12
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0ac3      	lsrs	r3, r0, #11
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x76>
 800019a:	02cb      	lsls	r3, r1, #11
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a83      	lsrs	r3, r0, #10
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x82>
 80001a6:	028b      	lsls	r3, r1, #10
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a43      	lsrs	r3, r0, #9
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x8e>
 80001b2:	024b      	lsls	r3, r1, #9
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a03      	lsrs	r3, r0, #8
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x9a>
 80001be:	020b      	lsls	r3, r1, #8
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	d2cd      	bcs.n	8000162 <__udivsi3+0x3a>
 80001c6:	09c3      	lsrs	r3, r0, #7
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xa8>
 80001cc:	01cb      	lsls	r3, r1, #7
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0983      	lsrs	r3, r0, #6
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xb4>
 80001d8:	018b      	lsls	r3, r1, #6
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0943      	lsrs	r3, r0, #5
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xc0>
 80001e4:	014b      	lsls	r3, r1, #5
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0903      	lsrs	r3, r0, #4
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xcc>
 80001f0:	010b      	lsls	r3, r1, #4
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	08c3      	lsrs	r3, r0, #3
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xd8>
 80001fc:	00cb      	lsls	r3, r1, #3
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0883      	lsrs	r3, r0, #2
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xe4>
 8000208:	008b      	lsls	r3, r1, #2
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0843      	lsrs	r3, r0, #1
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xf0>
 8000214:	004b      	lsls	r3, r1, #1
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	1a41      	subs	r1, r0, r1
 800021c:	d200      	bcs.n	8000220 <__udivsi3+0xf8>
 800021e:	4601      	mov	r1, r0
 8000220:	4152      	adcs	r2, r2
 8000222:	4610      	mov	r0, r2
 8000224:	4770      	bx	lr
 8000226:	e7ff      	b.n	8000228 <__udivsi3+0x100>
 8000228:	b501      	push	{r0, lr}
 800022a:	2000      	movs	r0, #0
 800022c:	f000 f8f0 	bl	8000410 <__aeabi_idiv0>
 8000230:	bd02      	pop	{r1, pc}
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uidivmod>:
 8000234:	2900      	cmp	r1, #0
 8000236:	d0f7      	beq.n	8000228 <__udivsi3+0x100>
 8000238:	e776      	b.n	8000128 <__udivsi3>
 800023a:	4770      	bx	lr

0800023c <__divsi3>:
 800023c:	4603      	mov	r3, r0
 800023e:	430b      	orrs	r3, r1
 8000240:	d47f      	bmi.n	8000342 <__divsi3+0x106>
 8000242:	2200      	movs	r2, #0
 8000244:	0843      	lsrs	r3, r0, #1
 8000246:	428b      	cmp	r3, r1
 8000248:	d374      	bcc.n	8000334 <__divsi3+0xf8>
 800024a:	0903      	lsrs	r3, r0, #4
 800024c:	428b      	cmp	r3, r1
 800024e:	d35f      	bcc.n	8000310 <__divsi3+0xd4>
 8000250:	0a03      	lsrs	r3, r0, #8
 8000252:	428b      	cmp	r3, r1
 8000254:	d344      	bcc.n	80002e0 <__divsi3+0xa4>
 8000256:	0b03      	lsrs	r3, r0, #12
 8000258:	428b      	cmp	r3, r1
 800025a:	d328      	bcc.n	80002ae <__divsi3+0x72>
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d30d      	bcc.n	800027e <__divsi3+0x42>
 8000262:	22ff      	movs	r2, #255	; 0xff
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	ba12      	rev	r2, r2
 8000268:	0c03      	lsrs	r3, r0, #16
 800026a:	428b      	cmp	r3, r1
 800026c:	d302      	bcc.n	8000274 <__divsi3+0x38>
 800026e:	1212      	asrs	r2, r2, #8
 8000270:	0209      	lsls	r1, r1, #8
 8000272:	d065      	beq.n	8000340 <__divsi3+0x104>
 8000274:	0b03      	lsrs	r3, r0, #12
 8000276:	428b      	cmp	r3, r1
 8000278:	d319      	bcc.n	80002ae <__divsi3+0x72>
 800027a:	e000      	b.n	800027e <__divsi3+0x42>
 800027c:	0a09      	lsrs	r1, r1, #8
 800027e:	0bc3      	lsrs	r3, r0, #15
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x4c>
 8000284:	03cb      	lsls	r3, r1, #15
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b83      	lsrs	r3, r0, #14
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x58>
 8000290:	038b      	lsls	r3, r1, #14
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b43      	lsrs	r3, r0, #13
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x64>
 800029c:	034b      	lsls	r3, r1, #13
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b03      	lsrs	r3, r0, #12
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x70>
 80002a8:	030b      	lsls	r3, r1, #12
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0ac3      	lsrs	r3, r0, #11
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x7c>
 80002b4:	02cb      	lsls	r3, r1, #11
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a83      	lsrs	r3, r0, #10
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x88>
 80002c0:	028b      	lsls	r3, r1, #10
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a43      	lsrs	r3, r0, #9
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x94>
 80002cc:	024b      	lsls	r3, r1, #9
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a03      	lsrs	r3, r0, #8
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0xa0>
 80002d8:	020b      	lsls	r3, r1, #8
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	d2cd      	bcs.n	800027c <__divsi3+0x40>
 80002e0:	09c3      	lsrs	r3, r0, #7
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xae>
 80002e6:	01cb      	lsls	r3, r1, #7
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0983      	lsrs	r3, r0, #6
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xba>
 80002f2:	018b      	lsls	r3, r1, #6
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0943      	lsrs	r3, r0, #5
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xc6>
 80002fe:	014b      	lsls	r3, r1, #5
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0903      	lsrs	r3, r0, #4
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xd2>
 800030a:	010b      	lsls	r3, r1, #4
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	08c3      	lsrs	r3, r0, #3
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xde>
 8000316:	00cb      	lsls	r3, r1, #3
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0883      	lsrs	r3, r0, #2
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xea>
 8000322:	008b      	lsls	r3, r1, #2
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0843      	lsrs	r3, r0, #1
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xf6>
 800032e:	004b      	lsls	r3, r1, #1
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	1a41      	subs	r1, r0, r1
 8000336:	d200      	bcs.n	800033a <__divsi3+0xfe>
 8000338:	4601      	mov	r1, r0
 800033a:	4152      	adcs	r2, r2
 800033c:	4610      	mov	r0, r2
 800033e:	4770      	bx	lr
 8000340:	e05d      	b.n	80003fe <__divsi3+0x1c2>
 8000342:	0fca      	lsrs	r2, r1, #31
 8000344:	d000      	beq.n	8000348 <__divsi3+0x10c>
 8000346:	4249      	negs	r1, r1
 8000348:	1003      	asrs	r3, r0, #32
 800034a:	d300      	bcc.n	800034e <__divsi3+0x112>
 800034c:	4240      	negs	r0, r0
 800034e:	4053      	eors	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	469c      	mov	ip, r3
 8000354:	0903      	lsrs	r3, r0, #4
 8000356:	428b      	cmp	r3, r1
 8000358:	d32d      	bcc.n	80003b6 <__divsi3+0x17a>
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d312      	bcc.n	8000386 <__divsi3+0x14a>
 8000360:	22fc      	movs	r2, #252	; 0xfc
 8000362:	0189      	lsls	r1, r1, #6
 8000364:	ba12      	rev	r2, r2
 8000366:	0a03      	lsrs	r3, r0, #8
 8000368:	428b      	cmp	r3, r1
 800036a:	d30c      	bcc.n	8000386 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	1192      	asrs	r2, r2, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d308      	bcc.n	8000386 <__divsi3+0x14a>
 8000374:	0189      	lsls	r1, r1, #6
 8000376:	1192      	asrs	r2, r2, #6
 8000378:	428b      	cmp	r3, r1
 800037a:	d304      	bcc.n	8000386 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	d03a      	beq.n	80003f6 <__divsi3+0x1ba>
 8000380:	1192      	asrs	r2, r2, #6
 8000382:	e000      	b.n	8000386 <__divsi3+0x14a>
 8000384:	0989      	lsrs	r1, r1, #6
 8000386:	09c3      	lsrs	r3, r0, #7
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x154>
 800038c:	01cb      	lsls	r3, r1, #7
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0983      	lsrs	r3, r0, #6
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x160>
 8000398:	018b      	lsls	r3, r1, #6
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0943      	lsrs	r3, r0, #5
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x16c>
 80003a4:	014b      	lsls	r3, r1, #5
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0903      	lsrs	r3, r0, #4
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x178>
 80003b0:	010b      	lsls	r3, r1, #4
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	08c3      	lsrs	r3, r0, #3
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x184>
 80003bc:	00cb      	lsls	r3, r1, #3
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0883      	lsrs	r3, r0, #2
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x190>
 80003c8:	008b      	lsls	r3, r1, #2
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	d2d9      	bcs.n	8000384 <__divsi3+0x148>
 80003d0:	0843      	lsrs	r3, r0, #1
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d301      	bcc.n	80003da <__divsi3+0x19e>
 80003d6:	004b      	lsls	r3, r1, #1
 80003d8:	1ac0      	subs	r0, r0, r3
 80003da:	4152      	adcs	r2, r2
 80003dc:	1a41      	subs	r1, r0, r1
 80003de:	d200      	bcs.n	80003e2 <__divsi3+0x1a6>
 80003e0:	4601      	mov	r1, r0
 80003e2:	4663      	mov	r3, ip
 80003e4:	4152      	adcs	r2, r2
 80003e6:	105b      	asrs	r3, r3, #1
 80003e8:	4610      	mov	r0, r2
 80003ea:	d301      	bcc.n	80003f0 <__divsi3+0x1b4>
 80003ec:	4240      	negs	r0, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d500      	bpl.n	80003f4 <__divsi3+0x1b8>
 80003f2:	4249      	negs	r1, r1
 80003f4:	4770      	bx	lr
 80003f6:	4663      	mov	r3, ip
 80003f8:	105b      	asrs	r3, r3, #1
 80003fa:	d300      	bcc.n	80003fe <__divsi3+0x1c2>
 80003fc:	4240      	negs	r0, r0
 80003fe:	b501      	push	{r0, lr}
 8000400:	2000      	movs	r0, #0
 8000402:	f000 f805 	bl	8000410 <__aeabi_idiv0>
 8000406:	bd02      	pop	{r1, pc}

08000408 <__aeabi_idivmod>:
 8000408:	2900      	cmp	r1, #0
 800040a:	d0f8      	beq.n	80003fe <__divsi3+0x1c2>
 800040c:	e716      	b.n	800023c <__divsi3>
 800040e:	4770      	bx	lr

08000410 <__aeabi_idiv0>:
 8000410:	4770      	bx	lr
 8000412:	46c0      	nop			; (mov r8, r8)

08000414 <__aeabi_uldivmod>:
 8000414:	2b00      	cmp	r3, #0
 8000416:	d111      	bne.n	800043c <__aeabi_uldivmod+0x28>
 8000418:	2a00      	cmp	r2, #0
 800041a:	d10f      	bne.n	800043c <__aeabi_uldivmod+0x28>
 800041c:	2900      	cmp	r1, #0
 800041e:	d100      	bne.n	8000422 <__aeabi_uldivmod+0xe>
 8000420:	2800      	cmp	r0, #0
 8000422:	d002      	beq.n	800042a <__aeabi_uldivmod+0x16>
 8000424:	2100      	movs	r1, #0
 8000426:	43c9      	mvns	r1, r1
 8000428:	0008      	movs	r0, r1
 800042a:	b407      	push	{r0, r1, r2}
 800042c:	4802      	ldr	r0, [pc, #8]	; (8000438 <__aeabi_uldivmod+0x24>)
 800042e:	a102      	add	r1, pc, #8	; (adr r1, 8000438 <__aeabi_uldivmod+0x24>)
 8000430:	1840      	adds	r0, r0, r1
 8000432:	9002      	str	r0, [sp, #8]
 8000434:	bd03      	pop	{r0, r1, pc}
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	ffffffd9 	.word	0xffffffd9
 800043c:	b403      	push	{r0, r1}
 800043e:	4668      	mov	r0, sp
 8000440:	b501      	push	{r0, lr}
 8000442:	9802      	ldr	r0, [sp, #8]
 8000444:	f000 f806 	bl	8000454 <__udivmoddi4>
 8000448:	9b01      	ldr	r3, [sp, #4]
 800044a:	469e      	mov	lr, r3
 800044c:	b002      	add	sp, #8
 800044e:	bc0c      	pop	{r2, r3}
 8000450:	4770      	bx	lr
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__udivmoddi4>:
 8000454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000456:	4657      	mov	r7, sl
 8000458:	464e      	mov	r6, r9
 800045a:	4645      	mov	r5, r8
 800045c:	46de      	mov	lr, fp
 800045e:	b5e0      	push	{r5, r6, r7, lr}
 8000460:	0004      	movs	r4, r0
 8000462:	000d      	movs	r5, r1
 8000464:	4692      	mov	sl, r2
 8000466:	4699      	mov	r9, r3
 8000468:	b083      	sub	sp, #12
 800046a:	428b      	cmp	r3, r1
 800046c:	d830      	bhi.n	80004d0 <__udivmoddi4+0x7c>
 800046e:	d02d      	beq.n	80004cc <__udivmoddi4+0x78>
 8000470:	4649      	mov	r1, r9
 8000472:	4650      	mov	r0, sl
 8000474:	f000 f8d8 	bl	8000628 <__clzdi2>
 8000478:	0029      	movs	r1, r5
 800047a:	0006      	movs	r6, r0
 800047c:	0020      	movs	r0, r4
 800047e:	f000 f8d3 	bl	8000628 <__clzdi2>
 8000482:	1a33      	subs	r3, r6, r0
 8000484:	4698      	mov	r8, r3
 8000486:	3b20      	subs	r3, #32
 8000488:	d434      	bmi.n	80004f4 <__udivmoddi4+0xa0>
 800048a:	469b      	mov	fp, r3
 800048c:	4653      	mov	r3, sl
 800048e:	465a      	mov	r2, fp
 8000490:	4093      	lsls	r3, r2
 8000492:	4642      	mov	r2, r8
 8000494:	001f      	movs	r7, r3
 8000496:	4653      	mov	r3, sl
 8000498:	4093      	lsls	r3, r2
 800049a:	001e      	movs	r6, r3
 800049c:	42af      	cmp	r7, r5
 800049e:	d83b      	bhi.n	8000518 <__udivmoddi4+0xc4>
 80004a0:	42af      	cmp	r7, r5
 80004a2:	d100      	bne.n	80004a6 <__udivmoddi4+0x52>
 80004a4:	e079      	b.n	800059a <__udivmoddi4+0x146>
 80004a6:	465b      	mov	r3, fp
 80004a8:	1ba4      	subs	r4, r4, r6
 80004aa:	41bd      	sbcs	r5, r7
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	da00      	bge.n	80004b2 <__udivmoddi4+0x5e>
 80004b0:	e076      	b.n	80005a0 <__udivmoddi4+0x14c>
 80004b2:	2200      	movs	r2, #0
 80004b4:	2300      	movs	r3, #0
 80004b6:	9200      	str	r2, [sp, #0]
 80004b8:	9301      	str	r3, [sp, #4]
 80004ba:	2301      	movs	r3, #1
 80004bc:	465a      	mov	r2, fp
 80004be:	4093      	lsls	r3, r2
 80004c0:	9301      	str	r3, [sp, #4]
 80004c2:	2301      	movs	r3, #1
 80004c4:	4642      	mov	r2, r8
 80004c6:	4093      	lsls	r3, r2
 80004c8:	9300      	str	r3, [sp, #0]
 80004ca:	e029      	b.n	8000520 <__udivmoddi4+0xcc>
 80004cc:	4282      	cmp	r2, r0
 80004ce:	d9cf      	bls.n	8000470 <__udivmoddi4+0x1c>
 80004d0:	2200      	movs	r2, #0
 80004d2:	2300      	movs	r3, #0
 80004d4:	9200      	str	r2, [sp, #0]
 80004d6:	9301      	str	r3, [sp, #4]
 80004d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <__udivmoddi4+0x8e>
 80004de:	601c      	str	r4, [r3, #0]
 80004e0:	605d      	str	r5, [r3, #4]
 80004e2:	9800      	ldr	r0, [sp, #0]
 80004e4:	9901      	ldr	r1, [sp, #4]
 80004e6:	b003      	add	sp, #12
 80004e8:	bcf0      	pop	{r4, r5, r6, r7}
 80004ea:	46bb      	mov	fp, r7
 80004ec:	46b2      	mov	sl, r6
 80004ee:	46a9      	mov	r9, r5
 80004f0:	46a0      	mov	r8, r4
 80004f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004f4:	4642      	mov	r2, r8
 80004f6:	469b      	mov	fp, r3
 80004f8:	2320      	movs	r3, #32
 80004fa:	1a9b      	subs	r3, r3, r2
 80004fc:	4652      	mov	r2, sl
 80004fe:	40da      	lsrs	r2, r3
 8000500:	4641      	mov	r1, r8
 8000502:	0013      	movs	r3, r2
 8000504:	464a      	mov	r2, r9
 8000506:	408a      	lsls	r2, r1
 8000508:	0017      	movs	r7, r2
 800050a:	4642      	mov	r2, r8
 800050c:	431f      	orrs	r7, r3
 800050e:	4653      	mov	r3, sl
 8000510:	4093      	lsls	r3, r2
 8000512:	001e      	movs	r6, r3
 8000514:	42af      	cmp	r7, r5
 8000516:	d9c3      	bls.n	80004a0 <__udivmoddi4+0x4c>
 8000518:	2200      	movs	r2, #0
 800051a:	2300      	movs	r3, #0
 800051c:	9200      	str	r2, [sp, #0]
 800051e:	9301      	str	r3, [sp, #4]
 8000520:	4643      	mov	r3, r8
 8000522:	2b00      	cmp	r3, #0
 8000524:	d0d8      	beq.n	80004d8 <__udivmoddi4+0x84>
 8000526:	07fb      	lsls	r3, r7, #31
 8000528:	0872      	lsrs	r2, r6, #1
 800052a:	431a      	orrs	r2, r3
 800052c:	4646      	mov	r6, r8
 800052e:	087b      	lsrs	r3, r7, #1
 8000530:	e00e      	b.n	8000550 <__udivmoddi4+0xfc>
 8000532:	42ab      	cmp	r3, r5
 8000534:	d101      	bne.n	800053a <__udivmoddi4+0xe6>
 8000536:	42a2      	cmp	r2, r4
 8000538:	d80c      	bhi.n	8000554 <__udivmoddi4+0x100>
 800053a:	1aa4      	subs	r4, r4, r2
 800053c:	419d      	sbcs	r5, r3
 800053e:	2001      	movs	r0, #1
 8000540:	1924      	adds	r4, r4, r4
 8000542:	416d      	adcs	r5, r5
 8000544:	2100      	movs	r1, #0
 8000546:	3e01      	subs	r6, #1
 8000548:	1824      	adds	r4, r4, r0
 800054a:	414d      	adcs	r5, r1
 800054c:	2e00      	cmp	r6, #0
 800054e:	d006      	beq.n	800055e <__udivmoddi4+0x10a>
 8000550:	42ab      	cmp	r3, r5
 8000552:	d9ee      	bls.n	8000532 <__udivmoddi4+0xde>
 8000554:	3e01      	subs	r6, #1
 8000556:	1924      	adds	r4, r4, r4
 8000558:	416d      	adcs	r5, r5
 800055a:	2e00      	cmp	r6, #0
 800055c:	d1f8      	bne.n	8000550 <__udivmoddi4+0xfc>
 800055e:	9800      	ldr	r0, [sp, #0]
 8000560:	9901      	ldr	r1, [sp, #4]
 8000562:	465b      	mov	r3, fp
 8000564:	1900      	adds	r0, r0, r4
 8000566:	4169      	adcs	r1, r5
 8000568:	2b00      	cmp	r3, #0
 800056a:	db24      	blt.n	80005b6 <__udivmoddi4+0x162>
 800056c:	002b      	movs	r3, r5
 800056e:	465a      	mov	r2, fp
 8000570:	4644      	mov	r4, r8
 8000572:	40d3      	lsrs	r3, r2
 8000574:	002a      	movs	r2, r5
 8000576:	40e2      	lsrs	r2, r4
 8000578:	001c      	movs	r4, r3
 800057a:	465b      	mov	r3, fp
 800057c:	0015      	movs	r5, r2
 800057e:	2b00      	cmp	r3, #0
 8000580:	db2a      	blt.n	80005d8 <__udivmoddi4+0x184>
 8000582:	0026      	movs	r6, r4
 8000584:	409e      	lsls	r6, r3
 8000586:	0033      	movs	r3, r6
 8000588:	0026      	movs	r6, r4
 800058a:	4647      	mov	r7, r8
 800058c:	40be      	lsls	r6, r7
 800058e:	0032      	movs	r2, r6
 8000590:	1a80      	subs	r0, r0, r2
 8000592:	4199      	sbcs	r1, r3
 8000594:	9000      	str	r0, [sp, #0]
 8000596:	9101      	str	r1, [sp, #4]
 8000598:	e79e      	b.n	80004d8 <__udivmoddi4+0x84>
 800059a:	42a3      	cmp	r3, r4
 800059c:	d8bc      	bhi.n	8000518 <__udivmoddi4+0xc4>
 800059e:	e782      	b.n	80004a6 <__udivmoddi4+0x52>
 80005a0:	4642      	mov	r2, r8
 80005a2:	2320      	movs	r3, #32
 80005a4:	2100      	movs	r1, #0
 80005a6:	1a9b      	subs	r3, r3, r2
 80005a8:	2200      	movs	r2, #0
 80005aa:	9100      	str	r1, [sp, #0]
 80005ac:	9201      	str	r2, [sp, #4]
 80005ae:	2201      	movs	r2, #1
 80005b0:	40da      	lsrs	r2, r3
 80005b2:	9201      	str	r2, [sp, #4]
 80005b4:	e785      	b.n	80004c2 <__udivmoddi4+0x6e>
 80005b6:	4642      	mov	r2, r8
 80005b8:	2320      	movs	r3, #32
 80005ba:	1a9b      	subs	r3, r3, r2
 80005bc:	002a      	movs	r2, r5
 80005be:	4646      	mov	r6, r8
 80005c0:	409a      	lsls	r2, r3
 80005c2:	0023      	movs	r3, r4
 80005c4:	40f3      	lsrs	r3, r6
 80005c6:	4644      	mov	r4, r8
 80005c8:	4313      	orrs	r3, r2
 80005ca:	002a      	movs	r2, r5
 80005cc:	40e2      	lsrs	r2, r4
 80005ce:	001c      	movs	r4, r3
 80005d0:	465b      	mov	r3, fp
 80005d2:	0015      	movs	r5, r2
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	dad4      	bge.n	8000582 <__udivmoddi4+0x12e>
 80005d8:	4642      	mov	r2, r8
 80005da:	002f      	movs	r7, r5
 80005dc:	2320      	movs	r3, #32
 80005de:	0026      	movs	r6, r4
 80005e0:	4097      	lsls	r7, r2
 80005e2:	1a9b      	subs	r3, r3, r2
 80005e4:	40de      	lsrs	r6, r3
 80005e6:	003b      	movs	r3, r7
 80005e8:	4333      	orrs	r3, r6
 80005ea:	e7cd      	b.n	8000588 <__udivmoddi4+0x134>

080005ec <__clzsi2>:
 80005ec:	211c      	movs	r1, #28
 80005ee:	2301      	movs	r3, #1
 80005f0:	041b      	lsls	r3, r3, #16
 80005f2:	4298      	cmp	r0, r3
 80005f4:	d301      	bcc.n	80005fa <__clzsi2+0xe>
 80005f6:	0c00      	lsrs	r0, r0, #16
 80005f8:	3910      	subs	r1, #16
 80005fa:	0a1b      	lsrs	r3, r3, #8
 80005fc:	4298      	cmp	r0, r3
 80005fe:	d301      	bcc.n	8000604 <__clzsi2+0x18>
 8000600:	0a00      	lsrs	r0, r0, #8
 8000602:	3908      	subs	r1, #8
 8000604:	091b      	lsrs	r3, r3, #4
 8000606:	4298      	cmp	r0, r3
 8000608:	d301      	bcc.n	800060e <__clzsi2+0x22>
 800060a:	0900      	lsrs	r0, r0, #4
 800060c:	3904      	subs	r1, #4
 800060e:	a202      	add	r2, pc, #8	; (adr r2, 8000618 <__clzsi2+0x2c>)
 8000610:	5c10      	ldrb	r0, [r2, r0]
 8000612:	1840      	adds	r0, r0, r1
 8000614:	4770      	bx	lr
 8000616:	46c0      	nop			; (mov r8, r8)
 8000618:	02020304 	.word	0x02020304
 800061c:	01010101 	.word	0x01010101
	...

08000628 <__clzdi2>:
 8000628:	b510      	push	{r4, lr}
 800062a:	2900      	cmp	r1, #0
 800062c:	d103      	bne.n	8000636 <__clzdi2+0xe>
 800062e:	f7ff ffdd 	bl	80005ec <__clzsi2>
 8000632:	3020      	adds	r0, #32
 8000634:	e002      	b.n	800063c <__clzdi2+0x14>
 8000636:	0008      	movs	r0, r1
 8000638:	f7ff ffd8 	bl	80005ec <__clzsi2>
 800063c:	bd10      	pop	{r4, pc}
 800063e:	46c0      	nop			; (mov r8, r8)

08000640 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000640:	b590      	push	{r4, r7, lr}
 8000642:	b0c7      	sub	sp, #284	; 0x11c
 8000644:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000646:	f001 fb67 	bl	8001d18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800064a:	f000 fadb 	bl	8000c04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800064e:	f000 fca7 	bl	8000fa0 <MX_GPIO_Init>
  MX_RTC_Init();
 8000652:	f000 fb23 	bl	8000c9c <MX_RTC_Init>
  MX_SPI1_Init();
 8000656:	f000 fb4f 	bl	8000cf8 <MX_SPI1_Init>
  MX_TIM6_Init();
 800065a:	f000 fb8b 	bl	8000d74 <MX_TIM6_Init>
  MX_USART2_UART_Init();
 800065e:	f000 fbc7 	bl	8000df0 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000662:	f000 fc13 	bl	8000e8c <MX_USART3_UART_Init>
  MX_USART5_UART_Init();
 8000666:	f000 fc5f 	bl	8000f28 <MX_USART5_UART_Init>


  /* USER CODE BEGIN 2 */

  if(!(HAL_GPIO_ReadPin(SW1_GPIO_Port, SW1_Pin)))
 800066a:	4bde      	ldr	r3, [pc, #888]	; (80009e4 <main+0x3a4>)
 800066c:	2104      	movs	r1, #4
 800066e:	0018      	movs	r0, r3
 8000670:	f002 f812 	bl	8002698 <HAL_GPIO_ReadPin>
 8000674:	1e03      	subs	r3, r0, #0
 8000676:	d137      	bne.n	80006e8 <main+0xa8>
    {
  	  send_debug_logs ( "SW1 PIN LOW\n" );
 8000678:	4bdb      	ldr	r3, [pc, #876]	; (80009e8 <main+0x3a8>)
 800067a:	0018      	movs	r0, r3
 800067c:	f000 fdba 	bl	80011f4 <send_debug_logs>
  	  send_debug_logs ( "Enter to gnss standalone mode:\n" );
 8000680:	4bda      	ldr	r3, [pc, #872]	; (80009ec <main+0x3ac>)
 8000682:	0018      	movs	r0, r3
 8000684:	f000 fdb6 	bl	80011f4 <send_debug_logs>
  	  send_debug_logs ( "deinit uart gnss" );
 8000688:	4bd9      	ldr	r3, [pc, #868]	; (80009f0 <main+0x3b0>)
 800068a:	0018      	movs	r0, r3
 800068c:	f000 fdb2 	bl	80011f4 <send_debug_logs>
  	  HAL_UART_DeInit ( HUART_GNSS ) ;
 8000690:	4bd8      	ldr	r3, [pc, #864]	; (80009f4 <main+0x3b4>)
 8000692:	0018      	movs	r0, r3
 8000694:	f004 fbfa 	bl	8004e8c <HAL_UART_DeInit>
  	  send_debug_logs ( "switch on gnss\n" );
 8000698:	4bd7      	ldr	r3, [pc, #860]	; (80009f8 <main+0x3b8>)
 800069a:	0018      	movs	r0, r3
 800069c:	f000 fdaa 	bl	80011f4 <send_debug_logs>
  	  my_gnss_on () ;
 80006a0:	f000 fe7a 	bl	8001398 <my_gnss_on>
  	  while(!(HAL_GPIO_ReadPin(SW1_GPIO_Port, SW1_Pin)))
 80006a4:	e015      	b.n	80006d2 <main+0x92>
  		  {
  		  HAL_Delay(500);
 80006a6:	23fa      	movs	r3, #250	; 0xfa
 80006a8:	005b      	lsls	r3, r3, #1
 80006aa:	0018      	movs	r0, r3
 80006ac:	f001 fbba 	bl	8001e24 <HAL_Delay>
  		  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_SET);
 80006b0:	4bcc      	ldr	r3, [pc, #816]	; (80009e4 <main+0x3a4>)
 80006b2:	2201      	movs	r2, #1
 80006b4:	2102      	movs	r1, #2
 80006b6:	0018      	movs	r0, r3
 80006b8:	f002 f80b 	bl	80026d2 <HAL_GPIO_WritePin>
  		  HAL_Delay(500);
 80006bc:	23fa      	movs	r3, #250	; 0xfa
 80006be:	005b      	lsls	r3, r3, #1
 80006c0:	0018      	movs	r0, r3
 80006c2:	f001 fbaf 	bl	8001e24 <HAL_Delay>
  		  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 80006c6:	4bc7      	ldr	r3, [pc, #796]	; (80009e4 <main+0x3a4>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	2102      	movs	r1, #2
 80006cc:	0018      	movs	r0, r3
 80006ce:	f002 f800 	bl	80026d2 <HAL_GPIO_WritePin>
  	  while(!(HAL_GPIO_ReadPin(SW1_GPIO_Port, SW1_Pin)))
 80006d2:	4bc4      	ldr	r3, [pc, #784]	; (80009e4 <main+0x3a4>)
 80006d4:	2104      	movs	r1, #4
 80006d6:	0018      	movs	r0, r3
 80006d8:	f001 ffde 	bl	8002698 <HAL_GPIO_ReadPin>
 80006dc:	1e03      	subs	r3, r0, #0
 80006de:	d0e2      	beq.n	80006a6 <main+0x66>
  		  }
  	  my_gnss_off() ;
 80006e0:	f000 fe72 	bl	80013c8 <my_gnss_off>
  	  MX_USART5_UART_Init();
 80006e4:	f000 fc20 	bl	8000f28 <MX_USART5_UART_Init>

    }
  HAL_UART_Transmit ( HUART_DBG , (uint8_t*) hello , strlen ( hello ) , UART_TIMEOUT ) ;
 80006e8:	4bc4      	ldr	r3, [pc, #784]	; (80009fc <main+0x3bc>)
 80006ea:	681c      	ldr	r4, [r3, #0]
 80006ec:	4bc3      	ldr	r3, [pc, #780]	; (80009fc <main+0x3bc>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	0018      	movs	r0, r3
 80006f2:	f7ff fd07 	bl	8000104 <strlen>
 80006f6:	0003      	movs	r3, r0
 80006f8:	b29a      	uxth	r2, r3
 80006fa:	23fa      	movs	r3, #250	; 0xfa
 80006fc:	009b      	lsls	r3, r3, #2
 80006fe:	48c0      	ldr	r0, [pc, #768]	; (8000a00 <main+0x3c0>)
 8000700:	0021      	movs	r1, r4
 8000702:	f004 fc03 	bl	8004f0c <HAL_UART_Transmit>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8000706:	b662      	cpsie	i
}
 8000708:	46c0      	nop			; (mov r8, r8)
  __enable_irq();
  fifo_init(uart2_tx_buffer, BUFFER_SIZE, &uart_fifo);
 800070a:	4abe      	ldr	r2, [pc, #760]	; (8000a04 <main+0x3c4>)
 800070c:	2380      	movs	r3, #128	; 0x80
 800070e:	0159      	lsls	r1, r3, #5
 8000710:	4bbd      	ldr	r3, [pc, #756]	; (8000a08 <main+0x3c8>)
 8000712:	0018      	movs	r0, r3
 8000714:	f000 ff2c 	bl	8001570 <fifo_init>
  my_tim_init () ;
 8000718:	f000 fe98 	bl	800144c <my_tim_init>
  send_debug_logs ( "The device test started. You have max. 10 minutes to complete each steps.\n" ) ;
 800071c:	4bbb      	ldr	r3, [pc, #748]	; (8000a0c <main+0x3cc>)
 800071e:	0018      	movs	r0, r3
 8000720:	f000 fd68 	bl	80011f4 <send_debug_logs>

  if(HAL_GPIO_ReadPin(GNSS_3DFIX_GPIO_Port, GNSS_3DFIX_Pin))
 8000724:	4bba      	ldr	r3, [pc, #744]	; (8000a10 <main+0x3d0>)
 8000726:	2120      	movs	r1, #32
 8000728:	0018      	movs	r0, r3
 800072a:	f001 ffb5 	bl	8002698 <HAL_GPIO_ReadPin>
 800072e:	1e03      	subs	r3, r0, #0
 8000730:	d004      	beq.n	800073c <main+0xfc>
	 send_debug_logs ( "3D FIX pin HIGH\n" );
 8000732:	4bb8      	ldr	r3, [pc, #736]	; (8000a14 <main+0x3d4>)
 8000734:	0018      	movs	r0, r3
 8000736:	f000 fd5d 	bl	80011f4 <send_debug_logs>
 800073a:	e003      	b.n	8000744 <main+0x104>
  else
	 send_debug_logs ( "3D FIX pin LOW\n" );
 800073c:	4bb6      	ldr	r3, [pc, #728]	; (8000a18 <main+0x3d8>)
 800073e:	0018      	movs	r0, r3
 8000740:	f000 fd58 	bl	80011f4 <send_debug_logs>

  if(HAL_GPIO_ReadPin(GNSS_JAM_GPIO_Port, GNSS_JAM_Pin))
 8000744:	4bb2      	ldr	r3, [pc, #712]	; (8000a10 <main+0x3d0>)
 8000746:	2140      	movs	r1, #64	; 0x40
 8000748:	0018      	movs	r0, r3
 800074a:	f001 ffa5 	bl	8002698 <HAL_GPIO_ReadPin>
 800074e:	1e03      	subs	r3, r0, #0
 8000750:	d004      	beq.n	800075c <main+0x11c>
		 send_debug_logs ( "JAM pin HIGH\n" );
 8000752:	4bb2      	ldr	r3, [pc, #712]	; (8000a1c <main+0x3dc>)
 8000754:	0018      	movs	r0, r3
 8000756:	f000 fd4d 	bl	80011f4 <send_debug_logs>
 800075a:	e003      	b.n	8000764 <main+0x124>
	 else
		 send_debug_logs ( "JAM pin LOW\n" );
 800075c:	4bb0      	ldr	r3, [pc, #704]	; (8000a20 <main+0x3e0>)
 800075e:	0018      	movs	r0, r3
 8000760:	f000 fd48 	bl	80011f4 <send_debug_logs>

  if(HAL_GPIO_ReadPin(GNSS_GEOF_GPIO_Port, GNSS_GEOF_Pin))
 8000764:	4baa      	ldr	r3, [pc, #680]	; (8000a10 <main+0x3d0>)
 8000766:	2180      	movs	r1, #128	; 0x80
 8000768:	0018      	movs	r0, r3
 800076a:	f001 ff95 	bl	8002698 <HAL_GPIO_ReadPin>
 800076e:	1e03      	subs	r3, r0, #0
 8000770:	d004      	beq.n	800077c <main+0x13c>
		 send_debug_logs ( "GEOFFENCE pin HIGH\n" );
 8000772:	4bac      	ldr	r3, [pc, #688]	; (8000a24 <main+0x3e4>)
 8000774:	0018      	movs	r0, r3
 8000776:	f000 fd3d 	bl	80011f4 <send_debug_logs>
 800077a:	e003      	b.n	8000784 <main+0x144>
	 else
		 send_debug_logs ( "GEOFFENCE pin LOW\n" );
 800077c:	4baa      	ldr	r3, [pc, #680]	; (8000a28 <main+0x3e8>)
 800077e:	0018      	movs	r0, r3
 8000780:	f000 fd38 	bl	80011f4 <send_debug_logs>


  send_debug_logs ( "GREEN LED ON\n" ) ;
 8000784:	4ba9      	ldr	r3, [pc, #676]	; (8000a2c <main+0x3ec>)
 8000786:	0018      	movs	r0, r3
 8000788:	f000 fd34 	bl	80011f4 <send_debug_logs>
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 800078c:	4b95      	ldr	r3, [pc, #596]	; (80009e4 <main+0x3a4>)
 800078e:	2201      	movs	r2, #1
 8000790:	2101      	movs	r1, #1
 8000792:	0018      	movs	r0, r3
 8000794:	f001 ff9d 	bl	80026d2 <HAL_GPIO_WritePin>
  HAL_Delay(2000);
 8000798:	23fa      	movs	r3, #250	; 0xfa
 800079a:	00db      	lsls	r3, r3, #3
 800079c:	0018      	movs	r0, r3
 800079e:	f001 fb41 	bl	8001e24 <HAL_Delay>
  send_debug_logs ( "GREEN LED OFF\n" ) ;
 80007a2:	4ba3      	ldr	r3, [pc, #652]	; (8000a30 <main+0x3f0>)
 80007a4:	0018      	movs	r0, r3
 80007a6:	f000 fd25 	bl	80011f4 <send_debug_logs>
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80007aa:	4b8e      	ldr	r3, [pc, #568]	; (80009e4 <main+0x3a4>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	2101      	movs	r1, #1
 80007b0:	0018      	movs	r0, r3
 80007b2:	f001 ff8e 	bl	80026d2 <HAL_GPIO_WritePin>
  HAL_Delay(200);
 80007b6:	20c8      	movs	r0, #200	; 0xc8
 80007b8:	f001 fb34 	bl	8001e24 <HAL_Delay>
  send_debug_logs ( "BLUE LED ON\n" ) ;
 80007bc:	4b9d      	ldr	r3, [pc, #628]	; (8000a34 <main+0x3f4>)
 80007be:	0018      	movs	r0, r3
 80007c0:	f000 fd18 	bl	80011f4 <send_debug_logs>
  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_SET);
 80007c4:	4b87      	ldr	r3, [pc, #540]	; (80009e4 <main+0x3a4>)
 80007c6:	2201      	movs	r2, #1
 80007c8:	2102      	movs	r1, #2
 80007ca:	0018      	movs	r0, r3
 80007cc:	f001 ff81 	bl	80026d2 <HAL_GPIO_WritePin>
  HAL_Delay(2000);
 80007d0:	23fa      	movs	r3, #250	; 0xfa
 80007d2:	00db      	lsls	r3, r3, #3
 80007d4:	0018      	movs	r0, r3
 80007d6:	f001 fb25 	bl	8001e24 <HAL_Delay>
  send_debug_logs ( "BLUE LED OFF\n" ) ;
 80007da:	4b97      	ldr	r3, [pc, #604]	; (8000a38 <main+0x3f8>)
 80007dc:	0018      	movs	r0, r3
 80007de:	f000 fd09 	bl	80011f4 <send_debug_logs>
  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 80007e2:	4b80      	ldr	r3, [pc, #512]	; (80009e4 <main+0x3a4>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	2102      	movs	r1, #2
 80007e8:	0018      	movs	r0, r3
 80007ea:	f001 ff72 	bl	80026d2 <HAL_GPIO_WritePin>

  // ACC TEST



  send_debug_logs ( "** Ambient Light Sensor test - 10 seconds\n" ) ;
 80007ee:	4b93      	ldr	r3, [pc, #588]	; (8000a3c <main+0x3fc>)
 80007f0:	0018      	movs	r0, r3
 80007f2:	f000 fcff 	bl	80011f4 <send_debug_logs>
  send_debug_logs ( "Cover light sensor -> green light should be ON.\n" ) ;
 80007f6:	4b92      	ldr	r3, [pc, #584]	; (8000a40 <main+0x400>)
 80007f8:	0018      	movs	r0, r3
 80007fa:	f000 fcfb 	bl	80011f4 <send_debug_logs>
  send_debug_logs ( "Uncover light sensor -> green light should be OFF.\n" ) ;
 80007fe:	4b91      	ldr	r3, [pc, #580]	; (8000a44 <main+0x404>)
 8000800:	0018      	movs	r0, r3
 8000802:	f000 fcf7 	bl	80011f4 <send_debug_logs>
  tim_seconds = 0 ;
 8000806:	4b90      	ldr	r3, [pc, #576]	; (8000a48 <main+0x408>)
 8000808:	2200      	movs	r2, #0
 800080a:	801a      	strh	r2, [r3, #0]
  my_tim_start () ;
 800080c:	f000 fe2a 	bl	8001464 <my_tim_start>
  while ( tim_seconds < 10 )
 8000810:	e016      	b.n	8000840 <main+0x200>
      {

  	  if(HAL_GPIO_ReadPin(ALS_SENS_GPIO_Port, ALS_SENS_Pin))
 8000812:	2380      	movs	r3, #128	; 0x80
 8000814:	005a      	lsls	r2, r3, #1
 8000816:	23a0      	movs	r3, #160	; 0xa0
 8000818:	05db      	lsls	r3, r3, #23
 800081a:	0011      	movs	r1, r2
 800081c:	0018      	movs	r0, r3
 800081e:	f001 ff3b 	bl	8002698 <HAL_GPIO_ReadPin>
 8000822:	1e03      	subs	r3, r0, #0
 8000824:	d006      	beq.n	8000834 <main+0x1f4>
  		  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000826:	4b6f      	ldr	r3, [pc, #444]	; (80009e4 <main+0x3a4>)
 8000828:	2200      	movs	r2, #0
 800082a:	2101      	movs	r1, #1
 800082c:	0018      	movs	r0, r3
 800082e:	f001 ff50 	bl	80026d2 <HAL_GPIO_WritePin>
 8000832:	e005      	b.n	8000840 <main+0x200>
  	  else
  		  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 8000834:	4b6b      	ldr	r3, [pc, #428]	; (80009e4 <main+0x3a4>)
 8000836:	2201      	movs	r2, #1
 8000838:	2101      	movs	r1, #1
 800083a:	0018      	movs	r0, r3
 800083c:	f001 ff49 	bl	80026d2 <HAL_GPIO_WritePin>
  while ( tim_seconds < 10 )
 8000840:	4b81      	ldr	r3, [pc, #516]	; (8000a48 <main+0x408>)
 8000842:	881b      	ldrh	r3, [r3, #0]
 8000844:	2b09      	cmp	r3, #9
 8000846:	d9e4      	bls.n	8000812 <main+0x1d2>
      }
    my_tim_stop () ;
 8000848:	f000 fe1c 	bl	8001484 <my_tim_stop>


    HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 800084c:	4b65      	ldr	r3, [pc, #404]	; (80009e4 <main+0x3a4>)
 800084e:	2200      	movs	r2, #0
 8000850:	2101      	movs	r1, #1
 8000852:	0018      	movs	r0, r3
 8000854:	f001 ff3d 	bl	80026d2 <HAL_GPIO_WritePin>
    send_debug_logs ( "** Accelerometer test - 10 seconds\n" ) ;
 8000858:	4b7c      	ldr	r3, [pc, #496]	; (8000a4c <main+0x40c>)
 800085a:	0018      	movs	r0, r3
 800085c:	f000 fcca 	bl	80011f4 <send_debug_logs>
    send_debug_logs ( "** Only checks if ID of ACC is correct\n" ) ;
 8000860:	4b7b      	ldr	r3, [pc, #492]	; (8000a50 <main+0x410>)
 8000862:	0018      	movs	r0, r3
 8000864:	f000 fcc6 	bl	80011f4 <send_debug_logs>

    tim_seconds = 0 ;
 8000868:	4b77      	ldr	r3, [pc, #476]	; (8000a48 <main+0x408>)
 800086a:	2200      	movs	r2, #0
 800086c:	801a      	strh	r2, [r3, #0]
    my_tim_start () ;
 800086e:	f000 fdf9 	bl	8001464 <my_tim_start>

  while ( tim_seconds < 10 )
 8000872:	e01b      	b.n	80008ac <main+0x26c>
  {
	  send_debug_logs ( "* IIS2DHTR test started - 10 seconds" ) ;
 8000874:	4b77      	ldr	r3, [pc, #476]	; (8000a54 <main+0x414>)
 8000876:	0018      	movs	r0, r3
 8000878:	f000 fcbc 	bl	80011f4 <send_debug_logs>
	  my_acc_ctx.write_reg = my_lis2dw12_platform_write ;
 800087c:	4b76      	ldr	r3, [pc, #472]	; (8000a58 <main+0x418>)
 800087e:	4a77      	ldr	r2, [pc, #476]	; (8000a5c <main+0x41c>)
 8000880:	601a      	str	r2, [r3, #0]
	  my_acc_ctx.read_reg = my_lis2dw12_platform_read ;
 8000882:	4b75      	ldr	r3, [pc, #468]	; (8000a58 <main+0x418>)
 8000884:	4a76      	ldr	r2, [pc, #472]	; (8000a60 <main+0x420>)
 8000886:	605a      	str	r2, [r3, #4]
	  my_acc_ctx.handle = HACC ;
 8000888:	4b73      	ldr	r3, [pc, #460]	; (8000a58 <main+0x418>)
 800088a:	4a76      	ldr	r2, [pc, #472]	; (8000a64 <main+0x424>)
 800088c:	60da      	str	r2, [r3, #12]
	  if ( my_lis2dw12_init ( &my_acc_ctx ) )
 800088e:	4b72      	ldr	r3, [pc, #456]	; (8000a58 <main+0x418>)
 8000890:	0018      	movs	r0, r3
 8000892:	f007 fbbe 	bl	8008012 <my_lis2dw12_init>
 8000896:	1e03      	subs	r3, r0, #0
 8000898:	d004      	beq.n	80008a4 <main+0x264>
	  {
		  send_debug_logs ( "**ID is correct." ) ;
 800089a:	4b73      	ldr	r3, [pc, #460]	; (8000a68 <main+0x428>)
 800089c:	0018      	movs	r0, r3
 800089e:	f000 fca9 	bl	80011f4 <send_debug_logs>
		  break;
 80008a2:	e007      	b.n	80008b4 <main+0x274>
	  }
	  else
	  {
		  send_debug_logs ( "** ID is not received or wrong" ) ;
 80008a4:	4b71      	ldr	r3, [pc, #452]	; (8000a6c <main+0x42c>)
 80008a6:	0018      	movs	r0, r3
 80008a8:	f000 fca4 	bl	80011f4 <send_debug_logs>
  while ( tim_seconds < 10 )
 80008ac:	4b66      	ldr	r3, [pc, #408]	; (8000a48 <main+0x408>)
 80008ae:	881b      	ldrh	r3, [r3, #0]
 80008b0:	2b09      	cmp	r3, #9
 80008b2:	d9df      	bls.n	8000874 <main+0x234>
	 //	  if ( test )
	 //		  break ;
	 //	  else
	 //		  send_debug_logs ( "* Something went wrong! MCU did not received INT1." ) ;
  }
  my_tim_stop () ;
 80008b4:	f000 fde6 	bl	8001484 <my_tim_stop>


  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80008b8:	4b4a      	ldr	r3, [pc, #296]	; (80009e4 <main+0x3a4>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	2101      	movs	r1, #1
 80008be:	0018      	movs	r0, r3
 80008c0:	f001 ff07 	bl	80026d2 <HAL_GPIO_WritePin>

  // GNSS TEST

  uint8_t 	rxd_byte = 0 ;
 80008c4:	24ff      	movs	r4, #255	; 0xff
 80008c6:	193b      	adds	r3, r7, r4
 80008c8:	2200      	movs	r2, #0
 80008ca:	701a      	strb	r2, [r3, #0]
  uint8_t 	i_nmea = 0 ;
 80008cc:	1dfb      	adds	r3, r7, #7
 80008ce:	33ff      	adds	r3, #255	; 0xff
 80008d0:	2200      	movs	r2, #0
 80008d2:	701a      	strb	r2, [r3, #0]
  uint8_t 	gsv_tns = 0 ;
 80008d4:	1dbb      	adds	r3, r7, #6
 80008d6:	33ff      	adds	r3, #255	; 0xff
 80008d8:	2200      	movs	r2, #0
 80008da:	701a      	strb	r2, [r3, #0]
  uint8_t 	nmea_message[MY_NMEA_MESSAGE_MAX_SIZE] = {0} ;
 80008dc:	4b64      	ldr	r3, [pc, #400]	; (8000a70 <main+0x430>)
 80008de:	2284      	movs	r2, #132	; 0x84
 80008e0:	0052      	lsls	r2, r2, #1
 80008e2:	189b      	adds	r3, r3, r2
 80008e4:	19db      	adds	r3, r3, r7
 80008e6:	2200      	movs	r2, #0
 80008e8:	601a      	str	r2, [r3, #0]
 80008ea:	3304      	adds	r3, #4
 80008ec:	22f6      	movs	r2, #246	; 0xf6
 80008ee:	2100      	movs	r1, #0
 80008f0:	0018      	movs	r0, r3
 80008f2:	f007 fcc1 	bl	8008278 <memset>
  char*		nmea_gsv_label = "GSV" ;
 80008f6:	4b5f      	ldr	r3, [pc, #380]	; (8000a74 <main+0x434>)
 80008f8:	1c7a      	adds	r2, r7, #1
 80008fa:	32ff      	adds	r2, #255	; 0xff
 80008fc:	6013      	str	r3, [r2, #0]


  my_gnss_on () ;
 80008fe:	f000 fd4b 	bl	8001398 <my_gnss_on>
  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_SET);
 8000902:	4b38      	ldr	r3, [pc, #224]	; (80009e4 <main+0x3a4>)
 8000904:	2201      	movs	r2, #1
 8000906:	2102      	movs	r1, #2
 8000908:	0018      	movs	r0, r3
 800090a:	f001 fee2 	bl	80026d2 <HAL_GPIO_WritePin>
  send_debug_logs ( "* Changing RF path to GNSS - CTL1 H, CTL2 L\n" ) ;
 800090e:	4b5a      	ldr	r3, [pc, #360]	; (8000a78 <main+0x438>)
 8000910:	0018      	movs	r0, r3
 8000912:	f000 fc6f 	bl	80011f4 <send_debug_logs>
  HAL_GPIO_WritePin(RF_SW_CTL1_GPIO_Port, RF_SW_CTL1_Pin, GPIO_PIN_SET);
 8000916:	2380      	movs	r3, #128	; 0x80
 8000918:	00db      	lsls	r3, r3, #3
 800091a:	483d      	ldr	r0, [pc, #244]	; (8000a10 <main+0x3d0>)
 800091c:	2201      	movs	r2, #1
 800091e:	0019      	movs	r1, r3
 8000920:	f001 fed7 	bl	80026d2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTL2_GPIO_Port, RF_SW_CTL2_Pin, GPIO_PIN_RESET);
 8000924:	2380      	movs	r3, #128	; 0x80
 8000926:	011b      	lsls	r3, r3, #4
 8000928:	4839      	ldr	r0, [pc, #228]	; (8000a10 <main+0x3d0>)
 800092a:	2200      	movs	r2, #0
 800092c:	0019      	movs	r1, r3
 800092e:	f001 fed0 	bl	80026d2 <HAL_GPIO_WritePin>

  send_debug_logs ( "* LC76G test started. Try to complete it within 10 minutes." ) ;
 8000932:	4b52      	ldr	r3, [pc, #328]	; (8000a7c <main+0x43c>)
 8000934:	0018      	movs	r0, r3
 8000936:	f000 fc5d 	bl	80011f4 <send_debug_logs>
  send_debug_logs ( "* GREEN LED indicate succesful 3D position fix.\n" ) ;
 800093a:	4b51      	ldr	r3, [pc, #324]	; (8000a80 <main+0x440>)
 800093c:	0018      	movs	r0, r3
 800093e:	f000 fc59 	bl	80011f4 <send_debug_logs>
  HAL_UART_Receive_IT(HUART_GNSS, &rxd_byte, 1);
 8000942:	1939      	adds	r1, r7, r4
 8000944:	4b2b      	ldr	r3, [pc, #172]	; (80009f4 <main+0x3b4>)
 8000946:	2201      	movs	r2, #1
 8000948:	0018      	movs	r0, r3
 800094a:	f004 fc69 	bl	8005220 <HAL_UART_Receive_IT>

  HAL_Delay(2000);
 800094e:	23fa      	movs	r3, #250	; 0xfa
 8000950:	00db      	lsls	r3, r3, #3
 8000952:	0018      	movs	r0, r3
 8000954:	f001 fa66 	bl	8001e24 <HAL_Delay>
  send_gnss_msg("$PAIR902,0,1*30\r\n");
 8000958:	4b4a      	ldr	r3, [pc, #296]	; (8000a84 <main+0x444>)
 800095a:	0018      	movs	r0, r3
 800095c:	f000 fc7a 	bl	8001254 <send_gnss_msg>
  send_gnss_msg("$PAIR391,1*2C\r\n");
 8000960:	4b49      	ldr	r3, [pc, #292]	; (8000a88 <main+0x448>)
 8000962:	0018      	movs	r0, r3
 8000964:	f000 fc76 	bl	8001254 <send_gnss_msg>
  tim_seconds = 0 ;
 8000968:	4b37      	ldr	r3, [pc, #220]	; (8000a48 <main+0x408>)
 800096a:	2200      	movs	r2, #0
 800096c:	801a      	strh	r2, [r3, #0]
  my_tim_start () ;
 800096e:	f000 fd79 	bl	8001464 <my_tim_start>
  while ( tim_seconds < TIM_SECONDS_THS_SYSTEM_RESET  )
 8000972:	e0a8      	b.n	8000ac6 <main+0x486>
//	  HAL_UART_Receive ( HUART_GNSS , &rxd_byte , 2 , UART_TIMEOUT ) ;
//	  HAL_UART_Transmit ( HUART_DBG , &rxd_byte , 2 , UART_TIMEOUT ) ;
//	  send_debug_logs ( "* dumb" ) ;
	 while(!(fifo_is_empty(&uart_fifo))) {
	              // Transmit the data from UART5 to UART2
		  	  	  if(!(fifo_get(&uart_fifo, &rxd_byte)))
 8000974:	24ff      	movs	r4, #255	; 0xff
 8000976:	193a      	adds	r2, r7, r4
 8000978:	4b22      	ldr	r3, [pc, #136]	; (8000a04 <main+0x3c4>)
 800097a:	0011      	movs	r1, r2
 800097c:	0018      	movs	r0, r3
 800097e:	f000 fe8e 	bl	800169e <fifo_get>
 8000982:	1e03      	subs	r3, r0, #0
 8000984:	d106      	bne.n	8000994 <main+0x354>
				  HAL_UART_Transmit(HUART_DBG, &rxd_byte, 1, UART_TIMEOUT);
 8000986:	23fa      	movs	r3, #250	; 0xfa
 8000988:	009b      	lsls	r3, r3, #2
 800098a:	1939      	adds	r1, r7, r4
 800098c:	481c      	ldr	r0, [pc, #112]	; (8000a00 <main+0x3c0>)
 800098e:	2201      	movs	r2, #1
 8000990:	f004 fabc 	bl	8004f0c <HAL_UART_Transmit>
	 while(!(fifo_is_empty(&uart_fifo))) {
 8000994:	4b1b      	ldr	r3, [pc, #108]	; (8000a04 <main+0x3c4>)
 8000996:	0018      	movs	r0, r3
 8000998:	f000 fe28 	bl	80015ec <fifo_is_empty>
 800099c:	0003      	movs	r3, r0
 800099e:	001a      	movs	r2, r3
 80009a0:	2301      	movs	r3, #1
 80009a2:	4053      	eors	r3, r2
 80009a4:	b2db      	uxtb	r3, r3
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d1e4      	bne.n	8000974 <main+0x334>
//	              HAL_UART_Transmit(HUART_DBG, uart5_rx_buffer, uart5_rx_index, UART_TIMEOUT);
//	              uart5_rx_index = 0; // Reset the index after transmission

	          }
	 if(HAL_GPIO_ReadPin(GNSS_3DFIX_GPIO_Port, GNSS_3DFIX_Pin))
 80009aa:	4b19      	ldr	r3, [pc, #100]	; (8000a10 <main+0x3d0>)
 80009ac:	2120      	movs	r1, #32
 80009ae:	0018      	movs	r0, r3
 80009b0:	f001 fe72 	bl	8002698 <HAL_GPIO_ReadPin>
 80009b4:	1e03      	subs	r3, r0, #0
 80009b6:	d004      	beq.n	80009c2 <main+0x382>
		 send_debug_logs ( "\n3D FIX pin HIGH\n" );
 80009b8:	4b34      	ldr	r3, [pc, #208]	; (8000a8c <main+0x44c>)
 80009ba:	0018      	movs	r0, r3
 80009bc:	f000 fc1a 	bl	80011f4 <send_debug_logs>
 80009c0:	e003      	b.n	80009ca <main+0x38a>
	 else
		 send_debug_logs ( "\n3D FIX pin LOW\n" );
 80009c2:	4b33      	ldr	r3, [pc, #204]	; (8000a90 <main+0x450>)
 80009c4:	0018      	movs	r0, r3
 80009c6:	f000 fc15 	bl	80011f4 <send_debug_logs>

	 if(HAL_GPIO_ReadPin(GNSS_JAM_GPIO_Port, GNSS_JAM_Pin))
 80009ca:	4b11      	ldr	r3, [pc, #68]	; (8000a10 <main+0x3d0>)
 80009cc:	2140      	movs	r1, #64	; 0x40
 80009ce:	0018      	movs	r0, r3
 80009d0:	f001 fe62 	bl	8002698 <HAL_GPIO_ReadPin>
 80009d4:	1e03      	subs	r3, r0, #0
 80009d6:	d05d      	beq.n	8000a94 <main+0x454>
	 		 send_debug_logs ( "JAM pin HIGH\n" );
 80009d8:	4b10      	ldr	r3, [pc, #64]	; (8000a1c <main+0x3dc>)
 80009da:	0018      	movs	r0, r3
 80009dc:	f000 fc0a 	bl	80011f4 <send_debug_logs>
 80009e0:	e05c      	b.n	8000a9c <main+0x45c>
 80009e2:	46c0      	nop			; (mov r8, r8)
 80009e4:	50000c00 	.word	0x50000c00
 80009e8:	08008a78 	.word	0x08008a78
 80009ec:	08008a88 	.word	0x08008a88
 80009f0:	08008aa8 	.word	0x08008aa8
 80009f4:	20000280 	.word	0x20000280
 80009f8:	08008abc 	.word	0x08008abc
 80009fc:	20000000 	.word	0x20000000
 8000a00:	20000158 	.word	0x20000158
 8000a04:	20001424 	.word	0x20001424
 8000a08:	20000424 	.word	0x20000424
 8000a0c:	08008acc 	.word	0x08008acc
 8000a10:	50000400 	.word	0x50000400
 8000a14:	08008b18 	.word	0x08008b18
 8000a18:	08008b2c 	.word	0x08008b2c
 8000a1c:	08008b3c 	.word	0x08008b3c
 8000a20:	08008b4c 	.word	0x08008b4c
 8000a24:	08008b5c 	.word	0x08008b5c
 8000a28:	08008b70 	.word	0x08008b70
 8000a2c:	08008b84 	.word	0x08008b84
 8000a30:	08008b94 	.word	0x08008b94
 8000a34:	08008ba4 	.word	0x08008ba4
 8000a38:	08008bb4 	.word	0x08008bb4
 8000a3c:	08008bc4 	.word	0x08008bc4
 8000a40:	08008bf0 	.word	0x08008bf0
 8000a44:	08008c24 	.word	0x08008c24
 8000a48:	20000420 	.word	0x20000420
 8000a4c:	08008c58 	.word	0x08008c58
 8000a50:	08008c7c 	.word	0x08008c7c
 8000a54:	08008ca4 	.word	0x08008ca4
 8000a58:	20000410 	.word	0x20000410
 8000a5c:	080012b5 	.word	0x080012b5
 8000a60:	0800131f 	.word	0x0800131f
 8000a64:	200000a8 	.word	0x200000a8
 8000a68:	08008ccc 	.word	0x08008ccc
 8000a6c:	08008ce0 	.word	0x08008ce0
 8000a70:	fffffefc 	.word	0xfffffefc
 8000a74:	08008d00 	.word	0x08008d00
 8000a78:	08008d04 	.word	0x08008d04
 8000a7c:	08008d34 	.word	0x08008d34
 8000a80:	08008d70 	.word	0x08008d70
 8000a84:	08008da4 	.word	0x08008da4
 8000a88:	08008db8 	.word	0x08008db8
 8000a8c:	08008dc8 	.word	0x08008dc8
 8000a90:	08008ddc 	.word	0x08008ddc
	 	 else
	 		 send_debug_logs ( "JAM pin LOW\n" );
 8000a94:	4b4e      	ldr	r3, [pc, #312]	; (8000bd0 <main+0x590>)
 8000a96:	0018      	movs	r0, r3
 8000a98:	f000 fbac 	bl	80011f4 <send_debug_logs>

	 if(HAL_GPIO_ReadPin(GNSS_GEOF_GPIO_Port, GNSS_GEOF_Pin))
 8000a9c:	4b4d      	ldr	r3, [pc, #308]	; (8000bd4 <main+0x594>)
 8000a9e:	2180      	movs	r1, #128	; 0x80
 8000aa0:	0018      	movs	r0, r3
 8000aa2:	f001 fdf9 	bl	8002698 <HAL_GPIO_ReadPin>
 8000aa6:	1e03      	subs	r3, r0, #0
 8000aa8:	d004      	beq.n	8000ab4 <main+0x474>
	 		 send_debug_logs ( "GEOFFENCE pin HIGH\n" );
 8000aaa:	4b4b      	ldr	r3, [pc, #300]	; (8000bd8 <main+0x598>)
 8000aac:	0018      	movs	r0, r3
 8000aae:	f000 fba1 	bl	80011f4 <send_debug_logs>
 8000ab2:	e003      	b.n	8000abc <main+0x47c>
	 	 else
	 		 send_debug_logs ( "GEOFFENCE pin LOW\n" );
 8000ab4:	4b49      	ldr	r3, [pc, #292]	; (8000bdc <main+0x59c>)
 8000ab6:	0018      	movs	r0, r3
 8000ab8:	f000 fb9c 	bl	80011f4 <send_debug_logs>
	 HAL_Delay(1000);
 8000abc:	23fa      	movs	r3, #250	; 0xfa
 8000abe:	009b      	lsls	r3, r3, #2
 8000ac0:	0018      	movs	r0, r3
 8000ac2:	f001 f9af 	bl	8001e24 <HAL_Delay>
  while ( tim_seconds < TIM_SECONDS_THS_SYSTEM_RESET  )
 8000ac6:	4b46      	ldr	r3, [pc, #280]	; (8000be0 <main+0x5a0>)
 8000ac8:	881a      	ldrh	r2, [r3, #0]
 8000aca:	2396      	movs	r3, #150	; 0x96
 8000acc:	009b      	lsls	r3, r3, #2
 8000ace:	429a      	cmp	r2, r3
 8000ad0:	d200      	bcs.n	8000ad4 <main+0x494>
 8000ad2:	e75f      	b.n	8000994 <main+0x354>
//					  break ;
//			  }
//		  }
//	  }
  }
  my_gnss_off ();
 8000ad4:	f000 fc78 	bl	80013c8 <my_gnss_off>
  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 8000ad8:	4b42      	ldr	r3, [pc, #264]	; (8000be4 <main+0x5a4>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	2102      	movs	r1, #2
 8000ade:	0018      	movs	r0, r3
 8000ae0:	f001 fdf7 	bl	80026d2 <HAL_GPIO_WritePin>
  my_tim_stop ();
 8000ae4:	f000 fcce 	bl	8001484 <my_tim_stop>

  send_debug_logs ( "* Changing RF path to Astronode - CTL2 H, CTL1 L\n" );
 8000ae8:	4b3f      	ldr	r3, [pc, #252]	; (8000be8 <main+0x5a8>)
 8000aea:	0018      	movs	r0, r3
 8000aec:	f000 fb82 	bl	80011f4 <send_debug_logs>
  HAL_GPIO_WritePin(RF_SW_CTL2_GPIO_Port, RF_SW_CTL2_Pin, GPIO_PIN_SET);
 8000af0:	2380      	movs	r3, #128	; 0x80
 8000af2:	011b      	lsls	r3, r3, #4
 8000af4:	4837      	ldr	r0, [pc, #220]	; (8000bd4 <main+0x594>)
 8000af6:	2201      	movs	r2, #1
 8000af8:	0019      	movs	r1, r3
 8000afa:	f001 fdea 	bl	80026d2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTL1_GPIO_Port, RF_SW_CTL1_Pin, GPIO_PIN_RESET);
 8000afe:	2380      	movs	r3, #128	; 0x80
 8000b00:	00db      	lsls	r3, r3, #3
 8000b02:	4834      	ldr	r0, [pc, #208]	; (8000bd4 <main+0x594>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	0019      	movs	r1, r3
 8000b08:	f001 fde3 	bl	80026d2 <HAL_GPIO_WritePin>

  if ( gsv_tns )
 8000b0c:	1dbb      	adds	r3, r7, #6
 8000b0e:	33ff      	adds	r3, #255	; 0xff
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d00f      	beq.n	8000b36 <main+0x4f6>
  {
	  sprintf ( uart_buff , "* Good! LC76G test has been accomplished. No of SV: %d" , gsv_tns ) ;
 8000b16:	1dbb      	adds	r3, r7, #6
 8000b18:	33ff      	adds	r3, #255	; 0xff
 8000b1a:	781a      	ldrb	r2, [r3, #0]
 8000b1c:	4933      	ldr	r1, [pc, #204]	; (8000bec <main+0x5ac>)
 8000b1e:	4b34      	ldr	r3, [pc, #208]	; (8000bf0 <main+0x5b0>)
 8000b20:	0018      	movs	r0, r3
 8000b22:	f007 fb89 	bl	8008238 <siprintf>
	  send_debug_logs ( uart_buff ) ;
 8000b26:	4b32      	ldr	r3, [pc, #200]	; (8000bf0 <main+0x5b0>)
 8000b28:	0018      	movs	r0, r3
 8000b2a:	f000 fb63 	bl	80011f4 <send_debug_logs>
	  uart_buff[0] = 0 ;
 8000b2e:	4b30      	ldr	r3, [pc, #192]	; (8000bf0 <main+0x5b0>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	701a      	strb	r2, [r3, #0]
 8000b34:	e003      	b.n	8000b3e <main+0x4fe>
  }
  else
  {
	  send_debug_logs ( "\n* Something went wrong! LC76G did not find any SV." ) ;
 8000b36:	4b2f      	ldr	r3, [pc, #188]	; (8000bf4 <main+0x5b4>)
 8000b38:	0018      	movs	r0, r3
 8000b3a:	f000 fb5b 	bl	80011f4 <send_debug_logs>
  }

  // ASTRO TEST
  bool cfg_wr = false ;
 8000b3e:	2308      	movs	r3, #8
 8000b40:	33ff      	adds	r3, #255	; 0xff
 8000b42:	18fb      	adds	r3, r7, r3
 8000b44:	2200      	movs	r2, #0
 8000b46:	701a      	strb	r2, [r3, #0]
  tim_seconds = 0 ;
 8000b48:	4b25      	ldr	r3, [pc, #148]	; (8000be0 <main+0x5a0>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	801a      	strh	r2, [r3, #0]
  my_tim_start() ;
 8000b4e:	f000 fc89 	bl	8001464 <my_tim_start>
  while ( tim_seconds < 30 && !cfg_wr )
 8000b52:	e017      	b.n	8000b84 <main+0x544>
  {
	  reset_astronode () ;
 8000b54:	f000 fca2 	bl	800149c <reset_astronode>
	  HAL_Delay ( 100 ) ;
 8000b58:	2064      	movs	r0, #100	; 0x64
 8000b5a:	f001 f963 	bl	8001e24 <HAL_Delay>
	  cfg_wr = astronode_send_cfg_wr ( true , true , true , false , true , true , true , false  ) ;
 8000b5e:	2308      	movs	r3, #8
 8000b60:	33ff      	adds	r3, #255	; 0xff
 8000b62:	18fc      	adds	r4, r7, r3
 8000b64:	2300      	movs	r3, #0
 8000b66:	9303      	str	r3, [sp, #12]
 8000b68:	2301      	movs	r3, #1
 8000b6a:	9302      	str	r3, [sp, #8]
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	9301      	str	r3, [sp, #4]
 8000b70:	2301      	movs	r3, #1
 8000b72:	9300      	str	r3, [sp, #0]
 8000b74:	2300      	movs	r3, #0
 8000b76:	2201      	movs	r2, #1
 8000b78:	2101      	movs	r1, #1
 8000b7a:	2001      	movs	r0, #1
 8000b7c:	f006 fc48 	bl	8007410 <astronode_send_cfg_wr>
 8000b80:	0003      	movs	r3, r0
 8000b82:	7023      	strb	r3, [r4, #0]
  while ( tim_seconds < 30 && !cfg_wr )
 8000b84:	4b16      	ldr	r3, [pc, #88]	; (8000be0 <main+0x5a0>)
 8000b86:	881b      	ldrh	r3, [r3, #0]
 8000b88:	2b1d      	cmp	r3, #29
 8000b8a:	d808      	bhi.n	8000b9e <main+0x55e>
 8000b8c:	2308      	movs	r3, #8
 8000b8e:	33ff      	adds	r3, #255	; 0xff
 8000b90:	18fb      	adds	r3, r7, r3
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	2201      	movs	r2, #1
 8000b96:	4053      	eors	r3, r2
 8000b98:	b2db      	uxtb	r3, r3
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d1da      	bne.n	8000b54 <main+0x514>
  }
  my_tim_stop() ;
 8000b9e:	f000 fc71 	bl	8001484 <my_tim_stop>
  if ( cfg_wr )
 8000ba2:	2308      	movs	r3, #8
 8000ba4:	33ff      	adds	r3, #255	; 0xff
 8000ba6:	18fb      	adds	r3, r7, r3
 8000ba8:	781b      	ldrb	r3, [r3, #0]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d006      	beq.n	8000bbc <main+0x57c>
  {
	  astronode_send_mpn_rr () ;
 8000bae:	f006 fcdb 	bl	8007568 <astronode_send_mpn_rr>
	  send_debug_logs ( "* Good! Astronode test has been accomplished." ) ;
 8000bb2:	4b11      	ldr	r3, [pc, #68]	; (8000bf8 <main+0x5b8>)
 8000bb4:	0018      	movs	r0, r3
 8000bb6:	f000 fb1d 	bl	80011f4 <send_debug_logs>
 8000bba:	e003      	b.n	8000bc4 <main+0x584>
  }
  else
  {
	  send_debug_logs ( "\n* Something went wrong! Astronode did not work fine." ) ;
 8000bbc:	4b0f      	ldr	r3, [pc, #60]	; (8000bfc <main+0x5bc>)
 8000bbe:	0018      	movs	r0, r3
 8000bc0:	f000 fb18 	bl	80011f4 <send_debug_logs>
  }
  send_debug_logs ( "\nThis is the end of the test." ) ;
 8000bc4:	4b0e      	ldr	r3, [pc, #56]	; (8000c00 <main+0x5c0>)
 8000bc6:	0018      	movs	r0, r3
 8000bc8:	f000 fb14 	bl	80011f4 <send_debug_logs>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000bcc:	e7fe      	b.n	8000bcc <main+0x58c>
 8000bce:	46c0      	nop			; (mov r8, r8)
 8000bd0:	08008b4c 	.word	0x08008b4c
 8000bd4:	50000400 	.word	0x50000400
 8000bd8:	08008b5c 	.word	0x08008b5c
 8000bdc:	08008b70 	.word	0x08008b70
 8000be0:	20000420 	.word	0x20000420
 8000be4:	50000c00 	.word	0x50000c00
 8000be8:	08008df0 	.word	0x08008df0
 8000bec:	08008e24 	.word	0x08008e24
 8000bf0:	20000314 	.word	0x20000314
 8000bf4:	08008e5c 	.word	0x08008e5c
 8000bf8:	08008e90 	.word	0x08008e90
 8000bfc:	08008ec0 	.word	0x08008ec0
 8000c00:	08008ef8 	.word	0x08008ef8

08000c04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c04:	b590      	push	{r4, r7, lr}
 8000c06:	b095      	sub	sp, #84	; 0x54
 8000c08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c0a:	2414      	movs	r4, #20
 8000c0c:	193b      	adds	r3, r7, r4
 8000c0e:	0018      	movs	r0, r3
 8000c10:	233c      	movs	r3, #60	; 0x3c
 8000c12:	001a      	movs	r2, r3
 8000c14:	2100      	movs	r1, #0
 8000c16:	f007 fb2f 	bl	8008278 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c1a:	1d3b      	adds	r3, r7, #4
 8000c1c:	0018      	movs	r0, r3
 8000c1e:	2310      	movs	r3, #16
 8000c20:	001a      	movs	r2, r3
 8000c22:	2100      	movs	r1, #0
 8000c24:	f007 fb28 	bl	8008278 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c28:	2380      	movs	r3, #128	; 0x80
 8000c2a:	009b      	lsls	r3, r3, #2
 8000c2c:	0018      	movs	r0, r3
 8000c2e:	f001 fda1 	bl	8002774 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000c32:	193b      	adds	r3, r7, r4
 8000c34:	220a      	movs	r2, #10
 8000c36:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c38:	193b      	adds	r3, r7, r4
 8000c3a:	2280      	movs	r2, #128	; 0x80
 8000c3c:	0052      	lsls	r2, r2, #1
 8000c3e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000c40:	0021      	movs	r1, r4
 8000c42:	187b      	adds	r3, r7, r1
 8000c44:	2200      	movs	r2, #0
 8000c46:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c48:	187b      	adds	r3, r7, r1
 8000c4a:	2240      	movs	r2, #64	; 0x40
 8000c4c:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000c4e:	187b      	adds	r3, r7, r1
 8000c50:	2201      	movs	r2, #1
 8000c52:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c54:	187b      	adds	r3, r7, r1
 8000c56:	2200      	movs	r2, #0
 8000c58:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c5a:	187b      	adds	r3, r7, r1
 8000c5c:	0018      	movs	r0, r3
 8000c5e:	f001 fdd5 	bl	800280c <HAL_RCC_OscConfig>
 8000c62:	1e03      	subs	r3, r0, #0
 8000c64:	d001      	beq.n	8000c6a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000c66:	f000 fdb7 	bl	80017d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c6a:	1d3b      	adds	r3, r7, #4
 8000c6c:	2207      	movs	r2, #7
 8000c6e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c70:	1d3b      	adds	r3, r7, #4
 8000c72:	2200      	movs	r2, #0
 8000c74:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c76:	1d3b      	adds	r3, r7, #4
 8000c78:	2200      	movs	r2, #0
 8000c7a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c7c:	1d3b      	adds	r3, r7, #4
 8000c7e:	2200      	movs	r2, #0
 8000c80:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c82:	1d3b      	adds	r3, r7, #4
 8000c84:	2100      	movs	r1, #0
 8000c86:	0018      	movs	r0, r3
 8000c88:	f002 f920 	bl	8002ecc <HAL_RCC_ClockConfig>
 8000c8c:	1e03      	subs	r3, r0, #0
 8000c8e:	d001      	beq.n	8000c94 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000c90:	f000 fda2 	bl	80017d8 <Error_Handler>
  }
}
 8000c94:	46c0      	nop			; (mov r8, r8)
 8000c96:	46bd      	mov	sp, r7
 8000c98:	b015      	add	sp, #84	; 0x54
 8000c9a:	bd90      	pop	{r4, r7, pc}

08000c9c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000ca0:	4b13      	ldr	r3, [pc, #76]	; (8000cf0 <MX_RTC_Init+0x54>)
 8000ca2:	4a14      	ldr	r2, [pc, #80]	; (8000cf4 <MX_RTC_Init+0x58>)
 8000ca4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000ca6:	4b12      	ldr	r3, [pc, #72]	; (8000cf0 <MX_RTC_Init+0x54>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8000cac:	4b10      	ldr	r3, [pc, #64]	; (8000cf0 <MX_RTC_Init+0x54>)
 8000cae:	227f      	movs	r2, #127	; 0x7f
 8000cb0:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 8000cb2:	4b0f      	ldr	r3, [pc, #60]	; (8000cf0 <MX_RTC_Init+0x54>)
 8000cb4:	22ff      	movs	r2, #255	; 0xff
 8000cb6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000cb8:	4b0d      	ldr	r3, [pc, #52]	; (8000cf0 <MX_RTC_Init+0x54>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000cbe:	4b0c      	ldr	r3, [pc, #48]	; (8000cf0 <MX_RTC_Init+0x54>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000cc4:	4b0a      	ldr	r3, [pc, #40]	; (8000cf0 <MX_RTC_Init+0x54>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000cca:	4b09      	ldr	r3, [pc, #36]	; (8000cf0 <MX_RTC_Init+0x54>)
 8000ccc:	2280      	movs	r2, #128	; 0x80
 8000cce:	05d2      	lsls	r2, r2, #23
 8000cd0:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000cd2:	4b07      	ldr	r3, [pc, #28]	; (8000cf0 <MX_RTC_Init+0x54>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000cd8:	4b05      	ldr	r3, [pc, #20]	; (8000cf0 <MX_RTC_Init+0x54>)
 8000cda:	0018      	movs	r0, r3
 8000cdc:	f002 fcdc 	bl	8003698 <HAL_RTC_Init>
 8000ce0:	1e03      	subs	r3, r0, #0
 8000ce2:	d001      	beq.n	8000ce8 <MX_RTC_Init+0x4c>
  {
    Error_Handler();
 8000ce4:	f000 fd78 	bl	80017d8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000ce8:	46c0      	nop			; (mov r8, r8)
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	46c0      	nop			; (mov r8, r8)
 8000cf0:	2000007c 	.word	0x2000007c
 8000cf4:	40002800 	.word	0x40002800

08000cf8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000cfc:	4b1b      	ldr	r3, [pc, #108]	; (8000d6c <MX_SPI1_Init+0x74>)
 8000cfe:	4a1c      	ldr	r2, [pc, #112]	; (8000d70 <MX_SPI1_Init+0x78>)
 8000d00:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d02:	4b1a      	ldr	r3, [pc, #104]	; (8000d6c <MX_SPI1_Init+0x74>)
 8000d04:	2282      	movs	r2, #130	; 0x82
 8000d06:	0052      	lsls	r2, r2, #1
 8000d08:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d0a:	4b18      	ldr	r3, [pc, #96]	; (8000d6c <MX_SPI1_Init+0x74>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d10:	4b16      	ldr	r3, [pc, #88]	; (8000d6c <MX_SPI1_Init+0x74>)
 8000d12:	22e0      	movs	r2, #224	; 0xe0
 8000d14:	00d2      	lsls	r2, r2, #3
 8000d16:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d18:	4b14      	ldr	r3, [pc, #80]	; (8000d6c <MX_SPI1_Init+0x74>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d1e:	4b13      	ldr	r3, [pc, #76]	; (8000d6c <MX_SPI1_Init+0x74>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d24:	4b11      	ldr	r3, [pc, #68]	; (8000d6c <MX_SPI1_Init+0x74>)
 8000d26:	2280      	movs	r2, #128	; 0x80
 8000d28:	0092      	lsls	r2, r2, #2
 8000d2a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000d2c:	4b0f      	ldr	r3, [pc, #60]	; (8000d6c <MX_SPI1_Init+0x74>)
 8000d2e:	2210      	movs	r2, #16
 8000d30:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d32:	4b0e      	ldr	r3, [pc, #56]	; (8000d6c <MX_SPI1_Init+0x74>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d38:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <MX_SPI1_Init+0x74>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d3e:	4b0b      	ldr	r3, [pc, #44]	; (8000d6c <MX_SPI1_Init+0x74>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000d44:	4b09      	ldr	r3, [pc, #36]	; (8000d6c <MX_SPI1_Init+0x74>)
 8000d46:	2207      	movs	r2, #7
 8000d48:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000d4a:	4b08      	ldr	r3, [pc, #32]	; (8000d6c <MX_SPI1_Init+0x74>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d50:	4b06      	ldr	r3, [pc, #24]	; (8000d6c <MX_SPI1_Init+0x74>)
 8000d52:	2208      	movs	r2, #8
 8000d54:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d56:	4b05      	ldr	r3, [pc, #20]	; (8000d6c <MX_SPI1_Init+0x74>)
 8000d58:	0018      	movs	r0, r3
 8000d5a:	f002 fdeb 	bl	8003934 <HAL_SPI_Init>
 8000d5e:	1e03      	subs	r3, r0, #0
 8000d60:	d001      	beq.n	8000d66 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000d62:	f000 fd39 	bl	80017d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d66:	46c0      	nop			; (mov r8, r8)
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	200000a8 	.word	0x200000a8
 8000d70:	40013000 	.word	0x40013000

08000d74 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b084      	sub	sp, #16
 8000d78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d7a:	1d3b      	adds	r3, r7, #4
 8000d7c:	0018      	movs	r0, r3
 8000d7e:	230c      	movs	r3, #12
 8000d80:	001a      	movs	r2, r3
 8000d82:	2100      	movs	r1, #0
 8000d84:	f007 fa78 	bl	8008278 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000d88:	4b15      	ldr	r3, [pc, #84]	; (8000de0 <MX_TIM6_Init+0x6c>)
 8000d8a:	4a16      	ldr	r2, [pc, #88]	; (8000de4 <MX_TIM6_Init+0x70>)
 8000d8c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16000-1;
 8000d8e:	4b14      	ldr	r3, [pc, #80]	; (8000de0 <MX_TIM6_Init+0x6c>)
 8000d90:	4a15      	ldr	r2, [pc, #84]	; (8000de8 <MX_TIM6_Init+0x74>)
 8000d92:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d94:	4b12      	ldr	r3, [pc, #72]	; (8000de0 <MX_TIM6_Init+0x6c>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 8000d9a:	4b11      	ldr	r3, [pc, #68]	; (8000de0 <MX_TIM6_Init+0x6c>)
 8000d9c:	4a13      	ldr	r2, [pc, #76]	; (8000dec <MX_TIM6_Init+0x78>)
 8000d9e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000da0:	4b0f      	ldr	r3, [pc, #60]	; (8000de0 <MX_TIM6_Init+0x6c>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000da6:	4b0e      	ldr	r3, [pc, #56]	; (8000de0 <MX_TIM6_Init+0x6c>)
 8000da8:	0018      	movs	r0, r3
 8000daa:	f003 fce3 	bl	8004774 <HAL_TIM_Base_Init>
 8000dae:	1e03      	subs	r3, r0, #0
 8000db0:	d001      	beq.n	8000db6 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8000db2:	f000 fd11 	bl	80017d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000db6:	1d3b      	adds	r3, r7, #4
 8000db8:	2200      	movs	r2, #0
 8000dba:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dbc:	1d3b      	adds	r3, r7, #4
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000dc2:	1d3a      	adds	r2, r7, #4
 8000dc4:	4b06      	ldr	r3, [pc, #24]	; (8000de0 <MX_TIM6_Init+0x6c>)
 8000dc6:	0011      	movs	r1, r2
 8000dc8:	0018      	movs	r0, r3
 8000dca:	f003 ff7b 	bl	8004cc4 <HAL_TIMEx_MasterConfigSynchronization>
 8000dce:	1e03      	subs	r3, r0, #0
 8000dd0:	d001      	beq.n	8000dd6 <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8000dd2:	f000 fd01 	bl	80017d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000dd6:	46c0      	nop			; (mov r8, r8)
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	b004      	add	sp, #16
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	46c0      	nop			; (mov r8, r8)
 8000de0:	2000010c 	.word	0x2000010c
 8000de4:	40001000 	.word	0x40001000
 8000de8:	00003e7f 	.word	0x00003e7f
 8000dec:	000003e7 	.word	0x000003e7

08000df0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000df4:	4b23      	ldr	r3, [pc, #140]	; (8000e84 <MX_USART2_UART_Init+0x94>)
 8000df6:	4a24      	ldr	r2, [pc, #144]	; (8000e88 <MX_USART2_UART_Init+0x98>)
 8000df8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000dfa:	4b22      	ldr	r3, [pc, #136]	; (8000e84 <MX_USART2_UART_Init+0x94>)
 8000dfc:	22e1      	movs	r2, #225	; 0xe1
 8000dfe:	0252      	lsls	r2, r2, #9
 8000e00:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e02:	4b20      	ldr	r3, [pc, #128]	; (8000e84 <MX_USART2_UART_Init+0x94>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e08:	4b1e      	ldr	r3, [pc, #120]	; (8000e84 <MX_USART2_UART_Init+0x94>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e0e:	4b1d      	ldr	r3, [pc, #116]	; (8000e84 <MX_USART2_UART_Init+0x94>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e14:	4b1b      	ldr	r3, [pc, #108]	; (8000e84 <MX_USART2_UART_Init+0x94>)
 8000e16:	220c      	movs	r2, #12
 8000e18:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e1a:	4b1a      	ldr	r3, [pc, #104]	; (8000e84 <MX_USART2_UART_Init+0x94>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e20:	4b18      	ldr	r3, [pc, #96]	; (8000e84 <MX_USART2_UART_Init+0x94>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e26:	4b17      	ldr	r3, [pc, #92]	; (8000e84 <MX_USART2_UART_Init+0x94>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e2c:	4b15      	ldr	r3, [pc, #84]	; (8000e84 <MX_USART2_UART_Init+0x94>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e32:	4b14      	ldr	r3, [pc, #80]	; (8000e84 <MX_USART2_UART_Init+0x94>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e38:	4b12      	ldr	r3, [pc, #72]	; (8000e84 <MX_USART2_UART_Init+0x94>)
 8000e3a:	0018      	movs	r0, r3
 8000e3c:	f003 ffd0 	bl	8004de0 <HAL_UART_Init>
 8000e40:	1e03      	subs	r3, r0, #0
 8000e42:	d001      	beq.n	8000e48 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000e44:	f000 fcc8 	bl	80017d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e48:	4b0e      	ldr	r3, [pc, #56]	; (8000e84 <MX_USART2_UART_Init+0x94>)
 8000e4a:	2100      	movs	r1, #0
 8000e4c:	0018      	movs	r0, r3
 8000e4e:	f006 f9ff 	bl	8007250 <HAL_UARTEx_SetTxFifoThreshold>
 8000e52:	1e03      	subs	r3, r0, #0
 8000e54:	d001      	beq.n	8000e5a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000e56:	f000 fcbf 	bl	80017d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e5a:	4b0a      	ldr	r3, [pc, #40]	; (8000e84 <MX_USART2_UART_Init+0x94>)
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	0018      	movs	r0, r3
 8000e60:	f006 fa36 	bl	80072d0 <HAL_UARTEx_SetRxFifoThreshold>
 8000e64:	1e03      	subs	r3, r0, #0
 8000e66:	d001      	beq.n	8000e6c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000e68:	f000 fcb6 	bl	80017d8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000e6c:	4b05      	ldr	r3, [pc, #20]	; (8000e84 <MX_USART2_UART_Init+0x94>)
 8000e6e:	0018      	movs	r0, r3
 8000e70:	f006 f9b4 	bl	80071dc <HAL_UARTEx_DisableFifoMode>
 8000e74:	1e03      	subs	r3, r0, #0
 8000e76:	d001      	beq.n	8000e7c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000e78:	f000 fcae 	bl	80017d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e7c:	46c0      	nop			; (mov r8, r8)
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	46c0      	nop			; (mov r8, r8)
 8000e84:	20000158 	.word	0x20000158
 8000e88:	40004400 	.word	0x40004400

08000e8c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000e90:	4b23      	ldr	r3, [pc, #140]	; (8000f20 <MX_USART3_UART_Init+0x94>)
 8000e92:	4a24      	ldr	r2, [pc, #144]	; (8000f24 <MX_USART3_UART_Init+0x98>)
 8000e94:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000e96:	4b22      	ldr	r3, [pc, #136]	; (8000f20 <MX_USART3_UART_Init+0x94>)
 8000e98:	2296      	movs	r2, #150	; 0x96
 8000e9a:	0192      	lsls	r2, r2, #6
 8000e9c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000e9e:	4b20      	ldr	r3, [pc, #128]	; (8000f20 <MX_USART3_UART_Init+0x94>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ea4:	4b1e      	ldr	r3, [pc, #120]	; (8000f20 <MX_USART3_UART_Init+0x94>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000eaa:	4b1d      	ldr	r3, [pc, #116]	; (8000f20 <MX_USART3_UART_Init+0x94>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000eb0:	4b1b      	ldr	r3, [pc, #108]	; (8000f20 <MX_USART3_UART_Init+0x94>)
 8000eb2:	220c      	movs	r2, #12
 8000eb4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eb6:	4b1a      	ldr	r3, [pc, #104]	; (8000f20 <MX_USART3_UART_Init+0x94>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ebc:	4b18      	ldr	r3, [pc, #96]	; (8000f20 <MX_USART3_UART_Init+0x94>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ec2:	4b17      	ldr	r3, [pc, #92]	; (8000f20 <MX_USART3_UART_Init+0x94>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ec8:	4b15      	ldr	r3, [pc, #84]	; (8000f20 <MX_USART3_UART_Init+0x94>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ece:	4b14      	ldr	r3, [pc, #80]	; (8000f20 <MX_USART3_UART_Init+0x94>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ed4:	4b12      	ldr	r3, [pc, #72]	; (8000f20 <MX_USART3_UART_Init+0x94>)
 8000ed6:	0018      	movs	r0, r3
 8000ed8:	f003 ff82 	bl	8004de0 <HAL_UART_Init>
 8000edc:	1e03      	subs	r3, r0, #0
 8000ede:	d001      	beq.n	8000ee4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000ee0:	f000 fc7a 	bl	80017d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ee4:	4b0e      	ldr	r3, [pc, #56]	; (8000f20 <MX_USART3_UART_Init+0x94>)
 8000ee6:	2100      	movs	r1, #0
 8000ee8:	0018      	movs	r0, r3
 8000eea:	f006 f9b1 	bl	8007250 <HAL_UARTEx_SetTxFifoThreshold>
 8000eee:	1e03      	subs	r3, r0, #0
 8000ef0:	d001      	beq.n	8000ef6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000ef2:	f000 fc71 	bl	80017d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ef6:	4b0a      	ldr	r3, [pc, #40]	; (8000f20 <MX_USART3_UART_Init+0x94>)
 8000ef8:	2100      	movs	r1, #0
 8000efa:	0018      	movs	r0, r3
 8000efc:	f006 f9e8 	bl	80072d0 <HAL_UARTEx_SetRxFifoThreshold>
 8000f00:	1e03      	subs	r3, r0, #0
 8000f02:	d001      	beq.n	8000f08 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000f04:	f000 fc68 	bl	80017d8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000f08:	4b05      	ldr	r3, [pc, #20]	; (8000f20 <MX_USART3_UART_Init+0x94>)
 8000f0a:	0018      	movs	r0, r3
 8000f0c:	f006 f966 	bl	80071dc <HAL_UARTEx_DisableFifoMode>
 8000f10:	1e03      	subs	r3, r0, #0
 8000f12:	d001      	beq.n	8000f18 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000f14:	f000 fc60 	bl	80017d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000f18:	46c0      	nop			; (mov r8, r8)
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	46c0      	nop			; (mov r8, r8)
 8000f20:	200001ec 	.word	0x200001ec
 8000f24:	40004800 	.word	0x40004800

08000f28 <MX_USART5_UART_Init>:
  * @brief USART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART5_UART_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART5_Init 0 */

  /* USER CODE BEGIN USART5_Init 1 */

  /* USER CODE END USART5_Init 1 */
  huart5.Instance = USART5;
 8000f2c:	4b1a      	ldr	r3, [pc, #104]	; (8000f98 <MX_USART5_UART_Init+0x70>)
 8000f2e:	4a1b      	ldr	r2, [pc, #108]	; (8000f9c <MX_USART5_UART_Init+0x74>)
 8000f30:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000f32:	4b19      	ldr	r3, [pc, #100]	; (8000f98 <MX_USART5_UART_Init+0x70>)
 8000f34:	22e1      	movs	r2, #225	; 0xe1
 8000f36:	0252      	lsls	r2, r2, #9
 8000f38:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000f3a:	4b17      	ldr	r3, [pc, #92]	; (8000f98 <MX_USART5_UART_Init+0x70>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000f40:	4b15      	ldr	r3, [pc, #84]	; (8000f98 <MX_USART5_UART_Init+0x70>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000f46:	4b14      	ldr	r3, [pc, #80]	; (8000f98 <MX_USART5_UART_Init+0x70>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000f4c:	4b12      	ldr	r3, [pc, #72]	; (8000f98 <MX_USART5_UART_Init+0x70>)
 8000f4e:	220c      	movs	r2, #12
 8000f50:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f52:	4b11      	ldr	r3, [pc, #68]	; (8000f98 <MX_USART5_UART_Init+0x70>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f58:	4b0f      	ldr	r3, [pc, #60]	; (8000f98 <MX_USART5_UART_Init+0x70>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f5e:	4b0e      	ldr	r3, [pc, #56]	; (8000f98 <MX_USART5_UART_Init+0x70>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f64:	4b0c      	ldr	r3, [pc, #48]	; (8000f98 <MX_USART5_UART_Init+0x70>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f6a:	4b0b      	ldr	r3, [pc, #44]	; (8000f98 <MX_USART5_UART_Init+0x70>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000f70:	4b09      	ldr	r3, [pc, #36]	; (8000f98 <MX_USART5_UART_Init+0x70>)
 8000f72:	0018      	movs	r0, r3
 8000f74:	f003 ff34 	bl	8004de0 <HAL_UART_Init>
 8000f78:	1e03      	subs	r3, r0, #0
 8000f7a:	d001      	beq.n	8000f80 <MX_USART5_UART_Init+0x58>
  {
    Error_Handler();
 8000f7c:	f000 fc2c 	bl	80017d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART5_Init 2 */
  HAL_NVIC_SetPriority(USART3_4_5_6_LPUART1_IRQn, 0, 0);
 8000f80:	2200      	movs	r2, #0
 8000f82:	2100      	movs	r1, #0
 8000f84:	201d      	movs	r0, #29
 8000f86:	f001 f845 	bl	8002014 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART3_4_5_6_LPUART1_IRQn);
 8000f8a:	201d      	movs	r0, #29
 8000f8c:	f001 f857 	bl	800203e <HAL_NVIC_EnableIRQ>



  /* USER CODE END USART5_Init 2 */

}
 8000f90:	46c0      	nop			; (mov r8, r8)
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	46c0      	nop			; (mov r8, r8)
 8000f98:	20000280 	.word	0x20000280
 8000f9c:	40005000 	.word	0x40005000

08000fa0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fa0:	b590      	push	{r4, r7, lr}
 8000fa2:	b08b      	sub	sp, #44	; 0x2c
 8000fa4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa6:	2414      	movs	r4, #20
 8000fa8:	193b      	adds	r3, r7, r4
 8000faa:	0018      	movs	r0, r3
 8000fac:	2314      	movs	r3, #20
 8000fae:	001a      	movs	r2, r3
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	f007 f961 	bl	8008278 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fb6:	4b89      	ldr	r3, [pc, #548]	; (80011dc <MX_GPIO_Init+0x23c>)
 8000fb8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000fba:	4b88      	ldr	r3, [pc, #544]	; (80011dc <MX_GPIO_Init+0x23c>)
 8000fbc:	2104      	movs	r1, #4
 8000fbe:	430a      	orrs	r2, r1
 8000fc0:	635a      	str	r2, [r3, #52]	; 0x34
 8000fc2:	4b86      	ldr	r3, [pc, #536]	; (80011dc <MX_GPIO_Init+0x23c>)
 8000fc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fc6:	2204      	movs	r2, #4
 8000fc8:	4013      	ands	r3, r2
 8000fca:	613b      	str	r3, [r7, #16]
 8000fcc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000fce:	4b83      	ldr	r3, [pc, #524]	; (80011dc <MX_GPIO_Init+0x23c>)
 8000fd0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000fd2:	4b82      	ldr	r3, [pc, #520]	; (80011dc <MX_GPIO_Init+0x23c>)
 8000fd4:	2120      	movs	r1, #32
 8000fd6:	430a      	orrs	r2, r1
 8000fd8:	635a      	str	r2, [r3, #52]	; 0x34
 8000fda:	4b80      	ldr	r3, [pc, #512]	; (80011dc <MX_GPIO_Init+0x23c>)
 8000fdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fde:	2220      	movs	r2, #32
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	60fb      	str	r3, [r7, #12]
 8000fe4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe6:	4b7d      	ldr	r3, [pc, #500]	; (80011dc <MX_GPIO_Init+0x23c>)
 8000fe8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000fea:	4b7c      	ldr	r3, [pc, #496]	; (80011dc <MX_GPIO_Init+0x23c>)
 8000fec:	2101      	movs	r1, #1
 8000fee:	430a      	orrs	r2, r1
 8000ff0:	635a      	str	r2, [r3, #52]	; 0x34
 8000ff2:	4b7a      	ldr	r3, [pc, #488]	; (80011dc <MX_GPIO_Init+0x23c>)
 8000ff4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	60bb      	str	r3, [r7, #8]
 8000ffc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ffe:	4b77      	ldr	r3, [pc, #476]	; (80011dc <MX_GPIO_Init+0x23c>)
 8001000:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001002:	4b76      	ldr	r3, [pc, #472]	; (80011dc <MX_GPIO_Init+0x23c>)
 8001004:	2102      	movs	r1, #2
 8001006:	430a      	orrs	r2, r1
 8001008:	635a      	str	r2, [r3, #52]	; 0x34
 800100a:	4b74      	ldr	r3, [pc, #464]	; (80011dc <MX_GPIO_Init+0x23c>)
 800100c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800100e:	2202      	movs	r2, #2
 8001010:	4013      	ands	r3, r2
 8001012:	607b      	str	r3, [r7, #4]
 8001014:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001016:	4b71      	ldr	r3, [pc, #452]	; (80011dc <MX_GPIO_Init+0x23c>)
 8001018:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800101a:	4b70      	ldr	r3, [pc, #448]	; (80011dc <MX_GPIO_Init+0x23c>)
 800101c:	2108      	movs	r1, #8
 800101e:	430a      	orrs	r2, r1
 8001020:	635a      	str	r2, [r3, #52]	; 0x34
 8001022:	4b6e      	ldr	r3, [pc, #440]	; (80011dc <MX_GPIO_Init+0x23c>)
 8001024:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001026:	2208      	movs	r2, #8
 8001028:	4013      	ands	r3, r2
 800102a:	603b      	str	r3, [r7, #0]
 800102c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACC_CS_GPIO_Port, ACC_CS_Pin, GPIO_PIN_RESET);
 800102e:	23a0      	movs	r3, #160	; 0xa0
 8001030:	05db      	lsls	r3, r3, #23
 8001032:	2200      	movs	r2, #0
 8001034:	2110      	movs	r1, #16
 8001036:	0018      	movs	r0, r3
 8001038:	f001 fb4b 	bl	80026d2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ASTRO_WKUP_Pin|ASTRO_RST_Pin|GNSS_RST_Pin|GNSS_PWR_SW_Pin, GPIO_PIN_RESET);
 800103c:	4968      	ldr	r1, [pc, #416]	; (80011e0 <MX_GPIO_Init+0x240>)
 800103e:	4b69      	ldr	r3, [pc, #420]	; (80011e4 <MX_GPIO_Init+0x244>)
 8001040:	2200      	movs	r2, #0
 8001042:	0018      	movs	r0, r3
 8001044:	f001 fb45 	bl	80026d2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RF_SW_CTL1_Pin|RF_SW_CTL2_Pin, GPIO_PIN_SET);
 8001048:	23c0      	movs	r3, #192	; 0xc0
 800104a:	011b      	lsls	r3, r3, #4
 800104c:	4865      	ldr	r0, [pc, #404]	; (80011e4 <MX_GPIO_Init+0x244>)
 800104e:	2201      	movs	r2, #1
 8001050:	0019      	movs	r1, r3
 8001052:	f001 fb3e 	bl	80026d2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_GREEN_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 8001056:	4b64      	ldr	r3, [pc, #400]	; (80011e8 <MX_GPIO_Init+0x248>)
 8001058:	2200      	movs	r2, #0
 800105a:	2103      	movs	r1, #3
 800105c:	0018      	movs	r0, r3
 800105e:	f001 fb38 	bl	80026d2 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ACC_INT1_Pin ACC_INT2_Pin */
  GPIO_InitStruct.Pin = ACC_INT1_Pin|ACC_INT2_Pin;
 8001062:	193b      	adds	r3, r7, r4
 8001064:	2203      	movs	r2, #3
 8001066:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001068:	193b      	adds	r3, r7, r4
 800106a:	2288      	movs	r2, #136	; 0x88
 800106c:	0352      	lsls	r2, r2, #13
 800106e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001070:	193b      	adds	r3, r7, r4
 8001072:	2200      	movs	r2, #0
 8001074:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001076:	193a      	adds	r2, r7, r4
 8001078:	23a0      	movs	r3, #160	; 0xa0
 800107a:	05db      	lsls	r3, r3, #23
 800107c:	0011      	movs	r1, r2
 800107e:	0018      	movs	r0, r3
 8001080:	f001 f8c6 	bl	8002210 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACC_CS_Pin */
  GPIO_InitStruct.Pin = ACC_CS_Pin;
 8001084:	193b      	adds	r3, r7, r4
 8001086:	2210      	movs	r2, #16
 8001088:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800108a:	193b      	adds	r3, r7, r4
 800108c:	2201      	movs	r2, #1
 800108e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001090:	193b      	adds	r3, r7, r4
 8001092:	2200      	movs	r2, #0
 8001094:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001096:	193b      	adds	r3, r7, r4
 8001098:	2200      	movs	r2, #0
 800109a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(ACC_CS_GPIO_Port, &GPIO_InitStruct);
 800109c:	193a      	adds	r2, r7, r4
 800109e:	23a0      	movs	r3, #160	; 0xa0
 80010a0:	05db      	lsls	r3, r3, #23
 80010a2:	0011      	movs	r1, r2
 80010a4:	0018      	movs	r0, r3
 80010a6:	f001 f8b3 	bl	8002210 <HAL_GPIO_Init>

  /*Configure GPIO pins : ASTRO_WKUP_Pin ASTRO_RST_Pin RF_SW_CTL1_Pin RF_SW_CTL2_Pin
                           GNSS_PWR_SW_Pin */
  GPIO_InitStruct.Pin = ASTRO_WKUP_Pin|ASTRO_RST_Pin|RF_SW_CTL1_Pin|RF_SW_CTL2_Pin
 80010aa:	193b      	adds	r3, r7, r4
 80010ac:	4a4f      	ldr	r2, [pc, #316]	; (80011ec <MX_GPIO_Init+0x24c>)
 80010ae:	601a      	str	r2, [r3, #0]
                          |GNSS_PWR_SW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010b0:	193b      	adds	r3, r7, r4
 80010b2:	2201      	movs	r2, #1
 80010b4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b6:	193b      	adds	r3, r7, r4
 80010b8:	2200      	movs	r2, #0
 80010ba:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010bc:	193b      	adds	r3, r7, r4
 80010be:	2200      	movs	r2, #0
 80010c0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010c2:	193b      	adds	r3, r7, r4
 80010c4:	4a47      	ldr	r2, [pc, #284]	; (80011e4 <MX_GPIO_Init+0x244>)
 80010c6:	0019      	movs	r1, r3
 80010c8:	0010      	movs	r0, r2
 80010ca:	f001 f8a1 	bl	8002210 <HAL_GPIO_Init>

  /*Configure GPIO pin : ASTRO_EVT_Pin */
  GPIO_InitStruct.Pin = ASTRO_EVT_Pin;
 80010ce:	0021      	movs	r1, r4
 80010d0:	187b      	adds	r3, r7, r1
 80010d2:	2204      	movs	r2, #4
 80010d4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010d6:	187b      	adds	r3, r7, r1
 80010d8:	2288      	movs	r2, #136	; 0x88
 80010da:	0352      	lsls	r2, r2, #13
 80010dc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010de:	187b      	adds	r3, r7, r1
 80010e0:	2200      	movs	r2, #0
 80010e2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ASTRO_EVT_GPIO_Port, &GPIO_InitStruct);
 80010e4:	000c      	movs	r4, r1
 80010e6:	187b      	adds	r3, r7, r1
 80010e8:	4a3e      	ldr	r2, [pc, #248]	; (80011e4 <MX_GPIO_Init+0x244>)
 80010ea:	0019      	movs	r1, r3
 80010ec:	0010      	movs	r0, r2
 80010ee:	f001 f88f 	bl	8002210 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80010f2:	0021      	movs	r1, r4
 80010f4:	187b      	adds	r3, r7, r1
 80010f6:	2280      	movs	r2, #128	; 0x80
 80010f8:	0152      	lsls	r2, r2, #5
 80010fa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010fc:	000c      	movs	r4, r1
 80010fe:	193b      	adds	r3, r7, r4
 8001100:	2203      	movs	r2, #3
 8001102:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001104:	193b      	adds	r3, r7, r4
 8001106:	2200      	movs	r2, #0
 8001108:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800110a:	193b      	adds	r3, r7, r4
 800110c:	4a35      	ldr	r2, [pc, #212]	; (80011e4 <MX_GPIO_Init+0x244>)
 800110e:	0019      	movs	r1, r3
 8001110:	0010      	movs	r0, r2
 8001112:	f001 f87d 	bl	8002210 <HAL_GPIO_Init>

  /*Configure GPIO pin : GNSS_RST_Pin */
  GPIO_InitStruct.Pin = GNSS_RST_Pin;
 8001116:	0021      	movs	r1, r4
 8001118:	187b      	adds	r3, r7, r1
 800111a:	2280      	movs	r2, #128	; 0x80
 800111c:	0192      	lsls	r2, r2, #6
 800111e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001120:	000c      	movs	r4, r1
 8001122:	193b      	adds	r3, r7, r4
 8001124:	2211      	movs	r2, #17
 8001126:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001128:	193b      	adds	r3, r7, r4
 800112a:	2200      	movs	r2, #0
 800112c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800112e:	193b      	adds	r3, r7, r4
 8001130:	2200      	movs	r2, #0
 8001132:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GNSS_RST_GPIO_Port, &GPIO_InitStruct);
 8001134:	193b      	adds	r3, r7, r4
 8001136:	4a2b      	ldr	r2, [pc, #172]	; (80011e4 <MX_GPIO_Init+0x244>)
 8001138:	0019      	movs	r1, r3
 800113a:	0010      	movs	r0, r2
 800113c:	f001 f868 	bl	8002210 <HAL_GPIO_Init>

  /*Configure GPIO pins : SATCOM_ANTN_USE_Pin GNSS_3DFIX_Pin GNSS_JAM_Pin GNSS_GEOF_Pin */
  GPIO_InitStruct.Pin = SATCOM_ANTN_USE_Pin|GNSS_3DFIX_Pin|GNSS_JAM_Pin|GNSS_GEOF_Pin;
 8001140:	193b      	adds	r3, r7, r4
 8001142:	4a2b      	ldr	r2, [pc, #172]	; (80011f0 <MX_GPIO_Init+0x250>)
 8001144:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001146:	193b      	adds	r3, r7, r4
 8001148:	2200      	movs	r2, #0
 800114a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114c:	193b      	adds	r3, r7, r4
 800114e:	2200      	movs	r2, #0
 8001150:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001152:	193b      	adds	r3, r7, r4
 8001154:	4a23      	ldr	r2, [pc, #140]	; (80011e4 <MX_GPIO_Init+0x244>)
 8001156:	0019      	movs	r1, r3
 8001158:	0010      	movs	r0, r2
 800115a:	f001 f859 	bl	8002210 <HAL_GPIO_Init>

  /*Configure GPIO pin : ALS_SENS_Pin */
  GPIO_InitStruct.Pin = ALS_SENS_Pin;
 800115e:	193b      	adds	r3, r7, r4
 8001160:	2280      	movs	r2, #128	; 0x80
 8001162:	0052      	lsls	r2, r2, #1
 8001164:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001166:	193b      	adds	r3, r7, r4
 8001168:	2200      	movs	r2, #0
 800116a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116c:	193b      	adds	r3, r7, r4
 800116e:	2200      	movs	r2, #0
 8001170:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ALS_SENS_GPIO_Port, &GPIO_InitStruct);
 8001172:	193a      	adds	r2, r7, r4
 8001174:	23a0      	movs	r3, #160	; 0xa0
 8001176:	05db      	lsls	r3, r3, #23
 8001178:	0011      	movs	r1, r2
 800117a:	0018      	movs	r0, r3
 800117c:	f001 f848 	bl	8002210 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_BLUE_Pin;
 8001180:	193b      	adds	r3, r7, r4
 8001182:	2203      	movs	r2, #3
 8001184:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001186:	193b      	adds	r3, r7, r4
 8001188:	2201      	movs	r2, #1
 800118a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118c:	193b      	adds	r3, r7, r4
 800118e:	2200      	movs	r2, #0
 8001190:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001192:	193b      	adds	r3, r7, r4
 8001194:	2200      	movs	r2, #0
 8001196:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001198:	193b      	adds	r3, r7, r4
 800119a:	4a13      	ldr	r2, [pc, #76]	; (80011e8 <MX_GPIO_Init+0x248>)
 800119c:	0019      	movs	r1, r3
 800119e:	0010      	movs	r0, r2
 80011a0:	f001 f836 	bl	8002210 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW1_Pin SW2_Pin */
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin;
 80011a4:	0021      	movs	r1, r4
 80011a6:	187b      	adds	r3, r7, r1
 80011a8:	220c      	movs	r2, #12
 80011aa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011ac:	187b      	adds	r3, r7, r1
 80011ae:	2200      	movs	r2, #0
 80011b0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011b2:	187b      	adds	r3, r7, r1
 80011b4:	2201      	movs	r2, #1
 80011b6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011b8:	187b      	adds	r3, r7, r1
 80011ba:	4a0b      	ldr	r2, [pc, #44]	; (80011e8 <MX_GPIO_Init+0x248>)
 80011bc:	0019      	movs	r1, r3
 80011be:	0010      	movs	r0, r2
 80011c0:	f001 f826 	bl	8002210 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 3, 0);
 80011c4:	2200      	movs	r2, #0
 80011c6:	2103      	movs	r1, #3
 80011c8:	2005      	movs	r0, #5
 80011ca:	f000 ff23 	bl	8002014 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 80011ce:	2005      	movs	r0, #5
 80011d0:	f000 ff35 	bl	800203e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011d4:	46c0      	nop			; (mov r8, r8)
 80011d6:	46bd      	mov	sp, r7
 80011d8:	b00b      	add	sp, #44	; 0x2c
 80011da:	bd90      	pop	{r4, r7, pc}
 80011dc:	40021000 	.word	0x40021000
 80011e0:	0000a003 	.word	0x0000a003
 80011e4:	50000400 	.word	0x50000400
 80011e8:	50000c00 	.word	0x50000c00
 80011ec:	00008c03 	.word	0x00008c03
 80011f0:	000040e0 	.word	0x000040e0

080011f4 <send_debug_logs>:
/* USER CODE BEGIN 4 */


// FUNCTIONS REQUIRED BY astronode-stm32-example-asset library
void send_debug_logs ( char* p_tx_buffer )
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
    uint32_t length = strlen ( p_tx_buffer ) ;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	0018      	movs	r0, r3
 8001200:	f7fe ff80 	bl	8000104 <strlen>
 8001204:	0003      	movs	r3, r0
 8001206:	60fb      	str	r3, [r7, #12]

    if ( length > UART_TX_MAX_BUFF_SIZE )
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	2bfa      	cmp	r3, #250	; 0xfa
 800120c:	d908      	bls.n	8001220 <send_debug_logs+0x2c>
    {
        HAL_UART_Transmit ( HUART_DBG , ( uint8_t* ) "[ERROR] UART buffer reached max length.\n" , 42 , UART_TIMEOUT ) ;
 800120e:	23fa      	movs	r3, #250	; 0xfa
 8001210:	009b      	lsls	r3, r3, #2
 8001212:	490d      	ldr	r1, [pc, #52]	; (8001248 <send_debug_logs+0x54>)
 8001214:	480d      	ldr	r0, [pc, #52]	; (800124c <send_debug_logs+0x58>)
 8001216:	222a      	movs	r2, #42	; 0x2a
 8001218:	f003 fe78 	bl	8004f0c <HAL_UART_Transmit>
        length = UART_TX_MAX_BUFF_SIZE;
 800121c:	23fa      	movs	r3, #250	; 0xfa
 800121e:	60fb      	str	r3, [r7, #12]
    }

    HAL_UART_Transmit ( HUART_DBG , ( uint8_t* ) p_tx_buffer , length , UART_TIMEOUT ) ;
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	b29a      	uxth	r2, r3
 8001224:	23fa      	movs	r3, #250	; 0xfa
 8001226:	009b      	lsls	r3, r3, #2
 8001228:	6879      	ldr	r1, [r7, #4]
 800122a:	4808      	ldr	r0, [pc, #32]	; (800124c <send_debug_logs+0x58>)
 800122c:	f003 fe6e 	bl	8004f0c <HAL_UART_Transmit>
    HAL_UART_Transmit ( HUART_DBG , ( uint8_t* ) "\n" , 1 , UART_TIMEOUT ) ;
 8001230:	23fa      	movs	r3, #250	; 0xfa
 8001232:	009b      	lsls	r3, r3, #2
 8001234:	4906      	ldr	r1, [pc, #24]	; (8001250 <send_debug_logs+0x5c>)
 8001236:	4805      	ldr	r0, [pc, #20]	; (800124c <send_debug_logs+0x58>)
 8001238:	2201      	movs	r2, #1
 800123a:	f003 fe67 	bl	8004f0c <HAL_UART_Transmit>
}
 800123e:	46c0      	nop			; (mov r8, r8)
 8001240:	46bd      	mov	sp, r7
 8001242:	b004      	add	sp, #16
 8001244:	bd80      	pop	{r7, pc}
 8001246:	46c0      	nop			; (mov r8, r8)
 8001248:	08008f18 	.word	0x08008f18
 800124c:	20000158 	.word	0x20000158
 8001250:	08008f44 	.word	0x08008f44

08001254 <send_gnss_msg>:
void send_gnss_msg ( char* p_tx_buffer )
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b084      	sub	sp, #16
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
    uint32_t length = strlen ( p_tx_buffer ) ;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	0018      	movs	r0, r3
 8001260:	f7fe ff50 	bl	8000104 <strlen>
 8001264:	0003      	movs	r3, r0
 8001266:	60fb      	str	r3, [r7, #12]

    if ( length > UART_TX_MAX_BUFF_SIZE )
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	2bfa      	cmp	r3, #250	; 0xfa
 800126c:	d908      	bls.n	8001280 <send_gnss_msg+0x2c>
    {
        HAL_UART_Transmit ( HUART_GNSS , ( uint8_t* ) "[ERROR] UART buffer reached max length.\n" , 42 , UART_TIMEOUT ) ;
 800126e:	23fa      	movs	r3, #250	; 0xfa
 8001270:	009b      	lsls	r3, r3, #2
 8001272:	490d      	ldr	r1, [pc, #52]	; (80012a8 <send_gnss_msg+0x54>)
 8001274:	480d      	ldr	r0, [pc, #52]	; (80012ac <send_gnss_msg+0x58>)
 8001276:	222a      	movs	r2, #42	; 0x2a
 8001278:	f003 fe48 	bl	8004f0c <HAL_UART_Transmit>
        length = UART_TX_MAX_BUFF_SIZE;
 800127c:	23fa      	movs	r3, #250	; 0xfa
 800127e:	60fb      	str	r3, [r7, #12]
    }

    HAL_UART_Transmit ( HUART_GNSS , ( uint8_t* ) p_tx_buffer , length , UART_TIMEOUT ) ;
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	b29a      	uxth	r2, r3
 8001284:	23fa      	movs	r3, #250	; 0xfa
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	6879      	ldr	r1, [r7, #4]
 800128a:	4808      	ldr	r0, [pc, #32]	; (80012ac <send_gnss_msg+0x58>)
 800128c:	f003 fe3e 	bl	8004f0c <HAL_UART_Transmit>
    HAL_UART_Transmit ( HUART_GNSS , ( uint8_t* ) "\n" , 1 , UART_TIMEOUT ) ;
 8001290:	23fa      	movs	r3, #250	; 0xfa
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	4906      	ldr	r1, [pc, #24]	; (80012b0 <send_gnss_msg+0x5c>)
 8001296:	4805      	ldr	r0, [pc, #20]	; (80012ac <send_gnss_msg+0x58>)
 8001298:	2201      	movs	r2, #1
 800129a:	f003 fe37 	bl	8004f0c <HAL_UART_Transmit>
}
 800129e:	46c0      	nop			; (mov r8, r8)
 80012a0:	46bd      	mov	sp, r7
 80012a2:	b004      	add	sp, #16
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	46c0      	nop			; (mov r8, r8)
 80012a8:	08008f18 	.word	0x08008f18
 80012ac:	20000280 	.word	0x20000280
 80012b0:	08008f44 	.word	0x08008f44

080012b4 <my_lis2dw12_platform_write>:

// ACC LL Function

int32_t my_lis2dw12_platform_write ( void *handle , uint8_t reg , const uint8_t *bufp , uint16_t len )
{
 80012b4:	b5b0      	push	{r4, r5, r7, lr}
 80012b6:	b084      	sub	sp, #16
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	60f8      	str	r0, [r7, #12]
 80012bc:	0008      	movs	r0, r1
 80012be:	607a      	str	r2, [r7, #4]
 80012c0:	0019      	movs	r1, r3
 80012c2:	240b      	movs	r4, #11
 80012c4:	193b      	adds	r3, r7, r4
 80012c6:	1c02      	adds	r2, r0, #0
 80012c8:	701a      	strb	r2, [r3, #0]
 80012ca:	2508      	movs	r5, #8
 80012cc:	197b      	adds	r3, r7, r5
 80012ce:	1c0a      	adds	r2, r1, #0
 80012d0:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin	( GPIOA , ACC_CS_Pin , GPIO_PIN_RESET ) ;
 80012d2:	23a0      	movs	r3, #160	; 0xa0
 80012d4:	05db      	lsls	r3, r3, #23
 80012d6:	2200      	movs	r2, #0
 80012d8:	2110      	movs	r1, #16
 80012da:	0018      	movs	r0, r3
 80012dc:	f001 f9f9 	bl	80026d2 <HAL_GPIO_WritePin>
	HAL_Delay ( 20 ) ;
 80012e0:	2014      	movs	r0, #20
 80012e2:	f000 fd9f 	bl	8001e24 <HAL_Delay>
	HAL_SPI_Transmit	( handle , &reg , 1 , 1000 ) ;
 80012e6:	23fa      	movs	r3, #250	; 0xfa
 80012e8:	009b      	lsls	r3, r3, #2
 80012ea:	1939      	adds	r1, r7, r4
 80012ec:	68f8      	ldr	r0, [r7, #12]
 80012ee:	2201      	movs	r2, #1
 80012f0:	f002 fbd8 	bl	8003aa4 <HAL_SPI_Transmit>
	HAL_SPI_Transmit	( handle , (uint8_t*) bufp , len , 1000 ) ;
 80012f4:	23fa      	movs	r3, #250	; 0xfa
 80012f6:	009c      	lsls	r4, r3, #2
 80012f8:	197b      	adds	r3, r7, r5
 80012fa:	881a      	ldrh	r2, [r3, #0]
 80012fc:	6879      	ldr	r1, [r7, #4]
 80012fe:	68f8      	ldr	r0, [r7, #12]
 8001300:	0023      	movs	r3, r4
 8001302:	f002 fbcf 	bl	8003aa4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin	( GPIOA , ACC_CS_Pin , GPIO_PIN_SET) ;
 8001306:	23a0      	movs	r3, #160	; 0xa0
 8001308:	05db      	lsls	r3, r3, #23
 800130a:	2201      	movs	r2, #1
 800130c:	2110      	movs	r1, #16
 800130e:	0018      	movs	r0, r3
 8001310:	f001 f9df 	bl	80026d2 <HAL_GPIO_WritePin>

	return 0;
 8001314:	2300      	movs	r3, #0
}
 8001316:	0018      	movs	r0, r3
 8001318:	46bd      	mov	sp, r7
 800131a:	b004      	add	sp, #16
 800131c:	bdb0      	pop	{r4, r5, r7, pc}

0800131e <my_lis2dw12_platform_read>:

int32_t my_lis2dw12_platform_read ( void *handle , uint8_t reg , uint8_t *bufp , uint16_t len )
{
 800131e:	b5b0      	push	{r4, r5, r7, lr}
 8001320:	b084      	sub	sp, #16
 8001322:	af00      	add	r7, sp, #0
 8001324:	60f8      	str	r0, [r7, #12]
 8001326:	0008      	movs	r0, r1
 8001328:	607a      	str	r2, [r7, #4]
 800132a:	0019      	movs	r1, r3
 800132c:	240b      	movs	r4, #11
 800132e:	193b      	adds	r3, r7, r4
 8001330:	1c02      	adds	r2, r0, #0
 8001332:	701a      	strb	r2, [r3, #0]
 8001334:	2508      	movs	r5, #8
 8001336:	197b      	adds	r3, r7, r5
 8001338:	1c0a      	adds	r2, r1, #0
 800133a:	801a      	strh	r2, [r3, #0]
	reg |= 0x80;
 800133c:	193b      	adds	r3, r7, r4
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	2280      	movs	r2, #128	; 0x80
 8001342:	4252      	negs	r2, r2
 8001344:	4313      	orrs	r3, r2
 8001346:	b2da      	uxtb	r2, r3
 8001348:	193b      	adds	r3, r7, r4
 800134a:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin ( GPIOA , ACC_CS_Pin , GPIO_PIN_RESET) ;
 800134c:	23a0      	movs	r3, #160	; 0xa0
 800134e:	05db      	lsls	r3, r3, #23
 8001350:	2200      	movs	r2, #0
 8001352:	2110      	movs	r1, #16
 8001354:	0018      	movs	r0, r3
 8001356:	f001 f9bc 	bl	80026d2 <HAL_GPIO_WritePin>
	HAL_Delay ( 20 ) ;
 800135a:	2014      	movs	r0, #20
 800135c:	f000 fd62 	bl	8001e24 <HAL_Delay>
	HAL_SPI_Transmit ( handle , &reg , 1 , 1000 ) ;
 8001360:	23fa      	movs	r3, #250	; 0xfa
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	1939      	adds	r1, r7, r4
 8001366:	68f8      	ldr	r0, [r7, #12]
 8001368:	2201      	movs	r2, #1
 800136a:	f002 fb9b 	bl	8003aa4 <HAL_SPI_Transmit>
	HAL_SPI_Receive ( handle , bufp , len , 1000 ) ;
 800136e:	23fa      	movs	r3, #250	; 0xfa
 8001370:	009c      	lsls	r4, r3, #2
 8001372:	197b      	adds	r3, r7, r5
 8001374:	881a      	ldrh	r2, [r3, #0]
 8001376:	6879      	ldr	r1, [r7, #4]
 8001378:	68f8      	ldr	r0, [r7, #12]
 800137a:	0023      	movs	r3, r4
 800137c:	f002 fcf2 	bl	8003d64 <HAL_SPI_Receive>
	HAL_GPIO_WritePin ( GPIOA , ACC_CS_Pin , GPIO_PIN_SET) ;
 8001380:	23a0      	movs	r3, #160	; 0xa0
 8001382:	05db      	lsls	r3, r3, #23
 8001384:	2201      	movs	r2, #1
 8001386:	2110      	movs	r1, #16
 8001388:	0018      	movs	r0, r3
 800138a:	f001 f9a2 	bl	80026d2 <HAL_GPIO_WritePin>

	return 0;
 800138e:	2300      	movs	r3, #0
}
 8001390:	0018      	movs	r0, r3
 8001392:	46bd      	mov	sp, r7
 8001394:	b004      	add	sp, #16
 8001396:	bdb0      	pop	{r4, r5, r7, pc}

08001398 <my_gnss_on>:

// GNSS LL Function
void my_gnss_on ( void )
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin ( GPIOB , GNSS_PWR_SW_Pin , GPIO_PIN_SET ) ;
 800139c:	2380      	movs	r3, #128	; 0x80
 800139e:	021b      	lsls	r3, r3, #8
 80013a0:	4808      	ldr	r0, [pc, #32]	; (80013c4 <my_gnss_on+0x2c>)
 80013a2:	2201      	movs	r2, #1
 80013a4:	0019      	movs	r1, r3
 80013a6:	f001 f994 	bl	80026d2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( GPIOB , GNSS_RST_Pin , GPIO_PIN_SET ) ;
 80013aa:	2380      	movs	r3, #128	; 0x80
 80013ac:	019b      	lsls	r3, r3, #6
 80013ae:	4805      	ldr	r0, [pc, #20]	; (80013c4 <my_gnss_on+0x2c>)
 80013b0:	2201      	movs	r2, #1
 80013b2:	0019      	movs	r1, r3
 80013b4:	f001 f98d 	bl	80026d2 <HAL_GPIO_WritePin>
	MX_USART3_UART_Init () ;
 80013b8:	f7ff fd68 	bl	8000e8c <MX_USART3_UART_Init>
}
 80013bc:	46c0      	nop			; (mov r8, r8)
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	46c0      	nop			; (mov r8, r8)
 80013c4:	50000400 	.word	0x50000400

080013c8 <my_gnss_off>:
void my_gnss_off ( void )
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin ( GPIOB , GNSS_PWR_SW_Pin , GPIO_PIN_RESET ) ;
 80013cc:	2380      	movs	r3, #128	; 0x80
 80013ce:	021b      	lsls	r3, r3, #8
 80013d0:	4809      	ldr	r0, [pc, #36]	; (80013f8 <my_gnss_off+0x30>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	0019      	movs	r1, r3
 80013d6:	f001 f97c 	bl	80026d2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( GPIOB , GNSS_RST_Pin , GPIO_PIN_RESET ) ;
 80013da:	2380      	movs	r3, #128	; 0x80
 80013dc:	019b      	lsls	r3, r3, #6
 80013de:	4806      	ldr	r0, [pc, #24]	; (80013f8 <my_gnss_off+0x30>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	0019      	movs	r1, r3
 80013e4:	f001 f975 	bl	80026d2 <HAL_GPIO_WritePin>
	HAL_UART_DeInit ( HUART_GNSS ) ;
 80013e8:	4b04      	ldr	r3, [pc, #16]	; (80013fc <my_gnss_off+0x34>)
 80013ea:	0018      	movs	r0, r3
 80013ec:	f003 fd4e 	bl	8004e8c <HAL_UART_DeInit>
}
 80013f0:	46c0      	nop			; (mov r8, r8)
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	46c0      	nop			; (mov r8, r8)
 80013f8:	50000400 	.word	0x50000400
 80013fc:	20000280 	.word	0x20000280

08001400 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef *htim )
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
	if ( htim->Instance == TIM6 )
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a0c      	ldr	r2, [pc, #48]	; (8001440 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d111      	bne.n	8001436 <HAL_TIM_PeriodElapsedCallback+0x36>
	{
		tim_seconds++ ;
 8001412:	4b0c      	ldr	r3, [pc, #48]	; (8001444 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001414:	881b      	ldrh	r3, [r3, #0]
 8001416:	3301      	adds	r3, #1
 8001418:	b29a      	uxth	r2, r3
 800141a:	4b0a      	ldr	r3, [pc, #40]	; (8001444 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800141c:	801a      	strh	r2, [r3, #0]
		if ( tim_seconds > TIM_SECONDS_THS_SYSTEM_RESET )
 800141e:	4b09      	ldr	r3, [pc, #36]	; (8001444 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001420:	881a      	ldrh	r2, [r3, #0]
 8001422:	2396      	movs	r3, #150	; 0x96
 8001424:	009b      	lsls	r3, r3, #2
 8001426:	429a      	cmp	r2, r3
 8001428:	d905      	bls.n	8001436 <HAL_TIM_PeriodElapsedCallback+0x36>
		{
			send_debug_logs ( "Watchdog activated! System restart!" ) ;
 800142a:	4b07      	ldr	r3, [pc, #28]	; (8001448 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800142c:	0018      	movs	r0, r3
 800142e:	f7ff fee1 	bl	80011f4 <send_debug_logs>
			HAL_NVIC_SystemReset () ;
 8001432:	f000 fe14 	bl	800205e <HAL_NVIC_SystemReset>
		}
	}
}
 8001436:	46c0      	nop			; (mov r8, r8)
 8001438:	46bd      	mov	sp, r7
 800143a:	b002      	add	sp, #8
 800143c:	bd80      	pop	{r7, pc}
 800143e:	46c0      	nop			; (mov r8, r8)
 8001440:	40001000 	.word	0x40001000
 8001444:	20000420 	.word	0x20000420
 8001448:	08008f48 	.word	0x08008f48

0800144c <my_tim_init>:

void my_tim_init (void )
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
	__HAL_TIM_CLEAR_IT ( HTIM , TIM_IT_UPDATE ) ;
 8001450:	4b03      	ldr	r3, [pc, #12]	; (8001460 <my_tim_init+0x14>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	2202      	movs	r2, #2
 8001456:	4252      	negs	r2, r2
 8001458:	611a      	str	r2, [r3, #16]
}
 800145a:	46c0      	nop			; (mov r8, r8)
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	2000010c 	.word	0x2000010c

08001464 <my_tim_start>:

void my_tim_start (void )
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
	tim_seconds = 0 ;
 8001468:	4b04      	ldr	r3, [pc, #16]	; (800147c <my_tim_start+0x18>)
 800146a:	2200      	movs	r2, #0
 800146c:	801a      	strh	r2, [r3, #0]
	HAL_TIM_Base_Start_IT ( HTIM ) ;
 800146e:	4b04      	ldr	r3, [pc, #16]	; (8001480 <my_tim_start+0x1c>)
 8001470:	0018      	movs	r0, r3
 8001472:	f003 f9d7 	bl	8004824 <HAL_TIM_Base_Start_IT>
}
 8001476:	46c0      	nop			; (mov r8, r8)
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	20000420 	.word	0x20000420
 8001480:	2000010c 	.word	0x2000010c

08001484 <my_tim_stop>:

void my_tim_stop (void )
{
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT ( HTIM ) ;
 8001488:	4b03      	ldr	r3, [pc, #12]	; (8001498 <my_tim_stop+0x14>)
 800148a:	0018      	movs	r0, r3
 800148c:	f003 fa2c 	bl	80048e8 <HAL_TIM_Base_Stop_IT>
}
 8001490:	46c0      	nop			; (mov r8, r8)
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	46c0      	nop			; (mov r8, r8)
 8001498:	2000010c 	.word	0x2000010c

0800149c <reset_astronode>:
void reset_astronode ( void )
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin ( ASTRO_RST_GPIO_Port , ASTRO_RST_Pin , GPIO_PIN_SET ) ;
 80014a0:	4b0a      	ldr	r3, [pc, #40]	; (80014cc <reset_astronode+0x30>)
 80014a2:	2201      	movs	r2, #1
 80014a4:	2102      	movs	r1, #2
 80014a6:	0018      	movs	r0, r3
 80014a8:	f001 f913 	bl	80026d2 <HAL_GPIO_WritePin>
    HAL_Delay ( 1 ) ;
 80014ac:	2001      	movs	r0, #1
 80014ae:	f000 fcb9 	bl	8001e24 <HAL_Delay>
    HAL_GPIO_WritePin ( ASTRO_RST_GPIO_Port , ASTRO_RST_Pin , GPIO_PIN_RESET ) ;
 80014b2:	4b06      	ldr	r3, [pc, #24]	; (80014cc <reset_astronode+0x30>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	2102      	movs	r1, #2
 80014b8:	0018      	movs	r0, r3
 80014ba:	f001 f90a 	bl	80026d2 <HAL_GPIO_WritePin>
    HAL_Delay ( 250 ) ;
 80014be:	20fa      	movs	r0, #250	; 0xfa
 80014c0:	f000 fcb0 	bl	8001e24 <HAL_Delay>
}
 80014c4:	46c0      	nop			; (mov r8, r8)
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	46c0      	nop			; (mov r8, r8)
 80014cc:	50000400 	.word	0x50000400

080014d0 <send_astronode_request>:
void send_astronode_request ( uint8_t* p_tx_buffer , uint32_t length )
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	6039      	str	r1, [r7, #0]
    send_debug_logs ( "Message sent to the Astronode --> " ) ;
 80014da:	4b0a      	ldr	r3, [pc, #40]	; (8001504 <send_astronode_request+0x34>)
 80014dc:	0018      	movs	r0, r3
 80014de:	f7ff fe89 	bl	80011f4 <send_debug_logs>
    send_debug_logs ( ( char* ) p_tx_buffer ) ;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	0018      	movs	r0, r3
 80014e6:	f7ff fe85 	bl	80011f4 <send_debug_logs>
    HAL_UART_Transmit ( HUART_ASTRO , p_tx_buffer , length , 1000 ) ;
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	b29a      	uxth	r2, r3
 80014ee:	23fa      	movs	r3, #250	; 0xfa
 80014f0:	009b      	lsls	r3, r3, #2
 80014f2:	6879      	ldr	r1, [r7, #4]
 80014f4:	4804      	ldr	r0, [pc, #16]	; (8001508 <send_astronode_request+0x38>)
 80014f6:	f003 fd09 	bl	8004f0c <HAL_UART_Transmit>
}
 80014fa:	46c0      	nop			; (mov r8, r8)
 80014fc:	46bd      	mov	sp, r7
 80014fe:	b002      	add	sp, #8
 8001500:	bd80      	pop	{r7, pc}
 8001502:	46c0      	nop			; (mov r8, r8)
 8001504:	08008f6c 	.word	0x08008f6c
 8001508:	200001ec 	.word	0x200001ec

0800150c <get_systick>:
uint32_t get_systick ( void )
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
    return HAL_GetTick() ;
 8001510:	f000 fc7e 	bl	8001e10 <HAL_GetTick>
 8001514:	0003      	movs	r3, r0
}
 8001516:	0018      	movs	r0, r3
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}

0800151c <is_systick_timeout_over>:
bool is_systick_timeout_over ( uint32_t starting_value , uint16_t duration )
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
 8001524:	000a      	movs	r2, r1
 8001526:	1cbb      	adds	r3, r7, #2
 8001528:	801a      	strh	r2, [r3, #0]
    return ( get_systick () - starting_value > duration ) ? true : false ;
 800152a:	f7ff ffef 	bl	800150c <get_systick>
 800152e:	0002      	movs	r2, r0
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	1ad3      	subs	r3, r2, r3
 8001534:	1cba      	adds	r2, r7, #2
 8001536:	8812      	ldrh	r2, [r2, #0]
 8001538:	429a      	cmp	r2, r3
 800153a:	419b      	sbcs	r3, r3
 800153c:	425b      	negs	r3, r3
 800153e:	b2db      	uxtb	r3, r3
}
 8001540:	0018      	movs	r0, r3
 8001542:	46bd      	mov	sp, r7
 8001544:	b002      	add	sp, #8
 8001546:	bd80      	pop	{r7, pc}

08001548 <is_astronode_character_received>:
bool is_astronode_character_received ( uint8_t* p_rx_char )
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
    return ( HAL_UART_Receive ( HUART_ASTRO , p_rx_char , 1 , 100 ) == HAL_OK ? true : false ) ;
 8001550:	6879      	ldr	r1, [r7, #4]
 8001552:	4806      	ldr	r0, [pc, #24]	; (800156c <is_astronode_character_received+0x24>)
 8001554:	2364      	movs	r3, #100	; 0x64
 8001556:	2201      	movs	r2, #1
 8001558:	f003 fd7c 	bl	8005054 <HAL_UART_Receive>
 800155c:	0003      	movs	r3, r0
 800155e:	425a      	negs	r2, r3
 8001560:	4153      	adcs	r3, r2
 8001562:	b2db      	uxtb	r3, r3
}
 8001564:	0018      	movs	r0, r3
 8001566:	46bd      	mov	sp, r7
 8001568:	b002      	add	sp, #8
 800156a:	bd80      	pop	{r7, pc}
 800156c:	200001ec 	.word	0x200001ec

08001570 <fifo_init>:




uint8_t fifo_init(uint8_t* worker_buffer, uint16_t size, volatile fifo_t* fifo)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b086      	sub	sp, #24
 8001574:	af00      	add	r7, sp, #0
 8001576:	60f8      	str	r0, [r7, #12]
 8001578:	607a      	str	r2, [r7, #4]
 800157a:	230a      	movs	r3, #10
 800157c:	18fb      	adds	r3, r7, r3
 800157e:	1c0a      	adds	r2, r1, #0
 8001580:	801a      	strh	r2, [r3, #0]
    uint8_t retval = 0;
 8001582:	2117      	movs	r1, #23
 8001584:	187b      	adds	r3, r7, r1
 8001586:	2200      	movs	r2, #0
 8001588:	701a      	strb	r2, [r3, #0]

    if (NULL == worker_buffer) {
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d103      	bne.n	8001598 <fifo_init+0x28>
        retval = 1;
 8001590:	187b      	adds	r3, r7, r1
 8001592:	2201      	movs	r2, #1
 8001594:	701a      	strb	r2, [r3, #0]
        goto exit;
 8001596:	e022      	b.n	80015de <fifo_init+0x6e>
    }

    if (0 == size) {
 8001598:	230a      	movs	r3, #10
 800159a:	18fb      	adds	r3, r7, r3
 800159c:	881b      	ldrh	r3, [r3, #0]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d104      	bne.n	80015ac <fifo_init+0x3c>
        retval = 2;
 80015a2:	2317      	movs	r3, #23
 80015a4:	18fb      	adds	r3, r7, r3
 80015a6:	2202      	movs	r2, #2
 80015a8:	701a      	strb	r2, [r3, #0]
        goto exit;
 80015aa:	e018      	b.n	80015de <fifo_init+0x6e>
    }

    if (NULL == fifo) {
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d104      	bne.n	80015bc <fifo_init+0x4c>
        retval = 3;
 80015b2:	2317      	movs	r3, #23
 80015b4:	18fb      	adds	r3, r7, r3
 80015b6:	2203      	movs	r2, #3
 80015b8:	701a      	strb	r2, [r3, #0]
        goto exit;
 80015ba:	e010      	b.n	80015de <fifo_init+0x6e>
    }

    fifo->buffer = worker_buffer;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	68fa      	ldr	r2, [r7, #12]
 80015c0:	601a      	str	r2, [r3, #0]
    fifo->total_size = size;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	220a      	movs	r2, #10
 80015c6:	18ba      	adds	r2, r7, r2
 80015c8:	8812      	ldrh	r2, [r2, #0]
 80015ca:	809a      	strh	r2, [r3, #4]
    fifo->cur_size = 0;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2200      	movs	r2, #0
 80015d0:	80da      	strh	r2, [r3, #6]
    fifo->in_index = 0;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2200      	movs	r2, #0
 80015d6:	811a      	strh	r2, [r3, #8]
    fifo->out_index = 0;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2200      	movs	r2, #0
 80015dc:	815a      	strh	r2, [r3, #10]

exit:
    return retval;
 80015de:	2317      	movs	r3, #23
 80015e0:	18fb      	adds	r3, r7, r3
 80015e2:	781b      	ldrb	r3, [r3, #0]
}
 80015e4:	0018      	movs	r0, r3
 80015e6:	46bd      	mov	sp, r7
 80015e8:	b006      	add	sp, #24
 80015ea:	bd80      	pop	{r7, pc}

080015ec <fifo_is_empty>:

bool fifo_is_empty(fifo_t* fifo)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b084      	sub	sp, #16
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
    bool is_empty = true;
 80015f4:	210f      	movs	r1, #15
 80015f6:	187b      	adds	r3, r7, r1
 80015f8:	2201      	movs	r2, #1
 80015fa:	701a      	strb	r2, [r3, #0]

    if (0 != fifo->cur_size) {
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	88db      	ldrh	r3, [r3, #6]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d002      	beq.n	800160a <fifo_is_empty+0x1e>
        is_empty = false;
 8001604:	187b      	adds	r3, r7, r1
 8001606:	2200      	movs	r2, #0
 8001608:	701a      	strb	r2, [r3, #0]
    }

    return is_empty;
 800160a:	230f      	movs	r3, #15
 800160c:	18fb      	adds	r3, r7, r3
 800160e:	781b      	ldrb	r3, [r3, #0]
}
 8001610:	0018      	movs	r0, r3
 8001612:	46bd      	mov	sp, r7
 8001614:	b004      	add	sp, #16
 8001616:	bd80      	pop	{r7, pc}

08001618 <fifo_put>:

uint8_t fifo_put(fifo_t* fifo, uint8_t byte)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b084      	sub	sp, #16
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
 8001620:	000a      	movs	r2, r1
 8001622:	1cfb      	adds	r3, r7, #3
 8001624:	701a      	strb	r2, [r3, #0]
    uint8_t retval = 0;
 8001626:	210f      	movs	r1, #15
 8001628:	187b      	adds	r3, r7, r1
 800162a:	2200      	movs	r2, #0
 800162c:	701a      	strb	r2, [r3, #0]

    if (NULL == fifo) {
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d103      	bne.n	800163c <fifo_put+0x24>
        retval = 1;
 8001634:	187b      	adds	r3, r7, r1
 8001636:	2201      	movs	r2, #1
 8001638:	701a      	strb	r2, [r3, #0]
        goto exit;
 800163a:	e029      	b.n	8001690 <fifo_put+0x78>
    }

    /* Check if fifo is not full */
    if (fifo->total_size == fifo->cur_size) {
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	889a      	ldrh	r2, [r3, #4]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	88db      	ldrh	r3, [r3, #6]
 8001644:	429a      	cmp	r2, r3
 8001646:	d104      	bne.n	8001652 <fifo_put+0x3a>
        retval = 2;
 8001648:	230f      	movs	r3, #15
 800164a:	18fb      	adds	r3, r7, r3
 800164c:	2202      	movs	r2, #2
 800164e:	701a      	strb	r2, [r3, #0]
        goto exit;
 8001650:	e01e      	b.n	8001690 <fifo_put+0x78>
    }

    /* Enqueue the byte */
    fifo->buffer[fifo->in_index] = byte;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	687a      	ldr	r2, [r7, #4]
 8001658:	8912      	ldrh	r2, [r2, #8]
 800165a:	189b      	adds	r3, r3, r2
 800165c:	1cfa      	adds	r2, r7, #3
 800165e:	7812      	ldrb	r2, [r2, #0]
 8001660:	701a      	strb	r2, [r3, #0]
    /* Increase the input index */
    fifo->in_index += 1;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	891b      	ldrh	r3, [r3, #8]
 8001666:	3301      	adds	r3, #1
 8001668:	b29a      	uxth	r2, r3
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	811a      	strh	r2, [r3, #8]
    /* Increase the count of the bytes placed in the fifo */
    fifo->cur_size += 1;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	88db      	ldrh	r3, [r3, #6]
 8001672:	3301      	adds	r3, #1
 8001674:	b29a      	uxth	r2, r3
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	80da      	strh	r2, [r3, #6]

    /* Wrap around the buffer */
    if (fifo->in_index == fifo->total_size) {
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	891a      	ldrh	r2, [r3, #8]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	889b      	ldrh	r3, [r3, #4]
 8001682:	429a      	cmp	r2, r3
 8001684:	d103      	bne.n	800168e <fifo_put+0x76>
        fifo->in_index = 0;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2200      	movs	r2, #0
 800168a:	811a      	strh	r2, [r3, #8]
 800168c:	e000      	b.n	8001690 <fifo_put+0x78>
    }

exit:
 800168e:	46c0      	nop			; (mov r8, r8)
    return retval;
 8001690:	230f      	movs	r3, #15
 8001692:	18fb      	adds	r3, r7, r3
 8001694:	781b      	ldrb	r3, [r3, #0]
}
 8001696:	0018      	movs	r0, r3
 8001698:	46bd      	mov	sp, r7
 800169a:	b004      	add	sp, #16
 800169c:	bd80      	pop	{r7, pc}

0800169e <fifo_get>:

uint8_t fifo_get(fifo_t* fifo, uint8_t* byte)
{
 800169e:	b580      	push	{r7, lr}
 80016a0:	b084      	sub	sp, #16
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	6078      	str	r0, [r7, #4]
 80016a6:	6039      	str	r1, [r7, #0]
    uint8_t retval = 0;
 80016a8:	210f      	movs	r1, #15
 80016aa:	187b      	adds	r3, r7, r1
 80016ac:	2200      	movs	r2, #0
 80016ae:	701a      	strb	r2, [r3, #0]

    if (NULL == fifo) {
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d103      	bne.n	80016be <fifo_get+0x20>
        retval = 1;
 80016b6:	187b      	adds	r3, r7, r1
 80016b8:	2201      	movs	r2, #1
 80016ba:	701a      	strb	r2, [r3, #0]
        goto exit;
 80016bc:	e02f      	b.n	800171e <fifo_get+0x80>
    }

    if (NULL == byte) {
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d104      	bne.n	80016ce <fifo_get+0x30>
        retval = 2;
 80016c4:	230f      	movs	r3, #15
 80016c6:	18fb      	adds	r3, r7, r3
 80016c8:	2202      	movs	r2, #2
 80016ca:	701a      	strb	r2, [r3, #0]
        goto exit;
 80016cc:	e027      	b.n	800171e <fifo_get+0x80>
    }

    /* Check if fifo is not full */
    if (0 == fifo->cur_size) {
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	88db      	ldrh	r3, [r3, #6]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d104      	bne.n	80016e0 <fifo_get+0x42>
        retval = 3;
 80016d6:	230f      	movs	r3, #15
 80016d8:	18fb      	adds	r3, r7, r3
 80016da:	2203      	movs	r2, #3
 80016dc:	701a      	strb	r2, [r3, #0]
        goto exit;
 80016de:	e01e      	b.n	800171e <fifo_get+0x80>
    }

    /* Dequeue the byte */
    *byte = fifo->buffer[fifo->out_index];
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	687a      	ldr	r2, [r7, #4]
 80016e6:	8952      	ldrh	r2, [r2, #10]
 80016e8:	189b      	adds	r3, r3, r2
 80016ea:	781a      	ldrb	r2, [r3, #0]
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	701a      	strb	r2, [r3, #0]
    /* Increase the output index */
    fifo->out_index += 1;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	895b      	ldrh	r3, [r3, #10]
 80016f4:	3301      	adds	r3, #1
 80016f6:	b29a      	uxth	r2, r3
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	815a      	strh	r2, [r3, #10]
    /* Decrement the count of the bytes placed in the fifo */
    fifo->cur_size -= 1;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	88db      	ldrh	r3, [r3, #6]
 8001700:	3b01      	subs	r3, #1
 8001702:	b29a      	uxth	r2, r3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	80da      	strh	r2, [r3, #6]

    /* Wrap around the buffer */
    if (fifo->out_index ==fifo->total_size) {
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	895a      	ldrh	r2, [r3, #10]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	889b      	ldrh	r3, [r3, #4]
 8001710:	429a      	cmp	r2, r3
 8001712:	d103      	bne.n	800171c <fifo_get+0x7e>
        fifo->out_index = 0;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2200      	movs	r2, #0
 8001718:	815a      	strh	r2, [r3, #10]
 800171a:	e000      	b.n	800171e <fifo_get+0x80>
    }

exit:
 800171c:	46c0      	nop			; (mov r8, r8)
    return retval;
 800171e:	230f      	movs	r3, #15
 8001720:	18fb      	adds	r3, r7, r3
 8001722:	781b      	ldrb	r3, [r3, #0]
}
 8001724:	0018      	movs	r0, r3
 8001726:	46bd      	mov	sp, r7
 8001728:	b004      	add	sp, #16
 800172a:	bd80      	pop	{r7, pc}

0800172c <EXTI4_15_IRQHandler>:

void EXTI4_15_IRQHandler (void) {
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler(GNSS_3DFIX_Pin);
 8001730:	2020      	movs	r0, #32
 8001732:	f000 ffeb 	bl	800270c <HAL_GPIO_EXTI_IRQHandler>

}
 8001736:	46c0      	nop			; (mov r8, r8)
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}

0800173c <USART3_4_5_6_LPUART1_IRQHandler>:
void USART3_4_5_6_LPUART1_IRQHandler(void) {
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
    HAL_UART_IRQHandler(HUART_GNSS);
 8001740:	4b03      	ldr	r3, [pc, #12]	; (8001750 <USART3_4_5_6_LPUART1_IRQHandler+0x14>)
 8001742:	0018      	movs	r0, r3
 8001744:	f003 fdd2 	bl	80052ec <HAL_UART_IRQHandler>
}
 8001748:	46c0      	nop			; (mov r8, r8)
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	46c0      	nop			; (mov r8, r8)
 8001750:	20000280 	.word	0x20000280

08001754 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
    if (huart == HUART_GNSS) {
 800175c:	687a      	ldr	r2, [r7, #4]
 800175e:	4b0a      	ldr	r3, [pc, #40]	; (8001788 <HAL_UART_RxCpltCallback+0x34>)
 8001760:	429a      	cmp	r2, r3
 8001762:	d10c      	bne.n	800177e <HAL_UART_RxCpltCallback+0x2a>
        // Move the head of the circular buffer


    	fifo_put(&uart_fifo, gnss_rxd_byte);
 8001764:	4b09      	ldr	r3, [pc, #36]	; (800178c <HAL_UART_RxCpltCallback+0x38>)
 8001766:	781a      	ldrb	r2, [r3, #0]
 8001768:	4b09      	ldr	r3, [pc, #36]	; (8001790 <HAL_UART_RxCpltCallback+0x3c>)
 800176a:	0011      	movs	r1, r2
 800176c:	0018      	movs	r0, r3
 800176e:	f7ff ff53 	bl	8001618 <fifo_put>
//    	            // Buffer overflow, handle the overflow condition as needed
//    	            uart5_rx_index = 0;
//    	        }
        // Start a new reception

    	        HAL_UART_Receive_IT(&huart5, &gnss_rxd_byte, 1);
 8001772:	4906      	ldr	r1, [pc, #24]	; (800178c <HAL_UART_RxCpltCallback+0x38>)
 8001774:	4b04      	ldr	r3, [pc, #16]	; (8001788 <HAL_UART_RxCpltCallback+0x34>)
 8001776:	2201      	movs	r2, #1
 8001778:	0018      	movs	r0, r3
 800177a:	f003 fd51 	bl	8005220 <HAL_UART_Receive_IT>
//        if(HAL_UART_Transmit(HUART_DBG, &receivedData, 1, UART_TIMEOUT) != HAL_OK)
//        {
//        	while(1);
//        }
}
}
 800177e:	46c0      	nop			; (mov r8, r8)
 8001780:	46bd      	mov	sp, r7
 8001782:	b002      	add	sp, #8
 8001784:	bd80      	pop	{r7, pc}
 8001786:	46c0      	nop			; (mov r8, r8)
 8001788:	20000280 	.word	0x20000280
 800178c:	20001430 	.word	0x20001430
 8001790:	20001424 	.word	0x20001424

08001794 <HAL_GPIO_EXTI_Rising_Callback>:

void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	0002      	movs	r2, r0
 800179c:	1dbb      	adds	r3, r7, #6
 800179e:	801a      	strh	r2, [r3, #0]
	if(HAL_GPIO_ReadPin(GNSS_3DFIX_GPIO_Port, GNSS_3DFIX_Pin))
 80017a0:	4b0a      	ldr	r3, [pc, #40]	; (80017cc <HAL_GPIO_EXTI_Rising_Callback+0x38>)
 80017a2:	2120      	movs	r1, #32
 80017a4:	0018      	movs	r0, r3
 80017a6:	f000 ff77 	bl	8002698 <HAL_GPIO_ReadPin>
 80017aa:	1e03      	subs	r3, r0, #0
 80017ac:	d005      	beq.n	80017ba <HAL_GPIO_EXTI_Rising_Callback+0x26>
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 80017ae:	4b08      	ldr	r3, [pc, #32]	; (80017d0 <HAL_GPIO_EXTI_Rising_Callback+0x3c>)
 80017b0:	2201      	movs	r2, #1
 80017b2:	2101      	movs	r1, #1
 80017b4:	0018      	movs	r0, r3
 80017b6:	f000 ff8c 	bl	80026d2 <HAL_GPIO_WritePin>
	send_debug_logs ( "* EXTI5 INT: Succesful 3D position fix.\n" ) ;
 80017ba:	4b06      	ldr	r3, [pc, #24]	; (80017d4 <HAL_GPIO_EXTI_Rising_Callback+0x40>)
 80017bc:	0018      	movs	r0, r3
 80017be:	f7ff fd19 	bl	80011f4 <send_debug_logs>
}
 80017c2:	46c0      	nop			; (mov r8, r8)
 80017c4:	46bd      	mov	sp, r7
 80017c6:	b002      	add	sp, #8
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	46c0      	nop			; (mov r8, r8)
 80017cc:	50000400 	.word	0x50000400
 80017d0:	50000c00 	.word	0x50000c00
 80017d4:	08008f90 	.word	0x08008f90

080017d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017dc:	b672      	cpsid	i
}
 80017de:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017e0:	e7fe      	b.n	80017e0 <Error_Handler+0x8>
	...

080017e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017ea:	4b11      	ldr	r3, [pc, #68]	; (8001830 <HAL_MspInit+0x4c>)
 80017ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017ee:	4b10      	ldr	r3, [pc, #64]	; (8001830 <HAL_MspInit+0x4c>)
 80017f0:	2101      	movs	r1, #1
 80017f2:	430a      	orrs	r2, r1
 80017f4:	641a      	str	r2, [r3, #64]	; 0x40
 80017f6:	4b0e      	ldr	r3, [pc, #56]	; (8001830 <HAL_MspInit+0x4c>)
 80017f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fa:	2201      	movs	r2, #1
 80017fc:	4013      	ands	r3, r2
 80017fe:	607b      	str	r3, [r7, #4]
 8001800:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001802:	4b0b      	ldr	r3, [pc, #44]	; (8001830 <HAL_MspInit+0x4c>)
 8001804:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001806:	4b0a      	ldr	r3, [pc, #40]	; (8001830 <HAL_MspInit+0x4c>)
 8001808:	2180      	movs	r1, #128	; 0x80
 800180a:	0549      	lsls	r1, r1, #21
 800180c:	430a      	orrs	r2, r1
 800180e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001810:	4b07      	ldr	r3, [pc, #28]	; (8001830 <HAL_MspInit+0x4c>)
 8001812:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001814:	2380      	movs	r3, #128	; 0x80
 8001816:	055b      	lsls	r3, r3, #21
 8001818:	4013      	ands	r3, r2
 800181a:	603b      	str	r3, [r7, #0]
 800181c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 800181e:	23c0      	movs	r3, #192	; 0xc0
 8001820:	00db      	lsls	r3, r3, #3
 8001822:	0018      	movs	r0, r3
 8001824:	f000 fb22 	bl	8001e6c <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001828:	46c0      	nop			; (mov r8, r8)
 800182a:	46bd      	mov	sp, r7
 800182c:	b002      	add	sp, #8
 800182e:	bd80      	pop	{r7, pc}
 8001830:	40021000 	.word	0x40021000

08001834 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001834:	b590      	push	{r4, r7, lr}
 8001836:	b097      	sub	sp, #92	; 0x5c
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800183c:	240c      	movs	r4, #12
 800183e:	193b      	adds	r3, r7, r4
 8001840:	0018      	movs	r0, r3
 8001842:	234c      	movs	r3, #76	; 0x4c
 8001844:	001a      	movs	r2, r3
 8001846:	2100      	movs	r1, #0
 8001848:	f006 fd16 	bl	8008278 <memset>
  if(hrtc->Instance==RTC)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a15      	ldr	r2, [pc, #84]	; (80018a8 <HAL_RTC_MspInit+0x74>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d124      	bne.n	80018a0 <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001856:	193b      	adds	r3, r7, r4
 8001858:	2280      	movs	r2, #128	; 0x80
 800185a:	0292      	lsls	r2, r2, #10
 800185c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800185e:	193b      	adds	r3, r7, r4
 8001860:	2280      	movs	r2, #128	; 0x80
 8001862:	0092      	lsls	r2, r2, #2
 8001864:	641a      	str	r2, [r3, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001866:	193b      	adds	r3, r7, r4
 8001868:	0018      	movs	r0, r3
 800186a:	f001 fcd9 	bl	8003220 <HAL_RCCEx_PeriphCLKConfig>
 800186e:	1e03      	subs	r3, r0, #0
 8001870:	d001      	beq.n	8001876 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001872:	f7ff ffb1 	bl	80017d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001876:	4b0d      	ldr	r3, [pc, #52]	; (80018ac <HAL_RTC_MspInit+0x78>)
 8001878:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800187a:	4b0c      	ldr	r3, [pc, #48]	; (80018ac <HAL_RTC_MspInit+0x78>)
 800187c:	2180      	movs	r1, #128	; 0x80
 800187e:	0209      	lsls	r1, r1, #8
 8001880:	430a      	orrs	r2, r1
 8001882:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001884:	4b09      	ldr	r3, [pc, #36]	; (80018ac <HAL_RTC_MspInit+0x78>)
 8001886:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001888:	4b08      	ldr	r3, [pc, #32]	; (80018ac <HAL_RTC_MspInit+0x78>)
 800188a:	2180      	movs	r1, #128	; 0x80
 800188c:	00c9      	lsls	r1, r1, #3
 800188e:	430a      	orrs	r2, r1
 8001890:	63da      	str	r2, [r3, #60]	; 0x3c
 8001892:	4b06      	ldr	r3, [pc, #24]	; (80018ac <HAL_RTC_MspInit+0x78>)
 8001894:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001896:	2380      	movs	r3, #128	; 0x80
 8001898:	00db      	lsls	r3, r3, #3
 800189a:	4013      	ands	r3, r2
 800189c:	60bb      	str	r3, [r7, #8]
 800189e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80018a0:	46c0      	nop			; (mov r8, r8)
 80018a2:	46bd      	mov	sp, r7
 80018a4:	b017      	add	sp, #92	; 0x5c
 80018a6:	bd90      	pop	{r4, r7, pc}
 80018a8:	40002800 	.word	0x40002800
 80018ac:	40021000 	.word	0x40021000

080018b0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80018b0:	b590      	push	{r4, r7, lr}
 80018b2:	b08b      	sub	sp, #44	; 0x2c
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b8:	2414      	movs	r4, #20
 80018ba:	193b      	adds	r3, r7, r4
 80018bc:	0018      	movs	r0, r3
 80018be:	2314      	movs	r3, #20
 80018c0:	001a      	movs	r2, r3
 80018c2:	2100      	movs	r1, #0
 80018c4:	f006 fcd8 	bl	8008278 <memset>
  if(hspi->Instance==SPI1)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a1b      	ldr	r2, [pc, #108]	; (800193c <HAL_SPI_MspInit+0x8c>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d130      	bne.n	8001934 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80018d2:	4b1b      	ldr	r3, [pc, #108]	; (8001940 <HAL_SPI_MspInit+0x90>)
 80018d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018d6:	4b1a      	ldr	r3, [pc, #104]	; (8001940 <HAL_SPI_MspInit+0x90>)
 80018d8:	2180      	movs	r1, #128	; 0x80
 80018da:	0149      	lsls	r1, r1, #5
 80018dc:	430a      	orrs	r2, r1
 80018de:	641a      	str	r2, [r3, #64]	; 0x40
 80018e0:	4b17      	ldr	r3, [pc, #92]	; (8001940 <HAL_SPI_MspInit+0x90>)
 80018e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018e4:	2380      	movs	r3, #128	; 0x80
 80018e6:	015b      	lsls	r3, r3, #5
 80018e8:	4013      	ands	r3, r2
 80018ea:	613b      	str	r3, [r7, #16]
 80018ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ee:	4b14      	ldr	r3, [pc, #80]	; (8001940 <HAL_SPI_MspInit+0x90>)
 80018f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018f2:	4b13      	ldr	r3, [pc, #76]	; (8001940 <HAL_SPI_MspInit+0x90>)
 80018f4:	2101      	movs	r1, #1
 80018f6:	430a      	orrs	r2, r1
 80018f8:	635a      	str	r2, [r3, #52]	; 0x34
 80018fa:	4b11      	ldr	r3, [pc, #68]	; (8001940 <HAL_SPI_MspInit+0x90>)
 80018fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018fe:	2201      	movs	r2, #1
 8001900:	4013      	ands	r3, r2
 8001902:	60fb      	str	r3, [r7, #12]
 8001904:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ACC_SCK_Pin|ACC_MISO_Pin|ACC_MOSI_Pin;
 8001906:	0021      	movs	r1, r4
 8001908:	187b      	adds	r3, r7, r1
 800190a:	22e0      	movs	r2, #224	; 0xe0
 800190c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800190e:	187b      	adds	r3, r7, r1
 8001910:	2202      	movs	r2, #2
 8001912:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001914:	187b      	adds	r3, r7, r1
 8001916:	2200      	movs	r2, #0
 8001918:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800191a:	187b      	adds	r3, r7, r1
 800191c:	2200      	movs	r2, #0
 800191e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001920:	187b      	adds	r3, r7, r1
 8001922:	2200      	movs	r2, #0
 8001924:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001926:	187a      	adds	r2, r7, r1
 8001928:	23a0      	movs	r3, #160	; 0xa0
 800192a:	05db      	lsls	r3, r3, #23
 800192c:	0011      	movs	r1, r2
 800192e:	0018      	movs	r0, r3
 8001930:	f000 fc6e 	bl	8002210 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001934:	46c0      	nop			; (mov r8, r8)
 8001936:	46bd      	mov	sp, r7
 8001938:	b00b      	add	sp, #44	; 0x2c
 800193a:	bd90      	pop	{r4, r7, pc}
 800193c:	40013000 	.word	0x40013000
 8001940:	40021000 	.word	0x40021000

08001944 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b084      	sub	sp, #16
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a0d      	ldr	r2, [pc, #52]	; (8001988 <HAL_TIM_Base_MspInit+0x44>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d113      	bne.n	800197e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001956:	4b0d      	ldr	r3, [pc, #52]	; (800198c <HAL_TIM_Base_MspInit+0x48>)
 8001958:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800195a:	4b0c      	ldr	r3, [pc, #48]	; (800198c <HAL_TIM_Base_MspInit+0x48>)
 800195c:	2110      	movs	r1, #16
 800195e:	430a      	orrs	r2, r1
 8001960:	63da      	str	r2, [r3, #60]	; 0x3c
 8001962:	4b0a      	ldr	r3, [pc, #40]	; (800198c <HAL_TIM_Base_MspInit+0x48>)
 8001964:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001966:	2210      	movs	r2, #16
 8001968:	4013      	ands	r3, r2
 800196a:	60fb      	str	r3, [r7, #12]
 800196c:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, 1, 0);
 800196e:	2200      	movs	r2, #0
 8001970:	2101      	movs	r1, #1
 8001972:	2011      	movs	r0, #17
 8001974:	f000 fb4e 	bl	8002014 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_LPTIM1_IRQn);
 8001978:	2011      	movs	r0, #17
 800197a:	f000 fb60 	bl	800203e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800197e:	46c0      	nop			; (mov r8, r8)
 8001980:	46bd      	mov	sp, r7
 8001982:	b004      	add	sp, #16
 8001984:	bd80      	pop	{r7, pc}
 8001986:	46c0      	nop			; (mov r8, r8)
 8001988:	40001000 	.word	0x40001000
 800198c:	40021000 	.word	0x40021000

08001990 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001990:	b590      	push	{r4, r7, lr}
 8001992:	b0a1      	sub	sp, #132	; 0x84
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001998:	236c      	movs	r3, #108	; 0x6c
 800199a:	18fb      	adds	r3, r7, r3
 800199c:	0018      	movs	r0, r3
 800199e:	2314      	movs	r3, #20
 80019a0:	001a      	movs	r2, r3
 80019a2:	2100      	movs	r1, #0
 80019a4:	f006 fc68 	bl	8008278 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019a8:	2420      	movs	r4, #32
 80019aa:	193b      	adds	r3, r7, r4
 80019ac:	0018      	movs	r0, r3
 80019ae:	234c      	movs	r3, #76	; 0x4c
 80019b0:	001a      	movs	r2, r3
 80019b2:	2100      	movs	r1, #0
 80019b4:	f006 fc60 	bl	8008278 <memset>
  if(huart->Instance==USART2)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a60      	ldr	r2, [pc, #384]	; (8001b40 <HAL_UART_MspInit+0x1b0>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d13f      	bne.n	8001a42 <HAL_UART_MspInit+0xb2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80019c2:	193b      	adds	r3, r7, r4
 80019c4:	2202      	movs	r2, #2
 80019c6:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80019c8:	193b      	adds	r3, r7, r4
 80019ca:	2200      	movs	r2, #0
 80019cc:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019ce:	193b      	adds	r3, r7, r4
 80019d0:	0018      	movs	r0, r3
 80019d2:	f001 fc25 	bl	8003220 <HAL_RCCEx_PeriphCLKConfig>
 80019d6:	1e03      	subs	r3, r0, #0
 80019d8:	d001      	beq.n	80019de <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80019da:	f7ff fefd 	bl	80017d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80019de:	4b59      	ldr	r3, [pc, #356]	; (8001b44 <HAL_UART_MspInit+0x1b4>)
 80019e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80019e2:	4b58      	ldr	r3, [pc, #352]	; (8001b44 <HAL_UART_MspInit+0x1b4>)
 80019e4:	2180      	movs	r1, #128	; 0x80
 80019e6:	0289      	lsls	r1, r1, #10
 80019e8:	430a      	orrs	r2, r1
 80019ea:	63da      	str	r2, [r3, #60]	; 0x3c
 80019ec:	4b55      	ldr	r3, [pc, #340]	; (8001b44 <HAL_UART_MspInit+0x1b4>)
 80019ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80019f0:	2380      	movs	r3, #128	; 0x80
 80019f2:	029b      	lsls	r3, r3, #10
 80019f4:	4013      	ands	r3, r2
 80019f6:	61fb      	str	r3, [r7, #28]
 80019f8:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019fa:	4b52      	ldr	r3, [pc, #328]	; (8001b44 <HAL_UART_MspInit+0x1b4>)
 80019fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019fe:	4b51      	ldr	r3, [pc, #324]	; (8001b44 <HAL_UART_MspInit+0x1b4>)
 8001a00:	2101      	movs	r1, #1
 8001a02:	430a      	orrs	r2, r1
 8001a04:	635a      	str	r2, [r3, #52]	; 0x34
 8001a06:	4b4f      	ldr	r3, [pc, #316]	; (8001b44 <HAL_UART_MspInit+0x1b4>)
 8001a08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	61bb      	str	r3, [r7, #24]
 8001a10:	69bb      	ldr	r3, [r7, #24]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = DBG_TX_Pin|DBG_RX_Pin;
 8001a12:	216c      	movs	r1, #108	; 0x6c
 8001a14:	187b      	adds	r3, r7, r1
 8001a16:	220c      	movs	r2, #12
 8001a18:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a1a:	187b      	adds	r3, r7, r1
 8001a1c:	2202      	movs	r2, #2
 8001a1e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a20:	187b      	adds	r3, r7, r1
 8001a22:	2200      	movs	r2, #0
 8001a24:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a26:	187b      	adds	r3, r7, r1
 8001a28:	2200      	movs	r2, #0
 8001a2a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001a2c:	187b      	adds	r3, r7, r1
 8001a2e:	2201      	movs	r2, #1
 8001a30:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a32:	187a      	adds	r2, r7, r1
 8001a34:	23a0      	movs	r3, #160	; 0xa0
 8001a36:	05db      	lsls	r3, r3, #23
 8001a38:	0011      	movs	r1, r2
 8001a3a:	0018      	movs	r0, r3
 8001a3c:	f000 fbe8 	bl	8002210 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART5_MspInit 1 */

  /* USER CODE END USART5_MspInit 1 */
  }

}
 8001a40:	e07a      	b.n	8001b38 <HAL_UART_MspInit+0x1a8>
  else if(huart->Instance==USART3)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a40      	ldr	r2, [pc, #256]	; (8001b48 <HAL_UART_MspInit+0x1b8>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d140      	bne.n	8001ace <HAL_UART_MspInit+0x13e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001a4c:	2120      	movs	r1, #32
 8001a4e:	187b      	adds	r3, r7, r1
 8001a50:	2204      	movs	r2, #4
 8001a52:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001a54:	187b      	adds	r3, r7, r1
 8001a56:	2200      	movs	r2, #0
 8001a58:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a5a:	187b      	adds	r3, r7, r1
 8001a5c:	0018      	movs	r0, r3
 8001a5e:	f001 fbdf 	bl	8003220 <HAL_RCCEx_PeriphCLKConfig>
 8001a62:	1e03      	subs	r3, r0, #0
 8001a64:	d001      	beq.n	8001a6a <HAL_UART_MspInit+0xda>
      Error_Handler();
 8001a66:	f7ff feb7 	bl	80017d8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001a6a:	4b36      	ldr	r3, [pc, #216]	; (8001b44 <HAL_UART_MspInit+0x1b4>)
 8001a6c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a6e:	4b35      	ldr	r3, [pc, #212]	; (8001b44 <HAL_UART_MspInit+0x1b4>)
 8001a70:	2180      	movs	r1, #128	; 0x80
 8001a72:	02c9      	lsls	r1, r1, #11
 8001a74:	430a      	orrs	r2, r1
 8001a76:	63da      	str	r2, [r3, #60]	; 0x3c
 8001a78:	4b32      	ldr	r3, [pc, #200]	; (8001b44 <HAL_UART_MspInit+0x1b4>)
 8001a7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a7c:	2380      	movs	r3, #128	; 0x80
 8001a7e:	02db      	lsls	r3, r3, #11
 8001a80:	4013      	ands	r3, r2
 8001a82:	617b      	str	r3, [r7, #20]
 8001a84:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a86:	4b2f      	ldr	r3, [pc, #188]	; (8001b44 <HAL_UART_MspInit+0x1b4>)
 8001a88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a8a:	4b2e      	ldr	r3, [pc, #184]	; (8001b44 <HAL_UART_MspInit+0x1b4>)
 8001a8c:	2102      	movs	r1, #2
 8001a8e:	430a      	orrs	r2, r1
 8001a90:	635a      	str	r2, [r3, #52]	; 0x34
 8001a92:	4b2c      	ldr	r3, [pc, #176]	; (8001b44 <HAL_UART_MspInit+0x1b4>)
 8001a94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a96:	2202      	movs	r2, #2
 8001a98:	4013      	ands	r3, r2
 8001a9a:	613b      	str	r3, [r7, #16]
 8001a9c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ASTRO_TX_Pin|ASTRO_RX_Pin;
 8001a9e:	216c      	movs	r1, #108	; 0x6c
 8001aa0:	187b      	adds	r3, r7, r1
 8001aa2:	22c0      	movs	r2, #192	; 0xc0
 8001aa4:	0092      	lsls	r2, r2, #2
 8001aa6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa8:	187b      	adds	r3, r7, r1
 8001aaa:	2202      	movs	r2, #2
 8001aac:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aae:	187b      	adds	r3, r7, r1
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab4:	187b      	adds	r3, r7, r1
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8001aba:	187b      	adds	r3, r7, r1
 8001abc:	2204      	movs	r2, #4
 8001abe:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ac0:	187b      	adds	r3, r7, r1
 8001ac2:	4a22      	ldr	r2, [pc, #136]	; (8001b4c <HAL_UART_MspInit+0x1bc>)
 8001ac4:	0019      	movs	r1, r3
 8001ac6:	0010      	movs	r0, r2
 8001ac8:	f000 fba2 	bl	8002210 <HAL_GPIO_Init>
}
 8001acc:	e034      	b.n	8001b38 <HAL_UART_MspInit+0x1a8>
  else if(huart->Instance==USART5)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a1f      	ldr	r2, [pc, #124]	; (8001b50 <HAL_UART_MspInit+0x1c0>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d12f      	bne.n	8001b38 <HAL_UART_MspInit+0x1a8>
    __HAL_RCC_USART5_CLK_ENABLE();
 8001ad8:	4b1a      	ldr	r3, [pc, #104]	; (8001b44 <HAL_UART_MspInit+0x1b4>)
 8001ada:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001adc:	4b19      	ldr	r3, [pc, #100]	; (8001b44 <HAL_UART_MspInit+0x1b4>)
 8001ade:	2180      	movs	r1, #128	; 0x80
 8001ae0:	0049      	lsls	r1, r1, #1
 8001ae2:	430a      	orrs	r2, r1
 8001ae4:	63da      	str	r2, [r3, #60]	; 0x3c
 8001ae6:	4b17      	ldr	r3, [pc, #92]	; (8001b44 <HAL_UART_MspInit+0x1b4>)
 8001ae8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001aea:	2380      	movs	r3, #128	; 0x80
 8001aec:	005b      	lsls	r3, r3, #1
 8001aee:	4013      	ands	r3, r2
 8001af0:	60fb      	str	r3, [r7, #12]
 8001af2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001af4:	4b13      	ldr	r3, [pc, #76]	; (8001b44 <HAL_UART_MspInit+0x1b4>)
 8001af6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001af8:	4b12      	ldr	r3, [pc, #72]	; (8001b44 <HAL_UART_MspInit+0x1b4>)
 8001afa:	2102      	movs	r1, #2
 8001afc:	430a      	orrs	r2, r1
 8001afe:	635a      	str	r2, [r3, #52]	; 0x34
 8001b00:	4b10      	ldr	r3, [pc, #64]	; (8001b44 <HAL_UART_MspInit+0x1b4>)
 8001b02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b04:	2202      	movs	r2, #2
 8001b06:	4013      	ands	r3, r2
 8001b08:	60bb      	str	r3, [r7, #8]
 8001b0a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GNSS_TX_Pin|GNSS_RX_Pin;
 8001b0c:	216c      	movs	r1, #108	; 0x6c
 8001b0e:	187b      	adds	r3, r7, r1
 8001b10:	2218      	movs	r2, #24
 8001b12:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b14:	187b      	adds	r3, r7, r1
 8001b16:	2202      	movs	r2, #2
 8001b18:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1a:	187b      	adds	r3, r7, r1
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b20:	187b      	adds	r3, r7, r1
 8001b22:	2200      	movs	r2, #0
 8001b24:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART5;
 8001b26:	187b      	adds	r3, r7, r1
 8001b28:	2203      	movs	r2, #3
 8001b2a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b2c:	187b      	adds	r3, r7, r1
 8001b2e:	4a07      	ldr	r2, [pc, #28]	; (8001b4c <HAL_UART_MspInit+0x1bc>)
 8001b30:	0019      	movs	r1, r3
 8001b32:	0010      	movs	r0, r2
 8001b34:	f000 fb6c 	bl	8002210 <HAL_GPIO_Init>
}
 8001b38:	46c0      	nop			; (mov r8, r8)
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	b021      	add	sp, #132	; 0x84
 8001b3e:	bd90      	pop	{r4, r7, pc}
 8001b40:	40004400 	.word	0x40004400
 8001b44:	40021000 	.word	0x40021000
 8001b48:	40004800 	.word	0x40004800
 8001b4c:	50000400 	.word	0x50000400
 8001b50:	40005000 	.word	0x40005000

08001b54 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART2)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a1b      	ldr	r2, [pc, #108]	; (8001bd0 <HAL_UART_MspDeInit+0x7c>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d10c      	bne.n	8001b80 <HAL_UART_MspDeInit+0x2c>
  {
  /* USER CODE BEGIN USART2_MspDeInit 0 */

  /* USER CODE END USART2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART2_CLK_DISABLE();
 8001b66:	4b1b      	ldr	r3, [pc, #108]	; (8001bd4 <HAL_UART_MspDeInit+0x80>)
 8001b68:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b6a:	4b1a      	ldr	r3, [pc, #104]	; (8001bd4 <HAL_UART_MspDeInit+0x80>)
 8001b6c:	491a      	ldr	r1, [pc, #104]	; (8001bd8 <HAL_UART_MspDeInit+0x84>)
 8001b6e:	400a      	ands	r2, r1
 8001b70:	63da      	str	r2, [r3, #60]	; 0x3c

    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    HAL_GPIO_DeInit(GPIOA, DBG_TX_Pin|DBG_RX_Pin);
 8001b72:	23a0      	movs	r3, #160	; 0xa0
 8001b74:	05db      	lsls	r3, r3, #23
 8001b76:	210c      	movs	r1, #12
 8001b78:	0018      	movs	r0, r3
 8001b7a:	f000 fcb5 	bl	80024e8 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN USART5_MspDeInit 1 */

  /* USER CODE END USART5_MspDeInit 1 */
  }

}
 8001b7e:	e022      	b.n	8001bc6 <HAL_UART_MspDeInit+0x72>
  else if(huart->Instance==USART3)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a15      	ldr	r2, [pc, #84]	; (8001bdc <HAL_UART_MspDeInit+0x88>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d10d      	bne.n	8001ba6 <HAL_UART_MspDeInit+0x52>
    __HAL_RCC_USART3_CLK_DISABLE();
 8001b8a:	4b12      	ldr	r3, [pc, #72]	; (8001bd4 <HAL_UART_MspDeInit+0x80>)
 8001b8c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b8e:	4b11      	ldr	r3, [pc, #68]	; (8001bd4 <HAL_UART_MspDeInit+0x80>)
 8001b90:	4913      	ldr	r1, [pc, #76]	; (8001be0 <HAL_UART_MspDeInit+0x8c>)
 8001b92:	400a      	ands	r2, r1
 8001b94:	63da      	str	r2, [r3, #60]	; 0x3c
    HAL_GPIO_DeInit(GPIOB, ASTRO_TX_Pin|ASTRO_RX_Pin);
 8001b96:	23c0      	movs	r3, #192	; 0xc0
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	4a12      	ldr	r2, [pc, #72]	; (8001be4 <HAL_UART_MspDeInit+0x90>)
 8001b9c:	0019      	movs	r1, r3
 8001b9e:	0010      	movs	r0, r2
 8001ba0:	f000 fca2 	bl	80024e8 <HAL_GPIO_DeInit>
}
 8001ba4:	e00f      	b.n	8001bc6 <HAL_UART_MspDeInit+0x72>
  else if(huart->Instance==USART5)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a0f      	ldr	r2, [pc, #60]	; (8001be8 <HAL_UART_MspDeInit+0x94>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d10a      	bne.n	8001bc6 <HAL_UART_MspDeInit+0x72>
    __HAL_RCC_USART5_CLK_DISABLE();
 8001bb0:	4b08      	ldr	r3, [pc, #32]	; (8001bd4 <HAL_UART_MspDeInit+0x80>)
 8001bb2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001bb4:	4b07      	ldr	r3, [pc, #28]	; (8001bd4 <HAL_UART_MspDeInit+0x80>)
 8001bb6:	490d      	ldr	r1, [pc, #52]	; (8001bec <HAL_UART_MspDeInit+0x98>)
 8001bb8:	400a      	ands	r2, r1
 8001bba:	63da      	str	r2, [r3, #60]	; 0x3c
    HAL_GPIO_DeInit(GPIOB, GNSS_TX_Pin|GNSS_RX_Pin);
 8001bbc:	4b09      	ldr	r3, [pc, #36]	; (8001be4 <HAL_UART_MspDeInit+0x90>)
 8001bbe:	2118      	movs	r1, #24
 8001bc0:	0018      	movs	r0, r3
 8001bc2:	f000 fc91 	bl	80024e8 <HAL_GPIO_DeInit>
}
 8001bc6:	46c0      	nop			; (mov r8, r8)
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	b002      	add	sp, #8
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	46c0      	nop			; (mov r8, r8)
 8001bd0:	40004400 	.word	0x40004400
 8001bd4:	40021000 	.word	0x40021000
 8001bd8:	fffdffff 	.word	0xfffdffff
 8001bdc:	40004800 	.word	0x40004800
 8001be0:	fffbffff 	.word	0xfffbffff
 8001be4:	50000400 	.word	0x50000400
 8001be8:	40005000 	.word	0x40005000
 8001bec:	fffffeff 	.word	0xfffffeff

08001bf0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001bf4:	e7fe      	b.n	8001bf4 <NMI_Handler+0x4>

08001bf6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bf6:	b580      	push	{r7, lr}
 8001bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bfa:	e7fe      	b.n	8001bfa <HardFault_Handler+0x4>

08001bfc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001c00:	46c0      	nop			; (mov r8, r8)
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}

08001c06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c06:	b580      	push	{r7, lr}
 8001c08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c0a:	46c0      	nop			; (mov r8, r8)
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}

08001c10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c14:	f000 f8ea 	bl	8001dec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c18:	46c0      	nop			; (mov r8, r8)
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}

08001c1e <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8001c1e:	b580      	push	{r7, lr}
 8001c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ACC_INT1_Pin);
 8001c22:	2001      	movs	r0, #1
 8001c24:	f000 fd72 	bl	800270c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ACC_INT2_Pin);
 8001c28:	2002      	movs	r0, #2
 8001c2a:	f000 fd6f 	bl	800270c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8001c2e:	46c0      	nop			; (mov r8, r8)
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}

08001c34 <TIM6_DAC_LPTIM1_IRQHandler>:

/**
  * @brief This function handles TIM6, DAC and LPTIM1 global Interrupts.
  */
void TIM6_DAC_LPTIM1_IRQHandler(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 0 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001c38:	4b03      	ldr	r3, [pc, #12]	; (8001c48 <TIM6_DAC_LPTIM1_IRQHandler+0x14>)
 8001c3a:	0018      	movs	r0, r3
 8001c3c:	f002 fe82 	bl	8004944 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 1 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 1 */
}
 8001c40:	46c0      	nop			; (mov r8, r8)
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	46c0      	nop			; (mov r8, r8)
 8001c48:	2000010c 	.word	0x2000010c

08001c4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b086      	sub	sp, #24
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c54:	4a14      	ldr	r2, [pc, #80]	; (8001ca8 <_sbrk+0x5c>)
 8001c56:	4b15      	ldr	r3, [pc, #84]	; (8001cac <_sbrk+0x60>)
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c60:	4b13      	ldr	r3, [pc, #76]	; (8001cb0 <_sbrk+0x64>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d102      	bne.n	8001c6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c68:	4b11      	ldr	r3, [pc, #68]	; (8001cb0 <_sbrk+0x64>)
 8001c6a:	4a12      	ldr	r2, [pc, #72]	; (8001cb4 <_sbrk+0x68>)
 8001c6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c6e:	4b10      	ldr	r3, [pc, #64]	; (8001cb0 <_sbrk+0x64>)
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	18d3      	adds	r3, r2, r3
 8001c76:	693a      	ldr	r2, [r7, #16]
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d207      	bcs.n	8001c8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c7c:	f006 fb16 	bl	80082ac <__errno>
 8001c80:	0003      	movs	r3, r0
 8001c82:	220c      	movs	r2, #12
 8001c84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c86:	2301      	movs	r3, #1
 8001c88:	425b      	negs	r3, r3
 8001c8a:	e009      	b.n	8001ca0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c8c:	4b08      	ldr	r3, [pc, #32]	; (8001cb0 <_sbrk+0x64>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c92:	4b07      	ldr	r3, [pc, #28]	; (8001cb0 <_sbrk+0x64>)
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	18d2      	adds	r2, r2, r3
 8001c9a:	4b05      	ldr	r3, [pc, #20]	; (8001cb0 <_sbrk+0x64>)
 8001c9c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
}
 8001ca0:	0018      	movs	r0, r3
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	b006      	add	sp, #24
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	20024000 	.word	0x20024000
 8001cac:	00000400 	.word	0x00000400
 8001cb0:	20001434 	.word	0x20001434
 8001cb4:	20001588 	.word	0x20001588

08001cb8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cbc:	46c0      	nop			; (mov r8, r8)
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
	...

08001cc4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001cc4:	480d      	ldr	r0, [pc, #52]	; (8001cfc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001cc6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001cc8:	f7ff fff6 	bl	8001cb8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ccc:	480c      	ldr	r0, [pc, #48]	; (8001d00 <LoopForever+0x6>)
  ldr r1, =_edata
 8001cce:	490d      	ldr	r1, [pc, #52]	; (8001d04 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001cd0:	4a0d      	ldr	r2, [pc, #52]	; (8001d08 <LoopForever+0xe>)
  movs r3, #0
 8001cd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cd4:	e002      	b.n	8001cdc <LoopCopyDataInit>

08001cd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cda:	3304      	adds	r3, #4

08001cdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ce0:	d3f9      	bcc.n	8001cd6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ce2:	4a0a      	ldr	r2, [pc, #40]	; (8001d0c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ce4:	4c0a      	ldr	r4, [pc, #40]	; (8001d10 <LoopForever+0x16>)
  movs r3, #0
 8001ce6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ce8:	e001      	b.n	8001cee <LoopFillZerobss>

08001cea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cec:	3204      	adds	r2, #4

08001cee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cf0:	d3fb      	bcc.n	8001cea <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001cf2:	f006 fae1 	bl	80082b8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001cf6:	f7fe fca3 	bl	8000640 <main>

08001cfa <LoopForever>:

LoopForever:
  b LoopForever
 8001cfa:	e7fe      	b.n	8001cfa <LoopForever>
  ldr   r0, =_estack
 8001cfc:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8001d00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d04:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001d08:	0800a744 	.word	0x0800a744
  ldr r2, =_sbss
 8001d0c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001d10:	20001584 	.word	0x20001584

08001d14 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d14:	e7fe      	b.n	8001d14 <ADC1_COMP_IRQHandler>
	...

08001d18 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d1e:	1dfb      	adds	r3, r7, #7
 8001d20:	2200      	movs	r2, #0
 8001d22:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d24:	4b0b      	ldr	r3, [pc, #44]	; (8001d54 <HAL_Init+0x3c>)
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	4b0a      	ldr	r3, [pc, #40]	; (8001d54 <HAL_Init+0x3c>)
 8001d2a:	2180      	movs	r1, #128	; 0x80
 8001d2c:	0049      	lsls	r1, r1, #1
 8001d2e:	430a      	orrs	r2, r1
 8001d30:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d32:	2000      	movs	r0, #0
 8001d34:	f000 f810 	bl	8001d58 <HAL_InitTick>
 8001d38:	1e03      	subs	r3, r0, #0
 8001d3a:	d003      	beq.n	8001d44 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001d3c:	1dfb      	adds	r3, r7, #7
 8001d3e:	2201      	movs	r2, #1
 8001d40:	701a      	strb	r2, [r3, #0]
 8001d42:	e001      	b.n	8001d48 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001d44:	f7ff fd4e 	bl	80017e4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d48:	1dfb      	adds	r3, r7, #7
 8001d4a:	781b      	ldrb	r3, [r3, #0]
}
 8001d4c:	0018      	movs	r0, r3
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	b002      	add	sp, #8
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	40022000 	.word	0x40022000

08001d58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d58:	b590      	push	{r4, r7, lr}
 8001d5a:	b085      	sub	sp, #20
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001d60:	230f      	movs	r3, #15
 8001d62:	18fb      	adds	r3, r7, r3
 8001d64:	2200      	movs	r2, #0
 8001d66:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001d68:	4b1d      	ldr	r3, [pc, #116]	; (8001de0 <HAL_InitTick+0x88>)
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d02b      	beq.n	8001dc8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001d70:	4b1c      	ldr	r3, [pc, #112]	; (8001de4 <HAL_InitTick+0x8c>)
 8001d72:	681c      	ldr	r4, [r3, #0]
 8001d74:	4b1a      	ldr	r3, [pc, #104]	; (8001de0 <HAL_InitTick+0x88>)
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	0019      	movs	r1, r3
 8001d7a:	23fa      	movs	r3, #250	; 0xfa
 8001d7c:	0098      	lsls	r0, r3, #2
 8001d7e:	f7fe f9d3 	bl	8000128 <__udivsi3>
 8001d82:	0003      	movs	r3, r0
 8001d84:	0019      	movs	r1, r3
 8001d86:	0020      	movs	r0, r4
 8001d88:	f7fe f9ce 	bl	8000128 <__udivsi3>
 8001d8c:	0003      	movs	r3, r0
 8001d8e:	0018      	movs	r0, r3
 8001d90:	f000 f969 	bl	8002066 <HAL_SYSTICK_Config>
 8001d94:	1e03      	subs	r3, r0, #0
 8001d96:	d112      	bne.n	8001dbe <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2b03      	cmp	r3, #3
 8001d9c:	d80a      	bhi.n	8001db4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d9e:	6879      	ldr	r1, [r7, #4]
 8001da0:	2301      	movs	r3, #1
 8001da2:	425b      	negs	r3, r3
 8001da4:	2200      	movs	r2, #0
 8001da6:	0018      	movs	r0, r3
 8001da8:	f000 f934 	bl	8002014 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001dac:	4b0e      	ldr	r3, [pc, #56]	; (8001de8 <HAL_InitTick+0x90>)
 8001dae:	687a      	ldr	r2, [r7, #4]
 8001db0:	601a      	str	r2, [r3, #0]
 8001db2:	e00d      	b.n	8001dd0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001db4:	230f      	movs	r3, #15
 8001db6:	18fb      	adds	r3, r7, r3
 8001db8:	2201      	movs	r2, #1
 8001dba:	701a      	strb	r2, [r3, #0]
 8001dbc:	e008      	b.n	8001dd0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001dbe:	230f      	movs	r3, #15
 8001dc0:	18fb      	adds	r3, r7, r3
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	701a      	strb	r2, [r3, #0]
 8001dc6:	e003      	b.n	8001dd0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001dc8:	230f      	movs	r3, #15
 8001dca:	18fb      	adds	r3, r7, r3
 8001dcc:	2201      	movs	r2, #1
 8001dce:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001dd0:	230f      	movs	r3, #15
 8001dd2:	18fb      	adds	r3, r7, r3
 8001dd4:	781b      	ldrb	r3, [r3, #0]
}
 8001dd6:	0018      	movs	r0, r3
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	b005      	add	sp, #20
 8001ddc:	bd90      	pop	{r4, r7, pc}
 8001dde:	46c0      	nop			; (mov r8, r8)
 8001de0:	2000000c 	.word	0x2000000c
 8001de4:	20000004 	.word	0x20000004
 8001de8:	20000008 	.word	0x20000008

08001dec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001df0:	4b05      	ldr	r3, [pc, #20]	; (8001e08 <HAL_IncTick+0x1c>)
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	001a      	movs	r2, r3
 8001df6:	4b05      	ldr	r3, [pc, #20]	; (8001e0c <HAL_IncTick+0x20>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	18d2      	adds	r2, r2, r3
 8001dfc:	4b03      	ldr	r3, [pc, #12]	; (8001e0c <HAL_IncTick+0x20>)
 8001dfe:	601a      	str	r2, [r3, #0]
}
 8001e00:	46c0      	nop			; (mov r8, r8)
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	46c0      	nop			; (mov r8, r8)
 8001e08:	2000000c 	.word	0x2000000c
 8001e0c:	20001438 	.word	0x20001438

08001e10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
  return uwTick;
 8001e14:	4b02      	ldr	r3, [pc, #8]	; (8001e20 <HAL_GetTick+0x10>)
 8001e16:	681b      	ldr	r3, [r3, #0]
}
 8001e18:	0018      	movs	r0, r3
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	46c0      	nop			; (mov r8, r8)
 8001e20:	20001438 	.word	0x20001438

08001e24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b084      	sub	sp, #16
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e2c:	f7ff fff0 	bl	8001e10 <HAL_GetTick>
 8001e30:	0003      	movs	r3, r0
 8001e32:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	d005      	beq.n	8001e4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e3e:	4b0a      	ldr	r3, [pc, #40]	; (8001e68 <HAL_Delay+0x44>)
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	001a      	movs	r2, r3
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	189b      	adds	r3, r3, r2
 8001e48:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e4a:	46c0      	nop			; (mov r8, r8)
 8001e4c:	f7ff ffe0 	bl	8001e10 <HAL_GetTick>
 8001e50:	0002      	movs	r2, r0
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	68fa      	ldr	r2, [r7, #12]
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d8f7      	bhi.n	8001e4c <HAL_Delay+0x28>
  {
  }
}
 8001e5c:	46c0      	nop			; (mov r8, r8)
 8001e5e:	46c0      	nop			; (mov r8, r8)
 8001e60:	46bd      	mov	sp, r7
 8001e62:	b004      	add	sp, #16
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	46c0      	nop			; (mov r8, r8)
 8001e68:	2000000c 	.word	0x2000000c

08001e6c <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8001e74:	4b06      	ldr	r3, [pc, #24]	; (8001e90 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a06      	ldr	r2, [pc, #24]	; (8001e94 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	0019      	movs	r1, r3
 8001e7e:	4b04      	ldr	r3, [pc, #16]	; (8001e90 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8001e80:	687a      	ldr	r2, [r7, #4]
 8001e82:	430a      	orrs	r2, r1
 8001e84:	601a      	str	r2, [r3, #0]
}
 8001e86:	46c0      	nop			; (mov r8, r8)
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	b002      	add	sp, #8
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	46c0      	nop			; (mov r8, r8)
 8001e90:	40010000 	.word	0x40010000
 8001e94:	fffff9ff 	.word	0xfffff9ff

08001e98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	0002      	movs	r2, r0
 8001ea0:	1dfb      	adds	r3, r7, #7
 8001ea2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001ea4:	1dfb      	adds	r3, r7, #7
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	2b7f      	cmp	r3, #127	; 0x7f
 8001eaa:	d809      	bhi.n	8001ec0 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001eac:	1dfb      	adds	r3, r7, #7
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	001a      	movs	r2, r3
 8001eb2:	231f      	movs	r3, #31
 8001eb4:	401a      	ands	r2, r3
 8001eb6:	4b04      	ldr	r3, [pc, #16]	; (8001ec8 <__NVIC_EnableIRQ+0x30>)
 8001eb8:	2101      	movs	r1, #1
 8001eba:	4091      	lsls	r1, r2
 8001ebc:	000a      	movs	r2, r1
 8001ebe:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001ec0:	46c0      	nop			; (mov r8, r8)
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	b002      	add	sp, #8
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	e000e100 	.word	0xe000e100

08001ecc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ecc:	b590      	push	{r4, r7, lr}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	0002      	movs	r2, r0
 8001ed4:	6039      	str	r1, [r7, #0]
 8001ed6:	1dfb      	adds	r3, r7, #7
 8001ed8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001eda:	1dfb      	adds	r3, r7, #7
 8001edc:	781b      	ldrb	r3, [r3, #0]
 8001ede:	2b7f      	cmp	r3, #127	; 0x7f
 8001ee0:	d828      	bhi.n	8001f34 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ee2:	4a2f      	ldr	r2, [pc, #188]	; (8001fa0 <__NVIC_SetPriority+0xd4>)
 8001ee4:	1dfb      	adds	r3, r7, #7
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	b25b      	sxtb	r3, r3
 8001eea:	089b      	lsrs	r3, r3, #2
 8001eec:	33c0      	adds	r3, #192	; 0xc0
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	589b      	ldr	r3, [r3, r2]
 8001ef2:	1dfa      	adds	r2, r7, #7
 8001ef4:	7812      	ldrb	r2, [r2, #0]
 8001ef6:	0011      	movs	r1, r2
 8001ef8:	2203      	movs	r2, #3
 8001efa:	400a      	ands	r2, r1
 8001efc:	00d2      	lsls	r2, r2, #3
 8001efe:	21ff      	movs	r1, #255	; 0xff
 8001f00:	4091      	lsls	r1, r2
 8001f02:	000a      	movs	r2, r1
 8001f04:	43d2      	mvns	r2, r2
 8001f06:	401a      	ands	r2, r3
 8001f08:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	019b      	lsls	r3, r3, #6
 8001f0e:	22ff      	movs	r2, #255	; 0xff
 8001f10:	401a      	ands	r2, r3
 8001f12:	1dfb      	adds	r3, r7, #7
 8001f14:	781b      	ldrb	r3, [r3, #0]
 8001f16:	0018      	movs	r0, r3
 8001f18:	2303      	movs	r3, #3
 8001f1a:	4003      	ands	r3, r0
 8001f1c:	00db      	lsls	r3, r3, #3
 8001f1e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f20:	481f      	ldr	r0, [pc, #124]	; (8001fa0 <__NVIC_SetPriority+0xd4>)
 8001f22:	1dfb      	adds	r3, r7, #7
 8001f24:	781b      	ldrb	r3, [r3, #0]
 8001f26:	b25b      	sxtb	r3, r3
 8001f28:	089b      	lsrs	r3, r3, #2
 8001f2a:	430a      	orrs	r2, r1
 8001f2c:	33c0      	adds	r3, #192	; 0xc0
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001f32:	e031      	b.n	8001f98 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f34:	4a1b      	ldr	r2, [pc, #108]	; (8001fa4 <__NVIC_SetPriority+0xd8>)
 8001f36:	1dfb      	adds	r3, r7, #7
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	0019      	movs	r1, r3
 8001f3c:	230f      	movs	r3, #15
 8001f3e:	400b      	ands	r3, r1
 8001f40:	3b08      	subs	r3, #8
 8001f42:	089b      	lsrs	r3, r3, #2
 8001f44:	3306      	adds	r3, #6
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	18d3      	adds	r3, r2, r3
 8001f4a:	3304      	adds	r3, #4
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	1dfa      	adds	r2, r7, #7
 8001f50:	7812      	ldrb	r2, [r2, #0]
 8001f52:	0011      	movs	r1, r2
 8001f54:	2203      	movs	r2, #3
 8001f56:	400a      	ands	r2, r1
 8001f58:	00d2      	lsls	r2, r2, #3
 8001f5a:	21ff      	movs	r1, #255	; 0xff
 8001f5c:	4091      	lsls	r1, r2
 8001f5e:	000a      	movs	r2, r1
 8001f60:	43d2      	mvns	r2, r2
 8001f62:	401a      	ands	r2, r3
 8001f64:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	019b      	lsls	r3, r3, #6
 8001f6a:	22ff      	movs	r2, #255	; 0xff
 8001f6c:	401a      	ands	r2, r3
 8001f6e:	1dfb      	adds	r3, r7, #7
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	0018      	movs	r0, r3
 8001f74:	2303      	movs	r3, #3
 8001f76:	4003      	ands	r3, r0
 8001f78:	00db      	lsls	r3, r3, #3
 8001f7a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f7c:	4809      	ldr	r0, [pc, #36]	; (8001fa4 <__NVIC_SetPriority+0xd8>)
 8001f7e:	1dfb      	adds	r3, r7, #7
 8001f80:	781b      	ldrb	r3, [r3, #0]
 8001f82:	001c      	movs	r4, r3
 8001f84:	230f      	movs	r3, #15
 8001f86:	4023      	ands	r3, r4
 8001f88:	3b08      	subs	r3, #8
 8001f8a:	089b      	lsrs	r3, r3, #2
 8001f8c:	430a      	orrs	r2, r1
 8001f8e:	3306      	adds	r3, #6
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	18c3      	adds	r3, r0, r3
 8001f94:	3304      	adds	r3, #4
 8001f96:	601a      	str	r2, [r3, #0]
}
 8001f98:	46c0      	nop			; (mov r8, r8)
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	b003      	add	sp, #12
 8001f9e:	bd90      	pop	{r4, r7, pc}
 8001fa0:	e000e100 	.word	0xe000e100
 8001fa4:	e000ed00 	.word	0xe000ed00

08001fa8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001fac:	f3bf 8f4f 	dsb	sy
}
 8001fb0:	46c0      	nop			; (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fb2:	4b04      	ldr	r3, [pc, #16]	; (8001fc4 <__NVIC_SystemReset+0x1c>)
 8001fb4:	4a04      	ldr	r2, [pc, #16]	; (8001fc8 <__NVIC_SystemReset+0x20>)
 8001fb6:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001fb8:	f3bf 8f4f 	dsb	sy
}
 8001fbc:	46c0      	nop			; (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001fbe:	46c0      	nop			; (mov r8, r8)
 8001fc0:	e7fd      	b.n	8001fbe <__NVIC_SystemReset+0x16>
 8001fc2:	46c0      	nop			; (mov r8, r8)
 8001fc4:	e000ed00 	.word	0xe000ed00
 8001fc8:	05fa0004 	.word	0x05fa0004

08001fcc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b082      	sub	sp, #8
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	1e5a      	subs	r2, r3, #1
 8001fd8:	2380      	movs	r3, #128	; 0x80
 8001fda:	045b      	lsls	r3, r3, #17
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d301      	bcc.n	8001fe4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e010      	b.n	8002006 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fe4:	4b0a      	ldr	r3, [pc, #40]	; (8002010 <SysTick_Config+0x44>)
 8001fe6:	687a      	ldr	r2, [r7, #4]
 8001fe8:	3a01      	subs	r2, #1
 8001fea:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fec:	2301      	movs	r3, #1
 8001fee:	425b      	negs	r3, r3
 8001ff0:	2103      	movs	r1, #3
 8001ff2:	0018      	movs	r0, r3
 8001ff4:	f7ff ff6a 	bl	8001ecc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ff8:	4b05      	ldr	r3, [pc, #20]	; (8002010 <SysTick_Config+0x44>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ffe:	4b04      	ldr	r3, [pc, #16]	; (8002010 <SysTick_Config+0x44>)
 8002000:	2207      	movs	r2, #7
 8002002:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002004:	2300      	movs	r3, #0
}
 8002006:	0018      	movs	r0, r3
 8002008:	46bd      	mov	sp, r7
 800200a:	b002      	add	sp, #8
 800200c:	bd80      	pop	{r7, pc}
 800200e:	46c0      	nop			; (mov r8, r8)
 8002010:	e000e010 	.word	0xe000e010

08002014 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b084      	sub	sp, #16
 8002018:	af00      	add	r7, sp, #0
 800201a:	60b9      	str	r1, [r7, #8]
 800201c:	607a      	str	r2, [r7, #4]
 800201e:	210f      	movs	r1, #15
 8002020:	187b      	adds	r3, r7, r1
 8002022:	1c02      	adds	r2, r0, #0
 8002024:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8002026:	68ba      	ldr	r2, [r7, #8]
 8002028:	187b      	adds	r3, r7, r1
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	b25b      	sxtb	r3, r3
 800202e:	0011      	movs	r1, r2
 8002030:	0018      	movs	r0, r3
 8002032:	f7ff ff4b 	bl	8001ecc <__NVIC_SetPriority>
}
 8002036:	46c0      	nop			; (mov r8, r8)
 8002038:	46bd      	mov	sp, r7
 800203a:	b004      	add	sp, #16
 800203c:	bd80      	pop	{r7, pc}

0800203e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800203e:	b580      	push	{r7, lr}
 8002040:	b082      	sub	sp, #8
 8002042:	af00      	add	r7, sp, #0
 8002044:	0002      	movs	r2, r0
 8002046:	1dfb      	adds	r3, r7, #7
 8002048:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800204a:	1dfb      	adds	r3, r7, #7
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	b25b      	sxtb	r3, r3
 8002050:	0018      	movs	r0, r3
 8002052:	f7ff ff21 	bl	8001e98 <__NVIC_EnableIRQ>
}
 8002056:	46c0      	nop			; (mov r8, r8)
 8002058:	46bd      	mov	sp, r7
 800205a:	b002      	add	sp, #8
 800205c:	bd80      	pop	{r7, pc}

0800205e <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800205e:	b580      	push	{r7, lr}
 8002060:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8002062:	f7ff ffa1 	bl	8001fa8 <__NVIC_SystemReset>

08002066 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002066:	b580      	push	{r7, lr}
 8002068:	b082      	sub	sp, #8
 800206a:	af00      	add	r7, sp, #0
 800206c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	0018      	movs	r0, r3
 8002072:	f7ff ffab 	bl	8001fcc <SysTick_Config>
 8002076:	0003      	movs	r3, r0
}
 8002078:	0018      	movs	r0, r3
 800207a:	46bd      	mov	sp, r7
 800207c:	b002      	add	sp, #8
 800207e:	bd80      	pop	{r7, pc}

08002080 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d101      	bne.n	8002092 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e04f      	b.n	8002132 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2225      	movs	r2, #37	; 0x25
 8002096:	5c9b      	ldrb	r3, [r3, r2]
 8002098:	b2db      	uxtb	r3, r3
 800209a:	2b02      	cmp	r3, #2
 800209c:	d008      	beq.n	80020b0 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2204      	movs	r2, #4
 80020a2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2224      	movs	r2, #36	; 0x24
 80020a8:	2100      	movs	r1, #0
 80020aa:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	e040      	b.n	8002132 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	210e      	movs	r1, #14
 80020bc:	438a      	bics	r2, r1
 80020be:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020ca:	491c      	ldr	r1, [pc, #112]	; (800213c <HAL_DMA_Abort+0xbc>)
 80020cc:	400a      	ands	r2, r1
 80020ce:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	2101      	movs	r1, #1
 80020dc:	438a      	bics	r2, r1
 80020de:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020e4:	221c      	movs	r2, #28
 80020e6:	401a      	ands	r2, r3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ec:	2101      	movs	r1, #1
 80020ee:	4091      	lsls	r1, r2
 80020f0:	000a      	movs	r2, r1
 80020f2:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020f8:	687a      	ldr	r2, [r7, #4]
 80020fa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80020fc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002102:	2b00      	cmp	r3, #0
 8002104:	d00c      	beq.n	8002120 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002110:	490a      	ldr	r1, [pc, #40]	; (800213c <HAL_DMA_Abort+0xbc>)
 8002112:	400a      	ands	r2, r1
 8002114:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800211a:	687a      	ldr	r2, [r7, #4]
 800211c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800211e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2225      	movs	r2, #37	; 0x25
 8002124:	2101      	movs	r1, #1
 8002126:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2224      	movs	r2, #36	; 0x24
 800212c:	2100      	movs	r1, #0
 800212e:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8002130:	2300      	movs	r3, #0
}
 8002132:	0018      	movs	r0, r3
 8002134:	46bd      	mov	sp, r7
 8002136:	b002      	add	sp, #8
 8002138:	bd80      	pop	{r7, pc}
 800213a:	46c0      	nop			; (mov r8, r8)
 800213c:	fffffeff 	.word	0xfffffeff

08002140 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b084      	sub	sp, #16
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002148:	210f      	movs	r1, #15
 800214a:	187b      	adds	r3, r7, r1
 800214c:	2200      	movs	r2, #0
 800214e:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2225      	movs	r2, #37	; 0x25
 8002154:	5c9b      	ldrb	r3, [r3, r2]
 8002156:	b2db      	uxtb	r3, r3
 8002158:	2b02      	cmp	r3, #2
 800215a:	d006      	beq.n	800216a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2204      	movs	r2, #4
 8002160:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002162:	187b      	adds	r3, r7, r1
 8002164:	2201      	movs	r2, #1
 8002166:	701a      	strb	r2, [r3, #0]
 8002168:	e048      	b.n	80021fc <HAL_DMA_Abort_IT+0xbc>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	210e      	movs	r1, #14
 8002176:	438a      	bics	r2, r1
 8002178:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	2101      	movs	r1, #1
 8002186:	438a      	bics	r2, r1
 8002188:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002194:	491d      	ldr	r1, [pc, #116]	; (800220c <HAL_DMA_Abort_IT+0xcc>)
 8002196:	400a      	ands	r2, r1
 8002198:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800219e:	221c      	movs	r2, #28
 80021a0:	401a      	ands	r2, r3
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a6:	2101      	movs	r1, #1
 80021a8:	4091      	lsls	r1, r2
 80021aa:	000a      	movs	r2, r1
 80021ac:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80021b6:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d00c      	beq.n	80021da <HAL_DMA_Abort_IT+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021ca:	4910      	ldr	r1, [pc, #64]	; (800220c <HAL_DMA_Abort_IT+0xcc>)
 80021cc:	400a      	ands	r2, r1
 80021ce:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021d4:	687a      	ldr	r2, [r7, #4]
 80021d6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80021d8:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2225      	movs	r2, #37	; 0x25
 80021de:	2101      	movs	r1, #1
 80021e0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2224      	movs	r2, #36	; 0x24
 80021e6:	2100      	movs	r1, #0
 80021e8:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d004      	beq.n	80021fc <HAL_DMA_Abort_IT+0xbc>
    {
      hdma->XferAbortCallback(hdma);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	0010      	movs	r0, r2
 80021fa:	4798      	blx	r3
    }
  }
  return status;
 80021fc:	230f      	movs	r3, #15
 80021fe:	18fb      	adds	r3, r7, r3
 8002200:	781b      	ldrb	r3, [r3, #0]
}
 8002202:	0018      	movs	r0, r3
 8002204:	46bd      	mov	sp, r7
 8002206:	b004      	add	sp, #16
 8002208:	bd80      	pop	{r7, pc}
 800220a:	46c0      	nop			; (mov r8, r8)
 800220c:	fffffeff 	.word	0xfffffeff

08002210 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b086      	sub	sp, #24
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800221a:	2300      	movs	r3, #0
 800221c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800221e:	e14d      	b.n	80024bc <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	2101      	movs	r1, #1
 8002226:	697a      	ldr	r2, [r7, #20]
 8002228:	4091      	lsls	r1, r2
 800222a:	000a      	movs	r2, r1
 800222c:	4013      	ands	r3, r2
 800222e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d100      	bne.n	8002238 <HAL_GPIO_Init+0x28>
 8002236:	e13e      	b.n	80024b6 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	2203      	movs	r2, #3
 800223e:	4013      	ands	r3, r2
 8002240:	2b01      	cmp	r3, #1
 8002242:	d005      	beq.n	8002250 <HAL_GPIO_Init+0x40>
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	2203      	movs	r2, #3
 800224a:	4013      	ands	r3, r2
 800224c:	2b02      	cmp	r3, #2
 800224e:	d130      	bne.n	80022b2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	005b      	lsls	r3, r3, #1
 800225a:	2203      	movs	r2, #3
 800225c:	409a      	lsls	r2, r3
 800225e:	0013      	movs	r3, r2
 8002260:	43da      	mvns	r2, r3
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	4013      	ands	r3, r2
 8002266:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	68da      	ldr	r2, [r3, #12]
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	005b      	lsls	r3, r3, #1
 8002270:	409a      	lsls	r2, r3
 8002272:	0013      	movs	r3, r2
 8002274:	693a      	ldr	r2, [r7, #16]
 8002276:	4313      	orrs	r3, r2
 8002278:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	693a      	ldr	r2, [r7, #16]
 800227e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002286:	2201      	movs	r2, #1
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	409a      	lsls	r2, r3
 800228c:	0013      	movs	r3, r2
 800228e:	43da      	mvns	r2, r3
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	4013      	ands	r3, r2
 8002294:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	091b      	lsrs	r3, r3, #4
 800229c:	2201      	movs	r2, #1
 800229e:	401a      	ands	r2, r3
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	409a      	lsls	r2, r3
 80022a4:	0013      	movs	r3, r2
 80022a6:	693a      	ldr	r2, [r7, #16]
 80022a8:	4313      	orrs	r3, r2
 80022aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	693a      	ldr	r2, [r7, #16]
 80022b0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	2203      	movs	r2, #3
 80022b8:	4013      	ands	r3, r2
 80022ba:	2b03      	cmp	r3, #3
 80022bc:	d017      	beq.n	80022ee <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	68db      	ldr	r3, [r3, #12]
 80022c2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	005b      	lsls	r3, r3, #1
 80022c8:	2203      	movs	r2, #3
 80022ca:	409a      	lsls	r2, r3
 80022cc:	0013      	movs	r3, r2
 80022ce:	43da      	mvns	r2, r3
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	4013      	ands	r3, r2
 80022d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	689a      	ldr	r2, [r3, #8]
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	005b      	lsls	r3, r3, #1
 80022de:	409a      	lsls	r2, r3
 80022e0:	0013      	movs	r3, r2
 80022e2:	693a      	ldr	r2, [r7, #16]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	693a      	ldr	r2, [r7, #16]
 80022ec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	2203      	movs	r2, #3
 80022f4:	4013      	ands	r3, r2
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	d123      	bne.n	8002342 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	08da      	lsrs	r2, r3, #3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	3208      	adds	r2, #8
 8002302:	0092      	lsls	r2, r2, #2
 8002304:	58d3      	ldr	r3, [r2, r3]
 8002306:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	2207      	movs	r2, #7
 800230c:	4013      	ands	r3, r2
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	220f      	movs	r2, #15
 8002312:	409a      	lsls	r2, r3
 8002314:	0013      	movs	r3, r2
 8002316:	43da      	mvns	r2, r3
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	4013      	ands	r3, r2
 800231c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	691a      	ldr	r2, [r3, #16]
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	2107      	movs	r1, #7
 8002326:	400b      	ands	r3, r1
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	409a      	lsls	r2, r3
 800232c:	0013      	movs	r3, r2
 800232e:	693a      	ldr	r2, [r7, #16]
 8002330:	4313      	orrs	r3, r2
 8002332:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	08da      	lsrs	r2, r3, #3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	3208      	adds	r2, #8
 800233c:	0092      	lsls	r2, r2, #2
 800233e:	6939      	ldr	r1, [r7, #16]
 8002340:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	005b      	lsls	r3, r3, #1
 800234c:	2203      	movs	r2, #3
 800234e:	409a      	lsls	r2, r3
 8002350:	0013      	movs	r3, r2
 8002352:	43da      	mvns	r2, r3
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	4013      	ands	r3, r2
 8002358:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	2203      	movs	r2, #3
 8002360:	401a      	ands	r2, r3
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	005b      	lsls	r3, r3, #1
 8002366:	409a      	lsls	r2, r3
 8002368:	0013      	movs	r3, r2
 800236a:	693a      	ldr	r2, [r7, #16]
 800236c:	4313      	orrs	r3, r2
 800236e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	693a      	ldr	r2, [r7, #16]
 8002374:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	685a      	ldr	r2, [r3, #4]
 800237a:	23c0      	movs	r3, #192	; 0xc0
 800237c:	029b      	lsls	r3, r3, #10
 800237e:	4013      	ands	r3, r2
 8002380:	d100      	bne.n	8002384 <HAL_GPIO_Init+0x174>
 8002382:	e098      	b.n	80024b6 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002384:	4a53      	ldr	r2, [pc, #332]	; (80024d4 <HAL_GPIO_Init+0x2c4>)
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	089b      	lsrs	r3, r3, #2
 800238a:	3318      	adds	r3, #24
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	589b      	ldr	r3, [r3, r2]
 8002390:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	2203      	movs	r2, #3
 8002396:	4013      	ands	r3, r2
 8002398:	00db      	lsls	r3, r3, #3
 800239a:	220f      	movs	r2, #15
 800239c:	409a      	lsls	r2, r3
 800239e:	0013      	movs	r3, r2
 80023a0:	43da      	mvns	r2, r3
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	4013      	ands	r3, r2
 80023a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80023a8:	687a      	ldr	r2, [r7, #4]
 80023aa:	23a0      	movs	r3, #160	; 0xa0
 80023ac:	05db      	lsls	r3, r3, #23
 80023ae:	429a      	cmp	r2, r3
 80023b0:	d019      	beq.n	80023e6 <HAL_GPIO_Init+0x1d6>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4a48      	ldr	r2, [pc, #288]	; (80024d8 <HAL_GPIO_Init+0x2c8>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d013      	beq.n	80023e2 <HAL_GPIO_Init+0x1d2>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4a47      	ldr	r2, [pc, #284]	; (80024dc <HAL_GPIO_Init+0x2cc>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d00d      	beq.n	80023de <HAL_GPIO_Init+0x1ce>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4a46      	ldr	r2, [pc, #280]	; (80024e0 <HAL_GPIO_Init+0x2d0>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d007      	beq.n	80023da <HAL_GPIO_Init+0x1ca>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4a45      	ldr	r2, [pc, #276]	; (80024e4 <HAL_GPIO_Init+0x2d4>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d101      	bne.n	80023d6 <HAL_GPIO_Init+0x1c6>
 80023d2:	2304      	movs	r3, #4
 80023d4:	e008      	b.n	80023e8 <HAL_GPIO_Init+0x1d8>
 80023d6:	2305      	movs	r3, #5
 80023d8:	e006      	b.n	80023e8 <HAL_GPIO_Init+0x1d8>
 80023da:	2303      	movs	r3, #3
 80023dc:	e004      	b.n	80023e8 <HAL_GPIO_Init+0x1d8>
 80023de:	2302      	movs	r3, #2
 80023e0:	e002      	b.n	80023e8 <HAL_GPIO_Init+0x1d8>
 80023e2:	2301      	movs	r3, #1
 80023e4:	e000      	b.n	80023e8 <HAL_GPIO_Init+0x1d8>
 80023e6:	2300      	movs	r3, #0
 80023e8:	697a      	ldr	r2, [r7, #20]
 80023ea:	2103      	movs	r1, #3
 80023ec:	400a      	ands	r2, r1
 80023ee:	00d2      	lsls	r2, r2, #3
 80023f0:	4093      	lsls	r3, r2
 80023f2:	693a      	ldr	r2, [r7, #16]
 80023f4:	4313      	orrs	r3, r2
 80023f6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80023f8:	4936      	ldr	r1, [pc, #216]	; (80024d4 <HAL_GPIO_Init+0x2c4>)
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	089b      	lsrs	r3, r3, #2
 80023fe:	3318      	adds	r3, #24
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	693a      	ldr	r2, [r7, #16]
 8002404:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002406:	4b33      	ldr	r3, [pc, #204]	; (80024d4 <HAL_GPIO_Init+0x2c4>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	43da      	mvns	r2, r3
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	4013      	ands	r3, r2
 8002414:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	685a      	ldr	r2, [r3, #4]
 800241a:	2380      	movs	r3, #128	; 0x80
 800241c:	035b      	lsls	r3, r3, #13
 800241e:	4013      	ands	r3, r2
 8002420:	d003      	beq.n	800242a <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8002422:	693a      	ldr	r2, [r7, #16]
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	4313      	orrs	r3, r2
 8002428:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800242a:	4b2a      	ldr	r3, [pc, #168]	; (80024d4 <HAL_GPIO_Init+0x2c4>)
 800242c:	693a      	ldr	r2, [r7, #16]
 800242e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002430:	4b28      	ldr	r3, [pc, #160]	; (80024d4 <HAL_GPIO_Init+0x2c4>)
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	43da      	mvns	r2, r3
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	4013      	ands	r3, r2
 800243e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	685a      	ldr	r2, [r3, #4]
 8002444:	2380      	movs	r3, #128	; 0x80
 8002446:	039b      	lsls	r3, r3, #14
 8002448:	4013      	ands	r3, r2
 800244a:	d003      	beq.n	8002454 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 800244c:	693a      	ldr	r2, [r7, #16]
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	4313      	orrs	r3, r2
 8002452:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002454:	4b1f      	ldr	r3, [pc, #124]	; (80024d4 <HAL_GPIO_Init+0x2c4>)
 8002456:	693a      	ldr	r2, [r7, #16]
 8002458:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800245a:	4a1e      	ldr	r2, [pc, #120]	; (80024d4 <HAL_GPIO_Init+0x2c4>)
 800245c:	2384      	movs	r3, #132	; 0x84
 800245e:	58d3      	ldr	r3, [r2, r3]
 8002460:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	43da      	mvns	r2, r3
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	4013      	ands	r3, r2
 800246a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	685a      	ldr	r2, [r3, #4]
 8002470:	2380      	movs	r3, #128	; 0x80
 8002472:	029b      	lsls	r3, r3, #10
 8002474:	4013      	ands	r3, r2
 8002476:	d003      	beq.n	8002480 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002478:	693a      	ldr	r2, [r7, #16]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	4313      	orrs	r3, r2
 800247e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002480:	4914      	ldr	r1, [pc, #80]	; (80024d4 <HAL_GPIO_Init+0x2c4>)
 8002482:	2284      	movs	r2, #132	; 0x84
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002488:	4a12      	ldr	r2, [pc, #72]	; (80024d4 <HAL_GPIO_Init+0x2c4>)
 800248a:	2380      	movs	r3, #128	; 0x80
 800248c:	58d3      	ldr	r3, [r2, r3]
 800248e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	43da      	mvns	r2, r3
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	4013      	ands	r3, r2
 8002498:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	685a      	ldr	r2, [r3, #4]
 800249e:	2380      	movs	r3, #128	; 0x80
 80024a0:	025b      	lsls	r3, r3, #9
 80024a2:	4013      	ands	r3, r2
 80024a4:	d003      	beq.n	80024ae <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80024a6:	693a      	ldr	r2, [r7, #16]
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	4313      	orrs	r3, r2
 80024ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80024ae:	4909      	ldr	r1, [pc, #36]	; (80024d4 <HAL_GPIO_Init+0x2c4>)
 80024b0:	2280      	movs	r2, #128	; 0x80
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	3301      	adds	r3, #1
 80024ba:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	40da      	lsrs	r2, r3
 80024c4:	1e13      	subs	r3, r2, #0
 80024c6:	d000      	beq.n	80024ca <HAL_GPIO_Init+0x2ba>
 80024c8:	e6aa      	b.n	8002220 <HAL_GPIO_Init+0x10>
  }
}
 80024ca:	46c0      	nop			; (mov r8, r8)
 80024cc:	46c0      	nop			; (mov r8, r8)
 80024ce:	46bd      	mov	sp, r7
 80024d0:	b006      	add	sp, #24
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	40021800 	.word	0x40021800
 80024d8:	50000400 	.word	0x50000400
 80024dc:	50000800 	.word	0x50000800
 80024e0:	50000c00 	.word	0x50000c00
 80024e4:	50001000 	.word	0x50001000

080024e8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b086      	sub	sp, #24
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
 80024f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80024f2:	2300      	movs	r3, #0
 80024f4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80024f6:	e0ba      	b.n	800266e <HAL_GPIO_DeInit+0x186>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80024f8:	2201      	movs	r2, #1
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	409a      	lsls	r2, r3
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	4013      	ands	r3, r2
 8002502:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d100      	bne.n	800250c <HAL_GPIO_DeInit+0x24>
 800250a:	e0ad      	b.n	8002668 <HAL_GPIO_DeInit+0x180>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = EXTI->EXTICR[position >> 2u];
 800250c:	4a5d      	ldr	r2, [pc, #372]	; (8002684 <HAL_GPIO_DeInit+0x19c>)
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	089b      	lsrs	r3, r3, #2
 8002512:	3318      	adds	r3, #24
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	589b      	ldr	r3, [r3, r2]
 8002518:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (8u * (position & 0x03u)));
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	2203      	movs	r2, #3
 800251e:	4013      	ands	r3, r2
 8002520:	00db      	lsls	r3, r3, #3
 8002522:	220f      	movs	r2, #15
 8002524:	409a      	lsls	r2, r3
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	4013      	ands	r3, r2
 800252a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u))))
 800252c:	687a      	ldr	r2, [r7, #4]
 800252e:	23a0      	movs	r3, #160	; 0xa0
 8002530:	05db      	lsls	r3, r3, #23
 8002532:	429a      	cmp	r2, r3
 8002534:	d019      	beq.n	800256a <HAL_GPIO_DeInit+0x82>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	4a53      	ldr	r2, [pc, #332]	; (8002688 <HAL_GPIO_DeInit+0x1a0>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d013      	beq.n	8002566 <HAL_GPIO_DeInit+0x7e>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4a52      	ldr	r2, [pc, #328]	; (800268c <HAL_GPIO_DeInit+0x1a4>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d00d      	beq.n	8002562 <HAL_GPIO_DeInit+0x7a>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4a51      	ldr	r2, [pc, #324]	; (8002690 <HAL_GPIO_DeInit+0x1a8>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d007      	beq.n	800255e <HAL_GPIO_DeInit+0x76>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	4a50      	ldr	r2, [pc, #320]	; (8002694 <HAL_GPIO_DeInit+0x1ac>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d101      	bne.n	800255a <HAL_GPIO_DeInit+0x72>
 8002556:	2304      	movs	r3, #4
 8002558:	e008      	b.n	800256c <HAL_GPIO_DeInit+0x84>
 800255a:	2305      	movs	r3, #5
 800255c:	e006      	b.n	800256c <HAL_GPIO_DeInit+0x84>
 800255e:	2303      	movs	r3, #3
 8002560:	e004      	b.n	800256c <HAL_GPIO_DeInit+0x84>
 8002562:	2302      	movs	r3, #2
 8002564:	e002      	b.n	800256c <HAL_GPIO_DeInit+0x84>
 8002566:	2301      	movs	r3, #1
 8002568:	e000      	b.n	800256c <HAL_GPIO_DeInit+0x84>
 800256a:	2300      	movs	r3, #0
 800256c:	697a      	ldr	r2, [r7, #20]
 800256e:	2103      	movs	r1, #3
 8002570:	400a      	ands	r2, r1
 8002572:	00d2      	lsls	r2, r2, #3
 8002574:	4093      	lsls	r3, r2
 8002576:	68fa      	ldr	r2, [r7, #12]
 8002578:	429a      	cmp	r2, r3
 800257a:	d136      	bne.n	80025ea <HAL_GPIO_DeInit+0x102>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800257c:	4a41      	ldr	r2, [pc, #260]	; (8002684 <HAL_GPIO_DeInit+0x19c>)
 800257e:	2380      	movs	r3, #128	; 0x80
 8002580:	58d3      	ldr	r3, [r2, r3]
 8002582:	693a      	ldr	r2, [r7, #16]
 8002584:	43d2      	mvns	r2, r2
 8002586:	493f      	ldr	r1, [pc, #252]	; (8002684 <HAL_GPIO_DeInit+0x19c>)
 8002588:	4013      	ands	r3, r2
 800258a:	2280      	movs	r2, #128	; 0x80
 800258c:	508b      	str	r3, [r1, r2]
        EXTI->EMR1 &= ~(iocurrent);
 800258e:	4a3d      	ldr	r2, [pc, #244]	; (8002684 <HAL_GPIO_DeInit+0x19c>)
 8002590:	2384      	movs	r3, #132	; 0x84
 8002592:	58d3      	ldr	r3, [r2, r3]
 8002594:	693a      	ldr	r2, [r7, #16]
 8002596:	43d2      	mvns	r2, r2
 8002598:	493a      	ldr	r1, [pc, #232]	; (8002684 <HAL_GPIO_DeInit+0x19c>)
 800259a:	4013      	ands	r3, r2
 800259c:	2284      	movs	r2, #132	; 0x84
 800259e:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80025a0:	4b38      	ldr	r3, [pc, #224]	; (8002684 <HAL_GPIO_DeInit+0x19c>)
 80025a2:	685a      	ldr	r2, [r3, #4]
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	43d9      	mvns	r1, r3
 80025a8:	4b36      	ldr	r3, [pc, #216]	; (8002684 <HAL_GPIO_DeInit+0x19c>)
 80025aa:	400a      	ands	r2, r1
 80025ac:	605a      	str	r2, [r3, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 80025ae:	4b35      	ldr	r3, [pc, #212]	; (8002684 <HAL_GPIO_DeInit+0x19c>)
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	43d9      	mvns	r1, r3
 80025b6:	4b33      	ldr	r3, [pc, #204]	; (8002684 <HAL_GPIO_DeInit+0x19c>)
 80025b8:	400a      	ands	r2, r1
 80025ba:	601a      	str	r2, [r3, #0]

        tmp = 0x0FuL << (8u * (position & 0x03u));
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	2203      	movs	r2, #3
 80025c0:	4013      	ands	r3, r2
 80025c2:	00db      	lsls	r3, r3, #3
 80025c4:	220f      	movs	r2, #15
 80025c6:	409a      	lsls	r2, r3
 80025c8:	0013      	movs	r3, r2
 80025ca:	60fb      	str	r3, [r7, #12]
        EXTI->EXTICR[position >> 2u] &= ~tmp;
 80025cc:	4a2d      	ldr	r2, [pc, #180]	; (8002684 <HAL_GPIO_DeInit+0x19c>)
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	089b      	lsrs	r3, r3, #2
 80025d2:	3318      	adds	r3, #24
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	589a      	ldr	r2, [r3, r2]
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	43d9      	mvns	r1, r3
 80025dc:	4829      	ldr	r0, [pc, #164]	; (8002684 <HAL_GPIO_DeInit+0x19c>)
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	089b      	lsrs	r3, r3, #2
 80025e2:	400a      	ands	r2, r1
 80025e4:	3318      	adds	r3, #24
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	005b      	lsls	r3, r3, #1
 80025f2:	2103      	movs	r1, #3
 80025f4:	4099      	lsls	r1, r3
 80025f6:	000b      	movs	r3, r1
 80025f8:	431a      	orrs	r2, r3
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	08da      	lsrs	r2, r3, #3
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	3208      	adds	r2, #8
 8002606:	0092      	lsls	r2, r2, #2
 8002608:	58d3      	ldr	r3, [r2, r3]
 800260a:	697a      	ldr	r2, [r7, #20]
 800260c:	2107      	movs	r1, #7
 800260e:	400a      	ands	r2, r1
 8002610:	0092      	lsls	r2, r2, #2
 8002612:	210f      	movs	r1, #15
 8002614:	4091      	lsls	r1, r2
 8002616:	000a      	movs	r2, r1
 8002618:	43d1      	mvns	r1, r2
 800261a:	697a      	ldr	r2, [r7, #20]
 800261c:	08d2      	lsrs	r2, r2, #3
 800261e:	4019      	ands	r1, r3
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	3208      	adds	r2, #8
 8002624:	0092      	lsls	r2, r2, #2
 8002626:	50d1      	str	r1, [r2, r3]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	697a      	ldr	r2, [r7, #20]
 800262e:	0052      	lsls	r2, r2, #1
 8002630:	2103      	movs	r1, #3
 8002632:	4091      	lsls	r1, r2
 8002634:	000a      	movs	r2, r1
 8002636:	43d2      	mvns	r2, r2
 8002638:	401a      	ands	r2, r3
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	2101      	movs	r1, #1
 8002644:	697a      	ldr	r2, [r7, #20]
 8002646:	4091      	lsls	r1, r2
 8002648:	000a      	movs	r2, r1
 800264a:	43d2      	mvns	r2, r2
 800264c:	401a      	ands	r2, r3
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	697a      	ldr	r2, [r7, #20]
 8002658:	0052      	lsls	r2, r2, #1
 800265a:	2103      	movs	r1, #3
 800265c:	4091      	lsls	r1, r2
 800265e:	000a      	movs	r2, r1
 8002660:	43d2      	mvns	r2, r2
 8002662:	401a      	ands	r2, r3
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	60da      	str	r2, [r3, #12]
    }

    position++;
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	3301      	adds	r3, #1
 800266c:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800266e:	683a      	ldr	r2, [r7, #0]
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	40da      	lsrs	r2, r3
 8002674:	1e13      	subs	r3, r2, #0
 8002676:	d000      	beq.n	800267a <HAL_GPIO_DeInit+0x192>
 8002678:	e73e      	b.n	80024f8 <HAL_GPIO_DeInit+0x10>
  }
}
 800267a:	46c0      	nop			; (mov r8, r8)
 800267c:	46c0      	nop			; (mov r8, r8)
 800267e:	46bd      	mov	sp, r7
 8002680:	b006      	add	sp, #24
 8002682:	bd80      	pop	{r7, pc}
 8002684:	40021800 	.word	0x40021800
 8002688:	50000400 	.word	0x50000400
 800268c:	50000800 	.word	0x50000800
 8002690:	50000c00 	.word	0x50000c00
 8002694:	50001000 	.word	0x50001000

08002698 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b084      	sub	sp, #16
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	000a      	movs	r2, r1
 80026a2:	1cbb      	adds	r3, r7, #2
 80026a4:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	691b      	ldr	r3, [r3, #16]
 80026aa:	1cba      	adds	r2, r7, #2
 80026ac:	8812      	ldrh	r2, [r2, #0]
 80026ae:	4013      	ands	r3, r2
 80026b0:	d004      	beq.n	80026bc <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80026b2:	230f      	movs	r3, #15
 80026b4:	18fb      	adds	r3, r7, r3
 80026b6:	2201      	movs	r2, #1
 80026b8:	701a      	strb	r2, [r3, #0]
 80026ba:	e003      	b.n	80026c4 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80026bc:	230f      	movs	r3, #15
 80026be:	18fb      	adds	r3, r7, r3
 80026c0:	2200      	movs	r2, #0
 80026c2:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80026c4:	230f      	movs	r3, #15
 80026c6:	18fb      	adds	r3, r7, r3
 80026c8:	781b      	ldrb	r3, [r3, #0]
}
 80026ca:	0018      	movs	r0, r3
 80026cc:	46bd      	mov	sp, r7
 80026ce:	b004      	add	sp, #16
 80026d0:	bd80      	pop	{r7, pc}

080026d2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026d2:	b580      	push	{r7, lr}
 80026d4:	b082      	sub	sp, #8
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	6078      	str	r0, [r7, #4]
 80026da:	0008      	movs	r0, r1
 80026dc:	0011      	movs	r1, r2
 80026de:	1cbb      	adds	r3, r7, #2
 80026e0:	1c02      	adds	r2, r0, #0
 80026e2:	801a      	strh	r2, [r3, #0]
 80026e4:	1c7b      	adds	r3, r7, #1
 80026e6:	1c0a      	adds	r2, r1, #0
 80026e8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80026ea:	1c7b      	adds	r3, r7, #1
 80026ec:	781b      	ldrb	r3, [r3, #0]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d004      	beq.n	80026fc <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80026f2:	1cbb      	adds	r3, r7, #2
 80026f4:	881a      	ldrh	r2, [r3, #0]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80026fa:	e003      	b.n	8002704 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80026fc:	1cbb      	adds	r3, r7, #2
 80026fe:	881a      	ldrh	r2, [r3, #0]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002704:	46c0      	nop			; (mov r8, r8)
 8002706:	46bd      	mov	sp, r7
 8002708:	b002      	add	sp, #8
 800270a:	bd80      	pop	{r7, pc}

0800270c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b082      	sub	sp, #8
 8002710:	af00      	add	r7, sp, #0
 8002712:	0002      	movs	r2, r0
 8002714:	1dbb      	adds	r3, r7, #6
 8002716:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8002718:	4b10      	ldr	r3, [pc, #64]	; (800275c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	1dba      	adds	r2, r7, #6
 800271e:	8812      	ldrh	r2, [r2, #0]
 8002720:	4013      	ands	r3, r2
 8002722:	d008      	beq.n	8002736 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8002724:	4b0d      	ldr	r3, [pc, #52]	; (800275c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002726:	1dba      	adds	r2, r7, #6
 8002728:	8812      	ldrh	r2, [r2, #0]
 800272a:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 800272c:	1dbb      	adds	r3, r7, #6
 800272e:	881b      	ldrh	r3, [r3, #0]
 8002730:	0018      	movs	r0, r3
 8002732:	f7ff f82f 	bl	8001794 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8002736:	4b09      	ldr	r3, [pc, #36]	; (800275c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002738:	691b      	ldr	r3, [r3, #16]
 800273a:	1dba      	adds	r2, r7, #6
 800273c:	8812      	ldrh	r2, [r2, #0]
 800273e:	4013      	ands	r3, r2
 8002740:	d008      	beq.n	8002754 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8002742:	4b06      	ldr	r3, [pc, #24]	; (800275c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002744:	1dba      	adds	r2, r7, #6
 8002746:	8812      	ldrh	r2, [r2, #0]
 8002748:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800274a:	1dbb      	adds	r3, r7, #6
 800274c:	881b      	ldrh	r3, [r3, #0]
 800274e:	0018      	movs	r0, r3
 8002750:	f000 f806 	bl	8002760 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8002754:	46c0      	nop			; (mov r8, r8)
 8002756:	46bd      	mov	sp, r7
 8002758:	b002      	add	sp, #8
 800275a:	bd80      	pop	{r7, pc}
 800275c:	40021800 	.word	0x40021800

08002760 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b082      	sub	sp, #8
 8002764:	af00      	add	r7, sp, #0
 8002766:	0002      	movs	r2, r0
 8002768:	1dbb      	adds	r3, r7, #6
 800276a:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 800276c:	46c0      	nop			; (mov r8, r8)
 800276e:	46bd      	mov	sp, r7
 8002770:	b002      	add	sp, #8
 8002772:	bd80      	pop	{r7, pc}

08002774 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b084      	sub	sp, #16
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800277c:	4b19      	ldr	r3, [pc, #100]	; (80027e4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a19      	ldr	r2, [pc, #100]	; (80027e8 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002782:	4013      	ands	r3, r2
 8002784:	0019      	movs	r1, r3
 8002786:	4b17      	ldr	r3, [pc, #92]	; (80027e4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002788:	687a      	ldr	r2, [r7, #4]
 800278a:	430a      	orrs	r2, r1
 800278c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800278e:	687a      	ldr	r2, [r7, #4]
 8002790:	2380      	movs	r3, #128	; 0x80
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	429a      	cmp	r2, r3
 8002796:	d11f      	bne.n	80027d8 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002798:	4b14      	ldr	r3, [pc, #80]	; (80027ec <HAL_PWREx_ControlVoltageScaling+0x78>)
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	0013      	movs	r3, r2
 800279e:	005b      	lsls	r3, r3, #1
 80027a0:	189b      	adds	r3, r3, r2
 80027a2:	005b      	lsls	r3, r3, #1
 80027a4:	4912      	ldr	r1, [pc, #72]	; (80027f0 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80027a6:	0018      	movs	r0, r3
 80027a8:	f7fd fcbe 	bl	8000128 <__udivsi3>
 80027ac:	0003      	movs	r3, r0
 80027ae:	3301      	adds	r3, #1
 80027b0:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80027b2:	e008      	b.n	80027c6 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d003      	beq.n	80027c2 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	3b01      	subs	r3, #1
 80027be:	60fb      	str	r3, [r7, #12]
 80027c0:	e001      	b.n	80027c6 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80027c2:	2303      	movs	r3, #3
 80027c4:	e009      	b.n	80027da <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80027c6:	4b07      	ldr	r3, [pc, #28]	; (80027e4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80027c8:	695a      	ldr	r2, [r3, #20]
 80027ca:	2380      	movs	r3, #128	; 0x80
 80027cc:	00db      	lsls	r3, r3, #3
 80027ce:	401a      	ands	r2, r3
 80027d0:	2380      	movs	r3, #128	; 0x80
 80027d2:	00db      	lsls	r3, r3, #3
 80027d4:	429a      	cmp	r2, r3
 80027d6:	d0ed      	beq.n	80027b4 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80027d8:	2300      	movs	r3, #0
}
 80027da:	0018      	movs	r0, r3
 80027dc:	46bd      	mov	sp, r7
 80027de:	b004      	add	sp, #16
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	46c0      	nop			; (mov r8, r8)
 80027e4:	40007000 	.word	0x40007000
 80027e8:	fffff9ff 	.word	0xfffff9ff
 80027ec:	20000004 	.word	0x20000004
 80027f0:	000f4240 	.word	0x000f4240

080027f4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80027f8:	4b03      	ldr	r3, [pc, #12]	; (8002808 <LL_RCC_GetAPB1Prescaler+0x14>)
 80027fa:	689a      	ldr	r2, [r3, #8]
 80027fc:	23e0      	movs	r3, #224	; 0xe0
 80027fe:	01db      	lsls	r3, r3, #7
 8002800:	4013      	ands	r3, r2
}
 8002802:	0018      	movs	r0, r3
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}
 8002808:	40021000 	.word	0x40021000

0800280c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b088      	sub	sp, #32
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d102      	bne.n	8002820 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	f000 fb50 	bl	8002ec0 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	2201      	movs	r2, #1
 8002826:	4013      	ands	r3, r2
 8002828:	d100      	bne.n	800282c <HAL_RCC_OscConfig+0x20>
 800282a:	e07c      	b.n	8002926 <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800282c:	4bc3      	ldr	r3, [pc, #780]	; (8002b3c <HAL_RCC_OscConfig+0x330>)
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	2238      	movs	r2, #56	; 0x38
 8002832:	4013      	ands	r3, r2
 8002834:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002836:	4bc1      	ldr	r3, [pc, #772]	; (8002b3c <HAL_RCC_OscConfig+0x330>)
 8002838:	68db      	ldr	r3, [r3, #12]
 800283a:	2203      	movs	r2, #3
 800283c:	4013      	ands	r3, r2
 800283e:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002840:	69bb      	ldr	r3, [r7, #24]
 8002842:	2b10      	cmp	r3, #16
 8002844:	d102      	bne.n	800284c <HAL_RCC_OscConfig+0x40>
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	2b03      	cmp	r3, #3
 800284a:	d002      	beq.n	8002852 <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800284c:	69bb      	ldr	r3, [r7, #24]
 800284e:	2b08      	cmp	r3, #8
 8002850:	d10b      	bne.n	800286a <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002852:	4bba      	ldr	r3, [pc, #744]	; (8002b3c <HAL_RCC_OscConfig+0x330>)
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	2380      	movs	r3, #128	; 0x80
 8002858:	029b      	lsls	r3, r3, #10
 800285a:	4013      	ands	r3, r2
 800285c:	d062      	beq.n	8002924 <HAL_RCC_OscConfig+0x118>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d15e      	bne.n	8002924 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e32a      	b.n	8002ec0 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	685a      	ldr	r2, [r3, #4]
 800286e:	2380      	movs	r3, #128	; 0x80
 8002870:	025b      	lsls	r3, r3, #9
 8002872:	429a      	cmp	r2, r3
 8002874:	d107      	bne.n	8002886 <HAL_RCC_OscConfig+0x7a>
 8002876:	4bb1      	ldr	r3, [pc, #708]	; (8002b3c <HAL_RCC_OscConfig+0x330>)
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	4bb0      	ldr	r3, [pc, #704]	; (8002b3c <HAL_RCC_OscConfig+0x330>)
 800287c:	2180      	movs	r1, #128	; 0x80
 800287e:	0249      	lsls	r1, r1, #9
 8002880:	430a      	orrs	r2, r1
 8002882:	601a      	str	r2, [r3, #0]
 8002884:	e020      	b.n	80028c8 <HAL_RCC_OscConfig+0xbc>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	685a      	ldr	r2, [r3, #4]
 800288a:	23a0      	movs	r3, #160	; 0xa0
 800288c:	02db      	lsls	r3, r3, #11
 800288e:	429a      	cmp	r2, r3
 8002890:	d10e      	bne.n	80028b0 <HAL_RCC_OscConfig+0xa4>
 8002892:	4baa      	ldr	r3, [pc, #680]	; (8002b3c <HAL_RCC_OscConfig+0x330>)
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	4ba9      	ldr	r3, [pc, #676]	; (8002b3c <HAL_RCC_OscConfig+0x330>)
 8002898:	2180      	movs	r1, #128	; 0x80
 800289a:	02c9      	lsls	r1, r1, #11
 800289c:	430a      	orrs	r2, r1
 800289e:	601a      	str	r2, [r3, #0]
 80028a0:	4ba6      	ldr	r3, [pc, #664]	; (8002b3c <HAL_RCC_OscConfig+0x330>)
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	4ba5      	ldr	r3, [pc, #660]	; (8002b3c <HAL_RCC_OscConfig+0x330>)
 80028a6:	2180      	movs	r1, #128	; 0x80
 80028a8:	0249      	lsls	r1, r1, #9
 80028aa:	430a      	orrs	r2, r1
 80028ac:	601a      	str	r2, [r3, #0]
 80028ae:	e00b      	b.n	80028c8 <HAL_RCC_OscConfig+0xbc>
 80028b0:	4ba2      	ldr	r3, [pc, #648]	; (8002b3c <HAL_RCC_OscConfig+0x330>)
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	4ba1      	ldr	r3, [pc, #644]	; (8002b3c <HAL_RCC_OscConfig+0x330>)
 80028b6:	49a2      	ldr	r1, [pc, #648]	; (8002b40 <HAL_RCC_OscConfig+0x334>)
 80028b8:	400a      	ands	r2, r1
 80028ba:	601a      	str	r2, [r3, #0]
 80028bc:	4b9f      	ldr	r3, [pc, #636]	; (8002b3c <HAL_RCC_OscConfig+0x330>)
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	4b9e      	ldr	r3, [pc, #632]	; (8002b3c <HAL_RCC_OscConfig+0x330>)
 80028c2:	49a0      	ldr	r1, [pc, #640]	; (8002b44 <HAL_RCC_OscConfig+0x338>)
 80028c4:	400a      	ands	r2, r1
 80028c6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d014      	beq.n	80028fa <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028d0:	f7ff fa9e 	bl	8001e10 <HAL_GetTick>
 80028d4:	0003      	movs	r3, r0
 80028d6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028d8:	e008      	b.n	80028ec <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028da:	f7ff fa99 	bl	8001e10 <HAL_GetTick>
 80028de:	0002      	movs	r2, r0
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	1ad3      	subs	r3, r2, r3
 80028e4:	2b64      	cmp	r3, #100	; 0x64
 80028e6:	d901      	bls.n	80028ec <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 80028e8:	2303      	movs	r3, #3
 80028ea:	e2e9      	b.n	8002ec0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028ec:	4b93      	ldr	r3, [pc, #588]	; (8002b3c <HAL_RCC_OscConfig+0x330>)
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	2380      	movs	r3, #128	; 0x80
 80028f2:	029b      	lsls	r3, r3, #10
 80028f4:	4013      	ands	r3, r2
 80028f6:	d0f0      	beq.n	80028da <HAL_RCC_OscConfig+0xce>
 80028f8:	e015      	b.n	8002926 <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028fa:	f7ff fa89 	bl	8001e10 <HAL_GetTick>
 80028fe:	0003      	movs	r3, r0
 8002900:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002902:	e008      	b.n	8002916 <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002904:	f7ff fa84 	bl	8001e10 <HAL_GetTick>
 8002908:	0002      	movs	r2, r0
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	2b64      	cmp	r3, #100	; 0x64
 8002910:	d901      	bls.n	8002916 <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8002912:	2303      	movs	r3, #3
 8002914:	e2d4      	b.n	8002ec0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002916:	4b89      	ldr	r3, [pc, #548]	; (8002b3c <HAL_RCC_OscConfig+0x330>)
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	2380      	movs	r3, #128	; 0x80
 800291c:	029b      	lsls	r3, r3, #10
 800291e:	4013      	ands	r3, r2
 8002920:	d1f0      	bne.n	8002904 <HAL_RCC_OscConfig+0xf8>
 8002922:	e000      	b.n	8002926 <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002924:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	2202      	movs	r2, #2
 800292c:	4013      	ands	r3, r2
 800292e:	d100      	bne.n	8002932 <HAL_RCC_OscConfig+0x126>
 8002930:	e099      	b.n	8002a66 <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002932:	4b82      	ldr	r3, [pc, #520]	; (8002b3c <HAL_RCC_OscConfig+0x330>)
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	2238      	movs	r2, #56	; 0x38
 8002938:	4013      	ands	r3, r2
 800293a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800293c:	4b7f      	ldr	r3, [pc, #508]	; (8002b3c <HAL_RCC_OscConfig+0x330>)
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	2203      	movs	r2, #3
 8002942:	4013      	ands	r3, r2
 8002944:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002946:	69bb      	ldr	r3, [r7, #24]
 8002948:	2b10      	cmp	r3, #16
 800294a:	d102      	bne.n	8002952 <HAL_RCC_OscConfig+0x146>
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	2b02      	cmp	r3, #2
 8002950:	d002      	beq.n	8002958 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002952:	69bb      	ldr	r3, [r7, #24]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d135      	bne.n	80029c4 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002958:	4b78      	ldr	r3, [pc, #480]	; (8002b3c <HAL_RCC_OscConfig+0x330>)
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	2380      	movs	r3, #128	; 0x80
 800295e:	00db      	lsls	r3, r3, #3
 8002960:	4013      	ands	r3, r2
 8002962:	d005      	beq.n	8002970 <HAL_RCC_OscConfig+0x164>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d101      	bne.n	8002970 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	e2a7      	b.n	8002ec0 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002970:	4b72      	ldr	r3, [pc, #456]	; (8002b3c <HAL_RCC_OscConfig+0x330>)
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	4a74      	ldr	r2, [pc, #464]	; (8002b48 <HAL_RCC_OscConfig+0x33c>)
 8002976:	4013      	ands	r3, r2
 8002978:	0019      	movs	r1, r3
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	695b      	ldr	r3, [r3, #20]
 800297e:	021a      	lsls	r2, r3, #8
 8002980:	4b6e      	ldr	r3, [pc, #440]	; (8002b3c <HAL_RCC_OscConfig+0x330>)
 8002982:	430a      	orrs	r2, r1
 8002984:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002986:	69bb      	ldr	r3, [r7, #24]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d112      	bne.n	80029b2 <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800298c:	4b6b      	ldr	r3, [pc, #428]	; (8002b3c <HAL_RCC_OscConfig+0x330>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a6e      	ldr	r2, [pc, #440]	; (8002b4c <HAL_RCC_OscConfig+0x340>)
 8002992:	4013      	ands	r3, r2
 8002994:	0019      	movs	r1, r3
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	691a      	ldr	r2, [r3, #16]
 800299a:	4b68      	ldr	r3, [pc, #416]	; (8002b3c <HAL_RCC_OscConfig+0x330>)
 800299c:	430a      	orrs	r2, r1
 800299e:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80029a0:	4b66      	ldr	r3, [pc, #408]	; (8002b3c <HAL_RCC_OscConfig+0x330>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	0adb      	lsrs	r3, r3, #11
 80029a6:	2207      	movs	r2, #7
 80029a8:	4013      	ands	r3, r2
 80029aa:	4a69      	ldr	r2, [pc, #420]	; (8002b50 <HAL_RCC_OscConfig+0x344>)
 80029ac:	40da      	lsrs	r2, r3
 80029ae:	4b69      	ldr	r3, [pc, #420]	; (8002b54 <HAL_RCC_OscConfig+0x348>)
 80029b0:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80029b2:	4b69      	ldr	r3, [pc, #420]	; (8002b58 <HAL_RCC_OscConfig+0x34c>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	0018      	movs	r0, r3
 80029b8:	f7ff f9ce 	bl	8001d58 <HAL_InitTick>
 80029bc:	1e03      	subs	r3, r0, #0
 80029be:	d051      	beq.n	8002a64 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	e27d      	b.n	8002ec0 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d030      	beq.n	8002a2e <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80029cc:	4b5b      	ldr	r3, [pc, #364]	; (8002b3c <HAL_RCC_OscConfig+0x330>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a5e      	ldr	r2, [pc, #376]	; (8002b4c <HAL_RCC_OscConfig+0x340>)
 80029d2:	4013      	ands	r3, r2
 80029d4:	0019      	movs	r1, r3
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	691a      	ldr	r2, [r3, #16]
 80029da:	4b58      	ldr	r3, [pc, #352]	; (8002b3c <HAL_RCC_OscConfig+0x330>)
 80029dc:	430a      	orrs	r2, r1
 80029de:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80029e0:	4b56      	ldr	r3, [pc, #344]	; (8002b3c <HAL_RCC_OscConfig+0x330>)
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	4b55      	ldr	r3, [pc, #340]	; (8002b3c <HAL_RCC_OscConfig+0x330>)
 80029e6:	2180      	movs	r1, #128	; 0x80
 80029e8:	0049      	lsls	r1, r1, #1
 80029ea:	430a      	orrs	r2, r1
 80029ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ee:	f7ff fa0f 	bl	8001e10 <HAL_GetTick>
 80029f2:	0003      	movs	r3, r0
 80029f4:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029f6:	e008      	b.n	8002a0a <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029f8:	f7ff fa0a 	bl	8001e10 <HAL_GetTick>
 80029fc:	0002      	movs	r2, r0
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	2b02      	cmp	r3, #2
 8002a04:	d901      	bls.n	8002a0a <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8002a06:	2303      	movs	r3, #3
 8002a08:	e25a      	b.n	8002ec0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a0a:	4b4c      	ldr	r3, [pc, #304]	; (8002b3c <HAL_RCC_OscConfig+0x330>)
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	2380      	movs	r3, #128	; 0x80
 8002a10:	00db      	lsls	r3, r3, #3
 8002a12:	4013      	ands	r3, r2
 8002a14:	d0f0      	beq.n	80029f8 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a16:	4b49      	ldr	r3, [pc, #292]	; (8002b3c <HAL_RCC_OscConfig+0x330>)
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	4a4b      	ldr	r2, [pc, #300]	; (8002b48 <HAL_RCC_OscConfig+0x33c>)
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	0019      	movs	r1, r3
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	695b      	ldr	r3, [r3, #20]
 8002a24:	021a      	lsls	r2, r3, #8
 8002a26:	4b45      	ldr	r3, [pc, #276]	; (8002b3c <HAL_RCC_OscConfig+0x330>)
 8002a28:	430a      	orrs	r2, r1
 8002a2a:	605a      	str	r2, [r3, #4]
 8002a2c:	e01b      	b.n	8002a66 <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002a2e:	4b43      	ldr	r3, [pc, #268]	; (8002b3c <HAL_RCC_OscConfig+0x330>)
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	4b42      	ldr	r3, [pc, #264]	; (8002b3c <HAL_RCC_OscConfig+0x330>)
 8002a34:	4949      	ldr	r1, [pc, #292]	; (8002b5c <HAL_RCC_OscConfig+0x350>)
 8002a36:	400a      	ands	r2, r1
 8002a38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a3a:	f7ff f9e9 	bl	8001e10 <HAL_GetTick>
 8002a3e:	0003      	movs	r3, r0
 8002a40:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a42:	e008      	b.n	8002a56 <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a44:	f7ff f9e4 	bl	8001e10 <HAL_GetTick>
 8002a48:	0002      	movs	r2, r0
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	d901      	bls.n	8002a56 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8002a52:	2303      	movs	r3, #3
 8002a54:	e234      	b.n	8002ec0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a56:	4b39      	ldr	r3, [pc, #228]	; (8002b3c <HAL_RCC_OscConfig+0x330>)
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	2380      	movs	r3, #128	; 0x80
 8002a5c:	00db      	lsls	r3, r3, #3
 8002a5e:	4013      	ands	r3, r2
 8002a60:	d1f0      	bne.n	8002a44 <HAL_RCC_OscConfig+0x238>
 8002a62:	e000      	b.n	8002a66 <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a64:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	2208      	movs	r2, #8
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	d047      	beq.n	8002b00 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002a70:	4b32      	ldr	r3, [pc, #200]	; (8002b3c <HAL_RCC_OscConfig+0x330>)
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	2238      	movs	r2, #56	; 0x38
 8002a76:	4013      	ands	r3, r2
 8002a78:	2b18      	cmp	r3, #24
 8002a7a:	d10a      	bne.n	8002a92 <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002a7c:	4b2f      	ldr	r3, [pc, #188]	; (8002b3c <HAL_RCC_OscConfig+0x330>)
 8002a7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a80:	2202      	movs	r2, #2
 8002a82:	4013      	ands	r3, r2
 8002a84:	d03c      	beq.n	8002b00 <HAL_RCC_OscConfig+0x2f4>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	699b      	ldr	r3, [r3, #24]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d138      	bne.n	8002b00 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e216      	b.n	8002ec0 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	699b      	ldr	r3, [r3, #24]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d019      	beq.n	8002ace <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002a9a:	4b28      	ldr	r3, [pc, #160]	; (8002b3c <HAL_RCC_OscConfig+0x330>)
 8002a9c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002a9e:	4b27      	ldr	r3, [pc, #156]	; (8002b3c <HAL_RCC_OscConfig+0x330>)
 8002aa0:	2101      	movs	r1, #1
 8002aa2:	430a      	orrs	r2, r1
 8002aa4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aa6:	f7ff f9b3 	bl	8001e10 <HAL_GetTick>
 8002aaa:	0003      	movs	r3, r0
 8002aac:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002aae:	e008      	b.n	8002ac2 <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ab0:	f7ff f9ae 	bl	8001e10 <HAL_GetTick>
 8002ab4:	0002      	movs	r2, r0
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	2b02      	cmp	r3, #2
 8002abc:	d901      	bls.n	8002ac2 <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	e1fe      	b.n	8002ec0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ac2:	4b1e      	ldr	r3, [pc, #120]	; (8002b3c <HAL_RCC_OscConfig+0x330>)
 8002ac4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ac6:	2202      	movs	r2, #2
 8002ac8:	4013      	ands	r3, r2
 8002aca:	d0f1      	beq.n	8002ab0 <HAL_RCC_OscConfig+0x2a4>
 8002acc:	e018      	b.n	8002b00 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002ace:	4b1b      	ldr	r3, [pc, #108]	; (8002b3c <HAL_RCC_OscConfig+0x330>)
 8002ad0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002ad2:	4b1a      	ldr	r3, [pc, #104]	; (8002b3c <HAL_RCC_OscConfig+0x330>)
 8002ad4:	2101      	movs	r1, #1
 8002ad6:	438a      	bics	r2, r1
 8002ad8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ada:	f7ff f999 	bl	8001e10 <HAL_GetTick>
 8002ade:	0003      	movs	r3, r0
 8002ae0:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ae2:	e008      	b.n	8002af6 <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ae4:	f7ff f994 	bl	8001e10 <HAL_GetTick>
 8002ae8:	0002      	movs	r2, r0
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	2b02      	cmp	r3, #2
 8002af0:	d901      	bls.n	8002af6 <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 8002af2:	2303      	movs	r3, #3
 8002af4:	e1e4      	b.n	8002ec0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002af6:	4b11      	ldr	r3, [pc, #68]	; (8002b3c <HAL_RCC_OscConfig+0x330>)
 8002af8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002afa:	2202      	movs	r2, #2
 8002afc:	4013      	ands	r3, r2
 8002afe:	d1f1      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	2204      	movs	r2, #4
 8002b06:	4013      	ands	r3, r2
 8002b08:	d100      	bne.n	8002b0c <HAL_RCC_OscConfig+0x300>
 8002b0a:	e0c7      	b.n	8002c9c <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b0c:	231f      	movs	r3, #31
 8002b0e:	18fb      	adds	r3, r7, r3
 8002b10:	2200      	movs	r2, #0
 8002b12:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002b14:	4b09      	ldr	r3, [pc, #36]	; (8002b3c <HAL_RCC_OscConfig+0x330>)
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	2238      	movs	r2, #56	; 0x38
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	2b20      	cmp	r3, #32
 8002b1e:	d11f      	bne.n	8002b60 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002b20:	4b06      	ldr	r3, [pc, #24]	; (8002b3c <HAL_RCC_OscConfig+0x330>)
 8002b22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b24:	2202      	movs	r2, #2
 8002b26:	4013      	ands	r3, r2
 8002b28:	d100      	bne.n	8002b2c <HAL_RCC_OscConfig+0x320>
 8002b2a:	e0b7      	b.n	8002c9c <HAL_RCC_OscConfig+0x490>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d000      	beq.n	8002b36 <HAL_RCC_OscConfig+0x32a>
 8002b34:	e0b2      	b.n	8002c9c <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e1c2      	b.n	8002ec0 <HAL_RCC_OscConfig+0x6b4>
 8002b3a:	46c0      	nop			; (mov r8, r8)
 8002b3c:	40021000 	.word	0x40021000
 8002b40:	fffeffff 	.word	0xfffeffff
 8002b44:	fffbffff 	.word	0xfffbffff
 8002b48:	ffff80ff 	.word	0xffff80ff
 8002b4c:	ffffc7ff 	.word	0xffffc7ff
 8002b50:	00f42400 	.word	0x00f42400
 8002b54:	20000004 	.word	0x20000004
 8002b58:	20000008 	.word	0x20000008
 8002b5c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002b60:	4bb5      	ldr	r3, [pc, #724]	; (8002e38 <HAL_RCC_OscConfig+0x62c>)
 8002b62:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b64:	2380      	movs	r3, #128	; 0x80
 8002b66:	055b      	lsls	r3, r3, #21
 8002b68:	4013      	ands	r3, r2
 8002b6a:	d101      	bne.n	8002b70 <HAL_RCC_OscConfig+0x364>
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e000      	b.n	8002b72 <HAL_RCC_OscConfig+0x366>
 8002b70:	2300      	movs	r3, #0
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d011      	beq.n	8002b9a <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002b76:	4bb0      	ldr	r3, [pc, #704]	; (8002e38 <HAL_RCC_OscConfig+0x62c>)
 8002b78:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b7a:	4baf      	ldr	r3, [pc, #700]	; (8002e38 <HAL_RCC_OscConfig+0x62c>)
 8002b7c:	2180      	movs	r1, #128	; 0x80
 8002b7e:	0549      	lsls	r1, r1, #21
 8002b80:	430a      	orrs	r2, r1
 8002b82:	63da      	str	r2, [r3, #60]	; 0x3c
 8002b84:	4bac      	ldr	r3, [pc, #688]	; (8002e38 <HAL_RCC_OscConfig+0x62c>)
 8002b86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b88:	2380      	movs	r3, #128	; 0x80
 8002b8a:	055b      	lsls	r3, r3, #21
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	60fb      	str	r3, [r7, #12]
 8002b90:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002b92:	231f      	movs	r3, #31
 8002b94:	18fb      	adds	r3, r7, r3
 8002b96:	2201      	movs	r2, #1
 8002b98:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b9a:	4ba8      	ldr	r3, [pc, #672]	; (8002e3c <HAL_RCC_OscConfig+0x630>)
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	2380      	movs	r3, #128	; 0x80
 8002ba0:	005b      	lsls	r3, r3, #1
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	d11a      	bne.n	8002bdc <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ba6:	4ba5      	ldr	r3, [pc, #660]	; (8002e3c <HAL_RCC_OscConfig+0x630>)
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	4ba4      	ldr	r3, [pc, #656]	; (8002e3c <HAL_RCC_OscConfig+0x630>)
 8002bac:	2180      	movs	r1, #128	; 0x80
 8002bae:	0049      	lsls	r1, r1, #1
 8002bb0:	430a      	orrs	r2, r1
 8002bb2:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002bb4:	f7ff f92c 	bl	8001e10 <HAL_GetTick>
 8002bb8:	0003      	movs	r3, r0
 8002bba:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bbc:	e008      	b.n	8002bd0 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bbe:	f7ff f927 	bl	8001e10 <HAL_GetTick>
 8002bc2:	0002      	movs	r2, r0
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	1ad3      	subs	r3, r2, r3
 8002bc8:	2b02      	cmp	r3, #2
 8002bca:	d901      	bls.n	8002bd0 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8002bcc:	2303      	movs	r3, #3
 8002bce:	e177      	b.n	8002ec0 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bd0:	4b9a      	ldr	r3, [pc, #616]	; (8002e3c <HAL_RCC_OscConfig+0x630>)
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	2380      	movs	r3, #128	; 0x80
 8002bd6:	005b      	lsls	r3, r3, #1
 8002bd8:	4013      	ands	r3, r2
 8002bda:	d0f0      	beq.n	8002bbe <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d106      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x3e6>
 8002be4:	4b94      	ldr	r3, [pc, #592]	; (8002e38 <HAL_RCC_OscConfig+0x62c>)
 8002be6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002be8:	4b93      	ldr	r3, [pc, #588]	; (8002e38 <HAL_RCC_OscConfig+0x62c>)
 8002bea:	2101      	movs	r1, #1
 8002bec:	430a      	orrs	r2, r1
 8002bee:	65da      	str	r2, [r3, #92]	; 0x5c
 8002bf0:	e01c      	b.n	8002c2c <HAL_RCC_OscConfig+0x420>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	2b05      	cmp	r3, #5
 8002bf8:	d10c      	bne.n	8002c14 <HAL_RCC_OscConfig+0x408>
 8002bfa:	4b8f      	ldr	r3, [pc, #572]	; (8002e38 <HAL_RCC_OscConfig+0x62c>)
 8002bfc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002bfe:	4b8e      	ldr	r3, [pc, #568]	; (8002e38 <HAL_RCC_OscConfig+0x62c>)
 8002c00:	2104      	movs	r1, #4
 8002c02:	430a      	orrs	r2, r1
 8002c04:	65da      	str	r2, [r3, #92]	; 0x5c
 8002c06:	4b8c      	ldr	r3, [pc, #560]	; (8002e38 <HAL_RCC_OscConfig+0x62c>)
 8002c08:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002c0a:	4b8b      	ldr	r3, [pc, #556]	; (8002e38 <HAL_RCC_OscConfig+0x62c>)
 8002c0c:	2101      	movs	r1, #1
 8002c0e:	430a      	orrs	r2, r1
 8002c10:	65da      	str	r2, [r3, #92]	; 0x5c
 8002c12:	e00b      	b.n	8002c2c <HAL_RCC_OscConfig+0x420>
 8002c14:	4b88      	ldr	r3, [pc, #544]	; (8002e38 <HAL_RCC_OscConfig+0x62c>)
 8002c16:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002c18:	4b87      	ldr	r3, [pc, #540]	; (8002e38 <HAL_RCC_OscConfig+0x62c>)
 8002c1a:	2101      	movs	r1, #1
 8002c1c:	438a      	bics	r2, r1
 8002c1e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002c20:	4b85      	ldr	r3, [pc, #532]	; (8002e38 <HAL_RCC_OscConfig+0x62c>)
 8002c22:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002c24:	4b84      	ldr	r3, [pc, #528]	; (8002e38 <HAL_RCC_OscConfig+0x62c>)
 8002c26:	2104      	movs	r1, #4
 8002c28:	438a      	bics	r2, r1
 8002c2a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d014      	beq.n	8002c5e <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c34:	f7ff f8ec 	bl	8001e10 <HAL_GetTick>
 8002c38:	0003      	movs	r3, r0
 8002c3a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c3c:	e009      	b.n	8002c52 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c3e:	f7ff f8e7 	bl	8001e10 <HAL_GetTick>
 8002c42:	0002      	movs	r2, r0
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	1ad3      	subs	r3, r2, r3
 8002c48:	4a7d      	ldr	r2, [pc, #500]	; (8002e40 <HAL_RCC_OscConfig+0x634>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d901      	bls.n	8002c52 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8002c4e:	2303      	movs	r3, #3
 8002c50:	e136      	b.n	8002ec0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c52:	4b79      	ldr	r3, [pc, #484]	; (8002e38 <HAL_RCC_OscConfig+0x62c>)
 8002c54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c56:	2202      	movs	r2, #2
 8002c58:	4013      	ands	r3, r2
 8002c5a:	d0f0      	beq.n	8002c3e <HAL_RCC_OscConfig+0x432>
 8002c5c:	e013      	b.n	8002c86 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c5e:	f7ff f8d7 	bl	8001e10 <HAL_GetTick>
 8002c62:	0003      	movs	r3, r0
 8002c64:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c66:	e009      	b.n	8002c7c <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c68:	f7ff f8d2 	bl	8001e10 <HAL_GetTick>
 8002c6c:	0002      	movs	r2, r0
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	4a73      	ldr	r2, [pc, #460]	; (8002e40 <HAL_RCC_OscConfig+0x634>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d901      	bls.n	8002c7c <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8002c78:	2303      	movs	r3, #3
 8002c7a:	e121      	b.n	8002ec0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c7c:	4b6e      	ldr	r3, [pc, #440]	; (8002e38 <HAL_RCC_OscConfig+0x62c>)
 8002c7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c80:	2202      	movs	r2, #2
 8002c82:	4013      	ands	r3, r2
 8002c84:	d1f0      	bne.n	8002c68 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002c86:	231f      	movs	r3, #31
 8002c88:	18fb      	adds	r3, r7, r3
 8002c8a:	781b      	ldrb	r3, [r3, #0]
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d105      	bne.n	8002c9c <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002c90:	4b69      	ldr	r3, [pc, #420]	; (8002e38 <HAL_RCC_OscConfig+0x62c>)
 8002c92:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c94:	4b68      	ldr	r3, [pc, #416]	; (8002e38 <HAL_RCC_OscConfig+0x62c>)
 8002c96:	496b      	ldr	r1, [pc, #428]	; (8002e44 <HAL_RCC_OscConfig+0x638>)
 8002c98:	400a      	ands	r2, r1
 8002c9a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	2220      	movs	r2, #32
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	d039      	beq.n	8002d1a <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	69db      	ldr	r3, [r3, #28]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d01b      	beq.n	8002ce6 <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002cae:	4b62      	ldr	r3, [pc, #392]	; (8002e38 <HAL_RCC_OscConfig+0x62c>)
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	4b61      	ldr	r3, [pc, #388]	; (8002e38 <HAL_RCC_OscConfig+0x62c>)
 8002cb4:	2180      	movs	r1, #128	; 0x80
 8002cb6:	03c9      	lsls	r1, r1, #15
 8002cb8:	430a      	orrs	r2, r1
 8002cba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cbc:	f7ff f8a8 	bl	8001e10 <HAL_GetTick>
 8002cc0:	0003      	movs	r3, r0
 8002cc2:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002cc4:	e008      	b.n	8002cd8 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002cc6:	f7ff f8a3 	bl	8001e10 <HAL_GetTick>
 8002cca:	0002      	movs	r2, r0
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	1ad3      	subs	r3, r2, r3
 8002cd0:	2b02      	cmp	r3, #2
 8002cd2:	d901      	bls.n	8002cd8 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8002cd4:	2303      	movs	r3, #3
 8002cd6:	e0f3      	b.n	8002ec0 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002cd8:	4b57      	ldr	r3, [pc, #348]	; (8002e38 <HAL_RCC_OscConfig+0x62c>)
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	2380      	movs	r3, #128	; 0x80
 8002cde:	041b      	lsls	r3, r3, #16
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	d0f0      	beq.n	8002cc6 <HAL_RCC_OscConfig+0x4ba>
 8002ce4:	e019      	b.n	8002d1a <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002ce6:	4b54      	ldr	r3, [pc, #336]	; (8002e38 <HAL_RCC_OscConfig+0x62c>)
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	4b53      	ldr	r3, [pc, #332]	; (8002e38 <HAL_RCC_OscConfig+0x62c>)
 8002cec:	4956      	ldr	r1, [pc, #344]	; (8002e48 <HAL_RCC_OscConfig+0x63c>)
 8002cee:	400a      	ands	r2, r1
 8002cf0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cf2:	f7ff f88d 	bl	8001e10 <HAL_GetTick>
 8002cf6:	0003      	movs	r3, r0
 8002cf8:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002cfa:	e008      	b.n	8002d0e <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002cfc:	f7ff f888 	bl	8001e10 <HAL_GetTick>
 8002d00:	0002      	movs	r2, r0
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	2b02      	cmp	r3, #2
 8002d08:	d901      	bls.n	8002d0e <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	e0d8      	b.n	8002ec0 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002d0e:	4b4a      	ldr	r3, [pc, #296]	; (8002e38 <HAL_RCC_OscConfig+0x62c>)
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	2380      	movs	r3, #128	; 0x80
 8002d14:	041b      	lsls	r3, r3, #16
 8002d16:	4013      	ands	r3, r2
 8002d18:	d1f0      	bne.n	8002cfc <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6a1b      	ldr	r3, [r3, #32]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d100      	bne.n	8002d24 <HAL_RCC_OscConfig+0x518>
 8002d22:	e0cc      	b.n	8002ebe <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d24:	4b44      	ldr	r3, [pc, #272]	; (8002e38 <HAL_RCC_OscConfig+0x62c>)
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	2238      	movs	r2, #56	; 0x38
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	2b10      	cmp	r3, #16
 8002d2e:	d100      	bne.n	8002d32 <HAL_RCC_OscConfig+0x526>
 8002d30:	e07b      	b.n	8002e2a <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6a1b      	ldr	r3, [r3, #32]
 8002d36:	2b02      	cmp	r3, #2
 8002d38:	d156      	bne.n	8002de8 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d3a:	4b3f      	ldr	r3, [pc, #252]	; (8002e38 <HAL_RCC_OscConfig+0x62c>)
 8002d3c:	681a      	ldr	r2, [r3, #0]
 8002d3e:	4b3e      	ldr	r3, [pc, #248]	; (8002e38 <HAL_RCC_OscConfig+0x62c>)
 8002d40:	4942      	ldr	r1, [pc, #264]	; (8002e4c <HAL_RCC_OscConfig+0x640>)
 8002d42:	400a      	ands	r2, r1
 8002d44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d46:	f7ff f863 	bl	8001e10 <HAL_GetTick>
 8002d4a:	0003      	movs	r3, r0
 8002d4c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d4e:	e008      	b.n	8002d62 <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d50:	f7ff f85e 	bl	8001e10 <HAL_GetTick>
 8002d54:	0002      	movs	r2, r0
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	1ad3      	subs	r3, r2, r3
 8002d5a:	2b02      	cmp	r3, #2
 8002d5c:	d901      	bls.n	8002d62 <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 8002d5e:	2303      	movs	r3, #3
 8002d60:	e0ae      	b.n	8002ec0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d62:	4b35      	ldr	r3, [pc, #212]	; (8002e38 <HAL_RCC_OscConfig+0x62c>)
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	2380      	movs	r3, #128	; 0x80
 8002d68:	049b      	lsls	r3, r3, #18
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	d1f0      	bne.n	8002d50 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d6e:	4b32      	ldr	r3, [pc, #200]	; (8002e38 <HAL_RCC_OscConfig+0x62c>)
 8002d70:	68db      	ldr	r3, [r3, #12]
 8002d72:	4a37      	ldr	r2, [pc, #220]	; (8002e50 <HAL_RCC_OscConfig+0x644>)
 8002d74:	4013      	ands	r3, r2
 8002d76:	0019      	movs	r1, r3
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d80:	431a      	orrs	r2, r3
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d86:	021b      	lsls	r3, r3, #8
 8002d88:	431a      	orrs	r2, r3
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d8e:	431a      	orrs	r2, r3
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d94:	431a      	orrs	r2, r3
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d9a:	431a      	orrs	r2, r3
 8002d9c:	4b26      	ldr	r3, [pc, #152]	; (8002e38 <HAL_RCC_OscConfig+0x62c>)
 8002d9e:	430a      	orrs	r2, r1
 8002da0:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002da2:	4b25      	ldr	r3, [pc, #148]	; (8002e38 <HAL_RCC_OscConfig+0x62c>)
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	4b24      	ldr	r3, [pc, #144]	; (8002e38 <HAL_RCC_OscConfig+0x62c>)
 8002da8:	2180      	movs	r1, #128	; 0x80
 8002daa:	0449      	lsls	r1, r1, #17
 8002dac:	430a      	orrs	r2, r1
 8002dae:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002db0:	4b21      	ldr	r3, [pc, #132]	; (8002e38 <HAL_RCC_OscConfig+0x62c>)
 8002db2:	68da      	ldr	r2, [r3, #12]
 8002db4:	4b20      	ldr	r3, [pc, #128]	; (8002e38 <HAL_RCC_OscConfig+0x62c>)
 8002db6:	2180      	movs	r1, #128	; 0x80
 8002db8:	0549      	lsls	r1, r1, #21
 8002dba:	430a      	orrs	r2, r1
 8002dbc:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dbe:	f7ff f827 	bl	8001e10 <HAL_GetTick>
 8002dc2:	0003      	movs	r3, r0
 8002dc4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dc6:	e008      	b.n	8002dda <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dc8:	f7ff f822 	bl	8001e10 <HAL_GetTick>
 8002dcc:	0002      	movs	r2, r0
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	2b02      	cmp	r3, #2
 8002dd4:	d901      	bls.n	8002dda <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	e072      	b.n	8002ec0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dda:	4b17      	ldr	r3, [pc, #92]	; (8002e38 <HAL_RCC_OscConfig+0x62c>)
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	2380      	movs	r3, #128	; 0x80
 8002de0:	049b      	lsls	r3, r3, #18
 8002de2:	4013      	ands	r3, r2
 8002de4:	d0f0      	beq.n	8002dc8 <HAL_RCC_OscConfig+0x5bc>
 8002de6:	e06a      	b.n	8002ebe <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002de8:	4b13      	ldr	r3, [pc, #76]	; (8002e38 <HAL_RCC_OscConfig+0x62c>)
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	4b12      	ldr	r3, [pc, #72]	; (8002e38 <HAL_RCC_OscConfig+0x62c>)
 8002dee:	4917      	ldr	r1, [pc, #92]	; (8002e4c <HAL_RCC_OscConfig+0x640>)
 8002df0:	400a      	ands	r2, r1
 8002df2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002df4:	f7ff f80c 	bl	8001e10 <HAL_GetTick>
 8002df8:	0003      	movs	r3, r0
 8002dfa:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002dfc:	e008      	b.n	8002e10 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dfe:	f7ff f807 	bl	8001e10 <HAL_GetTick>
 8002e02:	0002      	movs	r2, r0
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	1ad3      	subs	r3, r2, r3
 8002e08:	2b02      	cmp	r3, #2
 8002e0a:	d901      	bls.n	8002e10 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8002e0c:	2303      	movs	r3, #3
 8002e0e:	e057      	b.n	8002ec0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e10:	4b09      	ldr	r3, [pc, #36]	; (8002e38 <HAL_RCC_OscConfig+0x62c>)
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	2380      	movs	r3, #128	; 0x80
 8002e16:	049b      	lsls	r3, r3, #18
 8002e18:	4013      	ands	r3, r2
 8002e1a:	d1f0      	bne.n	8002dfe <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8002e1c:	4b06      	ldr	r3, [pc, #24]	; (8002e38 <HAL_RCC_OscConfig+0x62c>)
 8002e1e:	68da      	ldr	r2, [r3, #12]
 8002e20:	4b05      	ldr	r3, [pc, #20]	; (8002e38 <HAL_RCC_OscConfig+0x62c>)
 8002e22:	490c      	ldr	r1, [pc, #48]	; (8002e54 <HAL_RCC_OscConfig+0x648>)
 8002e24:	400a      	ands	r2, r1
 8002e26:	60da      	str	r2, [r3, #12]
 8002e28:	e049      	b.n	8002ebe <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6a1b      	ldr	r3, [r3, #32]
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d112      	bne.n	8002e58 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e044      	b.n	8002ec0 <HAL_RCC_OscConfig+0x6b4>
 8002e36:	46c0      	nop			; (mov r8, r8)
 8002e38:	40021000 	.word	0x40021000
 8002e3c:	40007000 	.word	0x40007000
 8002e40:	00001388 	.word	0x00001388
 8002e44:	efffffff 	.word	0xefffffff
 8002e48:	ffbfffff 	.word	0xffbfffff
 8002e4c:	feffffff 	.word	0xfeffffff
 8002e50:	11c1808c 	.word	0x11c1808c
 8002e54:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002e58:	4b1b      	ldr	r3, [pc, #108]	; (8002ec8 <HAL_RCC_OscConfig+0x6bc>)
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	2203      	movs	r2, #3
 8002e62:	401a      	ands	r2, r3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d126      	bne.n	8002eba <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	2270      	movs	r2, #112	; 0x70
 8002e70:	401a      	ands	r2, r3
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e76:	429a      	cmp	r2, r3
 8002e78:	d11f      	bne.n	8002eba <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e7a:	697a      	ldr	r2, [r7, #20]
 8002e7c:	23fe      	movs	r3, #254	; 0xfe
 8002e7e:	01db      	lsls	r3, r3, #7
 8002e80:	401a      	ands	r2, r3
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e86:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d116      	bne.n	8002eba <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002e8c:	697a      	ldr	r2, [r7, #20]
 8002e8e:	23f8      	movs	r3, #248	; 0xf8
 8002e90:	039b      	lsls	r3, r3, #14
 8002e92:	401a      	ands	r2, r3
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d10e      	bne.n	8002eba <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002e9c:	697a      	ldr	r2, [r7, #20]
 8002e9e:	23e0      	movs	r3, #224	; 0xe0
 8002ea0:	051b      	lsls	r3, r3, #20
 8002ea2:	401a      	ands	r2, r3
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d106      	bne.n	8002eba <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	0f5b      	lsrs	r3, r3, #29
 8002eb0:	075a      	lsls	r2, r3, #29
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d001      	beq.n	8002ebe <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e000      	b.n	8002ec0 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 8002ebe:	2300      	movs	r3, #0
}
 8002ec0:	0018      	movs	r0, r3
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	b008      	add	sp, #32
 8002ec6:	bd80      	pop	{r7, pc}
 8002ec8:	40021000 	.word	0x40021000

08002ecc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b084      	sub	sp, #16
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
 8002ed4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d101      	bne.n	8002ee0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	e0e9      	b.n	80030b4 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ee0:	4b76      	ldr	r3, [pc, #472]	; (80030bc <HAL_RCC_ClockConfig+0x1f0>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	2207      	movs	r2, #7
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	683a      	ldr	r2, [r7, #0]
 8002eea:	429a      	cmp	r2, r3
 8002eec:	d91e      	bls.n	8002f2c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eee:	4b73      	ldr	r3, [pc, #460]	; (80030bc <HAL_RCC_ClockConfig+0x1f0>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	2207      	movs	r2, #7
 8002ef4:	4393      	bics	r3, r2
 8002ef6:	0019      	movs	r1, r3
 8002ef8:	4b70      	ldr	r3, [pc, #448]	; (80030bc <HAL_RCC_ClockConfig+0x1f0>)
 8002efa:	683a      	ldr	r2, [r7, #0]
 8002efc:	430a      	orrs	r2, r1
 8002efe:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002f00:	f7fe ff86 	bl	8001e10 <HAL_GetTick>
 8002f04:	0003      	movs	r3, r0
 8002f06:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002f08:	e009      	b.n	8002f1e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f0a:	f7fe ff81 	bl	8001e10 <HAL_GetTick>
 8002f0e:	0002      	movs	r2, r0
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	1ad3      	subs	r3, r2, r3
 8002f14:	4a6a      	ldr	r2, [pc, #424]	; (80030c0 <HAL_RCC_ClockConfig+0x1f4>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d901      	bls.n	8002f1e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	e0ca      	b.n	80030b4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002f1e:	4b67      	ldr	r3, [pc, #412]	; (80030bc <HAL_RCC_ClockConfig+0x1f0>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	2207      	movs	r2, #7
 8002f24:	4013      	ands	r3, r2
 8002f26:	683a      	ldr	r2, [r7, #0]
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d1ee      	bne.n	8002f0a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	2202      	movs	r2, #2
 8002f32:	4013      	ands	r3, r2
 8002f34:	d015      	beq.n	8002f62 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	2204      	movs	r2, #4
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	d006      	beq.n	8002f4e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002f40:	4b60      	ldr	r3, [pc, #384]	; (80030c4 <HAL_RCC_ClockConfig+0x1f8>)
 8002f42:	689a      	ldr	r2, [r3, #8]
 8002f44:	4b5f      	ldr	r3, [pc, #380]	; (80030c4 <HAL_RCC_ClockConfig+0x1f8>)
 8002f46:	21e0      	movs	r1, #224	; 0xe0
 8002f48:	01c9      	lsls	r1, r1, #7
 8002f4a:	430a      	orrs	r2, r1
 8002f4c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f4e:	4b5d      	ldr	r3, [pc, #372]	; (80030c4 <HAL_RCC_ClockConfig+0x1f8>)
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	4a5d      	ldr	r2, [pc, #372]	; (80030c8 <HAL_RCC_ClockConfig+0x1fc>)
 8002f54:	4013      	ands	r3, r2
 8002f56:	0019      	movs	r1, r3
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	689a      	ldr	r2, [r3, #8]
 8002f5c:	4b59      	ldr	r3, [pc, #356]	; (80030c4 <HAL_RCC_ClockConfig+0x1f8>)
 8002f5e:	430a      	orrs	r2, r1
 8002f60:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	2201      	movs	r2, #1
 8002f68:	4013      	ands	r3, r2
 8002f6a:	d057      	beq.n	800301c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d107      	bne.n	8002f84 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f74:	4b53      	ldr	r3, [pc, #332]	; (80030c4 <HAL_RCC_ClockConfig+0x1f8>)
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	2380      	movs	r3, #128	; 0x80
 8002f7a:	029b      	lsls	r3, r3, #10
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	d12b      	bne.n	8002fd8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e097      	b.n	80030b4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	2b02      	cmp	r3, #2
 8002f8a:	d107      	bne.n	8002f9c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f8c:	4b4d      	ldr	r3, [pc, #308]	; (80030c4 <HAL_RCC_ClockConfig+0x1f8>)
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	2380      	movs	r3, #128	; 0x80
 8002f92:	049b      	lsls	r3, r3, #18
 8002f94:	4013      	ands	r3, r2
 8002f96:	d11f      	bne.n	8002fd8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	e08b      	b.n	80030b4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d107      	bne.n	8002fb4 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002fa4:	4b47      	ldr	r3, [pc, #284]	; (80030c4 <HAL_RCC_ClockConfig+0x1f8>)
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	2380      	movs	r3, #128	; 0x80
 8002faa:	00db      	lsls	r3, r3, #3
 8002fac:	4013      	ands	r3, r2
 8002fae:	d113      	bne.n	8002fd8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e07f      	b.n	80030b4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	2b03      	cmp	r3, #3
 8002fba:	d106      	bne.n	8002fca <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002fbc:	4b41      	ldr	r3, [pc, #260]	; (80030c4 <HAL_RCC_ClockConfig+0x1f8>)
 8002fbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fc0:	2202      	movs	r2, #2
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	d108      	bne.n	8002fd8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e074      	b.n	80030b4 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fca:	4b3e      	ldr	r3, [pc, #248]	; (80030c4 <HAL_RCC_ClockConfig+0x1f8>)
 8002fcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fce:	2202      	movs	r2, #2
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	d101      	bne.n	8002fd8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e06d      	b.n	80030b4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002fd8:	4b3a      	ldr	r3, [pc, #232]	; (80030c4 <HAL_RCC_ClockConfig+0x1f8>)
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	2207      	movs	r2, #7
 8002fde:	4393      	bics	r3, r2
 8002fe0:	0019      	movs	r1, r3
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	685a      	ldr	r2, [r3, #4]
 8002fe6:	4b37      	ldr	r3, [pc, #220]	; (80030c4 <HAL_RCC_ClockConfig+0x1f8>)
 8002fe8:	430a      	orrs	r2, r1
 8002fea:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fec:	f7fe ff10 	bl	8001e10 <HAL_GetTick>
 8002ff0:	0003      	movs	r3, r0
 8002ff2:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ff4:	e009      	b.n	800300a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ff6:	f7fe ff0b 	bl	8001e10 <HAL_GetTick>
 8002ffa:	0002      	movs	r2, r0
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	1ad3      	subs	r3, r2, r3
 8003000:	4a2f      	ldr	r2, [pc, #188]	; (80030c0 <HAL_RCC_ClockConfig+0x1f4>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d901      	bls.n	800300a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8003006:	2303      	movs	r3, #3
 8003008:	e054      	b.n	80030b4 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800300a:	4b2e      	ldr	r3, [pc, #184]	; (80030c4 <HAL_RCC_ClockConfig+0x1f8>)
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	2238      	movs	r2, #56	; 0x38
 8003010:	401a      	ands	r2, r3
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	00db      	lsls	r3, r3, #3
 8003018:	429a      	cmp	r2, r3
 800301a:	d1ec      	bne.n	8002ff6 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800301c:	4b27      	ldr	r3, [pc, #156]	; (80030bc <HAL_RCC_ClockConfig+0x1f0>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	2207      	movs	r2, #7
 8003022:	4013      	ands	r3, r2
 8003024:	683a      	ldr	r2, [r7, #0]
 8003026:	429a      	cmp	r2, r3
 8003028:	d21e      	bcs.n	8003068 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800302a:	4b24      	ldr	r3, [pc, #144]	; (80030bc <HAL_RCC_ClockConfig+0x1f0>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	2207      	movs	r2, #7
 8003030:	4393      	bics	r3, r2
 8003032:	0019      	movs	r1, r3
 8003034:	4b21      	ldr	r3, [pc, #132]	; (80030bc <HAL_RCC_ClockConfig+0x1f0>)
 8003036:	683a      	ldr	r2, [r7, #0]
 8003038:	430a      	orrs	r2, r1
 800303a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800303c:	f7fe fee8 	bl	8001e10 <HAL_GetTick>
 8003040:	0003      	movs	r3, r0
 8003042:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003044:	e009      	b.n	800305a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003046:	f7fe fee3 	bl	8001e10 <HAL_GetTick>
 800304a:	0002      	movs	r2, r0
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	1ad3      	subs	r3, r2, r3
 8003050:	4a1b      	ldr	r2, [pc, #108]	; (80030c0 <HAL_RCC_ClockConfig+0x1f4>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d901      	bls.n	800305a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8003056:	2303      	movs	r3, #3
 8003058:	e02c      	b.n	80030b4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800305a:	4b18      	ldr	r3, [pc, #96]	; (80030bc <HAL_RCC_ClockConfig+0x1f0>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	2207      	movs	r2, #7
 8003060:	4013      	ands	r3, r2
 8003062:	683a      	ldr	r2, [r7, #0]
 8003064:	429a      	cmp	r2, r3
 8003066:	d1ee      	bne.n	8003046 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	2204      	movs	r2, #4
 800306e:	4013      	ands	r3, r2
 8003070:	d009      	beq.n	8003086 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003072:	4b14      	ldr	r3, [pc, #80]	; (80030c4 <HAL_RCC_ClockConfig+0x1f8>)
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	4a15      	ldr	r2, [pc, #84]	; (80030cc <HAL_RCC_ClockConfig+0x200>)
 8003078:	4013      	ands	r3, r2
 800307a:	0019      	movs	r1, r3
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	68da      	ldr	r2, [r3, #12]
 8003080:	4b10      	ldr	r3, [pc, #64]	; (80030c4 <HAL_RCC_ClockConfig+0x1f8>)
 8003082:	430a      	orrs	r2, r1
 8003084:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003086:	f000 f829 	bl	80030dc <HAL_RCC_GetSysClockFreq>
 800308a:	0001      	movs	r1, r0
 800308c:	4b0d      	ldr	r3, [pc, #52]	; (80030c4 <HAL_RCC_ClockConfig+0x1f8>)
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	0a1b      	lsrs	r3, r3, #8
 8003092:	220f      	movs	r2, #15
 8003094:	401a      	ands	r2, r3
 8003096:	4b0e      	ldr	r3, [pc, #56]	; (80030d0 <HAL_RCC_ClockConfig+0x204>)
 8003098:	0092      	lsls	r2, r2, #2
 800309a:	58d3      	ldr	r3, [r2, r3]
 800309c:	221f      	movs	r2, #31
 800309e:	4013      	ands	r3, r2
 80030a0:	000a      	movs	r2, r1
 80030a2:	40da      	lsrs	r2, r3
 80030a4:	4b0b      	ldr	r3, [pc, #44]	; (80030d4 <HAL_RCC_ClockConfig+0x208>)
 80030a6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80030a8:	4b0b      	ldr	r3, [pc, #44]	; (80030d8 <HAL_RCC_ClockConfig+0x20c>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	0018      	movs	r0, r3
 80030ae:	f7fe fe53 	bl	8001d58 <HAL_InitTick>
 80030b2:	0003      	movs	r3, r0
}
 80030b4:	0018      	movs	r0, r3
 80030b6:	46bd      	mov	sp, r7
 80030b8:	b004      	add	sp, #16
 80030ba:	bd80      	pop	{r7, pc}
 80030bc:	40022000 	.word	0x40022000
 80030c0:	00001388 	.word	0x00001388
 80030c4:	40021000 	.word	0x40021000
 80030c8:	fffff0ff 	.word	0xfffff0ff
 80030cc:	ffff8fff 	.word	0xffff8fff
 80030d0:	0800a668 	.word	0x0800a668
 80030d4:	20000004 	.word	0x20000004
 80030d8:	20000008 	.word	0x20000008

080030dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b086      	sub	sp, #24
 80030e0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80030e2:	4b3c      	ldr	r3, [pc, #240]	; (80031d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	2238      	movs	r2, #56	; 0x38
 80030e8:	4013      	ands	r3, r2
 80030ea:	d10f      	bne.n	800310c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80030ec:	4b39      	ldr	r3, [pc, #228]	; (80031d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	0adb      	lsrs	r3, r3, #11
 80030f2:	2207      	movs	r2, #7
 80030f4:	4013      	ands	r3, r2
 80030f6:	2201      	movs	r2, #1
 80030f8:	409a      	lsls	r2, r3
 80030fa:	0013      	movs	r3, r2
 80030fc:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80030fe:	6839      	ldr	r1, [r7, #0]
 8003100:	4835      	ldr	r0, [pc, #212]	; (80031d8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003102:	f7fd f811 	bl	8000128 <__udivsi3>
 8003106:	0003      	movs	r3, r0
 8003108:	613b      	str	r3, [r7, #16]
 800310a:	e05d      	b.n	80031c8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800310c:	4b31      	ldr	r3, [pc, #196]	; (80031d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	2238      	movs	r2, #56	; 0x38
 8003112:	4013      	ands	r3, r2
 8003114:	2b08      	cmp	r3, #8
 8003116:	d102      	bne.n	800311e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003118:	4b30      	ldr	r3, [pc, #192]	; (80031dc <HAL_RCC_GetSysClockFreq+0x100>)
 800311a:	613b      	str	r3, [r7, #16]
 800311c:	e054      	b.n	80031c8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800311e:	4b2d      	ldr	r3, [pc, #180]	; (80031d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	2238      	movs	r2, #56	; 0x38
 8003124:	4013      	ands	r3, r2
 8003126:	2b10      	cmp	r3, #16
 8003128:	d138      	bne.n	800319c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800312a:	4b2a      	ldr	r3, [pc, #168]	; (80031d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800312c:	68db      	ldr	r3, [r3, #12]
 800312e:	2203      	movs	r2, #3
 8003130:	4013      	ands	r3, r2
 8003132:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003134:	4b27      	ldr	r3, [pc, #156]	; (80031d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003136:	68db      	ldr	r3, [r3, #12]
 8003138:	091b      	lsrs	r3, r3, #4
 800313a:	2207      	movs	r2, #7
 800313c:	4013      	ands	r3, r2
 800313e:	3301      	adds	r3, #1
 8003140:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2b03      	cmp	r3, #3
 8003146:	d10d      	bne.n	8003164 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003148:	68b9      	ldr	r1, [r7, #8]
 800314a:	4824      	ldr	r0, [pc, #144]	; (80031dc <HAL_RCC_GetSysClockFreq+0x100>)
 800314c:	f7fc ffec 	bl	8000128 <__udivsi3>
 8003150:	0003      	movs	r3, r0
 8003152:	0019      	movs	r1, r3
 8003154:	4b1f      	ldr	r3, [pc, #124]	; (80031d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	0a1b      	lsrs	r3, r3, #8
 800315a:	227f      	movs	r2, #127	; 0x7f
 800315c:	4013      	ands	r3, r2
 800315e:	434b      	muls	r3, r1
 8003160:	617b      	str	r3, [r7, #20]
        break;
 8003162:	e00d      	b.n	8003180 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003164:	68b9      	ldr	r1, [r7, #8]
 8003166:	481c      	ldr	r0, [pc, #112]	; (80031d8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003168:	f7fc ffde 	bl	8000128 <__udivsi3>
 800316c:	0003      	movs	r3, r0
 800316e:	0019      	movs	r1, r3
 8003170:	4b18      	ldr	r3, [pc, #96]	; (80031d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	0a1b      	lsrs	r3, r3, #8
 8003176:	227f      	movs	r2, #127	; 0x7f
 8003178:	4013      	ands	r3, r2
 800317a:	434b      	muls	r3, r1
 800317c:	617b      	str	r3, [r7, #20]
        break;
 800317e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003180:	4b14      	ldr	r3, [pc, #80]	; (80031d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	0f5b      	lsrs	r3, r3, #29
 8003186:	2207      	movs	r2, #7
 8003188:	4013      	ands	r3, r2
 800318a:	3301      	adds	r3, #1
 800318c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800318e:	6879      	ldr	r1, [r7, #4]
 8003190:	6978      	ldr	r0, [r7, #20]
 8003192:	f7fc ffc9 	bl	8000128 <__udivsi3>
 8003196:	0003      	movs	r3, r0
 8003198:	613b      	str	r3, [r7, #16]
 800319a:	e015      	b.n	80031c8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800319c:	4b0d      	ldr	r3, [pc, #52]	; (80031d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	2238      	movs	r2, #56	; 0x38
 80031a2:	4013      	ands	r3, r2
 80031a4:	2b20      	cmp	r3, #32
 80031a6:	d103      	bne.n	80031b0 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80031a8:	2380      	movs	r3, #128	; 0x80
 80031aa:	021b      	lsls	r3, r3, #8
 80031ac:	613b      	str	r3, [r7, #16]
 80031ae:	e00b      	b.n	80031c8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80031b0:	4b08      	ldr	r3, [pc, #32]	; (80031d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	2238      	movs	r2, #56	; 0x38
 80031b6:	4013      	ands	r3, r2
 80031b8:	2b18      	cmp	r3, #24
 80031ba:	d103      	bne.n	80031c4 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80031bc:	23fa      	movs	r3, #250	; 0xfa
 80031be:	01db      	lsls	r3, r3, #7
 80031c0:	613b      	str	r3, [r7, #16]
 80031c2:	e001      	b.n	80031c8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80031c4:	2300      	movs	r3, #0
 80031c6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80031c8:	693b      	ldr	r3, [r7, #16]
}
 80031ca:	0018      	movs	r0, r3
 80031cc:	46bd      	mov	sp, r7
 80031ce:	b006      	add	sp, #24
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	46c0      	nop			; (mov r8, r8)
 80031d4:	40021000 	.word	0x40021000
 80031d8:	00f42400 	.word	0x00f42400
 80031dc:	007a1200 	.word	0x007a1200

080031e0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031e4:	4b02      	ldr	r3, [pc, #8]	; (80031f0 <HAL_RCC_GetHCLKFreq+0x10>)
 80031e6:	681b      	ldr	r3, [r3, #0]
}
 80031e8:	0018      	movs	r0, r3
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	46c0      	nop			; (mov r8, r8)
 80031f0:	20000004 	.word	0x20000004

080031f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031f4:	b5b0      	push	{r4, r5, r7, lr}
 80031f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80031f8:	f7ff fff2 	bl	80031e0 <HAL_RCC_GetHCLKFreq>
 80031fc:	0004      	movs	r4, r0
 80031fe:	f7ff faf9 	bl	80027f4 <LL_RCC_GetAPB1Prescaler>
 8003202:	0003      	movs	r3, r0
 8003204:	0b1a      	lsrs	r2, r3, #12
 8003206:	4b05      	ldr	r3, [pc, #20]	; (800321c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003208:	0092      	lsls	r2, r2, #2
 800320a:	58d3      	ldr	r3, [r2, r3]
 800320c:	221f      	movs	r2, #31
 800320e:	4013      	ands	r3, r2
 8003210:	40dc      	lsrs	r4, r3
 8003212:	0023      	movs	r3, r4
}
 8003214:	0018      	movs	r0, r3
 8003216:	46bd      	mov	sp, r7
 8003218:	bdb0      	pop	{r4, r5, r7, pc}
 800321a:	46c0      	nop			; (mov r8, r8)
 800321c:	0800a6a8 	.word	0x0800a6a8

08003220 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b086      	sub	sp, #24
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8003228:	2313      	movs	r3, #19
 800322a:	18fb      	adds	r3, r7, r3
 800322c:	2200      	movs	r2, #0
 800322e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003230:	2312      	movs	r3, #18
 8003232:	18fb      	adds	r3, r7, r3
 8003234:	2200      	movs	r2, #0
 8003236:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	2380      	movs	r3, #128	; 0x80
 800323e:	029b      	lsls	r3, r3, #10
 8003240:	4013      	ands	r3, r2
 8003242:	d100      	bne.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8003244:	e0ad      	b.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003246:	2011      	movs	r0, #17
 8003248:	183b      	adds	r3, r7, r0
 800324a:	2200      	movs	r2, #0
 800324c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800324e:	4b47      	ldr	r3, [pc, #284]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003250:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003252:	2380      	movs	r3, #128	; 0x80
 8003254:	055b      	lsls	r3, r3, #21
 8003256:	4013      	ands	r3, r2
 8003258:	d110      	bne.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800325a:	4b44      	ldr	r3, [pc, #272]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800325c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800325e:	4b43      	ldr	r3, [pc, #268]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003260:	2180      	movs	r1, #128	; 0x80
 8003262:	0549      	lsls	r1, r1, #21
 8003264:	430a      	orrs	r2, r1
 8003266:	63da      	str	r2, [r3, #60]	; 0x3c
 8003268:	4b40      	ldr	r3, [pc, #256]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800326a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800326c:	2380      	movs	r3, #128	; 0x80
 800326e:	055b      	lsls	r3, r3, #21
 8003270:	4013      	ands	r3, r2
 8003272:	60bb      	str	r3, [r7, #8]
 8003274:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003276:	183b      	adds	r3, r7, r0
 8003278:	2201      	movs	r2, #1
 800327a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800327c:	4b3c      	ldr	r3, [pc, #240]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	4b3b      	ldr	r3, [pc, #236]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8003282:	2180      	movs	r1, #128	; 0x80
 8003284:	0049      	lsls	r1, r1, #1
 8003286:	430a      	orrs	r2, r1
 8003288:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800328a:	f7fe fdc1 	bl	8001e10 <HAL_GetTick>
 800328e:	0003      	movs	r3, r0
 8003290:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003292:	e00b      	b.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003294:	f7fe fdbc 	bl	8001e10 <HAL_GetTick>
 8003298:	0002      	movs	r2, r0
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	1ad3      	subs	r3, r2, r3
 800329e:	2b02      	cmp	r3, #2
 80032a0:	d904      	bls.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80032a2:	2313      	movs	r3, #19
 80032a4:	18fb      	adds	r3, r7, r3
 80032a6:	2203      	movs	r2, #3
 80032a8:	701a      	strb	r2, [r3, #0]
        break;
 80032aa:	e005      	b.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80032ac:	4b30      	ldr	r3, [pc, #192]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	2380      	movs	r3, #128	; 0x80
 80032b2:	005b      	lsls	r3, r3, #1
 80032b4:	4013      	ands	r3, r2
 80032b6:	d0ed      	beq.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80032b8:	2313      	movs	r3, #19
 80032ba:	18fb      	adds	r3, r7, r3
 80032bc:	781b      	ldrb	r3, [r3, #0]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d15e      	bne.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80032c2:	4b2a      	ldr	r3, [pc, #168]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80032c4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80032c6:	23c0      	movs	r3, #192	; 0xc0
 80032c8:	009b      	lsls	r3, r3, #2
 80032ca:	4013      	ands	r3, r2
 80032cc:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d019      	beq.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d8:	697a      	ldr	r2, [r7, #20]
 80032da:	429a      	cmp	r2, r3
 80032dc:	d014      	beq.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80032de:	4b23      	ldr	r3, [pc, #140]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80032e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032e2:	4a24      	ldr	r2, [pc, #144]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 80032e4:	4013      	ands	r3, r2
 80032e6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80032e8:	4b20      	ldr	r3, [pc, #128]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80032ea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80032ec:	4b1f      	ldr	r3, [pc, #124]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80032ee:	2180      	movs	r1, #128	; 0x80
 80032f0:	0249      	lsls	r1, r1, #9
 80032f2:	430a      	orrs	r2, r1
 80032f4:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80032f6:	4b1d      	ldr	r3, [pc, #116]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80032f8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80032fa:	4b1c      	ldr	r3, [pc, #112]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80032fc:	491e      	ldr	r1, [pc, #120]	; (8003378 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 80032fe:	400a      	ands	r2, r1
 8003300:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003302:	4b1a      	ldr	r3, [pc, #104]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003304:	697a      	ldr	r2, [r7, #20]
 8003306:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	2201      	movs	r2, #1
 800330c:	4013      	ands	r3, r2
 800330e:	d016      	beq.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003310:	f7fe fd7e 	bl	8001e10 <HAL_GetTick>
 8003314:	0003      	movs	r3, r0
 8003316:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003318:	e00c      	b.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800331a:	f7fe fd79 	bl	8001e10 <HAL_GetTick>
 800331e:	0002      	movs	r2, r0
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	1ad3      	subs	r3, r2, r3
 8003324:	4a15      	ldr	r2, [pc, #84]	; (800337c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d904      	bls.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800332a:	2313      	movs	r3, #19
 800332c:	18fb      	adds	r3, r7, r3
 800332e:	2203      	movs	r2, #3
 8003330:	701a      	strb	r2, [r3, #0]
            break;
 8003332:	e004      	b.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003334:	4b0d      	ldr	r3, [pc, #52]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003336:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003338:	2202      	movs	r2, #2
 800333a:	4013      	ands	r3, r2
 800333c:	d0ed      	beq.n	800331a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800333e:	2313      	movs	r3, #19
 8003340:	18fb      	adds	r3, r7, r3
 8003342:	781b      	ldrb	r3, [r3, #0]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d10a      	bne.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003348:	4b08      	ldr	r3, [pc, #32]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800334a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800334c:	4a09      	ldr	r2, [pc, #36]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 800334e:	4013      	ands	r3, r2
 8003350:	0019      	movs	r1, r3
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003356:	4b05      	ldr	r3, [pc, #20]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003358:	430a      	orrs	r2, r1
 800335a:	65da      	str	r2, [r3, #92]	; 0x5c
 800335c:	e016      	b.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800335e:	2312      	movs	r3, #18
 8003360:	18fb      	adds	r3, r7, r3
 8003362:	2213      	movs	r2, #19
 8003364:	18ba      	adds	r2, r7, r2
 8003366:	7812      	ldrb	r2, [r2, #0]
 8003368:	701a      	strb	r2, [r3, #0]
 800336a:	e00f      	b.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800336c:	40021000 	.word	0x40021000
 8003370:	40007000 	.word	0x40007000
 8003374:	fffffcff 	.word	0xfffffcff
 8003378:	fffeffff 	.word	0xfffeffff
 800337c:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003380:	2312      	movs	r3, #18
 8003382:	18fb      	adds	r3, r7, r3
 8003384:	2213      	movs	r2, #19
 8003386:	18ba      	adds	r2, r7, r2
 8003388:	7812      	ldrb	r2, [r2, #0]
 800338a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800338c:	2311      	movs	r3, #17
 800338e:	18fb      	adds	r3, r7, r3
 8003390:	781b      	ldrb	r3, [r3, #0]
 8003392:	2b01      	cmp	r3, #1
 8003394:	d105      	bne.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003396:	4bb6      	ldr	r3, [pc, #728]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003398:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800339a:	4bb5      	ldr	r3, [pc, #724]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800339c:	49b5      	ldr	r1, [pc, #724]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 800339e:	400a      	ands	r2, r1
 80033a0:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	2201      	movs	r2, #1
 80033a8:	4013      	ands	r3, r2
 80033aa:	d009      	beq.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80033ac:	4bb0      	ldr	r3, [pc, #704]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80033ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033b0:	2203      	movs	r2, #3
 80033b2:	4393      	bics	r3, r2
 80033b4:	0019      	movs	r1, r3
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	685a      	ldr	r2, [r3, #4]
 80033ba:	4bad      	ldr	r3, [pc, #692]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80033bc:	430a      	orrs	r2, r1
 80033be:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	2202      	movs	r2, #2
 80033c6:	4013      	ands	r3, r2
 80033c8:	d009      	beq.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80033ca:	4ba9      	ldr	r3, [pc, #676]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80033cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033ce:	220c      	movs	r2, #12
 80033d0:	4393      	bics	r3, r2
 80033d2:	0019      	movs	r1, r3
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	689a      	ldr	r2, [r3, #8]
 80033d8:	4ba5      	ldr	r3, [pc, #660]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80033da:	430a      	orrs	r2, r1
 80033dc:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	2204      	movs	r2, #4
 80033e4:	4013      	ands	r3, r2
 80033e6:	d009      	beq.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80033e8:	4ba1      	ldr	r3, [pc, #644]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80033ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033ec:	2230      	movs	r2, #48	; 0x30
 80033ee:	4393      	bics	r3, r2
 80033f0:	0019      	movs	r1, r3
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	68da      	ldr	r2, [r3, #12]
 80033f6:	4b9e      	ldr	r3, [pc, #632]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80033f8:	430a      	orrs	r2, r1
 80033fa:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	2210      	movs	r2, #16
 8003402:	4013      	ands	r3, r2
 8003404:	d009      	beq.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003406:	4b9a      	ldr	r3, [pc, #616]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003408:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800340a:	4a9b      	ldr	r2, [pc, #620]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800340c:	4013      	ands	r3, r2
 800340e:	0019      	movs	r1, r3
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	691a      	ldr	r2, [r3, #16]
 8003414:	4b96      	ldr	r3, [pc, #600]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003416:	430a      	orrs	r2, r1
 8003418:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	2380      	movs	r3, #128	; 0x80
 8003420:	015b      	lsls	r3, r3, #5
 8003422:	4013      	ands	r3, r2
 8003424:	d009      	beq.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8003426:	4b92      	ldr	r3, [pc, #584]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003428:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800342a:	4a94      	ldr	r2, [pc, #592]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800342c:	4013      	ands	r3, r2
 800342e:	0019      	movs	r1, r3
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	695a      	ldr	r2, [r3, #20]
 8003434:	4b8e      	ldr	r3, [pc, #568]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003436:	430a      	orrs	r2, r1
 8003438:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	2380      	movs	r3, #128	; 0x80
 8003440:	009b      	lsls	r3, r3, #2
 8003442:	4013      	ands	r3, r2
 8003444:	d009      	beq.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003446:	4b8a      	ldr	r3, [pc, #552]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003448:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800344a:	4a8d      	ldr	r2, [pc, #564]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 800344c:	4013      	ands	r3, r2
 800344e:	0019      	movs	r1, r3
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003454:	4b86      	ldr	r3, [pc, #536]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003456:	430a      	orrs	r2, r1
 8003458:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	2380      	movs	r3, #128	; 0x80
 8003460:	00db      	lsls	r3, r3, #3
 8003462:	4013      	ands	r3, r2
 8003464:	d009      	beq.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003466:	4b82      	ldr	r3, [pc, #520]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003468:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800346a:	4a86      	ldr	r2, [pc, #536]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 800346c:	4013      	ands	r3, r2
 800346e:	0019      	movs	r1, r3
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003474:	4b7e      	ldr	r3, [pc, #504]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003476:	430a      	orrs	r2, r1
 8003478:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	2220      	movs	r2, #32
 8003480:	4013      	ands	r3, r2
 8003482:	d009      	beq.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003484:	4b7a      	ldr	r3, [pc, #488]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003486:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003488:	4a7f      	ldr	r2, [pc, #508]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800348a:	4013      	ands	r3, r2
 800348c:	0019      	movs	r1, r3
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	699a      	ldr	r2, [r3, #24]
 8003492:	4b77      	ldr	r3, [pc, #476]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003494:	430a      	orrs	r2, r1
 8003496:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	2240      	movs	r2, #64	; 0x40
 800349e:	4013      	ands	r3, r2
 80034a0:	d009      	beq.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80034a2:	4b73      	ldr	r3, [pc, #460]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80034a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034a6:	4a79      	ldr	r2, [pc, #484]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 80034a8:	4013      	ands	r3, r2
 80034aa:	0019      	movs	r1, r3
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	69da      	ldr	r2, [r3, #28]
 80034b0:	4b6f      	ldr	r3, [pc, #444]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80034b2:	430a      	orrs	r2, r1
 80034b4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	2380      	movs	r3, #128	; 0x80
 80034bc:	01db      	lsls	r3, r3, #7
 80034be:	4013      	ands	r3, r2
 80034c0:	d015      	beq.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80034c2:	4b6b      	ldr	r3, [pc, #428]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80034c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	0899      	lsrs	r1, r3, #2
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034ce:	4b68      	ldr	r3, [pc, #416]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80034d0:	430a      	orrs	r2, r1
 80034d2:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034d8:	2380      	movs	r3, #128	; 0x80
 80034da:	05db      	lsls	r3, r3, #23
 80034dc:	429a      	cmp	r2, r3
 80034de:	d106      	bne.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80034e0:	4b63      	ldr	r3, [pc, #396]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80034e2:	68da      	ldr	r2, [r3, #12]
 80034e4:	4b62      	ldr	r3, [pc, #392]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80034e6:	2180      	movs	r1, #128	; 0x80
 80034e8:	0249      	lsls	r1, r1, #9
 80034ea:	430a      	orrs	r2, r1
 80034ec:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681a      	ldr	r2, [r3, #0]
 80034f2:	2380      	movs	r3, #128	; 0x80
 80034f4:	031b      	lsls	r3, r3, #12
 80034f6:	4013      	ands	r3, r2
 80034f8:	d009      	beq.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80034fa:	4b5d      	ldr	r3, [pc, #372]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80034fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034fe:	2240      	movs	r2, #64	; 0x40
 8003500:	4393      	bics	r3, r2
 8003502:	0019      	movs	r1, r3
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003508:	4b59      	ldr	r3, [pc, #356]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800350a:	430a      	orrs	r2, r1
 800350c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	2380      	movs	r3, #128	; 0x80
 8003514:	039b      	lsls	r3, r3, #14
 8003516:	4013      	ands	r3, r2
 8003518:	d016      	beq.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800351a:	4b55      	ldr	r3, [pc, #340]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800351c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800351e:	4a5c      	ldr	r2, [pc, #368]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8003520:	4013      	ands	r3, r2
 8003522:	0019      	movs	r1, r3
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003528:	4b51      	ldr	r3, [pc, #324]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800352a:	430a      	orrs	r2, r1
 800352c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003532:	2380      	movs	r3, #128	; 0x80
 8003534:	03db      	lsls	r3, r3, #15
 8003536:	429a      	cmp	r2, r3
 8003538:	d106      	bne.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800353a:	4b4d      	ldr	r3, [pc, #308]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800353c:	68da      	ldr	r2, [r3, #12]
 800353e:	4b4c      	ldr	r3, [pc, #304]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003540:	2180      	movs	r1, #128	; 0x80
 8003542:	0449      	lsls	r1, r1, #17
 8003544:	430a      	orrs	r2, r1
 8003546:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	2380      	movs	r3, #128	; 0x80
 800354e:	03db      	lsls	r3, r3, #15
 8003550:	4013      	ands	r3, r2
 8003552:	d016      	beq.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003554:	4b46      	ldr	r3, [pc, #280]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003556:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003558:	4a4e      	ldr	r2, [pc, #312]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800355a:	4013      	ands	r3, r2
 800355c:	0019      	movs	r1, r3
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003562:	4b43      	ldr	r3, [pc, #268]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003564:	430a      	orrs	r2, r1
 8003566:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800356c:	2380      	movs	r3, #128	; 0x80
 800356e:	045b      	lsls	r3, r3, #17
 8003570:	429a      	cmp	r2, r3
 8003572:	d106      	bne.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003574:	4b3e      	ldr	r3, [pc, #248]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003576:	68da      	ldr	r2, [r3, #12]
 8003578:	4b3d      	ldr	r3, [pc, #244]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800357a:	2180      	movs	r1, #128	; 0x80
 800357c:	0449      	lsls	r1, r1, #17
 800357e:	430a      	orrs	r2, r1
 8003580:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	2380      	movs	r3, #128	; 0x80
 8003588:	011b      	lsls	r3, r3, #4
 800358a:	4013      	ands	r3, r2
 800358c:	d014      	beq.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800358e:	4b38      	ldr	r3, [pc, #224]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003590:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003592:	2203      	movs	r2, #3
 8003594:	4393      	bics	r3, r2
 8003596:	0019      	movs	r1, r3
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6a1a      	ldr	r2, [r3, #32]
 800359c:	4b34      	ldr	r3, [pc, #208]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800359e:	430a      	orrs	r2, r1
 80035a0:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6a1b      	ldr	r3, [r3, #32]
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d106      	bne.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80035aa:	4b31      	ldr	r3, [pc, #196]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80035ac:	68da      	ldr	r2, [r3, #12]
 80035ae:	4b30      	ldr	r3, [pc, #192]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80035b0:	2180      	movs	r1, #128	; 0x80
 80035b2:	0249      	lsls	r1, r1, #9
 80035b4:	430a      	orrs	r2, r1
 80035b6:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	2380      	movs	r3, #128	; 0x80
 80035be:	019b      	lsls	r3, r3, #6
 80035c0:	4013      	ands	r3, r2
 80035c2:	d014      	beq.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80035c4:	4b2a      	ldr	r3, [pc, #168]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80035c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035c8:	220c      	movs	r2, #12
 80035ca:	4393      	bics	r3, r2
 80035cc:	0019      	movs	r1, r3
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80035d2:	4b27      	ldr	r3, [pc, #156]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80035d4:	430a      	orrs	r2, r1
 80035d6:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035dc:	2b04      	cmp	r3, #4
 80035de:	d106      	bne.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80035e0:	4b23      	ldr	r3, [pc, #140]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80035e2:	68da      	ldr	r2, [r3, #12]
 80035e4:	4b22      	ldr	r3, [pc, #136]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80035e6:	2180      	movs	r1, #128	; 0x80
 80035e8:	0249      	lsls	r1, r1, #9
 80035ea:	430a      	orrs	r2, r1
 80035ec:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	2380      	movs	r3, #128	; 0x80
 80035f4:	045b      	lsls	r3, r3, #17
 80035f6:	4013      	ands	r3, r2
 80035f8:	d016      	beq.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80035fa:	4b1d      	ldr	r3, [pc, #116]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80035fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035fe:	4a22      	ldr	r2, [pc, #136]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003600:	4013      	ands	r3, r2
 8003602:	0019      	movs	r1, r3
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003608:	4b19      	ldr	r3, [pc, #100]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800360a:	430a      	orrs	r2, r1
 800360c:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003612:	2380      	movs	r3, #128	; 0x80
 8003614:	019b      	lsls	r3, r3, #6
 8003616:	429a      	cmp	r2, r3
 8003618:	d106      	bne.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800361a:	4b15      	ldr	r3, [pc, #84]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800361c:	68da      	ldr	r2, [r3, #12]
 800361e:	4b14      	ldr	r3, [pc, #80]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003620:	2180      	movs	r1, #128	; 0x80
 8003622:	0449      	lsls	r1, r1, #17
 8003624:	430a      	orrs	r2, r1
 8003626:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	2380      	movs	r3, #128	; 0x80
 800362e:	049b      	lsls	r3, r3, #18
 8003630:	4013      	ands	r3, r2
 8003632:	d016      	beq.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003634:	4b0e      	ldr	r3, [pc, #56]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003636:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003638:	4a10      	ldr	r2, [pc, #64]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800363a:	4013      	ands	r3, r2
 800363c:	0019      	movs	r1, r3
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003642:	4b0b      	ldr	r3, [pc, #44]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003644:	430a      	orrs	r2, r1
 8003646:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800364c:	2380      	movs	r3, #128	; 0x80
 800364e:	005b      	lsls	r3, r3, #1
 8003650:	429a      	cmp	r2, r3
 8003652:	d106      	bne.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003654:	4b06      	ldr	r3, [pc, #24]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003656:	68da      	ldr	r2, [r3, #12]
 8003658:	4b05      	ldr	r3, [pc, #20]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800365a:	2180      	movs	r1, #128	; 0x80
 800365c:	0449      	lsls	r1, r1, #17
 800365e:	430a      	orrs	r2, r1
 8003660:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8003662:	2312      	movs	r3, #18
 8003664:	18fb      	adds	r3, r7, r3
 8003666:	781b      	ldrb	r3, [r3, #0]
}
 8003668:	0018      	movs	r0, r3
 800366a:	46bd      	mov	sp, r7
 800366c:	b006      	add	sp, #24
 800366e:	bd80      	pop	{r7, pc}
 8003670:	40021000 	.word	0x40021000
 8003674:	efffffff 	.word	0xefffffff
 8003678:	fffff3ff 	.word	0xfffff3ff
 800367c:	fffffcff 	.word	0xfffffcff
 8003680:	fff3ffff 	.word	0xfff3ffff
 8003684:	ffcfffff 	.word	0xffcfffff
 8003688:	ffffcfff 	.word	0xffffcfff
 800368c:	ffff3fff 	.word	0xffff3fff
 8003690:	ffbfffff 	.word	0xffbfffff
 8003694:	feffffff 	.word	0xfeffffff

08003698 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003698:	b5b0      	push	{r4, r5, r7, lr}
 800369a:	b084      	sub	sp, #16
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80036a0:	230f      	movs	r3, #15
 80036a2:	18fb      	adds	r3, r7, r3
 80036a4:	2201      	movs	r2, #1
 80036a6:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d100      	bne.n	80036b0 <HAL_RTC_Init+0x18>
 80036ae:	e08c      	b.n	80037ca <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2229      	movs	r2, #41	; 0x29
 80036b4:	5c9b      	ldrb	r3, [r3, r2]
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d10b      	bne.n	80036d4 <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2228      	movs	r2, #40	; 0x28
 80036c0:	2100      	movs	r1, #0
 80036c2:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2288      	movs	r2, #136	; 0x88
 80036c8:	0212      	lsls	r2, r2, #8
 80036ca:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	0018      	movs	r0, r3
 80036d0:	f7fe f8b0 	bl	8001834 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2229      	movs	r2, #41	; 0x29
 80036d8:	2102      	movs	r1, #2
 80036da:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	68db      	ldr	r3, [r3, #12]
 80036e2:	2210      	movs	r2, #16
 80036e4:	4013      	ands	r3, r2
 80036e6:	2b10      	cmp	r3, #16
 80036e8:	d062      	beq.n	80037b0 <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	22ca      	movs	r2, #202	; 0xca
 80036f0:	625a      	str	r2, [r3, #36]	; 0x24
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	2253      	movs	r2, #83	; 0x53
 80036f8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80036fa:	250f      	movs	r5, #15
 80036fc:	197c      	adds	r4, r7, r5
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	0018      	movs	r0, r3
 8003702:	f000 f891 	bl	8003828 <RTC_EnterInitMode>
 8003706:	0003      	movs	r3, r0
 8003708:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 800370a:	0028      	movs	r0, r5
 800370c:	183b      	adds	r3, r7, r0
 800370e:	781b      	ldrb	r3, [r3, #0]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d12c      	bne.n	800376e <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	699a      	ldr	r2, [r3, #24]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	492e      	ldr	r1, [pc, #184]	; (80037d8 <HAL_RTC_Init+0x140>)
 8003720:	400a      	ands	r2, r1
 8003722:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	6999      	ldr	r1, [r3, #24]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	689a      	ldr	r2, [r3, #8]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	695b      	ldr	r3, [r3, #20]
 8003732:	431a      	orrs	r2, r3
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	69db      	ldr	r3, [r3, #28]
 8003738:	431a      	orrs	r2, r3
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	430a      	orrs	r2, r1
 8003740:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	687a      	ldr	r2, [r7, #4]
 8003748:	6912      	ldr	r2, [r2, #16]
 800374a:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	6919      	ldr	r1, [r3, #16]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	68db      	ldr	r3, [r3, #12]
 8003756:	041a      	lsls	r2, r3, #16
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	430a      	orrs	r2, r1
 800375e:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8003760:	183c      	adds	r4, r7, r0
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	0018      	movs	r0, r3
 8003766:	f000 f8a1 	bl	80038ac <RTC_ExitInitMode>
 800376a:	0003      	movs	r3, r0
 800376c:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 800376e:	230f      	movs	r3, #15
 8003770:	18fb      	adds	r3, r7, r3
 8003772:	781b      	ldrb	r3, [r3, #0]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d116      	bne.n	80037a6 <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	699a      	ldr	r2, [r3, #24]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	00d2      	lsls	r2, r2, #3
 8003784:	08d2      	lsrs	r2, r2, #3
 8003786:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	6999      	ldr	r1, [r3, #24]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6a1b      	ldr	r3, [r3, #32]
 8003796:	431a      	orrs	r2, r3
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	699b      	ldr	r3, [r3, #24]
 800379c:	431a      	orrs	r2, r3
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	430a      	orrs	r2, r1
 80037a4:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	22ff      	movs	r2, #255	; 0xff
 80037ac:	625a      	str	r2, [r3, #36]	; 0x24
 80037ae:	e003      	b.n	80037b8 <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 80037b0:	230f      	movs	r3, #15
 80037b2:	18fb      	adds	r3, r7, r3
 80037b4:	2200      	movs	r2, #0
 80037b6:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 80037b8:	230f      	movs	r3, #15
 80037ba:	18fb      	adds	r3, r7, r3
 80037bc:	781b      	ldrb	r3, [r3, #0]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d103      	bne.n	80037ca <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2229      	movs	r2, #41	; 0x29
 80037c6:	2101      	movs	r1, #1
 80037c8:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 80037ca:	230f      	movs	r3, #15
 80037cc:	18fb      	adds	r3, r7, r3
 80037ce:	781b      	ldrb	r3, [r3, #0]
}
 80037d0:	0018      	movs	r0, r3
 80037d2:	46bd      	mov	sp, r7
 80037d4:	b004      	add	sp, #16
 80037d6:	bdb0      	pop	{r4, r5, r7, pc}
 80037d8:	fb8fffbf 	.word	0xfb8fffbf

080037dc <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b084      	sub	sp, #16
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a0e      	ldr	r2, [pc, #56]	; (8003824 <HAL_RTC_WaitForSynchro+0x48>)
 80037ea:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80037ec:	f7fe fb10 	bl	8001e10 <HAL_GetTick>
 80037f0:	0003      	movs	r3, r0
 80037f2:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80037f4:	e00a      	b.n	800380c <HAL_RTC_WaitForSynchro+0x30>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80037f6:	f7fe fb0b 	bl	8001e10 <HAL_GetTick>
 80037fa:	0002      	movs	r2, r0
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	1ad2      	subs	r2, r2, r3
 8003800:	23fa      	movs	r3, #250	; 0xfa
 8003802:	009b      	lsls	r3, r3, #2
 8003804:	429a      	cmp	r2, r3
 8003806:	d901      	bls.n	800380c <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8003808:	2303      	movs	r3, #3
 800380a:	e006      	b.n	800381a <HAL_RTC_WaitForSynchro+0x3e>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	68db      	ldr	r3, [r3, #12]
 8003812:	2220      	movs	r2, #32
 8003814:	4013      	ands	r3, r2
 8003816:	d0ee      	beq.n	80037f6 <HAL_RTC_WaitForSynchro+0x1a>
    }
  }

  return HAL_OK;
 8003818:	2300      	movs	r3, #0
}
 800381a:	0018      	movs	r0, r3
 800381c:	46bd      	mov	sp, r7
 800381e:	b004      	add	sp, #16
 8003820:	bd80      	pop	{r7, pc}
 8003822:	46c0      	nop			; (mov r8, r8)
 8003824:	0001005f 	.word	0x0001005f

08003828 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b084      	sub	sp, #16
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 8003830:	230f      	movs	r3, #15
 8003832:	18fb      	adds	r3, r7, r3
 8003834:	2200      	movs	r2, #0
 8003836:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	68db      	ldr	r3, [r3, #12]
 800383e:	2240      	movs	r2, #64	; 0x40
 8003840:	4013      	ands	r3, r2
 8003842:	d12c      	bne.n	800389e <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	68da      	ldr	r2, [r3, #12]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	2180      	movs	r1, #128	; 0x80
 8003850:	430a      	orrs	r2, r1
 8003852:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003854:	f7fe fadc 	bl	8001e10 <HAL_GetTick>
 8003858:	0003      	movs	r3, r0
 800385a:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800385c:	e014      	b.n	8003888 <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 800385e:	f7fe fad7 	bl	8001e10 <HAL_GetTick>
 8003862:	0002      	movs	r2, r0
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	1ad2      	subs	r2, r2, r3
 8003868:	200f      	movs	r0, #15
 800386a:	183b      	adds	r3, r7, r0
 800386c:	1839      	adds	r1, r7, r0
 800386e:	7809      	ldrb	r1, [r1, #0]
 8003870:	7019      	strb	r1, [r3, #0]
 8003872:	23fa      	movs	r3, #250	; 0xfa
 8003874:	009b      	lsls	r3, r3, #2
 8003876:	429a      	cmp	r2, r3
 8003878:	d906      	bls.n	8003888 <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 800387a:	183b      	adds	r3, r7, r0
 800387c:	2203      	movs	r2, #3
 800387e:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2229      	movs	r2, #41	; 0x29
 8003884:	2103      	movs	r1, #3
 8003886:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	68db      	ldr	r3, [r3, #12]
 800388e:	2240      	movs	r2, #64	; 0x40
 8003890:	4013      	ands	r3, r2
 8003892:	d104      	bne.n	800389e <RTC_EnterInitMode+0x76>
 8003894:	230f      	movs	r3, #15
 8003896:	18fb      	adds	r3, r7, r3
 8003898:	781b      	ldrb	r3, [r3, #0]
 800389a:	2b03      	cmp	r3, #3
 800389c:	d1df      	bne.n	800385e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800389e:	230f      	movs	r3, #15
 80038a0:	18fb      	adds	r3, r7, r3
 80038a2:	781b      	ldrb	r3, [r3, #0]
}
 80038a4:	0018      	movs	r0, r3
 80038a6:	46bd      	mov	sp, r7
 80038a8:	b004      	add	sp, #16
 80038aa:	bd80      	pop	{r7, pc}

080038ac <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80038ac:	b590      	push	{r4, r7, lr}
 80038ae:	b085      	sub	sp, #20
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038b4:	240f      	movs	r4, #15
 80038b6:	193b      	adds	r3, r7, r4
 80038b8:	2200      	movs	r2, #0
 80038ba:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80038bc:	4b1c      	ldr	r3, [pc, #112]	; (8003930 <RTC_ExitInitMode+0x84>)
 80038be:	68da      	ldr	r2, [r3, #12]
 80038c0:	4b1b      	ldr	r3, [pc, #108]	; (8003930 <RTC_ExitInitMode+0x84>)
 80038c2:	2180      	movs	r1, #128	; 0x80
 80038c4:	438a      	bics	r2, r1
 80038c6:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80038c8:	4b19      	ldr	r3, [pc, #100]	; (8003930 <RTC_ExitInitMode+0x84>)
 80038ca:	699b      	ldr	r3, [r3, #24]
 80038cc:	2220      	movs	r2, #32
 80038ce:	4013      	ands	r3, r2
 80038d0:	d10d      	bne.n	80038ee <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	0018      	movs	r0, r3
 80038d6:	f7ff ff81 	bl	80037dc <HAL_RTC_WaitForSynchro>
 80038da:	1e03      	subs	r3, r0, #0
 80038dc:	d021      	beq.n	8003922 <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2229      	movs	r2, #41	; 0x29
 80038e2:	2103      	movs	r1, #3
 80038e4:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 80038e6:	193b      	adds	r3, r7, r4
 80038e8:	2203      	movs	r2, #3
 80038ea:	701a      	strb	r2, [r3, #0]
 80038ec:	e019      	b.n	8003922 <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80038ee:	4b10      	ldr	r3, [pc, #64]	; (8003930 <RTC_ExitInitMode+0x84>)
 80038f0:	699a      	ldr	r2, [r3, #24]
 80038f2:	4b0f      	ldr	r3, [pc, #60]	; (8003930 <RTC_ExitInitMode+0x84>)
 80038f4:	2120      	movs	r1, #32
 80038f6:	438a      	bics	r2, r1
 80038f8:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	0018      	movs	r0, r3
 80038fe:	f7ff ff6d 	bl	80037dc <HAL_RTC_WaitForSynchro>
 8003902:	1e03      	subs	r3, r0, #0
 8003904:	d007      	beq.n	8003916 <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2229      	movs	r2, #41	; 0x29
 800390a:	2103      	movs	r1, #3
 800390c:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 800390e:	230f      	movs	r3, #15
 8003910:	18fb      	adds	r3, r7, r3
 8003912:	2203      	movs	r2, #3
 8003914:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003916:	4b06      	ldr	r3, [pc, #24]	; (8003930 <RTC_ExitInitMode+0x84>)
 8003918:	699a      	ldr	r2, [r3, #24]
 800391a:	4b05      	ldr	r3, [pc, #20]	; (8003930 <RTC_ExitInitMode+0x84>)
 800391c:	2120      	movs	r1, #32
 800391e:	430a      	orrs	r2, r1
 8003920:	619a      	str	r2, [r3, #24]
  }

  return status;
 8003922:	230f      	movs	r3, #15
 8003924:	18fb      	adds	r3, r7, r3
 8003926:	781b      	ldrb	r3, [r3, #0]
}
 8003928:	0018      	movs	r0, r3
 800392a:	46bd      	mov	sp, r7
 800392c:	b005      	add	sp, #20
 800392e:	bd90      	pop	{r4, r7, pc}
 8003930:	40002800 	.word	0x40002800

08003934 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b084      	sub	sp, #16
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d101      	bne.n	8003946 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e0a8      	b.n	8003a98 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394a:	2b00      	cmp	r3, #0
 800394c:	d109      	bne.n	8003962 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	685a      	ldr	r2, [r3, #4]
 8003952:	2382      	movs	r3, #130	; 0x82
 8003954:	005b      	lsls	r3, r3, #1
 8003956:	429a      	cmp	r2, r3
 8003958:	d009      	beq.n	800396e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2200      	movs	r2, #0
 800395e:	61da      	str	r2, [r3, #28]
 8003960:	e005      	b.n	800396e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2200      	movs	r2, #0
 8003966:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2200      	movs	r2, #0
 800396c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2200      	movs	r2, #0
 8003972:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	225d      	movs	r2, #93	; 0x5d
 8003978:	5c9b      	ldrb	r3, [r3, r2]
 800397a:	b2db      	uxtb	r3, r3
 800397c:	2b00      	cmp	r3, #0
 800397e:	d107      	bne.n	8003990 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	225c      	movs	r2, #92	; 0x5c
 8003984:	2100      	movs	r1, #0
 8003986:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	0018      	movs	r0, r3
 800398c:	f7fd ff90 	bl	80018b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	225d      	movs	r2, #93	; 0x5d
 8003994:	2102      	movs	r1, #2
 8003996:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	2140      	movs	r1, #64	; 0x40
 80039a4:	438a      	bics	r2, r1
 80039a6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	68da      	ldr	r2, [r3, #12]
 80039ac:	23e0      	movs	r3, #224	; 0xe0
 80039ae:	00db      	lsls	r3, r3, #3
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d902      	bls.n	80039ba <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80039b4:	2300      	movs	r3, #0
 80039b6:	60fb      	str	r3, [r7, #12]
 80039b8:	e002      	b.n	80039c0 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80039ba:	2380      	movs	r3, #128	; 0x80
 80039bc:	015b      	lsls	r3, r3, #5
 80039be:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	68da      	ldr	r2, [r3, #12]
 80039c4:	23f0      	movs	r3, #240	; 0xf0
 80039c6:	011b      	lsls	r3, r3, #4
 80039c8:	429a      	cmp	r2, r3
 80039ca:	d008      	beq.n	80039de <HAL_SPI_Init+0xaa>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	68da      	ldr	r2, [r3, #12]
 80039d0:	23e0      	movs	r3, #224	; 0xe0
 80039d2:	00db      	lsls	r3, r3, #3
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d002      	beq.n	80039de <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2200      	movs	r2, #0
 80039dc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	685a      	ldr	r2, [r3, #4]
 80039e2:	2382      	movs	r3, #130	; 0x82
 80039e4:	005b      	lsls	r3, r3, #1
 80039e6:	401a      	ands	r2, r3
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6899      	ldr	r1, [r3, #8]
 80039ec:	2384      	movs	r3, #132	; 0x84
 80039ee:	021b      	lsls	r3, r3, #8
 80039f0:	400b      	ands	r3, r1
 80039f2:	431a      	orrs	r2, r3
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	691b      	ldr	r3, [r3, #16]
 80039f8:	2102      	movs	r1, #2
 80039fa:	400b      	ands	r3, r1
 80039fc:	431a      	orrs	r2, r3
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	695b      	ldr	r3, [r3, #20]
 8003a02:	2101      	movs	r1, #1
 8003a04:	400b      	ands	r3, r1
 8003a06:	431a      	orrs	r2, r3
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6999      	ldr	r1, [r3, #24]
 8003a0c:	2380      	movs	r3, #128	; 0x80
 8003a0e:	009b      	lsls	r3, r3, #2
 8003a10:	400b      	ands	r3, r1
 8003a12:	431a      	orrs	r2, r3
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	69db      	ldr	r3, [r3, #28]
 8003a18:	2138      	movs	r1, #56	; 0x38
 8003a1a:	400b      	ands	r3, r1
 8003a1c:	431a      	orrs	r2, r3
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6a1b      	ldr	r3, [r3, #32]
 8003a22:	2180      	movs	r1, #128	; 0x80
 8003a24:	400b      	ands	r3, r1
 8003a26:	431a      	orrs	r2, r3
 8003a28:	0011      	movs	r1, r2
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a2e:	2380      	movs	r3, #128	; 0x80
 8003a30:	019b      	lsls	r3, r3, #6
 8003a32:	401a      	ands	r2, r3
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	430a      	orrs	r2, r1
 8003a3a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	699b      	ldr	r3, [r3, #24]
 8003a40:	0c1b      	lsrs	r3, r3, #16
 8003a42:	2204      	movs	r2, #4
 8003a44:	401a      	ands	r2, r3
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a4a:	2110      	movs	r1, #16
 8003a4c:	400b      	ands	r3, r1
 8003a4e:	431a      	orrs	r2, r3
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a54:	2108      	movs	r1, #8
 8003a56:	400b      	ands	r3, r1
 8003a58:	431a      	orrs	r2, r3
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	68d9      	ldr	r1, [r3, #12]
 8003a5e:	23f0      	movs	r3, #240	; 0xf0
 8003a60:	011b      	lsls	r3, r3, #4
 8003a62:	400b      	ands	r3, r1
 8003a64:	431a      	orrs	r2, r3
 8003a66:	0011      	movs	r1, r2
 8003a68:	68fa      	ldr	r2, [r7, #12]
 8003a6a:	2380      	movs	r3, #128	; 0x80
 8003a6c:	015b      	lsls	r3, r3, #5
 8003a6e:	401a      	ands	r2, r3
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	430a      	orrs	r2, r1
 8003a76:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	69da      	ldr	r2, [r3, #28]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4907      	ldr	r1, [pc, #28]	; (8003aa0 <HAL_SPI_Init+0x16c>)
 8003a84:	400a      	ands	r2, r1
 8003a86:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	225d      	movs	r2, #93	; 0x5d
 8003a92:	2101      	movs	r1, #1
 8003a94:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003a96:	2300      	movs	r3, #0
}
 8003a98:	0018      	movs	r0, r3
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	b004      	add	sp, #16
 8003a9e:	bd80      	pop	{r7, pc}
 8003aa0:	fffff7ff 	.word	0xfffff7ff

08003aa4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b088      	sub	sp, #32
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	60f8      	str	r0, [r7, #12]
 8003aac:	60b9      	str	r1, [r7, #8]
 8003aae:	603b      	str	r3, [r7, #0]
 8003ab0:	1dbb      	adds	r3, r7, #6
 8003ab2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003ab4:	231f      	movs	r3, #31
 8003ab6:	18fb      	adds	r3, r7, r3
 8003ab8:	2200      	movs	r2, #0
 8003aba:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	225c      	movs	r2, #92	; 0x5c
 8003ac0:	5c9b      	ldrb	r3, [r3, r2]
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d101      	bne.n	8003aca <HAL_SPI_Transmit+0x26>
 8003ac6:	2302      	movs	r3, #2
 8003ac8:	e147      	b.n	8003d5a <HAL_SPI_Transmit+0x2b6>
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	225c      	movs	r2, #92	; 0x5c
 8003ace:	2101      	movs	r1, #1
 8003ad0:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ad2:	f7fe f99d 	bl	8001e10 <HAL_GetTick>
 8003ad6:	0003      	movs	r3, r0
 8003ad8:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003ada:	2316      	movs	r3, #22
 8003adc:	18fb      	adds	r3, r7, r3
 8003ade:	1dba      	adds	r2, r7, #6
 8003ae0:	8812      	ldrh	r2, [r2, #0]
 8003ae2:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	225d      	movs	r2, #93	; 0x5d
 8003ae8:	5c9b      	ldrb	r3, [r3, r2]
 8003aea:	b2db      	uxtb	r3, r3
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d004      	beq.n	8003afa <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8003af0:	231f      	movs	r3, #31
 8003af2:	18fb      	adds	r3, r7, r3
 8003af4:	2202      	movs	r2, #2
 8003af6:	701a      	strb	r2, [r3, #0]
    goto error;
 8003af8:	e128      	b.n	8003d4c <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d003      	beq.n	8003b08 <HAL_SPI_Transmit+0x64>
 8003b00:	1dbb      	adds	r3, r7, #6
 8003b02:	881b      	ldrh	r3, [r3, #0]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d104      	bne.n	8003b12 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8003b08:	231f      	movs	r3, #31
 8003b0a:	18fb      	adds	r3, r7, r3
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	701a      	strb	r2, [r3, #0]
    goto error;
 8003b10:	e11c      	b.n	8003d4c <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	225d      	movs	r2, #93	; 0x5d
 8003b16:	2103      	movs	r1, #3
 8003b18:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	68ba      	ldr	r2, [r7, #8]
 8003b24:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	1dba      	adds	r2, r7, #6
 8003b2a:	8812      	ldrh	r2, [r2, #0]
 8003b2c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	1dba      	adds	r2, r7, #6
 8003b32:	8812      	ldrh	r2, [r2, #0]
 8003b34:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2244      	movs	r2, #68	; 0x44
 8003b40:	2100      	movs	r1, #0
 8003b42:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2246      	movs	r2, #70	; 0x46
 8003b48:	2100      	movs	r1, #0
 8003b4a:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2200      	movs	r2, #0
 8003b56:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	689a      	ldr	r2, [r3, #8]
 8003b5c:	2380      	movs	r3, #128	; 0x80
 8003b5e:	021b      	lsls	r3, r3, #8
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d110      	bne.n	8003b86 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	2140      	movs	r1, #64	; 0x40
 8003b70:	438a      	bics	r2, r1
 8003b72:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	2180      	movs	r1, #128	; 0x80
 8003b80:	01c9      	lsls	r1, r1, #7
 8003b82:	430a      	orrs	r2, r1
 8003b84:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	2240      	movs	r2, #64	; 0x40
 8003b8e:	4013      	ands	r3, r2
 8003b90:	2b40      	cmp	r3, #64	; 0x40
 8003b92:	d007      	beq.n	8003ba4 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	2140      	movs	r1, #64	; 0x40
 8003ba0:	430a      	orrs	r2, r1
 8003ba2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	68da      	ldr	r2, [r3, #12]
 8003ba8:	23e0      	movs	r3, #224	; 0xe0
 8003baa:	00db      	lsls	r3, r3, #3
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d952      	bls.n	8003c56 <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d004      	beq.n	8003bc2 <HAL_SPI_Transmit+0x11e>
 8003bb8:	2316      	movs	r3, #22
 8003bba:	18fb      	adds	r3, r7, r3
 8003bbc:	881b      	ldrh	r3, [r3, #0]
 8003bbe:	2b01      	cmp	r3, #1
 8003bc0:	d143      	bne.n	8003c4a <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bc6:	881a      	ldrh	r2, [r3, #0]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bd2:	1c9a      	adds	r2, r3, #2
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bdc:	b29b      	uxth	r3, r3
 8003bde:	3b01      	subs	r3, #1
 8003be0:	b29a      	uxth	r2, r3
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003be6:	e030      	b.n	8003c4a <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	2202      	movs	r2, #2
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	2b02      	cmp	r3, #2
 8003bf4:	d112      	bne.n	8003c1c <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bfa:	881a      	ldrh	r2, [r3, #0]
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c06:	1c9a      	adds	r2, r3, #2
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c10:	b29b      	uxth	r3, r3
 8003c12:	3b01      	subs	r3, #1
 8003c14:	b29a      	uxth	r2, r3
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003c1a:	e016      	b.n	8003c4a <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c1c:	f7fe f8f8 	bl	8001e10 <HAL_GetTick>
 8003c20:	0002      	movs	r2, r0
 8003c22:	69bb      	ldr	r3, [r7, #24]
 8003c24:	1ad3      	subs	r3, r2, r3
 8003c26:	683a      	ldr	r2, [r7, #0]
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d802      	bhi.n	8003c32 <HAL_SPI_Transmit+0x18e>
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	3301      	adds	r3, #1
 8003c30:	d102      	bne.n	8003c38 <HAL_SPI_Transmit+0x194>
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d108      	bne.n	8003c4a <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8003c38:	231f      	movs	r3, #31
 8003c3a:	18fb      	adds	r3, r7, r3
 8003c3c:	2203      	movs	r2, #3
 8003c3e:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	225d      	movs	r2, #93	; 0x5d
 8003c44:	2101      	movs	r1, #1
 8003c46:	5499      	strb	r1, [r3, r2]
          goto error;
 8003c48:	e080      	b.n	8003d4c <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c4e:	b29b      	uxth	r3, r3
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d1c9      	bne.n	8003be8 <HAL_SPI_Transmit+0x144>
 8003c54:	e053      	b.n	8003cfe <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d004      	beq.n	8003c68 <HAL_SPI_Transmit+0x1c4>
 8003c5e:	2316      	movs	r3, #22
 8003c60:	18fb      	adds	r3, r7, r3
 8003c62:	881b      	ldrh	r3, [r3, #0]
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d145      	bne.n	8003cf4 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	330c      	adds	r3, #12
 8003c72:	7812      	ldrb	r2, [r2, #0]
 8003c74:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c7a:	1c5a      	adds	r2, r3, #1
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c84:	b29b      	uxth	r3, r3
 8003c86:	3b01      	subs	r3, #1
 8003c88:	b29a      	uxth	r2, r3
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8003c8e:	e031      	b.n	8003cf4 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	2202      	movs	r2, #2
 8003c98:	4013      	ands	r3, r2
 8003c9a:	2b02      	cmp	r3, #2
 8003c9c:	d113      	bne.n	8003cc6 <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	330c      	adds	r3, #12
 8003ca8:	7812      	ldrb	r2, [r2, #0]
 8003caa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cb0:	1c5a      	adds	r2, r3, #1
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cba:	b29b      	uxth	r3, r3
 8003cbc:	3b01      	subs	r3, #1
 8003cbe:	b29a      	uxth	r2, r3
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003cc4:	e016      	b.n	8003cf4 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003cc6:	f7fe f8a3 	bl	8001e10 <HAL_GetTick>
 8003cca:	0002      	movs	r2, r0
 8003ccc:	69bb      	ldr	r3, [r7, #24]
 8003cce:	1ad3      	subs	r3, r2, r3
 8003cd0:	683a      	ldr	r2, [r7, #0]
 8003cd2:	429a      	cmp	r2, r3
 8003cd4:	d802      	bhi.n	8003cdc <HAL_SPI_Transmit+0x238>
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	3301      	adds	r3, #1
 8003cda:	d102      	bne.n	8003ce2 <HAL_SPI_Transmit+0x23e>
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d108      	bne.n	8003cf4 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 8003ce2:	231f      	movs	r3, #31
 8003ce4:	18fb      	adds	r3, r7, r3
 8003ce6:	2203      	movs	r2, #3
 8003ce8:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	225d      	movs	r2, #93	; 0x5d
 8003cee:	2101      	movs	r1, #1
 8003cf0:	5499      	strb	r1, [r3, r2]
          goto error;
 8003cf2:	e02b      	b.n	8003d4c <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cf8:	b29b      	uxth	r3, r3
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d1c8      	bne.n	8003c90 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003cfe:	69ba      	ldr	r2, [r7, #24]
 8003d00:	6839      	ldr	r1, [r7, #0]
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	0018      	movs	r0, r3
 8003d06:	f000 fcef 	bl	80046e8 <SPI_EndRxTxTransaction>
 8003d0a:	1e03      	subs	r3, r0, #0
 8003d0c:	d002      	beq.n	8003d14 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2220      	movs	r2, #32
 8003d12:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d10a      	bne.n	8003d32 <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	613b      	str	r3, [r7, #16]
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	68db      	ldr	r3, [r3, #12]
 8003d26:	613b      	str	r3, [r7, #16]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	613b      	str	r3, [r7, #16]
 8003d30:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d004      	beq.n	8003d44 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 8003d3a:	231f      	movs	r3, #31
 8003d3c:	18fb      	adds	r3, r7, r3
 8003d3e:	2201      	movs	r2, #1
 8003d40:	701a      	strb	r2, [r3, #0]
 8003d42:	e003      	b.n	8003d4c <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	225d      	movs	r2, #93	; 0x5d
 8003d48:	2101      	movs	r1, #1
 8003d4a:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	225c      	movs	r2, #92	; 0x5c
 8003d50:	2100      	movs	r1, #0
 8003d52:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003d54:	231f      	movs	r3, #31
 8003d56:	18fb      	adds	r3, r7, r3
 8003d58:	781b      	ldrb	r3, [r3, #0]
}
 8003d5a:	0018      	movs	r0, r3
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	b008      	add	sp, #32
 8003d60:	bd80      	pop	{r7, pc}
	...

08003d64 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d64:	b590      	push	{r4, r7, lr}
 8003d66:	b089      	sub	sp, #36	; 0x24
 8003d68:	af02      	add	r7, sp, #8
 8003d6a:	60f8      	str	r0, [r7, #12]
 8003d6c:	60b9      	str	r1, [r7, #8]
 8003d6e:	603b      	str	r3, [r7, #0]
 8003d70:	1dbb      	adds	r3, r7, #6
 8003d72:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003d74:	2117      	movs	r1, #23
 8003d76:	187b      	adds	r3, r7, r1
 8003d78:	2200      	movs	r2, #0
 8003d7a:	701a      	strb	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	225d      	movs	r2, #93	; 0x5d
 8003d80:	5c9b      	ldrb	r3, [r3, r2]
 8003d82:	b2db      	uxtb	r3, r3
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d003      	beq.n	8003d90 <HAL_SPI_Receive+0x2c>
  {
    errorcode = HAL_BUSY;
 8003d88:	187b      	adds	r3, r7, r1
 8003d8a:	2202      	movs	r2, #2
 8003d8c:	701a      	strb	r2, [r3, #0]
    goto error;
 8003d8e:	e12b      	b.n	8003fe8 <HAL_SPI_Receive+0x284>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	685a      	ldr	r2, [r3, #4]
 8003d94:	2382      	movs	r3, #130	; 0x82
 8003d96:	005b      	lsls	r3, r3, #1
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	d113      	bne.n	8003dc4 <HAL_SPI_Receive+0x60>
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d10f      	bne.n	8003dc4 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	225d      	movs	r2, #93	; 0x5d
 8003da8:	2104      	movs	r1, #4
 8003daa:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003dac:	1dbb      	adds	r3, r7, #6
 8003dae:	881c      	ldrh	r4, [r3, #0]
 8003db0:	68ba      	ldr	r2, [r7, #8]
 8003db2:	68b9      	ldr	r1, [r7, #8]
 8003db4:	68f8      	ldr	r0, [r7, #12]
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	9300      	str	r3, [sp, #0]
 8003dba:	0023      	movs	r3, r4
 8003dbc:	f000 f924 	bl	8004008 <HAL_SPI_TransmitReceive>
 8003dc0:	0003      	movs	r3, r0
 8003dc2:	e118      	b.n	8003ff6 <HAL_SPI_Receive+0x292>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	225c      	movs	r2, #92	; 0x5c
 8003dc8:	5c9b      	ldrb	r3, [r3, r2]
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	d101      	bne.n	8003dd2 <HAL_SPI_Receive+0x6e>
 8003dce:	2302      	movs	r3, #2
 8003dd0:	e111      	b.n	8003ff6 <HAL_SPI_Receive+0x292>
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	225c      	movs	r2, #92	; 0x5c
 8003dd6:	2101      	movs	r1, #1
 8003dd8:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003dda:	f7fe f819 	bl	8001e10 <HAL_GetTick>
 8003dde:	0003      	movs	r3, r0
 8003de0:	613b      	str	r3, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d003      	beq.n	8003df0 <HAL_SPI_Receive+0x8c>
 8003de8:	1dbb      	adds	r3, r7, #6
 8003dea:	881b      	ldrh	r3, [r3, #0]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d104      	bne.n	8003dfa <HAL_SPI_Receive+0x96>
  {
    errorcode = HAL_ERROR;
 8003df0:	2317      	movs	r3, #23
 8003df2:	18fb      	adds	r3, r7, r3
 8003df4:	2201      	movs	r2, #1
 8003df6:	701a      	strb	r2, [r3, #0]
    goto error;
 8003df8:	e0f6      	b.n	8003fe8 <HAL_SPI_Receive+0x284>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	225d      	movs	r2, #93	; 0x5d
 8003dfe:	2104      	movs	r1, #4
 8003e00:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2200      	movs	r2, #0
 8003e06:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	68ba      	ldr	r2, [r7, #8]
 8003e0c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	1dba      	adds	r2, r7, #6
 8003e12:	2144      	movs	r1, #68	; 0x44
 8003e14:	8812      	ldrh	r2, [r2, #0]
 8003e16:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	1dba      	adds	r2, r7, #6
 8003e1c:	2146      	movs	r1, #70	; 0x46
 8003e1e:	8812      	ldrh	r2, [r2, #0]
 8003e20:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2200      	movs	r2, #0
 8003e26:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2200      	movs	r2, #0
 8003e32:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2200      	movs	r2, #0
 8003e38:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	68da      	ldr	r2, [r3, #12]
 8003e44:	23e0      	movs	r3, #224	; 0xe0
 8003e46:	00db      	lsls	r3, r3, #3
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	d908      	bls.n	8003e5e <HAL_SPI_Receive+0xfa>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	685a      	ldr	r2, [r3, #4]
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	496a      	ldr	r1, [pc, #424]	; (8004000 <HAL_SPI_Receive+0x29c>)
 8003e58:	400a      	ands	r2, r1
 8003e5a:	605a      	str	r2, [r3, #4]
 8003e5c:	e008      	b.n	8003e70 <HAL_SPI_Receive+0x10c>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	685a      	ldr	r2, [r3, #4]
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	2180      	movs	r1, #128	; 0x80
 8003e6a:	0149      	lsls	r1, r1, #5
 8003e6c:	430a      	orrs	r2, r1
 8003e6e:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	689a      	ldr	r2, [r3, #8]
 8003e74:	2380      	movs	r3, #128	; 0x80
 8003e76:	021b      	lsls	r3, r3, #8
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d10f      	bne.n	8003e9c <HAL_SPI_Receive+0x138>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	2140      	movs	r1, #64	; 0x40
 8003e88:	438a      	bics	r2, r1
 8003e8a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	495b      	ldr	r1, [pc, #364]	; (8004004 <HAL_SPI_Receive+0x2a0>)
 8003e98:	400a      	ands	r2, r1
 8003e9a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	2240      	movs	r2, #64	; 0x40
 8003ea4:	4013      	ands	r3, r2
 8003ea6:	2b40      	cmp	r3, #64	; 0x40
 8003ea8:	d007      	beq.n	8003eba <HAL_SPI_Receive+0x156>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	2140      	movs	r1, #64	; 0x40
 8003eb6:	430a      	orrs	r2, r1
 8003eb8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	68da      	ldr	r2, [r3, #12]
 8003ebe:	23e0      	movs	r3, #224	; 0xe0
 8003ec0:	00db      	lsls	r3, r3, #3
 8003ec2:	429a      	cmp	r2, r3
 8003ec4:	d900      	bls.n	8003ec8 <HAL_SPI_Receive+0x164>
 8003ec6:	e071      	b.n	8003fac <HAL_SPI_Receive+0x248>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003ec8:	e035      	b.n	8003f36 <HAL_SPI_Receive+0x1d2>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	4013      	ands	r3, r2
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d117      	bne.n	8003f08 <HAL_SPI_Receive+0x1a4>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	330c      	adds	r3, #12
 8003ede:	001a      	movs	r2, r3
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee4:	7812      	ldrb	r2, [r2, #0]
 8003ee6:	b2d2      	uxtb	r2, r2
 8003ee8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eee:	1c5a      	adds	r2, r3, #1
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2246      	movs	r2, #70	; 0x46
 8003ef8:	5a9b      	ldrh	r3, [r3, r2]
 8003efa:	b29b      	uxth	r3, r3
 8003efc:	3b01      	subs	r3, #1
 8003efe:	b299      	uxth	r1, r3
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2246      	movs	r2, #70	; 0x46
 8003f04:	5299      	strh	r1, [r3, r2]
 8003f06:	e016      	b.n	8003f36 <HAL_SPI_Receive+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f08:	f7fd ff82 	bl	8001e10 <HAL_GetTick>
 8003f0c:	0002      	movs	r2, r0
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	1ad3      	subs	r3, r2, r3
 8003f12:	683a      	ldr	r2, [r7, #0]
 8003f14:	429a      	cmp	r2, r3
 8003f16:	d802      	bhi.n	8003f1e <HAL_SPI_Receive+0x1ba>
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	3301      	adds	r3, #1
 8003f1c:	d102      	bne.n	8003f24 <HAL_SPI_Receive+0x1c0>
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d108      	bne.n	8003f36 <HAL_SPI_Receive+0x1d2>
        {
          errorcode = HAL_TIMEOUT;
 8003f24:	2317      	movs	r3, #23
 8003f26:	18fb      	adds	r3, r7, r3
 8003f28:	2203      	movs	r2, #3
 8003f2a:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	225d      	movs	r2, #93	; 0x5d
 8003f30:	2101      	movs	r1, #1
 8003f32:	5499      	strb	r1, [r3, r2]
          goto error;
 8003f34:	e058      	b.n	8003fe8 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2246      	movs	r2, #70	; 0x46
 8003f3a:	5a9b      	ldrh	r3, [r3, r2]
 8003f3c:	b29b      	uxth	r3, r3
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d1c3      	bne.n	8003eca <HAL_SPI_Receive+0x166>
 8003f42:	e039      	b.n	8003fb8 <HAL_SPI_Receive+0x254>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	4013      	ands	r3, r2
 8003f4e:	2b01      	cmp	r3, #1
 8003f50:	d115      	bne.n	8003f7e <HAL_SPI_Receive+0x21a>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	68da      	ldr	r2, [r3, #12]
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f5c:	b292      	uxth	r2, r2
 8003f5e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f64:	1c9a      	adds	r2, r3, #2
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2246      	movs	r2, #70	; 0x46
 8003f6e:	5a9b      	ldrh	r3, [r3, r2]
 8003f70:	b29b      	uxth	r3, r3
 8003f72:	3b01      	subs	r3, #1
 8003f74:	b299      	uxth	r1, r3
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2246      	movs	r2, #70	; 0x46
 8003f7a:	5299      	strh	r1, [r3, r2]
 8003f7c:	e016      	b.n	8003fac <HAL_SPI_Receive+0x248>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f7e:	f7fd ff47 	bl	8001e10 <HAL_GetTick>
 8003f82:	0002      	movs	r2, r0
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	1ad3      	subs	r3, r2, r3
 8003f88:	683a      	ldr	r2, [r7, #0]
 8003f8a:	429a      	cmp	r2, r3
 8003f8c:	d802      	bhi.n	8003f94 <HAL_SPI_Receive+0x230>
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	3301      	adds	r3, #1
 8003f92:	d102      	bne.n	8003f9a <HAL_SPI_Receive+0x236>
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d108      	bne.n	8003fac <HAL_SPI_Receive+0x248>
        {
          errorcode = HAL_TIMEOUT;
 8003f9a:	2317      	movs	r3, #23
 8003f9c:	18fb      	adds	r3, r7, r3
 8003f9e:	2203      	movs	r2, #3
 8003fa0:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	225d      	movs	r2, #93	; 0x5d
 8003fa6:	2101      	movs	r1, #1
 8003fa8:	5499      	strb	r1, [r3, r2]
          goto error;
 8003faa:	e01d      	b.n	8003fe8 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2246      	movs	r2, #70	; 0x46
 8003fb0:	5a9b      	ldrh	r3, [r3, r2]
 8003fb2:	b29b      	uxth	r3, r3
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d1c5      	bne.n	8003f44 <HAL_SPI_Receive+0x1e0>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003fb8:	693a      	ldr	r2, [r7, #16]
 8003fba:	6839      	ldr	r1, [r7, #0]
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	0018      	movs	r0, r3
 8003fc0:	f000 fb34 	bl	800462c <SPI_EndRxTransaction>
 8003fc4:	1e03      	subs	r3, r0, #0
 8003fc6:	d002      	beq.n	8003fce <HAL_SPI_Receive+0x26a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2220      	movs	r2, #32
 8003fcc:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d004      	beq.n	8003fe0 <HAL_SPI_Receive+0x27c>
  {
    errorcode = HAL_ERROR;
 8003fd6:	2317      	movs	r3, #23
 8003fd8:	18fb      	adds	r3, r7, r3
 8003fda:	2201      	movs	r2, #1
 8003fdc:	701a      	strb	r2, [r3, #0]
 8003fde:	e003      	b.n	8003fe8 <HAL_SPI_Receive+0x284>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	225d      	movs	r2, #93	; 0x5d
 8003fe4:	2101      	movs	r1, #1
 8003fe6:	5499      	strb	r1, [r3, r2]
  }

error :
  __HAL_UNLOCK(hspi);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	225c      	movs	r2, #92	; 0x5c
 8003fec:	2100      	movs	r1, #0
 8003fee:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003ff0:	2317      	movs	r3, #23
 8003ff2:	18fb      	adds	r3, r7, r3
 8003ff4:	781b      	ldrb	r3, [r3, #0]
}
 8003ff6:	0018      	movs	r0, r3
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	b007      	add	sp, #28
 8003ffc:	bd90      	pop	{r4, r7, pc}
 8003ffe:	46c0      	nop			; (mov r8, r8)
 8004000:	ffffefff 	.word	0xffffefff
 8004004:	ffffbfff 	.word	0xffffbfff

08004008 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b08a      	sub	sp, #40	; 0x28
 800400c:	af00      	add	r7, sp, #0
 800400e:	60f8      	str	r0, [r7, #12]
 8004010:	60b9      	str	r1, [r7, #8]
 8004012:	607a      	str	r2, [r7, #4]
 8004014:	001a      	movs	r2, r3
 8004016:	1cbb      	adds	r3, r7, #2
 8004018:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800401a:	2301      	movs	r3, #1
 800401c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800401e:	2323      	movs	r3, #35	; 0x23
 8004020:	18fb      	adds	r3, r7, r3
 8004022:	2200      	movs	r2, #0
 8004024:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	225c      	movs	r2, #92	; 0x5c
 800402a:	5c9b      	ldrb	r3, [r3, r2]
 800402c:	2b01      	cmp	r3, #1
 800402e:	d101      	bne.n	8004034 <HAL_SPI_TransmitReceive+0x2c>
 8004030:	2302      	movs	r3, #2
 8004032:	e1c4      	b.n	80043be <HAL_SPI_TransmitReceive+0x3b6>
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	225c      	movs	r2, #92	; 0x5c
 8004038:	2101      	movs	r1, #1
 800403a:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800403c:	f7fd fee8 	bl	8001e10 <HAL_GetTick>
 8004040:	0003      	movs	r3, r0
 8004042:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004044:	201b      	movs	r0, #27
 8004046:	183b      	adds	r3, r7, r0
 8004048:	68fa      	ldr	r2, [r7, #12]
 800404a:	215d      	movs	r1, #93	; 0x5d
 800404c:	5c52      	ldrb	r2, [r2, r1]
 800404e:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004056:	2312      	movs	r3, #18
 8004058:	18fb      	adds	r3, r7, r3
 800405a:	1cba      	adds	r2, r7, #2
 800405c:	8812      	ldrh	r2, [r2, #0]
 800405e:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004060:	183b      	adds	r3, r7, r0
 8004062:	781b      	ldrb	r3, [r3, #0]
 8004064:	2b01      	cmp	r3, #1
 8004066:	d011      	beq.n	800408c <HAL_SPI_TransmitReceive+0x84>
 8004068:	697a      	ldr	r2, [r7, #20]
 800406a:	2382      	movs	r3, #130	; 0x82
 800406c:	005b      	lsls	r3, r3, #1
 800406e:	429a      	cmp	r2, r3
 8004070:	d107      	bne.n	8004082 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d103      	bne.n	8004082 <HAL_SPI_TransmitReceive+0x7a>
 800407a:	183b      	adds	r3, r7, r0
 800407c:	781b      	ldrb	r3, [r3, #0]
 800407e:	2b04      	cmp	r3, #4
 8004080:	d004      	beq.n	800408c <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8004082:	2323      	movs	r3, #35	; 0x23
 8004084:	18fb      	adds	r3, r7, r3
 8004086:	2202      	movs	r2, #2
 8004088:	701a      	strb	r2, [r3, #0]
    goto error;
 800408a:	e191      	b.n	80043b0 <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d006      	beq.n	80040a0 <HAL_SPI_TransmitReceive+0x98>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d003      	beq.n	80040a0 <HAL_SPI_TransmitReceive+0x98>
 8004098:	1cbb      	adds	r3, r7, #2
 800409a:	881b      	ldrh	r3, [r3, #0]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d104      	bne.n	80040aa <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 80040a0:	2323      	movs	r3, #35	; 0x23
 80040a2:	18fb      	adds	r3, r7, r3
 80040a4:	2201      	movs	r2, #1
 80040a6:	701a      	strb	r2, [r3, #0]
    goto error;
 80040a8:	e182      	b.n	80043b0 <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	225d      	movs	r2, #93	; 0x5d
 80040ae:	5c9b      	ldrb	r3, [r3, r2]
 80040b0:	b2db      	uxtb	r3, r3
 80040b2:	2b04      	cmp	r3, #4
 80040b4:	d003      	beq.n	80040be <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	225d      	movs	r2, #93	; 0x5d
 80040ba:	2105      	movs	r1, #5
 80040bc:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2200      	movs	r2, #0
 80040c2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	687a      	ldr	r2, [r7, #4]
 80040c8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	1cba      	adds	r2, r7, #2
 80040ce:	2146      	movs	r1, #70	; 0x46
 80040d0:	8812      	ldrh	r2, [r2, #0]
 80040d2:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	1cba      	adds	r2, r7, #2
 80040d8:	2144      	movs	r1, #68	; 0x44
 80040da:	8812      	ldrh	r2, [r2, #0]
 80040dc:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	68ba      	ldr	r2, [r7, #8]
 80040e2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	1cba      	adds	r2, r7, #2
 80040e8:	8812      	ldrh	r2, [r2, #0]
 80040ea:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	1cba      	adds	r2, r7, #2
 80040f0:	8812      	ldrh	r2, [r2, #0]
 80040f2:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2200      	movs	r2, #0
 80040f8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2200      	movs	r2, #0
 80040fe:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	68da      	ldr	r2, [r3, #12]
 8004104:	23e0      	movs	r3, #224	; 0xe0
 8004106:	00db      	lsls	r3, r3, #3
 8004108:	429a      	cmp	r2, r3
 800410a:	d908      	bls.n	800411e <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	685a      	ldr	r2, [r3, #4]
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	49ac      	ldr	r1, [pc, #688]	; (80043c8 <HAL_SPI_TransmitReceive+0x3c0>)
 8004118:	400a      	ands	r2, r1
 800411a:	605a      	str	r2, [r3, #4]
 800411c:	e008      	b.n	8004130 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	685a      	ldr	r2, [r3, #4]
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	2180      	movs	r1, #128	; 0x80
 800412a:	0149      	lsls	r1, r1, #5
 800412c:	430a      	orrs	r2, r1
 800412e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	2240      	movs	r2, #64	; 0x40
 8004138:	4013      	ands	r3, r2
 800413a:	2b40      	cmp	r3, #64	; 0x40
 800413c:	d007      	beq.n	800414e <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	681a      	ldr	r2, [r3, #0]
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	2140      	movs	r1, #64	; 0x40
 800414a:	430a      	orrs	r2, r1
 800414c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	68da      	ldr	r2, [r3, #12]
 8004152:	23e0      	movs	r3, #224	; 0xe0
 8004154:	00db      	lsls	r3, r3, #3
 8004156:	429a      	cmp	r2, r3
 8004158:	d800      	bhi.n	800415c <HAL_SPI_TransmitReceive+0x154>
 800415a:	e083      	b.n	8004264 <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d005      	beq.n	8004170 <HAL_SPI_TransmitReceive+0x168>
 8004164:	2312      	movs	r3, #18
 8004166:	18fb      	adds	r3, r7, r3
 8004168:	881b      	ldrh	r3, [r3, #0]
 800416a:	2b01      	cmp	r3, #1
 800416c:	d000      	beq.n	8004170 <HAL_SPI_TransmitReceive+0x168>
 800416e:	e06d      	b.n	800424c <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004174:	881a      	ldrh	r2, [r3, #0]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004180:	1c9a      	adds	r2, r3, #2
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800418a:	b29b      	uxth	r3, r3
 800418c:	3b01      	subs	r3, #1
 800418e:	b29a      	uxth	r2, r3
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004194:	e05a      	b.n	800424c <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	2202      	movs	r2, #2
 800419e:	4013      	ands	r3, r2
 80041a0:	2b02      	cmp	r3, #2
 80041a2:	d11b      	bne.n	80041dc <HAL_SPI_TransmitReceive+0x1d4>
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041a8:	b29b      	uxth	r3, r3
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d016      	beq.n	80041dc <HAL_SPI_TransmitReceive+0x1d4>
 80041ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d113      	bne.n	80041dc <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041b8:	881a      	ldrh	r2, [r3, #0]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041c4:	1c9a      	adds	r2, r3, #2
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041ce:	b29b      	uxth	r3, r3
 80041d0:	3b01      	subs	r3, #1
 80041d2:	b29a      	uxth	r2, r3
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80041d8:	2300      	movs	r3, #0
 80041da:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	2201      	movs	r2, #1
 80041e4:	4013      	ands	r3, r2
 80041e6:	2b01      	cmp	r3, #1
 80041e8:	d11c      	bne.n	8004224 <HAL_SPI_TransmitReceive+0x21c>
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2246      	movs	r2, #70	; 0x46
 80041ee:	5a9b      	ldrh	r3, [r3, r2]
 80041f0:	b29b      	uxth	r3, r3
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d016      	beq.n	8004224 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	68da      	ldr	r2, [r3, #12]
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004200:	b292      	uxth	r2, r2
 8004202:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004208:	1c9a      	adds	r2, r3, #2
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2246      	movs	r2, #70	; 0x46
 8004212:	5a9b      	ldrh	r3, [r3, r2]
 8004214:	b29b      	uxth	r3, r3
 8004216:	3b01      	subs	r3, #1
 8004218:	b299      	uxth	r1, r3
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2246      	movs	r2, #70	; 0x46
 800421e:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004220:	2301      	movs	r3, #1
 8004222:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004224:	f7fd fdf4 	bl	8001e10 <HAL_GetTick>
 8004228:	0002      	movs	r2, r0
 800422a:	69fb      	ldr	r3, [r7, #28]
 800422c:	1ad3      	subs	r3, r2, r3
 800422e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004230:	429a      	cmp	r2, r3
 8004232:	d80b      	bhi.n	800424c <HAL_SPI_TransmitReceive+0x244>
 8004234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004236:	3301      	adds	r3, #1
 8004238:	d008      	beq.n	800424c <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 800423a:	2323      	movs	r3, #35	; 0x23
 800423c:	18fb      	adds	r3, r7, r3
 800423e:	2203      	movs	r2, #3
 8004240:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	225d      	movs	r2, #93	; 0x5d
 8004246:	2101      	movs	r1, #1
 8004248:	5499      	strb	r1, [r3, r2]
        goto error;
 800424a:	e0b1      	b.n	80043b0 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004250:	b29b      	uxth	r3, r3
 8004252:	2b00      	cmp	r3, #0
 8004254:	d19f      	bne.n	8004196 <HAL_SPI_TransmitReceive+0x18e>
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2246      	movs	r2, #70	; 0x46
 800425a:	5a9b      	ldrh	r3, [r3, r2]
 800425c:	b29b      	uxth	r3, r3
 800425e:	2b00      	cmp	r3, #0
 8004260:	d199      	bne.n	8004196 <HAL_SPI_TransmitReceive+0x18e>
 8004262:	e089      	b.n	8004378 <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d005      	beq.n	8004278 <HAL_SPI_TransmitReceive+0x270>
 800426c:	2312      	movs	r3, #18
 800426e:	18fb      	adds	r3, r7, r3
 8004270:	881b      	ldrh	r3, [r3, #0]
 8004272:	2b01      	cmp	r3, #1
 8004274:	d000      	beq.n	8004278 <HAL_SPI_TransmitReceive+0x270>
 8004276:	e074      	b.n	8004362 <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	330c      	adds	r3, #12
 8004282:	7812      	ldrb	r2, [r2, #0]
 8004284:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800428a:	1c5a      	adds	r2, r3, #1
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004294:	b29b      	uxth	r3, r3
 8004296:	3b01      	subs	r3, #1
 8004298:	b29a      	uxth	r2, r3
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800429e:	e060      	b.n	8004362 <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	2202      	movs	r2, #2
 80042a8:	4013      	ands	r3, r2
 80042aa:	2b02      	cmp	r3, #2
 80042ac:	d11c      	bne.n	80042e8 <HAL_SPI_TransmitReceive+0x2e0>
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042b2:	b29b      	uxth	r3, r3
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d017      	beq.n	80042e8 <HAL_SPI_TransmitReceive+0x2e0>
 80042b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d114      	bne.n	80042e8 <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	330c      	adds	r3, #12
 80042c8:	7812      	ldrb	r2, [r2, #0]
 80042ca:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042d0:	1c5a      	adds	r2, r3, #1
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042da:	b29b      	uxth	r3, r3
 80042dc:	3b01      	subs	r3, #1
 80042de:	b29a      	uxth	r2, r3
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80042e4:	2300      	movs	r3, #0
 80042e6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	2201      	movs	r2, #1
 80042f0:	4013      	ands	r3, r2
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	d11e      	bne.n	8004334 <HAL_SPI_TransmitReceive+0x32c>
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2246      	movs	r2, #70	; 0x46
 80042fa:	5a9b      	ldrh	r3, [r3, r2]
 80042fc:	b29b      	uxth	r3, r3
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d018      	beq.n	8004334 <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	330c      	adds	r3, #12
 8004308:	001a      	movs	r2, r3
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800430e:	7812      	ldrb	r2, [r2, #0]
 8004310:	b2d2      	uxtb	r2, r2
 8004312:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004318:	1c5a      	adds	r2, r3, #1
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2246      	movs	r2, #70	; 0x46
 8004322:	5a9b      	ldrh	r3, [r3, r2]
 8004324:	b29b      	uxth	r3, r3
 8004326:	3b01      	subs	r3, #1
 8004328:	b299      	uxth	r1, r3
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2246      	movs	r2, #70	; 0x46
 800432e:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004330:	2301      	movs	r3, #1
 8004332:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004334:	f7fd fd6c 	bl	8001e10 <HAL_GetTick>
 8004338:	0002      	movs	r2, r0
 800433a:	69fb      	ldr	r3, [r7, #28]
 800433c:	1ad3      	subs	r3, r2, r3
 800433e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004340:	429a      	cmp	r2, r3
 8004342:	d802      	bhi.n	800434a <HAL_SPI_TransmitReceive+0x342>
 8004344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004346:	3301      	adds	r3, #1
 8004348:	d102      	bne.n	8004350 <HAL_SPI_TransmitReceive+0x348>
 800434a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800434c:	2b00      	cmp	r3, #0
 800434e:	d108      	bne.n	8004362 <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 8004350:	2323      	movs	r3, #35	; 0x23
 8004352:	18fb      	adds	r3, r7, r3
 8004354:	2203      	movs	r2, #3
 8004356:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	225d      	movs	r2, #93	; 0x5d
 800435c:	2101      	movs	r1, #1
 800435e:	5499      	strb	r1, [r3, r2]
        goto error;
 8004360:	e026      	b.n	80043b0 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004366:	b29b      	uxth	r3, r3
 8004368:	2b00      	cmp	r3, #0
 800436a:	d199      	bne.n	80042a0 <HAL_SPI_TransmitReceive+0x298>
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2246      	movs	r2, #70	; 0x46
 8004370:	5a9b      	ldrh	r3, [r3, r2]
 8004372:	b29b      	uxth	r3, r3
 8004374:	2b00      	cmp	r3, #0
 8004376:	d193      	bne.n	80042a0 <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004378:	69fa      	ldr	r2, [r7, #28]
 800437a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	0018      	movs	r0, r3
 8004380:	f000 f9b2 	bl	80046e8 <SPI_EndRxTxTransaction>
 8004384:	1e03      	subs	r3, r0, #0
 8004386:	d006      	beq.n	8004396 <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 8004388:	2323      	movs	r3, #35	; 0x23
 800438a:	18fb      	adds	r3, r7, r3
 800438c:	2201      	movs	r2, #1
 800438e:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2220      	movs	r2, #32
 8004394:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800439a:	2b00      	cmp	r3, #0
 800439c:	d004      	beq.n	80043a8 <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 800439e:	2323      	movs	r3, #35	; 0x23
 80043a0:	18fb      	adds	r3, r7, r3
 80043a2:	2201      	movs	r2, #1
 80043a4:	701a      	strb	r2, [r3, #0]
 80043a6:	e003      	b.n	80043b0 <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	225d      	movs	r2, #93	; 0x5d
 80043ac:	2101      	movs	r1, #1
 80043ae:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	225c      	movs	r2, #92	; 0x5c
 80043b4:	2100      	movs	r1, #0
 80043b6:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80043b8:	2323      	movs	r3, #35	; 0x23
 80043ba:	18fb      	adds	r3, r7, r3
 80043bc:	781b      	ldrb	r3, [r3, #0]
}
 80043be:	0018      	movs	r0, r3
 80043c0:	46bd      	mov	sp, r7
 80043c2:	b00a      	add	sp, #40	; 0x28
 80043c4:	bd80      	pop	{r7, pc}
 80043c6:	46c0      	nop			; (mov r8, r8)
 80043c8:	ffffefff 	.word	0xffffefff

080043cc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b088      	sub	sp, #32
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	60f8      	str	r0, [r7, #12]
 80043d4:	60b9      	str	r1, [r7, #8]
 80043d6:	603b      	str	r3, [r7, #0]
 80043d8:	1dfb      	adds	r3, r7, #7
 80043da:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80043dc:	f7fd fd18 	bl	8001e10 <HAL_GetTick>
 80043e0:	0002      	movs	r2, r0
 80043e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043e4:	1a9b      	subs	r3, r3, r2
 80043e6:	683a      	ldr	r2, [r7, #0]
 80043e8:	18d3      	adds	r3, r2, r3
 80043ea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80043ec:	f7fd fd10 	bl	8001e10 <HAL_GetTick>
 80043f0:	0003      	movs	r3, r0
 80043f2:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80043f4:	4b3a      	ldr	r3, [pc, #232]	; (80044e0 <SPI_WaitFlagStateUntilTimeout+0x114>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	015b      	lsls	r3, r3, #5
 80043fa:	0d1b      	lsrs	r3, r3, #20
 80043fc:	69fa      	ldr	r2, [r7, #28]
 80043fe:	4353      	muls	r3, r2
 8004400:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004402:	e058      	b.n	80044b6 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	3301      	adds	r3, #1
 8004408:	d055      	beq.n	80044b6 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800440a:	f7fd fd01 	bl	8001e10 <HAL_GetTick>
 800440e:	0002      	movs	r2, r0
 8004410:	69bb      	ldr	r3, [r7, #24]
 8004412:	1ad3      	subs	r3, r2, r3
 8004414:	69fa      	ldr	r2, [r7, #28]
 8004416:	429a      	cmp	r2, r3
 8004418:	d902      	bls.n	8004420 <SPI_WaitFlagStateUntilTimeout+0x54>
 800441a:	69fb      	ldr	r3, [r7, #28]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d142      	bne.n	80044a6 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	685a      	ldr	r2, [r3, #4]
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	21e0      	movs	r1, #224	; 0xe0
 800442c:	438a      	bics	r2, r1
 800442e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	685a      	ldr	r2, [r3, #4]
 8004434:	2382      	movs	r3, #130	; 0x82
 8004436:	005b      	lsls	r3, r3, #1
 8004438:	429a      	cmp	r2, r3
 800443a:	d113      	bne.n	8004464 <SPI_WaitFlagStateUntilTimeout+0x98>
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	689a      	ldr	r2, [r3, #8]
 8004440:	2380      	movs	r3, #128	; 0x80
 8004442:	021b      	lsls	r3, r3, #8
 8004444:	429a      	cmp	r2, r3
 8004446:	d005      	beq.n	8004454 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	689a      	ldr	r2, [r3, #8]
 800444c:	2380      	movs	r3, #128	; 0x80
 800444e:	00db      	lsls	r3, r3, #3
 8004450:	429a      	cmp	r2, r3
 8004452:	d107      	bne.n	8004464 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	2140      	movs	r1, #64	; 0x40
 8004460:	438a      	bics	r2, r1
 8004462:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004468:	2380      	movs	r3, #128	; 0x80
 800446a:	019b      	lsls	r3, r3, #6
 800446c:	429a      	cmp	r2, r3
 800446e:	d110      	bne.n	8004492 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	681a      	ldr	r2, [r3, #0]
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	491a      	ldr	r1, [pc, #104]	; (80044e4 <SPI_WaitFlagStateUntilTimeout+0x118>)
 800447c:	400a      	ands	r2, r1
 800447e:	601a      	str	r2, [r3, #0]
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	2180      	movs	r1, #128	; 0x80
 800448c:	0189      	lsls	r1, r1, #6
 800448e:	430a      	orrs	r2, r1
 8004490:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	225d      	movs	r2, #93	; 0x5d
 8004496:	2101      	movs	r1, #1
 8004498:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	225c      	movs	r2, #92	; 0x5c
 800449e:	2100      	movs	r1, #0
 80044a0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80044a2:	2303      	movs	r3, #3
 80044a4:	e017      	b.n	80044d6 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d101      	bne.n	80044b0 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80044ac:	2300      	movs	r3, #0
 80044ae:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	3b01      	subs	r3, #1
 80044b4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	68ba      	ldr	r2, [r7, #8]
 80044be:	4013      	ands	r3, r2
 80044c0:	68ba      	ldr	r2, [r7, #8]
 80044c2:	1ad3      	subs	r3, r2, r3
 80044c4:	425a      	negs	r2, r3
 80044c6:	4153      	adcs	r3, r2
 80044c8:	b2db      	uxtb	r3, r3
 80044ca:	001a      	movs	r2, r3
 80044cc:	1dfb      	adds	r3, r7, #7
 80044ce:	781b      	ldrb	r3, [r3, #0]
 80044d0:	429a      	cmp	r2, r3
 80044d2:	d197      	bne.n	8004404 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80044d4:	2300      	movs	r3, #0
}
 80044d6:	0018      	movs	r0, r3
 80044d8:	46bd      	mov	sp, r7
 80044da:	b008      	add	sp, #32
 80044dc:	bd80      	pop	{r7, pc}
 80044de:	46c0      	nop			; (mov r8, r8)
 80044e0:	20000004 	.word	0x20000004
 80044e4:	ffffdfff 	.word	0xffffdfff

080044e8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b08a      	sub	sp, #40	; 0x28
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	60f8      	str	r0, [r7, #12]
 80044f0:	60b9      	str	r1, [r7, #8]
 80044f2:	607a      	str	r2, [r7, #4]
 80044f4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80044f6:	2317      	movs	r3, #23
 80044f8:	18fb      	adds	r3, r7, r3
 80044fa:	2200      	movs	r2, #0
 80044fc:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80044fe:	f7fd fc87 	bl	8001e10 <HAL_GetTick>
 8004502:	0002      	movs	r2, r0
 8004504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004506:	1a9b      	subs	r3, r3, r2
 8004508:	683a      	ldr	r2, [r7, #0]
 800450a:	18d3      	adds	r3, r2, r3
 800450c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800450e:	f7fd fc7f 	bl	8001e10 <HAL_GetTick>
 8004512:	0003      	movs	r3, r0
 8004514:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	330c      	adds	r3, #12
 800451c:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800451e:	4b41      	ldr	r3, [pc, #260]	; (8004624 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	0013      	movs	r3, r2
 8004524:	009b      	lsls	r3, r3, #2
 8004526:	189b      	adds	r3, r3, r2
 8004528:	00da      	lsls	r2, r3, #3
 800452a:	1ad3      	subs	r3, r2, r3
 800452c:	0d1b      	lsrs	r3, r3, #20
 800452e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004530:	4353      	muls	r3, r2
 8004532:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004534:	e068      	b.n	8004608 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004536:	68ba      	ldr	r2, [r7, #8]
 8004538:	23c0      	movs	r3, #192	; 0xc0
 800453a:	00db      	lsls	r3, r3, #3
 800453c:	429a      	cmp	r2, r3
 800453e:	d10a      	bne.n	8004556 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d107      	bne.n	8004556 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004546:	69fb      	ldr	r3, [r7, #28]
 8004548:	781b      	ldrb	r3, [r3, #0]
 800454a:	b2da      	uxtb	r2, r3
 800454c:	2117      	movs	r1, #23
 800454e:	187b      	adds	r3, r7, r1
 8004550:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004552:	187b      	adds	r3, r7, r1
 8004554:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	3301      	adds	r3, #1
 800455a:	d055      	beq.n	8004608 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800455c:	f7fd fc58 	bl	8001e10 <HAL_GetTick>
 8004560:	0002      	movs	r2, r0
 8004562:	6a3b      	ldr	r3, [r7, #32]
 8004564:	1ad3      	subs	r3, r2, r3
 8004566:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004568:	429a      	cmp	r2, r3
 800456a:	d902      	bls.n	8004572 <SPI_WaitFifoStateUntilTimeout+0x8a>
 800456c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800456e:	2b00      	cmp	r3, #0
 8004570:	d142      	bne.n	80045f8 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	685a      	ldr	r2, [r3, #4]
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	21e0      	movs	r1, #224	; 0xe0
 800457e:	438a      	bics	r2, r1
 8004580:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	685a      	ldr	r2, [r3, #4]
 8004586:	2382      	movs	r3, #130	; 0x82
 8004588:	005b      	lsls	r3, r3, #1
 800458a:	429a      	cmp	r2, r3
 800458c:	d113      	bne.n	80045b6 <SPI_WaitFifoStateUntilTimeout+0xce>
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	689a      	ldr	r2, [r3, #8]
 8004592:	2380      	movs	r3, #128	; 0x80
 8004594:	021b      	lsls	r3, r3, #8
 8004596:	429a      	cmp	r2, r3
 8004598:	d005      	beq.n	80045a6 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	689a      	ldr	r2, [r3, #8]
 800459e:	2380      	movs	r3, #128	; 0x80
 80045a0:	00db      	lsls	r3, r3, #3
 80045a2:	429a      	cmp	r2, r3
 80045a4:	d107      	bne.n	80045b6 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	2140      	movs	r1, #64	; 0x40
 80045b2:	438a      	bics	r2, r1
 80045b4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80045ba:	2380      	movs	r3, #128	; 0x80
 80045bc:	019b      	lsls	r3, r3, #6
 80045be:	429a      	cmp	r2, r3
 80045c0:	d110      	bne.n	80045e4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	681a      	ldr	r2, [r3, #0]
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4916      	ldr	r1, [pc, #88]	; (8004628 <SPI_WaitFifoStateUntilTimeout+0x140>)
 80045ce:	400a      	ands	r2, r1
 80045d0:	601a      	str	r2, [r3, #0]
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	2180      	movs	r1, #128	; 0x80
 80045de:	0189      	lsls	r1, r1, #6
 80045e0:	430a      	orrs	r2, r1
 80045e2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	225d      	movs	r2, #93	; 0x5d
 80045e8:	2101      	movs	r1, #1
 80045ea:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	225c      	movs	r2, #92	; 0x5c
 80045f0:	2100      	movs	r1, #0
 80045f2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80045f4:	2303      	movs	r3, #3
 80045f6:	e010      	b.n	800461a <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80045f8:	69bb      	ldr	r3, [r7, #24]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d101      	bne.n	8004602 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 80045fe:	2300      	movs	r3, #0
 8004600:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004602:	69bb      	ldr	r3, [r7, #24]
 8004604:	3b01      	subs	r3, #1
 8004606:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	68ba      	ldr	r2, [r7, #8]
 8004610:	4013      	ands	r3, r2
 8004612:	687a      	ldr	r2, [r7, #4]
 8004614:	429a      	cmp	r2, r3
 8004616:	d18e      	bne.n	8004536 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8004618:	2300      	movs	r3, #0
}
 800461a:	0018      	movs	r0, r3
 800461c:	46bd      	mov	sp, r7
 800461e:	b00a      	add	sp, #40	; 0x28
 8004620:	bd80      	pop	{r7, pc}
 8004622:	46c0      	nop			; (mov r8, r8)
 8004624:	20000004 	.word	0x20000004
 8004628:	ffffdfff 	.word	0xffffdfff

0800462c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b086      	sub	sp, #24
 8004630:	af02      	add	r7, sp, #8
 8004632:	60f8      	str	r0, [r7, #12]
 8004634:	60b9      	str	r1, [r7, #8]
 8004636:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	685a      	ldr	r2, [r3, #4]
 800463c:	2382      	movs	r3, #130	; 0x82
 800463e:	005b      	lsls	r3, r3, #1
 8004640:	429a      	cmp	r2, r3
 8004642:	d113      	bne.n	800466c <SPI_EndRxTransaction+0x40>
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	689a      	ldr	r2, [r3, #8]
 8004648:	2380      	movs	r3, #128	; 0x80
 800464a:	021b      	lsls	r3, r3, #8
 800464c:	429a      	cmp	r2, r3
 800464e:	d005      	beq.n	800465c <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	689a      	ldr	r2, [r3, #8]
 8004654:	2380      	movs	r3, #128	; 0x80
 8004656:	00db      	lsls	r3, r3, #3
 8004658:	429a      	cmp	r2, r3
 800465a:	d107      	bne.n	800466c <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	681a      	ldr	r2, [r3, #0]
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	2140      	movs	r1, #64	; 0x40
 8004668:	438a      	bics	r2, r1
 800466a:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800466c:	68ba      	ldr	r2, [r7, #8]
 800466e:	68f8      	ldr	r0, [r7, #12]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	9300      	str	r3, [sp, #0]
 8004674:	0013      	movs	r3, r2
 8004676:	2200      	movs	r2, #0
 8004678:	2180      	movs	r1, #128	; 0x80
 800467a:	f7ff fea7 	bl	80043cc <SPI_WaitFlagStateUntilTimeout>
 800467e:	1e03      	subs	r3, r0, #0
 8004680:	d007      	beq.n	8004692 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004686:	2220      	movs	r2, #32
 8004688:	431a      	orrs	r2, r3
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800468e:	2303      	movs	r3, #3
 8004690:	e026      	b.n	80046e0 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	685a      	ldr	r2, [r3, #4]
 8004696:	2382      	movs	r3, #130	; 0x82
 8004698:	005b      	lsls	r3, r3, #1
 800469a:	429a      	cmp	r2, r3
 800469c:	d11f      	bne.n	80046de <SPI_EndRxTransaction+0xb2>
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	689a      	ldr	r2, [r3, #8]
 80046a2:	2380      	movs	r3, #128	; 0x80
 80046a4:	021b      	lsls	r3, r3, #8
 80046a6:	429a      	cmp	r2, r3
 80046a8:	d005      	beq.n	80046b6 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	689a      	ldr	r2, [r3, #8]
 80046ae:	2380      	movs	r3, #128	; 0x80
 80046b0:	00db      	lsls	r3, r3, #3
 80046b2:	429a      	cmp	r2, r3
 80046b4:	d113      	bne.n	80046de <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80046b6:	68ba      	ldr	r2, [r7, #8]
 80046b8:	23c0      	movs	r3, #192	; 0xc0
 80046ba:	00d9      	lsls	r1, r3, #3
 80046bc:	68f8      	ldr	r0, [r7, #12]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	9300      	str	r3, [sp, #0]
 80046c2:	0013      	movs	r3, r2
 80046c4:	2200      	movs	r2, #0
 80046c6:	f7ff ff0f 	bl	80044e8 <SPI_WaitFifoStateUntilTimeout>
 80046ca:	1e03      	subs	r3, r0, #0
 80046cc:	d007      	beq.n	80046de <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046d2:	2220      	movs	r2, #32
 80046d4:	431a      	orrs	r2, r3
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80046da:	2303      	movs	r3, #3
 80046dc:	e000      	b.n	80046e0 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 80046de:	2300      	movs	r3, #0
}
 80046e0:	0018      	movs	r0, r3
 80046e2:	46bd      	mov	sp, r7
 80046e4:	b004      	add	sp, #16
 80046e6:	bd80      	pop	{r7, pc}

080046e8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b086      	sub	sp, #24
 80046ec:	af02      	add	r7, sp, #8
 80046ee:	60f8      	str	r0, [r7, #12]
 80046f0:	60b9      	str	r1, [r7, #8]
 80046f2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80046f4:	68ba      	ldr	r2, [r7, #8]
 80046f6:	23c0      	movs	r3, #192	; 0xc0
 80046f8:	0159      	lsls	r1, r3, #5
 80046fa:	68f8      	ldr	r0, [r7, #12]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	9300      	str	r3, [sp, #0]
 8004700:	0013      	movs	r3, r2
 8004702:	2200      	movs	r2, #0
 8004704:	f7ff fef0 	bl	80044e8 <SPI_WaitFifoStateUntilTimeout>
 8004708:	1e03      	subs	r3, r0, #0
 800470a:	d007      	beq.n	800471c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004710:	2220      	movs	r2, #32
 8004712:	431a      	orrs	r2, r3
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004718:	2303      	movs	r3, #3
 800471a:	e027      	b.n	800476c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800471c:	68ba      	ldr	r2, [r7, #8]
 800471e:	68f8      	ldr	r0, [r7, #12]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	9300      	str	r3, [sp, #0]
 8004724:	0013      	movs	r3, r2
 8004726:	2200      	movs	r2, #0
 8004728:	2180      	movs	r1, #128	; 0x80
 800472a:	f7ff fe4f 	bl	80043cc <SPI_WaitFlagStateUntilTimeout>
 800472e:	1e03      	subs	r3, r0, #0
 8004730:	d007      	beq.n	8004742 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004736:	2220      	movs	r2, #32
 8004738:	431a      	orrs	r2, r3
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800473e:	2303      	movs	r3, #3
 8004740:	e014      	b.n	800476c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004742:	68ba      	ldr	r2, [r7, #8]
 8004744:	23c0      	movs	r3, #192	; 0xc0
 8004746:	00d9      	lsls	r1, r3, #3
 8004748:	68f8      	ldr	r0, [r7, #12]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	9300      	str	r3, [sp, #0]
 800474e:	0013      	movs	r3, r2
 8004750:	2200      	movs	r2, #0
 8004752:	f7ff fec9 	bl	80044e8 <SPI_WaitFifoStateUntilTimeout>
 8004756:	1e03      	subs	r3, r0, #0
 8004758:	d007      	beq.n	800476a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800475e:	2220      	movs	r2, #32
 8004760:	431a      	orrs	r2, r3
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004766:	2303      	movs	r3, #3
 8004768:	e000      	b.n	800476c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800476a:	2300      	movs	r3, #0
}
 800476c:	0018      	movs	r0, r3
 800476e:	46bd      	mov	sp, r7
 8004770:	b004      	add	sp, #16
 8004772:	bd80      	pop	{r7, pc}

08004774 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b082      	sub	sp, #8
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d101      	bne.n	8004786 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004782:	2301      	movs	r3, #1
 8004784:	e04a      	b.n	800481c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	223d      	movs	r2, #61	; 0x3d
 800478a:	5c9b      	ldrb	r3, [r3, r2]
 800478c:	b2db      	uxtb	r3, r3
 800478e:	2b00      	cmp	r3, #0
 8004790:	d107      	bne.n	80047a2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	223c      	movs	r2, #60	; 0x3c
 8004796:	2100      	movs	r1, #0
 8004798:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	0018      	movs	r0, r3
 800479e:	f7fd f8d1 	bl	8001944 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	223d      	movs	r2, #61	; 0x3d
 80047a6:	2102      	movs	r1, #2
 80047a8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681a      	ldr	r2, [r3, #0]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	3304      	adds	r3, #4
 80047b2:	0019      	movs	r1, r3
 80047b4:	0010      	movs	r0, r2
 80047b6:	f000 f9ed 	bl	8004b94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2248      	movs	r2, #72	; 0x48
 80047be:	2101      	movs	r1, #1
 80047c0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	223e      	movs	r2, #62	; 0x3e
 80047c6:	2101      	movs	r1, #1
 80047c8:	5499      	strb	r1, [r3, r2]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	223f      	movs	r2, #63	; 0x3f
 80047ce:	2101      	movs	r1, #1
 80047d0:	5499      	strb	r1, [r3, r2]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2240      	movs	r2, #64	; 0x40
 80047d6:	2101      	movs	r1, #1
 80047d8:	5499      	strb	r1, [r3, r2]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2241      	movs	r2, #65	; 0x41
 80047de:	2101      	movs	r1, #1
 80047e0:	5499      	strb	r1, [r3, r2]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2242      	movs	r2, #66	; 0x42
 80047e6:	2101      	movs	r1, #1
 80047e8:	5499      	strb	r1, [r3, r2]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2243      	movs	r2, #67	; 0x43
 80047ee:	2101      	movs	r1, #1
 80047f0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2244      	movs	r2, #68	; 0x44
 80047f6:	2101      	movs	r1, #1
 80047f8:	5499      	strb	r1, [r3, r2]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2245      	movs	r2, #69	; 0x45
 80047fe:	2101      	movs	r1, #1
 8004800:	5499      	strb	r1, [r3, r2]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2246      	movs	r2, #70	; 0x46
 8004806:	2101      	movs	r1, #1
 8004808:	5499      	strb	r1, [r3, r2]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2247      	movs	r2, #71	; 0x47
 800480e:	2101      	movs	r1, #1
 8004810:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	223d      	movs	r2, #61	; 0x3d
 8004816:	2101      	movs	r1, #1
 8004818:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800481a:	2300      	movs	r3, #0
}
 800481c:	0018      	movs	r0, r3
 800481e:	46bd      	mov	sp, r7
 8004820:	b002      	add	sp, #8
 8004822:	bd80      	pop	{r7, pc}

08004824 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b084      	sub	sp, #16
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	223d      	movs	r2, #61	; 0x3d
 8004830:	5c9b      	ldrb	r3, [r3, r2]
 8004832:	b2db      	uxtb	r3, r3
 8004834:	2b01      	cmp	r3, #1
 8004836:	d001      	beq.n	800483c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004838:	2301      	movs	r3, #1
 800483a:	e047      	b.n	80048cc <HAL_TIM_Base_Start_IT+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	223d      	movs	r2, #61	; 0x3d
 8004840:	2102      	movs	r1, #2
 8004842:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	68da      	ldr	r2, [r3, #12]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	2101      	movs	r1, #1
 8004850:	430a      	orrs	r2, r1
 8004852:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a1e      	ldr	r2, [pc, #120]	; (80048d4 <HAL_TIM_Base_Start_IT+0xb0>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d014      	beq.n	8004888 <HAL_TIM_Base_Start_IT+0x64>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	2380      	movs	r3, #128	; 0x80
 8004864:	05db      	lsls	r3, r3, #23
 8004866:	429a      	cmp	r2, r3
 8004868:	d00e      	beq.n	8004888 <HAL_TIM_Base_Start_IT+0x64>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a1a      	ldr	r2, [pc, #104]	; (80048d8 <HAL_TIM_Base_Start_IT+0xb4>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d009      	beq.n	8004888 <HAL_TIM_Base_Start_IT+0x64>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a18      	ldr	r2, [pc, #96]	; (80048dc <HAL_TIM_Base_Start_IT+0xb8>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d004      	beq.n	8004888 <HAL_TIM_Base_Start_IT+0x64>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a17      	ldr	r2, [pc, #92]	; (80048e0 <HAL_TIM_Base_Start_IT+0xbc>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d116      	bne.n	80048b6 <HAL_TIM_Base_Start_IT+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	4a15      	ldr	r2, [pc, #84]	; (80048e4 <HAL_TIM_Base_Start_IT+0xc0>)
 8004890:	4013      	ands	r3, r2
 8004892:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	2b06      	cmp	r3, #6
 8004898:	d016      	beq.n	80048c8 <HAL_TIM_Base_Start_IT+0xa4>
 800489a:	68fa      	ldr	r2, [r7, #12]
 800489c:	2380      	movs	r3, #128	; 0x80
 800489e:	025b      	lsls	r3, r3, #9
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d011      	beq.n	80048c8 <HAL_TIM_Base_Start_IT+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	2101      	movs	r1, #1
 80048b0:	430a      	orrs	r2, r1
 80048b2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048b4:	e008      	b.n	80048c8 <HAL_TIM_Base_Start_IT+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	2101      	movs	r1, #1
 80048c2:	430a      	orrs	r2, r1
 80048c4:	601a      	str	r2, [r3, #0]
 80048c6:	e000      	b.n	80048ca <HAL_TIM_Base_Start_IT+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048c8:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80048ca:	2300      	movs	r3, #0
}
 80048cc:	0018      	movs	r0, r3
 80048ce:	46bd      	mov	sp, r7
 80048d0:	b004      	add	sp, #16
 80048d2:	bd80      	pop	{r7, pc}
 80048d4:	40012c00 	.word	0x40012c00
 80048d8:	40000400 	.word	0x40000400
 80048dc:	40000800 	.word	0x40000800
 80048e0:	40014000 	.word	0x40014000
 80048e4:	00010007 	.word	0x00010007

080048e8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b082      	sub	sp, #8
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	68da      	ldr	r2, [r3, #12]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	2101      	movs	r1, #1
 80048fc:	438a      	bics	r2, r1
 80048fe:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	6a1b      	ldr	r3, [r3, #32]
 8004906:	4a0d      	ldr	r2, [pc, #52]	; (800493c <HAL_TIM_Base_Stop_IT+0x54>)
 8004908:	4013      	ands	r3, r2
 800490a:	d10d      	bne.n	8004928 <HAL_TIM_Base_Stop_IT+0x40>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	6a1b      	ldr	r3, [r3, #32]
 8004912:	4a0b      	ldr	r2, [pc, #44]	; (8004940 <HAL_TIM_Base_Stop_IT+0x58>)
 8004914:	4013      	ands	r3, r2
 8004916:	d107      	bne.n	8004928 <HAL_TIM_Base_Stop_IT+0x40>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	681a      	ldr	r2, [r3, #0]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	2101      	movs	r1, #1
 8004924:	438a      	bics	r2, r1
 8004926:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	223d      	movs	r2, #61	; 0x3d
 800492c:	2101      	movs	r1, #1
 800492e:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8004930:	2300      	movs	r3, #0
}
 8004932:	0018      	movs	r0, r3
 8004934:	46bd      	mov	sp, r7
 8004936:	b002      	add	sp, #8
 8004938:	bd80      	pop	{r7, pc}
 800493a:	46c0      	nop			; (mov r8, r8)
 800493c:	00001111 	.word	0x00001111
 8004940:	00000444 	.word	0x00000444

08004944 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b084      	sub	sp, #16
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	68db      	ldr	r3, [r3, #12]
 8004952:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	691b      	ldr	r3, [r3, #16]
 800495a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	2202      	movs	r2, #2
 8004960:	4013      	ands	r3, r2
 8004962:	d021      	beq.n	80049a8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2202      	movs	r2, #2
 8004968:	4013      	ands	r3, r2
 800496a:	d01d      	beq.n	80049a8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	2203      	movs	r2, #3
 8004972:	4252      	negs	r2, r2
 8004974:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2201      	movs	r2, #1
 800497a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	699b      	ldr	r3, [r3, #24]
 8004982:	2203      	movs	r2, #3
 8004984:	4013      	ands	r3, r2
 8004986:	d004      	beq.n	8004992 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	0018      	movs	r0, r3
 800498c:	f000 f8ea 	bl	8004b64 <HAL_TIM_IC_CaptureCallback>
 8004990:	e007      	b.n	80049a2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	0018      	movs	r0, r3
 8004996:	f000 f8dd 	bl	8004b54 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	0018      	movs	r0, r3
 800499e:	f000 f8e9 	bl	8004b74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2200      	movs	r2, #0
 80049a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	2204      	movs	r2, #4
 80049ac:	4013      	ands	r3, r2
 80049ae:	d022      	beq.n	80049f6 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2204      	movs	r2, #4
 80049b4:	4013      	ands	r3, r2
 80049b6:	d01e      	beq.n	80049f6 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	2205      	movs	r2, #5
 80049be:	4252      	negs	r2, r2
 80049c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2202      	movs	r2, #2
 80049c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	699a      	ldr	r2, [r3, #24]
 80049ce:	23c0      	movs	r3, #192	; 0xc0
 80049d0:	009b      	lsls	r3, r3, #2
 80049d2:	4013      	ands	r3, r2
 80049d4:	d004      	beq.n	80049e0 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	0018      	movs	r0, r3
 80049da:	f000 f8c3 	bl	8004b64 <HAL_TIM_IC_CaptureCallback>
 80049de:	e007      	b.n	80049f0 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	0018      	movs	r0, r3
 80049e4:	f000 f8b6 	bl	8004b54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	0018      	movs	r0, r3
 80049ec:	f000 f8c2 	bl	8004b74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2200      	movs	r2, #0
 80049f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	2208      	movs	r2, #8
 80049fa:	4013      	ands	r3, r2
 80049fc:	d021      	beq.n	8004a42 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2208      	movs	r2, #8
 8004a02:	4013      	ands	r3, r2
 8004a04:	d01d      	beq.n	8004a42 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	2209      	movs	r2, #9
 8004a0c:	4252      	negs	r2, r2
 8004a0e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2204      	movs	r2, #4
 8004a14:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	69db      	ldr	r3, [r3, #28]
 8004a1c:	2203      	movs	r2, #3
 8004a1e:	4013      	ands	r3, r2
 8004a20:	d004      	beq.n	8004a2c <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	0018      	movs	r0, r3
 8004a26:	f000 f89d 	bl	8004b64 <HAL_TIM_IC_CaptureCallback>
 8004a2a:	e007      	b.n	8004a3c <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	0018      	movs	r0, r3
 8004a30:	f000 f890 	bl	8004b54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	0018      	movs	r0, r3
 8004a38:	f000 f89c 	bl	8004b74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	2210      	movs	r2, #16
 8004a46:	4013      	ands	r3, r2
 8004a48:	d022      	beq.n	8004a90 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2210      	movs	r2, #16
 8004a4e:	4013      	ands	r3, r2
 8004a50:	d01e      	beq.n	8004a90 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	2211      	movs	r2, #17
 8004a58:	4252      	negs	r2, r2
 8004a5a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2208      	movs	r2, #8
 8004a60:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	69da      	ldr	r2, [r3, #28]
 8004a68:	23c0      	movs	r3, #192	; 0xc0
 8004a6a:	009b      	lsls	r3, r3, #2
 8004a6c:	4013      	ands	r3, r2
 8004a6e:	d004      	beq.n	8004a7a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	0018      	movs	r0, r3
 8004a74:	f000 f876 	bl	8004b64 <HAL_TIM_IC_CaptureCallback>
 8004a78:	e007      	b.n	8004a8a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	0018      	movs	r0, r3
 8004a7e:	f000 f869 	bl	8004b54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	0018      	movs	r0, r3
 8004a86:	f000 f875 	bl	8004b74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	2201      	movs	r2, #1
 8004a94:	4013      	ands	r3, r2
 8004a96:	d00c      	beq.n	8004ab2 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	4013      	ands	r3, r2
 8004a9e:	d008      	beq.n	8004ab2 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	2202      	movs	r2, #2
 8004aa6:	4252      	negs	r2, r2
 8004aa8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	0018      	movs	r0, r3
 8004aae:	f7fc fca7 	bl	8001400 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	2280      	movs	r2, #128	; 0x80
 8004ab6:	4013      	ands	r3, r2
 8004ab8:	d104      	bne.n	8004ac4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004aba:	68ba      	ldr	r2, [r7, #8]
 8004abc:	2380      	movs	r3, #128	; 0x80
 8004abe:	019b      	lsls	r3, r3, #6
 8004ac0:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004ac2:	d00b      	beq.n	8004adc <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2280      	movs	r2, #128	; 0x80
 8004ac8:	4013      	ands	r3, r2
 8004aca:	d007      	beq.n	8004adc <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a1e      	ldr	r2, [pc, #120]	; (8004b4c <HAL_TIM_IRQHandler+0x208>)
 8004ad2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	0018      	movs	r0, r3
 8004ad8:	f000 f972 	bl	8004dc0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004adc:	68ba      	ldr	r2, [r7, #8]
 8004ade:	2380      	movs	r3, #128	; 0x80
 8004ae0:	005b      	lsls	r3, r3, #1
 8004ae2:	4013      	ands	r3, r2
 8004ae4:	d00b      	beq.n	8004afe <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2280      	movs	r2, #128	; 0x80
 8004aea:	4013      	ands	r3, r2
 8004aec:	d007      	beq.n	8004afe <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a17      	ldr	r2, [pc, #92]	; (8004b50 <HAL_TIM_IRQHandler+0x20c>)
 8004af4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	0018      	movs	r0, r3
 8004afa:	f000 f969 	bl	8004dd0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	2240      	movs	r2, #64	; 0x40
 8004b02:	4013      	ands	r3, r2
 8004b04:	d00c      	beq.n	8004b20 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	2240      	movs	r2, #64	; 0x40
 8004b0a:	4013      	ands	r3, r2
 8004b0c:	d008      	beq.n	8004b20 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	2241      	movs	r2, #65	; 0x41
 8004b14:	4252      	negs	r2, r2
 8004b16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	0018      	movs	r0, r3
 8004b1c:	f000 f832 	bl	8004b84 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	2220      	movs	r2, #32
 8004b24:	4013      	ands	r3, r2
 8004b26:	d00c      	beq.n	8004b42 <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2220      	movs	r2, #32
 8004b2c:	4013      	ands	r3, r2
 8004b2e:	d008      	beq.n	8004b42 <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	2221      	movs	r2, #33	; 0x21
 8004b36:	4252      	negs	r2, r2
 8004b38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	0018      	movs	r0, r3
 8004b3e:	f000 f937 	bl	8004db0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b42:	46c0      	nop			; (mov r8, r8)
 8004b44:	46bd      	mov	sp, r7
 8004b46:	b004      	add	sp, #16
 8004b48:	bd80      	pop	{r7, pc}
 8004b4a:	46c0      	nop			; (mov r8, r8)
 8004b4c:	ffffdf7f 	.word	0xffffdf7f
 8004b50:	fffffeff 	.word	0xfffffeff

08004b54 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b082      	sub	sp, #8
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b5c:	46c0      	nop			; (mov r8, r8)
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	b002      	add	sp, #8
 8004b62:	bd80      	pop	{r7, pc}

08004b64 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b082      	sub	sp, #8
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b6c:	46c0      	nop			; (mov r8, r8)
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	b002      	add	sp, #8
 8004b72:	bd80      	pop	{r7, pc}

08004b74 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b082      	sub	sp, #8
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b7c:	46c0      	nop			; (mov r8, r8)
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	b002      	add	sp, #8
 8004b82:	bd80      	pop	{r7, pc}

08004b84 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b082      	sub	sp, #8
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004b8c:	46c0      	nop			; (mov r8, r8)
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	b002      	add	sp, #8
 8004b92:	bd80      	pop	{r7, pc}

08004b94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b084      	sub	sp, #16
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
 8004b9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	4a3f      	ldr	r2, [pc, #252]	; (8004ca4 <TIM_Base_SetConfig+0x110>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d00c      	beq.n	8004bc6 <TIM_Base_SetConfig+0x32>
 8004bac:	687a      	ldr	r2, [r7, #4]
 8004bae:	2380      	movs	r3, #128	; 0x80
 8004bb0:	05db      	lsls	r3, r3, #23
 8004bb2:	429a      	cmp	r2, r3
 8004bb4:	d007      	beq.n	8004bc6 <TIM_Base_SetConfig+0x32>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	4a3b      	ldr	r2, [pc, #236]	; (8004ca8 <TIM_Base_SetConfig+0x114>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d003      	beq.n	8004bc6 <TIM_Base_SetConfig+0x32>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	4a3a      	ldr	r2, [pc, #232]	; (8004cac <TIM_Base_SetConfig+0x118>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d108      	bne.n	8004bd8 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	2270      	movs	r2, #112	; 0x70
 8004bca:	4393      	bics	r3, r2
 8004bcc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	68fa      	ldr	r2, [r7, #12]
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	4a32      	ldr	r2, [pc, #200]	; (8004ca4 <TIM_Base_SetConfig+0x110>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d01c      	beq.n	8004c1a <TIM_Base_SetConfig+0x86>
 8004be0:	687a      	ldr	r2, [r7, #4]
 8004be2:	2380      	movs	r3, #128	; 0x80
 8004be4:	05db      	lsls	r3, r3, #23
 8004be6:	429a      	cmp	r2, r3
 8004be8:	d017      	beq.n	8004c1a <TIM_Base_SetConfig+0x86>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	4a2e      	ldr	r2, [pc, #184]	; (8004ca8 <TIM_Base_SetConfig+0x114>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d013      	beq.n	8004c1a <TIM_Base_SetConfig+0x86>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	4a2d      	ldr	r2, [pc, #180]	; (8004cac <TIM_Base_SetConfig+0x118>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d00f      	beq.n	8004c1a <TIM_Base_SetConfig+0x86>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	4a2c      	ldr	r2, [pc, #176]	; (8004cb0 <TIM_Base_SetConfig+0x11c>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d00b      	beq.n	8004c1a <TIM_Base_SetConfig+0x86>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	4a2b      	ldr	r2, [pc, #172]	; (8004cb4 <TIM_Base_SetConfig+0x120>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d007      	beq.n	8004c1a <TIM_Base_SetConfig+0x86>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	4a2a      	ldr	r2, [pc, #168]	; (8004cb8 <TIM_Base_SetConfig+0x124>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d003      	beq.n	8004c1a <TIM_Base_SetConfig+0x86>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	4a29      	ldr	r2, [pc, #164]	; (8004cbc <TIM_Base_SetConfig+0x128>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d108      	bne.n	8004c2c <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	4a28      	ldr	r2, [pc, #160]	; (8004cc0 <TIM_Base_SetConfig+0x12c>)
 8004c1e:	4013      	ands	r3, r2
 8004c20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	68db      	ldr	r3, [r3, #12]
 8004c26:	68fa      	ldr	r2, [r7, #12]
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	2280      	movs	r2, #128	; 0x80
 8004c30:	4393      	bics	r3, r2
 8004c32:	001a      	movs	r2, r3
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	695b      	ldr	r3, [r3, #20]
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	68fa      	ldr	r2, [r7, #12]
 8004c40:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	689a      	ldr	r2, [r3, #8]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	681a      	ldr	r2, [r3, #0]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	4a13      	ldr	r2, [pc, #76]	; (8004ca4 <TIM_Base_SetConfig+0x110>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d00b      	beq.n	8004c72 <TIM_Base_SetConfig+0xde>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	4a15      	ldr	r2, [pc, #84]	; (8004cb4 <TIM_Base_SetConfig+0x120>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d007      	beq.n	8004c72 <TIM_Base_SetConfig+0xde>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	4a14      	ldr	r2, [pc, #80]	; (8004cb8 <TIM_Base_SetConfig+0x124>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d003      	beq.n	8004c72 <TIM_Base_SetConfig+0xde>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	4a13      	ldr	r2, [pc, #76]	; (8004cbc <TIM_Base_SetConfig+0x128>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d103      	bne.n	8004c7a <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	691a      	ldr	r2, [r3, #16]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2201      	movs	r2, #1
 8004c7e:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	691b      	ldr	r3, [r3, #16]
 8004c84:	2201      	movs	r2, #1
 8004c86:	4013      	ands	r3, r2
 8004c88:	2b01      	cmp	r3, #1
 8004c8a:	d106      	bne.n	8004c9a <TIM_Base_SetConfig+0x106>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	691b      	ldr	r3, [r3, #16]
 8004c90:	2201      	movs	r2, #1
 8004c92:	4393      	bics	r3, r2
 8004c94:	001a      	movs	r2, r3
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	611a      	str	r2, [r3, #16]
  }
}
 8004c9a:	46c0      	nop			; (mov r8, r8)
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	b004      	add	sp, #16
 8004ca0:	bd80      	pop	{r7, pc}
 8004ca2:	46c0      	nop			; (mov r8, r8)
 8004ca4:	40012c00 	.word	0x40012c00
 8004ca8:	40000400 	.word	0x40000400
 8004cac:	40000800 	.word	0x40000800
 8004cb0:	40002000 	.word	0x40002000
 8004cb4:	40014000 	.word	0x40014000
 8004cb8:	40014400 	.word	0x40014400
 8004cbc:	40014800 	.word	0x40014800
 8004cc0:	fffffcff 	.word	0xfffffcff

08004cc4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b084      	sub	sp, #16
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
 8004ccc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	223c      	movs	r2, #60	; 0x3c
 8004cd2:	5c9b      	ldrb	r3, [r3, r2]
 8004cd4:	2b01      	cmp	r3, #1
 8004cd6:	d101      	bne.n	8004cdc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004cd8:	2302      	movs	r3, #2
 8004cda:	e05a      	b.n	8004d92 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	223c      	movs	r2, #60	; 0x3c
 8004ce0:	2101      	movs	r1, #1
 8004ce2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	223d      	movs	r2, #61	; 0x3d
 8004ce8:	2102      	movs	r1, #2
 8004cea:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a26      	ldr	r2, [pc, #152]	; (8004d9c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d108      	bne.n	8004d18 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	4a25      	ldr	r2, [pc, #148]	; (8004da0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004d0a:	4013      	ands	r3, r2
 8004d0c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	68fa      	ldr	r2, [r7, #12]
 8004d14:	4313      	orrs	r3, r2
 8004d16:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2270      	movs	r2, #112	; 0x70
 8004d1c:	4393      	bics	r3, r2
 8004d1e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	68fa      	ldr	r2, [r7, #12]
 8004d26:	4313      	orrs	r3, r2
 8004d28:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	68fa      	ldr	r2, [r7, #12]
 8004d30:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a19      	ldr	r2, [pc, #100]	; (8004d9c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d014      	beq.n	8004d66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681a      	ldr	r2, [r3, #0]
 8004d40:	2380      	movs	r3, #128	; 0x80
 8004d42:	05db      	lsls	r3, r3, #23
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d00e      	beq.n	8004d66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a15      	ldr	r2, [pc, #84]	; (8004da4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d009      	beq.n	8004d66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a14      	ldr	r2, [pc, #80]	; (8004da8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d004      	beq.n	8004d66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a12      	ldr	r2, [pc, #72]	; (8004dac <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d10c      	bne.n	8004d80 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	2280      	movs	r2, #128	; 0x80
 8004d6a:	4393      	bics	r3, r2
 8004d6c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	689b      	ldr	r3, [r3, #8]
 8004d72:	68ba      	ldr	r2, [r7, #8]
 8004d74:	4313      	orrs	r3, r2
 8004d76:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	68ba      	ldr	r2, [r7, #8]
 8004d7e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	223d      	movs	r2, #61	; 0x3d
 8004d84:	2101      	movs	r1, #1
 8004d86:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	223c      	movs	r2, #60	; 0x3c
 8004d8c:	2100      	movs	r1, #0
 8004d8e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004d90:	2300      	movs	r3, #0
}
 8004d92:	0018      	movs	r0, r3
 8004d94:	46bd      	mov	sp, r7
 8004d96:	b004      	add	sp, #16
 8004d98:	bd80      	pop	{r7, pc}
 8004d9a:	46c0      	nop			; (mov r8, r8)
 8004d9c:	40012c00 	.word	0x40012c00
 8004da0:	ff0fffff 	.word	0xff0fffff
 8004da4:	40000400 	.word	0x40000400
 8004da8:	40000800 	.word	0x40000800
 8004dac:	40014000 	.word	0x40014000

08004db0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b082      	sub	sp, #8
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004db8:	46c0      	nop			; (mov r8, r8)
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	b002      	add	sp, #8
 8004dbe:	bd80      	pop	{r7, pc}

08004dc0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b082      	sub	sp, #8
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004dc8:	46c0      	nop			; (mov r8, r8)
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	b002      	add	sp, #8
 8004dce:	bd80      	pop	{r7, pc}

08004dd0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b082      	sub	sp, #8
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004dd8:	46c0      	nop			; (mov r8, r8)
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	b002      	add	sp, #8
 8004dde:	bd80      	pop	{r7, pc}

08004de0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b082      	sub	sp, #8
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d101      	bne.n	8004df2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	e046      	b.n	8004e80 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2288      	movs	r2, #136	; 0x88
 8004df6:	589b      	ldr	r3, [r3, r2]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d107      	bne.n	8004e0c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2284      	movs	r2, #132	; 0x84
 8004e00:	2100      	movs	r1, #0
 8004e02:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	0018      	movs	r0, r3
 8004e08:	f7fc fdc2 	bl	8001990 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2288      	movs	r2, #136	; 0x88
 8004e10:	2124      	movs	r1, #36	; 0x24
 8004e12:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	681a      	ldr	r2, [r3, #0]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	2101      	movs	r1, #1
 8004e20:	438a      	bics	r2, r1
 8004e22:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d003      	beq.n	8004e34 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	0018      	movs	r0, r3
 8004e30:	f001 f8f4 	bl	800601c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	0018      	movs	r0, r3
 8004e38:	f000 fd9a 	bl	8005970 <UART_SetConfig>
 8004e3c:	0003      	movs	r3, r0
 8004e3e:	2b01      	cmp	r3, #1
 8004e40:	d101      	bne.n	8004e46 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8004e42:	2301      	movs	r3, #1
 8004e44:	e01c      	b.n	8004e80 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	685a      	ldr	r2, [r3, #4]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	490d      	ldr	r1, [pc, #52]	; (8004e88 <HAL_UART_Init+0xa8>)
 8004e52:	400a      	ands	r2, r1
 8004e54:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	689a      	ldr	r2, [r3, #8]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	212a      	movs	r1, #42	; 0x2a
 8004e62:	438a      	bics	r2, r1
 8004e64:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	681a      	ldr	r2, [r3, #0]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	2101      	movs	r1, #1
 8004e72:	430a      	orrs	r2, r1
 8004e74:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	0018      	movs	r0, r3
 8004e7a:	f001 f983 	bl	8006184 <UART_CheckIdleState>
 8004e7e:	0003      	movs	r3, r0
}
 8004e80:	0018      	movs	r0, r3
 8004e82:	46bd      	mov	sp, r7
 8004e84:	b002      	add	sp, #8
 8004e86:	bd80      	pop	{r7, pc}
 8004e88:	ffffb7ff 	.word	0xffffb7ff

08004e8c <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b082      	sub	sp, #8
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d101      	bne.n	8004e9e <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	e032      	b.n	8004f04 <HAL_UART_DeInit+0x78>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2288      	movs	r2, #136	; 0x88
 8004ea2:	2124      	movs	r1, #36	; 0x24
 8004ea4:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	2101      	movs	r1, #1
 8004eb2:	438a      	bics	r2, r1
 8004eb4:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	0018      	movs	r0, r3
 8004ed2:	f7fc fe3f 	bl	8001b54 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2290      	movs	r2, #144	; 0x90
 8004eda:	2100      	movs	r1, #0
 8004edc:	5099      	str	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_RESET;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2288      	movs	r2, #136	; 0x88
 8004ee2:	2100      	movs	r1, #0
 8004ee4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_RESET;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	228c      	movs	r2, #140	; 0x8c
 8004eea:	2100      	movs	r1, #0
 8004eec:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2284      	movs	r2, #132	; 0x84
 8004efe:	2100      	movs	r1, #0
 8004f00:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004f02:	2300      	movs	r3, #0
}
 8004f04:	0018      	movs	r0, r3
 8004f06:	46bd      	mov	sp, r7
 8004f08:	b002      	add	sp, #8
 8004f0a:	bd80      	pop	{r7, pc}

08004f0c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b08a      	sub	sp, #40	; 0x28
 8004f10:	af02      	add	r7, sp, #8
 8004f12:	60f8      	str	r0, [r7, #12]
 8004f14:	60b9      	str	r1, [r7, #8]
 8004f16:	603b      	str	r3, [r7, #0]
 8004f18:	1dbb      	adds	r3, r7, #6
 8004f1a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	2288      	movs	r2, #136	; 0x88
 8004f20:	589b      	ldr	r3, [r3, r2]
 8004f22:	2b20      	cmp	r3, #32
 8004f24:	d000      	beq.n	8004f28 <HAL_UART_Transmit+0x1c>
 8004f26:	e090      	b.n	800504a <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d003      	beq.n	8004f36 <HAL_UART_Transmit+0x2a>
 8004f2e:	1dbb      	adds	r3, r7, #6
 8004f30:	881b      	ldrh	r3, [r3, #0]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d101      	bne.n	8004f3a <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8004f36:	2301      	movs	r3, #1
 8004f38:	e088      	b.n	800504c <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	689a      	ldr	r2, [r3, #8]
 8004f3e:	2380      	movs	r3, #128	; 0x80
 8004f40:	015b      	lsls	r3, r3, #5
 8004f42:	429a      	cmp	r2, r3
 8004f44:	d109      	bne.n	8004f5a <HAL_UART_Transmit+0x4e>
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	691b      	ldr	r3, [r3, #16]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d105      	bne.n	8004f5a <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	2201      	movs	r2, #1
 8004f52:	4013      	ands	r3, r2
 8004f54:	d001      	beq.n	8004f5a <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8004f56:	2301      	movs	r3, #1
 8004f58:	e078      	b.n	800504c <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2290      	movs	r2, #144	; 0x90
 8004f5e:	2100      	movs	r1, #0
 8004f60:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2288      	movs	r2, #136	; 0x88
 8004f66:	2121      	movs	r1, #33	; 0x21
 8004f68:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004f6a:	f7fc ff51 	bl	8001e10 <HAL_GetTick>
 8004f6e:	0003      	movs	r3, r0
 8004f70:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	1dba      	adds	r2, r7, #6
 8004f76:	2154      	movs	r1, #84	; 0x54
 8004f78:	8812      	ldrh	r2, [r2, #0]
 8004f7a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	1dba      	adds	r2, r7, #6
 8004f80:	2156      	movs	r1, #86	; 0x56
 8004f82:	8812      	ldrh	r2, [r2, #0]
 8004f84:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	689a      	ldr	r2, [r3, #8]
 8004f8a:	2380      	movs	r3, #128	; 0x80
 8004f8c:	015b      	lsls	r3, r3, #5
 8004f8e:	429a      	cmp	r2, r3
 8004f90:	d108      	bne.n	8004fa4 <HAL_UART_Transmit+0x98>
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	691b      	ldr	r3, [r3, #16]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d104      	bne.n	8004fa4 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	61bb      	str	r3, [r7, #24]
 8004fa2:	e003      	b.n	8004fac <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004fac:	e030      	b.n	8005010 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004fae:	697a      	ldr	r2, [r7, #20]
 8004fb0:	68f8      	ldr	r0, [r7, #12]
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	9300      	str	r3, [sp, #0]
 8004fb6:	0013      	movs	r3, r2
 8004fb8:	2200      	movs	r2, #0
 8004fba:	2180      	movs	r1, #128	; 0x80
 8004fbc:	f001 f98c 	bl	80062d8 <UART_WaitOnFlagUntilTimeout>
 8004fc0:	1e03      	subs	r3, r0, #0
 8004fc2:	d005      	beq.n	8004fd0 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2288      	movs	r2, #136	; 0x88
 8004fc8:	2120      	movs	r1, #32
 8004fca:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004fcc:	2303      	movs	r3, #3
 8004fce:	e03d      	b.n	800504c <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8004fd0:	69fb      	ldr	r3, [r7, #28]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d10b      	bne.n	8004fee <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004fd6:	69bb      	ldr	r3, [r7, #24]
 8004fd8:	881b      	ldrh	r3, [r3, #0]
 8004fda:	001a      	movs	r2, r3
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	05d2      	lsls	r2, r2, #23
 8004fe2:	0dd2      	lsrs	r2, r2, #23
 8004fe4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004fe6:	69bb      	ldr	r3, [r7, #24]
 8004fe8:	3302      	adds	r3, #2
 8004fea:	61bb      	str	r3, [r7, #24]
 8004fec:	e007      	b.n	8004ffe <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004fee:	69fb      	ldr	r3, [r7, #28]
 8004ff0:	781a      	ldrb	r2, [r3, #0]
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004ff8:	69fb      	ldr	r3, [r7, #28]
 8004ffa:	3301      	adds	r3, #1
 8004ffc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	2256      	movs	r2, #86	; 0x56
 8005002:	5a9b      	ldrh	r3, [r3, r2]
 8005004:	b29b      	uxth	r3, r3
 8005006:	3b01      	subs	r3, #1
 8005008:	b299      	uxth	r1, r3
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2256      	movs	r2, #86	; 0x56
 800500e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	2256      	movs	r2, #86	; 0x56
 8005014:	5a9b      	ldrh	r3, [r3, r2]
 8005016:	b29b      	uxth	r3, r3
 8005018:	2b00      	cmp	r3, #0
 800501a:	d1c8      	bne.n	8004fae <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800501c:	697a      	ldr	r2, [r7, #20]
 800501e:	68f8      	ldr	r0, [r7, #12]
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	9300      	str	r3, [sp, #0]
 8005024:	0013      	movs	r3, r2
 8005026:	2200      	movs	r2, #0
 8005028:	2140      	movs	r1, #64	; 0x40
 800502a:	f001 f955 	bl	80062d8 <UART_WaitOnFlagUntilTimeout>
 800502e:	1e03      	subs	r3, r0, #0
 8005030:	d005      	beq.n	800503e <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2288      	movs	r2, #136	; 0x88
 8005036:	2120      	movs	r1, #32
 8005038:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 800503a:	2303      	movs	r3, #3
 800503c:	e006      	b.n	800504c <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	2288      	movs	r2, #136	; 0x88
 8005042:	2120      	movs	r1, #32
 8005044:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8005046:	2300      	movs	r3, #0
 8005048:	e000      	b.n	800504c <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 800504a:	2302      	movs	r3, #2
  }
}
 800504c:	0018      	movs	r0, r3
 800504e:	46bd      	mov	sp, r7
 8005050:	b008      	add	sp, #32
 8005052:	bd80      	pop	{r7, pc}

08005054 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b08a      	sub	sp, #40	; 0x28
 8005058:	af02      	add	r7, sp, #8
 800505a:	60f8      	str	r0, [r7, #12]
 800505c:	60b9      	str	r1, [r7, #8]
 800505e:	603b      	str	r3, [r7, #0]
 8005060:	1dbb      	adds	r3, r7, #6
 8005062:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	228c      	movs	r2, #140	; 0x8c
 8005068:	589b      	ldr	r3, [r3, r2]
 800506a:	2b20      	cmp	r3, #32
 800506c:	d000      	beq.n	8005070 <HAL_UART_Receive+0x1c>
 800506e:	e0d0      	b.n	8005212 <HAL_UART_Receive+0x1be>
  {
    if ((pData == NULL) || (Size == 0U))
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d003      	beq.n	800507e <HAL_UART_Receive+0x2a>
 8005076:	1dbb      	adds	r3, r7, #6
 8005078:	881b      	ldrh	r3, [r3, #0]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d101      	bne.n	8005082 <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	e0c8      	b.n	8005214 <HAL_UART_Receive+0x1c0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	689a      	ldr	r2, [r3, #8]
 8005086:	2380      	movs	r3, #128	; 0x80
 8005088:	015b      	lsls	r3, r3, #5
 800508a:	429a      	cmp	r2, r3
 800508c:	d109      	bne.n	80050a2 <HAL_UART_Receive+0x4e>
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	691b      	ldr	r3, [r3, #16]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d105      	bne.n	80050a2 <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	2201      	movs	r2, #1
 800509a:	4013      	ands	r3, r2
 800509c:	d001      	beq.n	80050a2 <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	e0b8      	b.n	8005214 <HAL_UART_Receive+0x1c0>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	2290      	movs	r2, #144	; 0x90
 80050a6:	2100      	movs	r1, #0
 80050a8:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	228c      	movs	r2, #140	; 0x8c
 80050ae:	2122      	movs	r1, #34	; 0x22
 80050b0:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2200      	movs	r2, #0
 80050b6:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80050b8:	f7fc feaa 	bl	8001e10 <HAL_GetTick>
 80050bc:	0003      	movs	r3, r0
 80050be:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	1dba      	adds	r2, r7, #6
 80050c4:	215c      	movs	r1, #92	; 0x5c
 80050c6:	8812      	ldrh	r2, [r2, #0]
 80050c8:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	1dba      	adds	r2, r7, #6
 80050ce:	215e      	movs	r1, #94	; 0x5e
 80050d0:	8812      	ldrh	r2, [r2, #0]
 80050d2:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	689a      	ldr	r2, [r3, #8]
 80050d8:	2380      	movs	r3, #128	; 0x80
 80050da:	015b      	lsls	r3, r3, #5
 80050dc:	429a      	cmp	r2, r3
 80050de:	d10d      	bne.n	80050fc <HAL_UART_Receive+0xa8>
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	691b      	ldr	r3, [r3, #16]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d104      	bne.n	80050f2 <HAL_UART_Receive+0x9e>
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2260      	movs	r2, #96	; 0x60
 80050ec:	494b      	ldr	r1, [pc, #300]	; (800521c <HAL_UART_Receive+0x1c8>)
 80050ee:	5299      	strh	r1, [r3, r2]
 80050f0:	e02e      	b.n	8005150 <HAL_UART_Receive+0xfc>
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2260      	movs	r2, #96	; 0x60
 80050f6:	21ff      	movs	r1, #255	; 0xff
 80050f8:	5299      	strh	r1, [r3, r2]
 80050fa:	e029      	b.n	8005150 <HAL_UART_Receive+0xfc>
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	689b      	ldr	r3, [r3, #8]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d10d      	bne.n	8005120 <HAL_UART_Receive+0xcc>
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	691b      	ldr	r3, [r3, #16]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d104      	bne.n	8005116 <HAL_UART_Receive+0xc2>
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	2260      	movs	r2, #96	; 0x60
 8005110:	21ff      	movs	r1, #255	; 0xff
 8005112:	5299      	strh	r1, [r3, r2]
 8005114:	e01c      	b.n	8005150 <HAL_UART_Receive+0xfc>
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2260      	movs	r2, #96	; 0x60
 800511a:	217f      	movs	r1, #127	; 0x7f
 800511c:	5299      	strh	r1, [r3, r2]
 800511e:	e017      	b.n	8005150 <HAL_UART_Receive+0xfc>
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	689a      	ldr	r2, [r3, #8]
 8005124:	2380      	movs	r3, #128	; 0x80
 8005126:	055b      	lsls	r3, r3, #21
 8005128:	429a      	cmp	r2, r3
 800512a:	d10d      	bne.n	8005148 <HAL_UART_Receive+0xf4>
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	691b      	ldr	r3, [r3, #16]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d104      	bne.n	800513e <HAL_UART_Receive+0xea>
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2260      	movs	r2, #96	; 0x60
 8005138:	217f      	movs	r1, #127	; 0x7f
 800513a:	5299      	strh	r1, [r3, r2]
 800513c:	e008      	b.n	8005150 <HAL_UART_Receive+0xfc>
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	2260      	movs	r2, #96	; 0x60
 8005142:	213f      	movs	r1, #63	; 0x3f
 8005144:	5299      	strh	r1, [r3, r2]
 8005146:	e003      	b.n	8005150 <HAL_UART_Receive+0xfc>
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	2260      	movs	r2, #96	; 0x60
 800514c:	2100      	movs	r1, #0
 800514e:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8005150:	2312      	movs	r3, #18
 8005152:	18fb      	adds	r3, r7, r3
 8005154:	68fa      	ldr	r2, [r7, #12]
 8005156:	2160      	movs	r1, #96	; 0x60
 8005158:	5a52      	ldrh	r2, [r2, r1]
 800515a:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	689a      	ldr	r2, [r3, #8]
 8005160:	2380      	movs	r3, #128	; 0x80
 8005162:	015b      	lsls	r3, r3, #5
 8005164:	429a      	cmp	r2, r3
 8005166:	d108      	bne.n	800517a <HAL_UART_Receive+0x126>
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	691b      	ldr	r3, [r3, #16]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d104      	bne.n	800517a <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 8005170:	2300      	movs	r3, #0
 8005172:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	61bb      	str	r3, [r7, #24]
 8005178:	e003      	b.n	8005182 <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800517e:	2300      	movs	r3, #0
 8005180:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005182:	e03a      	b.n	80051fa <HAL_UART_Receive+0x1a6>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005184:	697a      	ldr	r2, [r7, #20]
 8005186:	68f8      	ldr	r0, [r7, #12]
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	9300      	str	r3, [sp, #0]
 800518c:	0013      	movs	r3, r2
 800518e:	2200      	movs	r2, #0
 8005190:	2120      	movs	r1, #32
 8005192:	f001 f8a1 	bl	80062d8 <UART_WaitOnFlagUntilTimeout>
 8005196:	1e03      	subs	r3, r0, #0
 8005198:	d005      	beq.n	80051a6 <HAL_UART_Receive+0x152>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	228c      	movs	r2, #140	; 0x8c
 800519e:	2120      	movs	r1, #32
 80051a0:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 80051a2:	2303      	movs	r3, #3
 80051a4:	e036      	b.n	8005214 <HAL_UART_Receive+0x1c0>
      }
      if (pdata8bits == NULL)
 80051a6:	69fb      	ldr	r3, [r7, #28]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d10e      	bne.n	80051ca <HAL_UART_Receive+0x176>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b2:	b29b      	uxth	r3, r3
 80051b4:	2212      	movs	r2, #18
 80051b6:	18ba      	adds	r2, r7, r2
 80051b8:	8812      	ldrh	r2, [r2, #0]
 80051ba:	4013      	ands	r3, r2
 80051bc:	b29a      	uxth	r2, r3
 80051be:	69bb      	ldr	r3, [r7, #24]
 80051c0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80051c2:	69bb      	ldr	r3, [r7, #24]
 80051c4:	3302      	adds	r3, #2
 80051c6:	61bb      	str	r3, [r7, #24]
 80051c8:	e00e      	b.n	80051e8 <HAL_UART_Receive+0x194>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d0:	b2db      	uxtb	r3, r3
 80051d2:	2212      	movs	r2, #18
 80051d4:	18ba      	adds	r2, r7, r2
 80051d6:	8812      	ldrh	r2, [r2, #0]
 80051d8:	b2d2      	uxtb	r2, r2
 80051da:	4013      	ands	r3, r2
 80051dc:	b2da      	uxtb	r2, r3
 80051de:	69fb      	ldr	r3, [r7, #28]
 80051e0:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80051e2:	69fb      	ldr	r3, [r7, #28]
 80051e4:	3301      	adds	r3, #1
 80051e6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	225e      	movs	r2, #94	; 0x5e
 80051ec:	5a9b      	ldrh	r3, [r3, r2]
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	3b01      	subs	r3, #1
 80051f2:	b299      	uxth	r1, r3
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	225e      	movs	r2, #94	; 0x5e
 80051f8:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	225e      	movs	r2, #94	; 0x5e
 80051fe:	5a9b      	ldrh	r3, [r3, r2]
 8005200:	b29b      	uxth	r3, r3
 8005202:	2b00      	cmp	r3, #0
 8005204:	d1be      	bne.n	8005184 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	228c      	movs	r2, #140	; 0x8c
 800520a:	2120      	movs	r1, #32
 800520c:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800520e:	2300      	movs	r3, #0
 8005210:	e000      	b.n	8005214 <HAL_UART_Receive+0x1c0>
  }
  else
  {
    return HAL_BUSY;
 8005212:	2302      	movs	r3, #2
  }
}
 8005214:	0018      	movs	r0, r3
 8005216:	46bd      	mov	sp, r7
 8005218:	b008      	add	sp, #32
 800521a:	bd80      	pop	{r7, pc}
 800521c:	000001ff 	.word	0x000001ff

08005220 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b088      	sub	sp, #32
 8005224:	af00      	add	r7, sp, #0
 8005226:	60f8      	str	r0, [r7, #12]
 8005228:	60b9      	str	r1, [r7, #8]
 800522a:	1dbb      	adds	r3, r7, #6
 800522c:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	228c      	movs	r2, #140	; 0x8c
 8005232:	589b      	ldr	r3, [r3, r2]
 8005234:	2b20      	cmp	r3, #32
 8005236:	d14f      	bne.n	80052d8 <HAL_UART_Receive_IT+0xb8>
  {
    if ((pData == NULL) || (Size == 0U))
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d003      	beq.n	8005246 <HAL_UART_Receive_IT+0x26>
 800523e:	1dbb      	adds	r3, r7, #6
 8005240:	881b      	ldrh	r3, [r3, #0]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d101      	bne.n	800524a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005246:	2301      	movs	r3, #1
 8005248:	e047      	b.n	80052da <HAL_UART_Receive_IT+0xba>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	689a      	ldr	r2, [r3, #8]
 800524e:	2380      	movs	r3, #128	; 0x80
 8005250:	015b      	lsls	r3, r3, #5
 8005252:	429a      	cmp	r2, r3
 8005254:	d109      	bne.n	800526a <HAL_UART_Receive_IT+0x4a>
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	691b      	ldr	r3, [r3, #16]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d105      	bne.n	800526a <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	2201      	movs	r2, #1
 8005262:	4013      	ands	r3, r2
 8005264:	d001      	beq.n	800526a <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8005266:	2301      	movs	r3, #1
 8005268:	e037      	b.n	80052da <HAL_UART_Receive_IT+0xba>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	2200      	movs	r2, #0
 800526e:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a1b      	ldr	r2, [pc, #108]	; (80052e4 <HAL_UART_Receive_IT+0xc4>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d025      	beq.n	80052c6 <HAL_UART_Receive_IT+0xa6>
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a1a      	ldr	r2, [pc, #104]	; (80052e8 <HAL_UART_Receive_IT+0xc8>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d020      	beq.n	80052c6 <HAL_UART_Receive_IT+0xa6>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	685a      	ldr	r2, [r3, #4]
 800528a:	2380      	movs	r3, #128	; 0x80
 800528c:	041b      	lsls	r3, r3, #16
 800528e:	4013      	ands	r3, r2
 8005290:	d019      	beq.n	80052c6 <HAL_UART_Receive_IT+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005292:	f3ef 8310 	mrs	r3, PRIMASK
 8005296:	613b      	str	r3, [r7, #16]
  return(result);
 8005298:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800529a:	61fb      	str	r3, [r7, #28]
 800529c:	2301      	movs	r3, #1
 800529e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	f383 8810 	msr	PRIMASK, r3
}
 80052a6:	46c0      	nop			; (mov r8, r8)
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	681a      	ldr	r2, [r3, #0]
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	2180      	movs	r1, #128	; 0x80
 80052b4:	04c9      	lsls	r1, r1, #19
 80052b6:	430a      	orrs	r2, r1
 80052b8:	601a      	str	r2, [r3, #0]
 80052ba:	69fb      	ldr	r3, [r7, #28]
 80052bc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052be:	69bb      	ldr	r3, [r7, #24]
 80052c0:	f383 8810 	msr	PRIMASK, r3
}
 80052c4:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80052c6:	1dbb      	adds	r3, r7, #6
 80052c8:	881a      	ldrh	r2, [r3, #0]
 80052ca:	68b9      	ldr	r1, [r7, #8]
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	0018      	movs	r0, r3
 80052d0:	f001 f872 	bl	80063b8 <UART_Start_Receive_IT>
 80052d4:	0003      	movs	r3, r0
 80052d6:	e000      	b.n	80052da <HAL_UART_Receive_IT+0xba>
  }
  else
  {
    return HAL_BUSY;
 80052d8:	2302      	movs	r3, #2
  }
}
 80052da:	0018      	movs	r0, r3
 80052dc:	46bd      	mov	sp, r7
 80052de:	b008      	add	sp, #32
 80052e0:	bd80      	pop	{r7, pc}
 80052e2:	46c0      	nop			; (mov r8, r8)
 80052e4:	40008000 	.word	0x40008000
 80052e8:	40008400 	.word	0x40008400

080052ec <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80052ec:	b5b0      	push	{r4, r5, r7, lr}
 80052ee:	b0aa      	sub	sp, #168	; 0xa8
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	69db      	ldr	r3, [r3, #28]
 80052fa:	22a4      	movs	r2, #164	; 0xa4
 80052fc:	18b9      	adds	r1, r7, r2
 80052fe:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	20a0      	movs	r0, #160	; 0xa0
 8005308:	1839      	adds	r1, r7, r0
 800530a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	689b      	ldr	r3, [r3, #8]
 8005312:	249c      	movs	r4, #156	; 0x9c
 8005314:	1939      	adds	r1, r7, r4
 8005316:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005318:	0011      	movs	r1, r2
 800531a:	18bb      	adds	r3, r7, r2
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4aa2      	ldr	r2, [pc, #648]	; (80055a8 <HAL_UART_IRQHandler+0x2bc>)
 8005320:	4013      	ands	r3, r2
 8005322:	2298      	movs	r2, #152	; 0x98
 8005324:	18bd      	adds	r5, r7, r2
 8005326:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8005328:	18bb      	adds	r3, r7, r2
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d11a      	bne.n	8005366 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005330:	187b      	adds	r3, r7, r1
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	2220      	movs	r2, #32
 8005336:	4013      	ands	r3, r2
 8005338:	d015      	beq.n	8005366 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800533a:	183b      	adds	r3, r7, r0
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	2220      	movs	r2, #32
 8005340:	4013      	ands	r3, r2
 8005342:	d105      	bne.n	8005350 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005344:	193b      	adds	r3, r7, r4
 8005346:	681a      	ldr	r2, [r3, #0]
 8005348:	2380      	movs	r3, #128	; 0x80
 800534a:	055b      	lsls	r3, r3, #21
 800534c:	4013      	ands	r3, r2
 800534e:	d00a      	beq.n	8005366 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005354:	2b00      	cmp	r3, #0
 8005356:	d100      	bne.n	800535a <HAL_UART_IRQHandler+0x6e>
 8005358:	e2dc      	b.n	8005914 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800535e:	687a      	ldr	r2, [r7, #4]
 8005360:	0010      	movs	r0, r2
 8005362:	4798      	blx	r3
      }
      return;
 8005364:	e2d6      	b.n	8005914 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005366:	2398      	movs	r3, #152	; 0x98
 8005368:	18fb      	adds	r3, r7, r3
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d100      	bne.n	8005372 <HAL_UART_IRQHandler+0x86>
 8005370:	e122      	b.n	80055b8 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005372:	239c      	movs	r3, #156	; 0x9c
 8005374:	18fb      	adds	r3, r7, r3
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a8c      	ldr	r2, [pc, #560]	; (80055ac <HAL_UART_IRQHandler+0x2c0>)
 800537a:	4013      	ands	r3, r2
 800537c:	d106      	bne.n	800538c <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800537e:	23a0      	movs	r3, #160	; 0xa0
 8005380:	18fb      	adds	r3, r7, r3
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a8a      	ldr	r2, [pc, #552]	; (80055b0 <HAL_UART_IRQHandler+0x2c4>)
 8005386:	4013      	ands	r3, r2
 8005388:	d100      	bne.n	800538c <HAL_UART_IRQHandler+0xa0>
 800538a:	e115      	b.n	80055b8 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800538c:	23a4      	movs	r3, #164	; 0xa4
 800538e:	18fb      	adds	r3, r7, r3
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	2201      	movs	r2, #1
 8005394:	4013      	ands	r3, r2
 8005396:	d012      	beq.n	80053be <HAL_UART_IRQHandler+0xd2>
 8005398:	23a0      	movs	r3, #160	; 0xa0
 800539a:	18fb      	adds	r3, r7, r3
 800539c:	681a      	ldr	r2, [r3, #0]
 800539e:	2380      	movs	r3, #128	; 0x80
 80053a0:	005b      	lsls	r3, r3, #1
 80053a2:	4013      	ands	r3, r2
 80053a4:	d00b      	beq.n	80053be <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	2201      	movs	r2, #1
 80053ac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2290      	movs	r2, #144	; 0x90
 80053b2:	589b      	ldr	r3, [r3, r2]
 80053b4:	2201      	movs	r2, #1
 80053b6:	431a      	orrs	r2, r3
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2190      	movs	r1, #144	; 0x90
 80053bc:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80053be:	23a4      	movs	r3, #164	; 0xa4
 80053c0:	18fb      	adds	r3, r7, r3
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	2202      	movs	r2, #2
 80053c6:	4013      	ands	r3, r2
 80053c8:	d011      	beq.n	80053ee <HAL_UART_IRQHandler+0x102>
 80053ca:	239c      	movs	r3, #156	; 0x9c
 80053cc:	18fb      	adds	r3, r7, r3
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	2201      	movs	r2, #1
 80053d2:	4013      	ands	r3, r2
 80053d4:	d00b      	beq.n	80053ee <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	2202      	movs	r2, #2
 80053dc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2290      	movs	r2, #144	; 0x90
 80053e2:	589b      	ldr	r3, [r3, r2]
 80053e4:	2204      	movs	r2, #4
 80053e6:	431a      	orrs	r2, r3
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2190      	movs	r1, #144	; 0x90
 80053ec:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80053ee:	23a4      	movs	r3, #164	; 0xa4
 80053f0:	18fb      	adds	r3, r7, r3
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	2204      	movs	r2, #4
 80053f6:	4013      	ands	r3, r2
 80053f8:	d011      	beq.n	800541e <HAL_UART_IRQHandler+0x132>
 80053fa:	239c      	movs	r3, #156	; 0x9c
 80053fc:	18fb      	adds	r3, r7, r3
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	2201      	movs	r2, #1
 8005402:	4013      	ands	r3, r2
 8005404:	d00b      	beq.n	800541e <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	2204      	movs	r2, #4
 800540c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2290      	movs	r2, #144	; 0x90
 8005412:	589b      	ldr	r3, [r3, r2]
 8005414:	2202      	movs	r2, #2
 8005416:	431a      	orrs	r2, r3
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2190      	movs	r1, #144	; 0x90
 800541c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800541e:	23a4      	movs	r3, #164	; 0xa4
 8005420:	18fb      	adds	r3, r7, r3
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	2208      	movs	r2, #8
 8005426:	4013      	ands	r3, r2
 8005428:	d017      	beq.n	800545a <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800542a:	23a0      	movs	r3, #160	; 0xa0
 800542c:	18fb      	adds	r3, r7, r3
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	2220      	movs	r2, #32
 8005432:	4013      	ands	r3, r2
 8005434:	d105      	bne.n	8005442 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005436:	239c      	movs	r3, #156	; 0x9c
 8005438:	18fb      	adds	r3, r7, r3
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a5b      	ldr	r2, [pc, #364]	; (80055ac <HAL_UART_IRQHandler+0x2c0>)
 800543e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005440:	d00b      	beq.n	800545a <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	2208      	movs	r2, #8
 8005448:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2290      	movs	r2, #144	; 0x90
 800544e:	589b      	ldr	r3, [r3, r2]
 8005450:	2208      	movs	r2, #8
 8005452:	431a      	orrs	r2, r3
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2190      	movs	r1, #144	; 0x90
 8005458:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800545a:	23a4      	movs	r3, #164	; 0xa4
 800545c:	18fb      	adds	r3, r7, r3
 800545e:	681a      	ldr	r2, [r3, #0]
 8005460:	2380      	movs	r3, #128	; 0x80
 8005462:	011b      	lsls	r3, r3, #4
 8005464:	4013      	ands	r3, r2
 8005466:	d013      	beq.n	8005490 <HAL_UART_IRQHandler+0x1a4>
 8005468:	23a0      	movs	r3, #160	; 0xa0
 800546a:	18fb      	adds	r3, r7, r3
 800546c:	681a      	ldr	r2, [r3, #0]
 800546e:	2380      	movs	r3, #128	; 0x80
 8005470:	04db      	lsls	r3, r3, #19
 8005472:	4013      	ands	r3, r2
 8005474:	d00c      	beq.n	8005490 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	2280      	movs	r2, #128	; 0x80
 800547c:	0112      	lsls	r2, r2, #4
 800547e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2290      	movs	r2, #144	; 0x90
 8005484:	589b      	ldr	r3, [r3, r2]
 8005486:	2220      	movs	r2, #32
 8005488:	431a      	orrs	r2, r3
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2190      	movs	r1, #144	; 0x90
 800548e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2290      	movs	r2, #144	; 0x90
 8005494:	589b      	ldr	r3, [r3, r2]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d100      	bne.n	800549c <HAL_UART_IRQHandler+0x1b0>
 800549a:	e23d      	b.n	8005918 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800549c:	23a4      	movs	r3, #164	; 0xa4
 800549e:	18fb      	adds	r3, r7, r3
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	2220      	movs	r2, #32
 80054a4:	4013      	ands	r3, r2
 80054a6:	d015      	beq.n	80054d4 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80054a8:	23a0      	movs	r3, #160	; 0xa0
 80054aa:	18fb      	adds	r3, r7, r3
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	2220      	movs	r2, #32
 80054b0:	4013      	ands	r3, r2
 80054b2:	d106      	bne.n	80054c2 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80054b4:	239c      	movs	r3, #156	; 0x9c
 80054b6:	18fb      	adds	r3, r7, r3
 80054b8:	681a      	ldr	r2, [r3, #0]
 80054ba:	2380      	movs	r3, #128	; 0x80
 80054bc:	055b      	lsls	r3, r3, #21
 80054be:	4013      	ands	r3, r2
 80054c0:	d008      	beq.n	80054d4 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d004      	beq.n	80054d4 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054ce:	687a      	ldr	r2, [r7, #4]
 80054d0:	0010      	movs	r0, r2
 80054d2:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2290      	movs	r2, #144	; 0x90
 80054d8:	589b      	ldr	r3, [r3, r2]
 80054da:	2194      	movs	r1, #148	; 0x94
 80054dc:	187a      	adds	r2, r7, r1
 80054de:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	689b      	ldr	r3, [r3, #8]
 80054e6:	2240      	movs	r2, #64	; 0x40
 80054e8:	4013      	ands	r3, r2
 80054ea:	2b40      	cmp	r3, #64	; 0x40
 80054ec:	d004      	beq.n	80054f8 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80054ee:	187b      	adds	r3, r7, r1
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	2228      	movs	r2, #40	; 0x28
 80054f4:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80054f6:	d04c      	beq.n	8005592 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	0018      	movs	r0, r3
 80054fc:	f001 f880 	bl	8006600 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	689b      	ldr	r3, [r3, #8]
 8005506:	2240      	movs	r2, #64	; 0x40
 8005508:	4013      	ands	r3, r2
 800550a:	2b40      	cmp	r3, #64	; 0x40
 800550c:	d13c      	bne.n	8005588 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800550e:	f3ef 8310 	mrs	r3, PRIMASK
 8005512:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8005514:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005516:	2090      	movs	r0, #144	; 0x90
 8005518:	183a      	adds	r2, r7, r0
 800551a:	6013      	str	r3, [r2, #0]
 800551c:	2301      	movs	r3, #1
 800551e:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005520:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005522:	f383 8810 	msr	PRIMASK, r3
}
 8005526:	46c0      	nop			; (mov r8, r8)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	689a      	ldr	r2, [r3, #8]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	2140      	movs	r1, #64	; 0x40
 8005534:	438a      	bics	r2, r1
 8005536:	609a      	str	r2, [r3, #8]
 8005538:	183b      	adds	r3, r7, r0
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800553e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005540:	f383 8810 	msr	PRIMASK, r3
}
 8005544:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2280      	movs	r2, #128	; 0x80
 800554a:	589b      	ldr	r3, [r3, r2]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d016      	beq.n	800557e <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2280      	movs	r2, #128	; 0x80
 8005554:	589b      	ldr	r3, [r3, r2]
 8005556:	4a17      	ldr	r2, [pc, #92]	; (80055b4 <HAL_UART_IRQHandler+0x2c8>)
 8005558:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2280      	movs	r2, #128	; 0x80
 800555e:	589b      	ldr	r3, [r3, r2]
 8005560:	0018      	movs	r0, r3
 8005562:	f7fc fded 	bl	8002140 <HAL_DMA_Abort_IT>
 8005566:	1e03      	subs	r3, r0, #0
 8005568:	d01c      	beq.n	80055a4 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2280      	movs	r2, #128	; 0x80
 800556e:	589b      	ldr	r3, [r3, r2]
 8005570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005572:	687a      	ldr	r2, [r7, #4]
 8005574:	2180      	movs	r1, #128	; 0x80
 8005576:	5852      	ldr	r2, [r2, r1]
 8005578:	0010      	movs	r0, r2
 800557a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800557c:	e012      	b.n	80055a4 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	0018      	movs	r0, r3
 8005582:	f000 f9e1 	bl	8005948 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005586:	e00d      	b.n	80055a4 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	0018      	movs	r0, r3
 800558c:	f000 f9dc 	bl	8005948 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005590:	e008      	b.n	80055a4 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	0018      	movs	r0, r3
 8005596:	f000 f9d7 	bl	8005948 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2290      	movs	r2, #144	; 0x90
 800559e:	2100      	movs	r1, #0
 80055a0:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80055a2:	e1b9      	b.n	8005918 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055a4:	46c0      	nop			; (mov r8, r8)
    return;
 80055a6:	e1b7      	b.n	8005918 <HAL_UART_IRQHandler+0x62c>
 80055a8:	0000080f 	.word	0x0000080f
 80055ac:	10000001 	.word	0x10000001
 80055b0:	04000120 	.word	0x04000120
 80055b4:	080066cd 	.word	0x080066cd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055bc:	2b01      	cmp	r3, #1
 80055be:	d000      	beq.n	80055c2 <HAL_UART_IRQHandler+0x2d6>
 80055c0:	e13e      	b.n	8005840 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80055c2:	23a4      	movs	r3, #164	; 0xa4
 80055c4:	18fb      	adds	r3, r7, r3
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	2210      	movs	r2, #16
 80055ca:	4013      	ands	r3, r2
 80055cc:	d100      	bne.n	80055d0 <HAL_UART_IRQHandler+0x2e4>
 80055ce:	e137      	b.n	8005840 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80055d0:	23a0      	movs	r3, #160	; 0xa0
 80055d2:	18fb      	adds	r3, r7, r3
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	2210      	movs	r2, #16
 80055d8:	4013      	ands	r3, r2
 80055da:	d100      	bne.n	80055de <HAL_UART_IRQHandler+0x2f2>
 80055dc:	e130      	b.n	8005840 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	2210      	movs	r2, #16
 80055e4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	689b      	ldr	r3, [r3, #8]
 80055ec:	2240      	movs	r2, #64	; 0x40
 80055ee:	4013      	ands	r3, r2
 80055f0:	2b40      	cmp	r3, #64	; 0x40
 80055f2:	d000      	beq.n	80055f6 <HAL_UART_IRQHandler+0x30a>
 80055f4:	e0a4      	b.n	8005740 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2280      	movs	r2, #128	; 0x80
 80055fa:	589b      	ldr	r3, [r3, r2]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	685a      	ldr	r2, [r3, #4]
 8005600:	217e      	movs	r1, #126	; 0x7e
 8005602:	187b      	adds	r3, r7, r1
 8005604:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8005606:	187b      	adds	r3, r7, r1
 8005608:	881b      	ldrh	r3, [r3, #0]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d100      	bne.n	8005610 <HAL_UART_IRQHandler+0x324>
 800560e:	e185      	b.n	800591c <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	225c      	movs	r2, #92	; 0x5c
 8005614:	5a9b      	ldrh	r3, [r3, r2]
 8005616:	187a      	adds	r2, r7, r1
 8005618:	8812      	ldrh	r2, [r2, #0]
 800561a:	429a      	cmp	r2, r3
 800561c:	d300      	bcc.n	8005620 <HAL_UART_IRQHandler+0x334>
 800561e:	e17d      	b.n	800591c <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	187a      	adds	r2, r7, r1
 8005624:	215e      	movs	r1, #94	; 0x5e
 8005626:	8812      	ldrh	r2, [r2, #0]
 8005628:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2280      	movs	r2, #128	; 0x80
 800562e:	589b      	ldr	r3, [r3, r2]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	2220      	movs	r2, #32
 8005636:	4013      	ands	r3, r2
 8005638:	d170      	bne.n	800571c <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800563a:	f3ef 8310 	mrs	r3, PRIMASK
 800563e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8005640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005642:	67bb      	str	r3, [r7, #120]	; 0x78
 8005644:	2301      	movs	r3, #1
 8005646:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005648:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800564a:	f383 8810 	msr	PRIMASK, r3
}
 800564e:	46c0      	nop			; (mov r8, r8)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	681a      	ldr	r2, [r3, #0]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	49b4      	ldr	r1, [pc, #720]	; (800592c <HAL_UART_IRQHandler+0x640>)
 800565c:	400a      	ands	r2, r1
 800565e:	601a      	str	r2, [r3, #0]
 8005660:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005662:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005666:	f383 8810 	msr	PRIMASK, r3
}
 800566a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800566c:	f3ef 8310 	mrs	r3, PRIMASK
 8005670:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8005672:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005674:	677b      	str	r3, [r7, #116]	; 0x74
 8005676:	2301      	movs	r3, #1
 8005678:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800567a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800567c:	f383 8810 	msr	PRIMASK, r3
}
 8005680:	46c0      	nop			; (mov r8, r8)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	689a      	ldr	r2, [r3, #8]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	2101      	movs	r1, #1
 800568e:	438a      	bics	r2, r1
 8005690:	609a      	str	r2, [r3, #8]
 8005692:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005694:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005696:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005698:	f383 8810 	msr	PRIMASK, r3
}
 800569c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800569e:	f3ef 8310 	mrs	r3, PRIMASK
 80056a2:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80056a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80056a6:	673b      	str	r3, [r7, #112]	; 0x70
 80056a8:	2301      	movs	r3, #1
 80056aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056ae:	f383 8810 	msr	PRIMASK, r3
}
 80056b2:	46c0      	nop			; (mov r8, r8)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	689a      	ldr	r2, [r3, #8]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	2140      	movs	r1, #64	; 0x40
 80056c0:	438a      	bics	r2, r1
 80056c2:	609a      	str	r2, [r3, #8]
 80056c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80056c6:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80056ca:	f383 8810 	msr	PRIMASK, r3
}
 80056ce:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	228c      	movs	r2, #140	; 0x8c
 80056d4:	2120      	movs	r1, #32
 80056d6:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2200      	movs	r2, #0
 80056dc:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056de:	f3ef 8310 	mrs	r3, PRIMASK
 80056e2:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80056e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056e6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80056e8:	2301      	movs	r3, #1
 80056ea:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80056ee:	f383 8810 	msr	PRIMASK, r3
}
 80056f2:	46c0      	nop			; (mov r8, r8)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	681a      	ldr	r2, [r3, #0]
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	2110      	movs	r1, #16
 8005700:	438a      	bics	r2, r1
 8005702:	601a      	str	r2, [r3, #0]
 8005704:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005706:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005708:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800570a:	f383 8810 	msr	PRIMASK, r3
}
 800570e:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2280      	movs	r2, #128	; 0x80
 8005714:	589b      	ldr	r3, [r3, r2]
 8005716:	0018      	movs	r0, r3
 8005718:	f7fc fcb2 	bl	8002080 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2202      	movs	r2, #2
 8005720:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	225c      	movs	r2, #92	; 0x5c
 8005726:	5a9a      	ldrh	r2, [r3, r2]
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	215e      	movs	r1, #94	; 0x5e
 800572c:	5a5b      	ldrh	r3, [r3, r1]
 800572e:	b29b      	uxth	r3, r3
 8005730:	1ad3      	subs	r3, r2, r3
 8005732:	b29a      	uxth	r2, r3
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	0011      	movs	r1, r2
 8005738:	0018      	movs	r0, r3
 800573a:	f000 f90d 	bl	8005958 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800573e:	e0ed      	b.n	800591c <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	225c      	movs	r2, #92	; 0x5c
 8005744:	5a99      	ldrh	r1, [r3, r2]
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	225e      	movs	r2, #94	; 0x5e
 800574a:	5a9b      	ldrh	r3, [r3, r2]
 800574c:	b29a      	uxth	r2, r3
 800574e:	208e      	movs	r0, #142	; 0x8e
 8005750:	183b      	adds	r3, r7, r0
 8005752:	1a8a      	subs	r2, r1, r2
 8005754:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	225e      	movs	r2, #94	; 0x5e
 800575a:	5a9b      	ldrh	r3, [r3, r2]
 800575c:	b29b      	uxth	r3, r3
 800575e:	2b00      	cmp	r3, #0
 8005760:	d100      	bne.n	8005764 <HAL_UART_IRQHandler+0x478>
 8005762:	e0dd      	b.n	8005920 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8005764:	183b      	adds	r3, r7, r0
 8005766:	881b      	ldrh	r3, [r3, #0]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d100      	bne.n	800576e <HAL_UART_IRQHandler+0x482>
 800576c:	e0d8      	b.n	8005920 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800576e:	f3ef 8310 	mrs	r3, PRIMASK
 8005772:	60fb      	str	r3, [r7, #12]
  return(result);
 8005774:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005776:	2488      	movs	r4, #136	; 0x88
 8005778:	193a      	adds	r2, r7, r4
 800577a:	6013      	str	r3, [r2, #0]
 800577c:	2301      	movs	r3, #1
 800577e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005780:	693b      	ldr	r3, [r7, #16]
 8005782:	f383 8810 	msr	PRIMASK, r3
}
 8005786:	46c0      	nop			; (mov r8, r8)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	681a      	ldr	r2, [r3, #0]
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4967      	ldr	r1, [pc, #412]	; (8005930 <HAL_UART_IRQHandler+0x644>)
 8005794:	400a      	ands	r2, r1
 8005796:	601a      	str	r2, [r3, #0]
 8005798:	193b      	adds	r3, r7, r4
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	f383 8810 	msr	PRIMASK, r3
}
 80057a4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057a6:	f3ef 8310 	mrs	r3, PRIMASK
 80057aa:	61bb      	str	r3, [r7, #24]
  return(result);
 80057ac:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80057ae:	2484      	movs	r4, #132	; 0x84
 80057b0:	193a      	adds	r2, r7, r4
 80057b2:	6013      	str	r3, [r2, #0]
 80057b4:	2301      	movs	r3, #1
 80057b6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057b8:	69fb      	ldr	r3, [r7, #28]
 80057ba:	f383 8810 	msr	PRIMASK, r3
}
 80057be:	46c0      	nop			; (mov r8, r8)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	689a      	ldr	r2, [r3, #8]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	495a      	ldr	r1, [pc, #360]	; (8005934 <HAL_UART_IRQHandler+0x648>)
 80057cc:	400a      	ands	r2, r1
 80057ce:	609a      	str	r2, [r3, #8]
 80057d0:	193b      	adds	r3, r7, r4
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057d6:	6a3b      	ldr	r3, [r7, #32]
 80057d8:	f383 8810 	msr	PRIMASK, r3
}
 80057dc:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	228c      	movs	r2, #140	; 0x8c
 80057e2:	2120      	movs	r1, #32
 80057e4:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2200      	movs	r2, #0
 80057ea:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2200      	movs	r2, #0
 80057f0:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057f2:	f3ef 8310 	mrs	r3, PRIMASK
 80057f6:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80057f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057fa:	2480      	movs	r4, #128	; 0x80
 80057fc:	193a      	adds	r2, r7, r4
 80057fe:	6013      	str	r3, [r2, #0]
 8005800:	2301      	movs	r3, #1
 8005802:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005806:	f383 8810 	msr	PRIMASK, r3
}
 800580a:	46c0      	nop			; (mov r8, r8)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	681a      	ldr	r2, [r3, #0]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	2110      	movs	r1, #16
 8005818:	438a      	bics	r2, r1
 800581a:	601a      	str	r2, [r3, #0]
 800581c:	193b      	adds	r3, r7, r4
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005824:	f383 8810 	msr	PRIMASK, r3
}
 8005828:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2202      	movs	r2, #2
 800582e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005830:	183b      	adds	r3, r7, r0
 8005832:	881a      	ldrh	r2, [r3, #0]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	0011      	movs	r1, r2
 8005838:	0018      	movs	r0, r3
 800583a:	f000 f88d 	bl	8005958 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800583e:	e06f      	b.n	8005920 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005840:	23a4      	movs	r3, #164	; 0xa4
 8005842:	18fb      	adds	r3, r7, r3
 8005844:	681a      	ldr	r2, [r3, #0]
 8005846:	2380      	movs	r3, #128	; 0x80
 8005848:	035b      	lsls	r3, r3, #13
 800584a:	4013      	ands	r3, r2
 800584c:	d010      	beq.n	8005870 <HAL_UART_IRQHandler+0x584>
 800584e:	239c      	movs	r3, #156	; 0x9c
 8005850:	18fb      	adds	r3, r7, r3
 8005852:	681a      	ldr	r2, [r3, #0]
 8005854:	2380      	movs	r3, #128	; 0x80
 8005856:	03db      	lsls	r3, r3, #15
 8005858:	4013      	ands	r3, r2
 800585a:	d009      	beq.n	8005870 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	2280      	movs	r2, #128	; 0x80
 8005862:	0352      	lsls	r2, r2, #13
 8005864:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	0018      	movs	r0, r3
 800586a:	f001 fc9f 	bl	80071ac <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800586e:	e05a      	b.n	8005926 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005870:	23a4      	movs	r3, #164	; 0xa4
 8005872:	18fb      	adds	r3, r7, r3
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	2280      	movs	r2, #128	; 0x80
 8005878:	4013      	ands	r3, r2
 800587a:	d016      	beq.n	80058aa <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800587c:	23a0      	movs	r3, #160	; 0xa0
 800587e:	18fb      	adds	r3, r7, r3
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	2280      	movs	r2, #128	; 0x80
 8005884:	4013      	ands	r3, r2
 8005886:	d106      	bne.n	8005896 <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005888:	239c      	movs	r3, #156	; 0x9c
 800588a:	18fb      	adds	r3, r7, r3
 800588c:	681a      	ldr	r2, [r3, #0]
 800588e:	2380      	movs	r3, #128	; 0x80
 8005890:	041b      	lsls	r3, r3, #16
 8005892:	4013      	ands	r3, r2
 8005894:	d009      	beq.n	80058aa <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800589a:	2b00      	cmp	r3, #0
 800589c:	d042      	beq.n	8005924 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80058a2:	687a      	ldr	r2, [r7, #4]
 80058a4:	0010      	movs	r0, r2
 80058a6:	4798      	blx	r3
    }
    return;
 80058a8:	e03c      	b.n	8005924 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80058aa:	23a4      	movs	r3, #164	; 0xa4
 80058ac:	18fb      	adds	r3, r7, r3
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	2240      	movs	r2, #64	; 0x40
 80058b2:	4013      	ands	r3, r2
 80058b4:	d00a      	beq.n	80058cc <HAL_UART_IRQHandler+0x5e0>
 80058b6:	23a0      	movs	r3, #160	; 0xa0
 80058b8:	18fb      	adds	r3, r7, r3
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	2240      	movs	r2, #64	; 0x40
 80058be:	4013      	ands	r3, r2
 80058c0:	d004      	beq.n	80058cc <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	0018      	movs	r0, r3
 80058c6:	f000 ff18 	bl	80066fa <UART_EndTransmit_IT>
    return;
 80058ca:	e02c      	b.n	8005926 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80058cc:	23a4      	movs	r3, #164	; 0xa4
 80058ce:	18fb      	adds	r3, r7, r3
 80058d0:	681a      	ldr	r2, [r3, #0]
 80058d2:	2380      	movs	r3, #128	; 0x80
 80058d4:	041b      	lsls	r3, r3, #16
 80058d6:	4013      	ands	r3, r2
 80058d8:	d00b      	beq.n	80058f2 <HAL_UART_IRQHandler+0x606>
 80058da:	23a0      	movs	r3, #160	; 0xa0
 80058dc:	18fb      	adds	r3, r7, r3
 80058de:	681a      	ldr	r2, [r3, #0]
 80058e0:	2380      	movs	r3, #128	; 0x80
 80058e2:	05db      	lsls	r3, r3, #23
 80058e4:	4013      	ands	r3, r2
 80058e6:	d004      	beq.n	80058f2 <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	0018      	movs	r0, r3
 80058ec:	f001 fc6e 	bl	80071cc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80058f0:	e019      	b.n	8005926 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80058f2:	23a4      	movs	r3, #164	; 0xa4
 80058f4:	18fb      	adds	r3, r7, r3
 80058f6:	681a      	ldr	r2, [r3, #0]
 80058f8:	2380      	movs	r3, #128	; 0x80
 80058fa:	045b      	lsls	r3, r3, #17
 80058fc:	4013      	ands	r3, r2
 80058fe:	d012      	beq.n	8005926 <HAL_UART_IRQHandler+0x63a>
 8005900:	23a0      	movs	r3, #160	; 0xa0
 8005902:	18fb      	adds	r3, r7, r3
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	2b00      	cmp	r3, #0
 8005908:	da0d      	bge.n	8005926 <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	0018      	movs	r0, r3
 800590e:	f001 fc55 	bl	80071bc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005912:	e008      	b.n	8005926 <HAL_UART_IRQHandler+0x63a>
      return;
 8005914:	46c0      	nop			; (mov r8, r8)
 8005916:	e006      	b.n	8005926 <HAL_UART_IRQHandler+0x63a>
    return;
 8005918:	46c0      	nop			; (mov r8, r8)
 800591a:	e004      	b.n	8005926 <HAL_UART_IRQHandler+0x63a>
      return;
 800591c:	46c0      	nop			; (mov r8, r8)
 800591e:	e002      	b.n	8005926 <HAL_UART_IRQHandler+0x63a>
      return;
 8005920:	46c0      	nop			; (mov r8, r8)
 8005922:	e000      	b.n	8005926 <HAL_UART_IRQHandler+0x63a>
    return;
 8005924:	46c0      	nop			; (mov r8, r8)
  }
}
 8005926:	46bd      	mov	sp, r7
 8005928:	b02a      	add	sp, #168	; 0xa8
 800592a:	bdb0      	pop	{r4, r5, r7, pc}
 800592c:	fffffeff 	.word	0xfffffeff
 8005930:	fffffedf 	.word	0xfffffedf
 8005934:	effffffe 	.word	0xeffffffe

08005938 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b082      	sub	sp, #8
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005940:	46c0      	nop			; (mov r8, r8)
 8005942:	46bd      	mov	sp, r7
 8005944:	b002      	add	sp, #8
 8005946:	bd80      	pop	{r7, pc}

08005948 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b082      	sub	sp, #8
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005950:	46c0      	nop			; (mov r8, r8)
 8005952:	46bd      	mov	sp, r7
 8005954:	b002      	add	sp, #8
 8005956:	bd80      	pop	{r7, pc}

08005958 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b082      	sub	sp, #8
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
 8005960:	000a      	movs	r2, r1
 8005962:	1cbb      	adds	r3, r7, #2
 8005964:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005966:	46c0      	nop			; (mov r8, r8)
 8005968:	46bd      	mov	sp, r7
 800596a:	b002      	add	sp, #8
 800596c:	bd80      	pop	{r7, pc}
	...

08005970 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005970:	b5b0      	push	{r4, r5, r7, lr}
 8005972:	b090      	sub	sp, #64	; 0x40
 8005974:	af00      	add	r7, sp, #0
 8005976:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005978:	231a      	movs	r3, #26
 800597a:	2220      	movs	r2, #32
 800597c:	189b      	adds	r3, r3, r2
 800597e:	19db      	adds	r3, r3, r7
 8005980:	2200      	movs	r2, #0
 8005982:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005986:	689a      	ldr	r2, [r3, #8]
 8005988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800598a:	691b      	ldr	r3, [r3, #16]
 800598c:	431a      	orrs	r2, r3
 800598e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005990:	695b      	ldr	r3, [r3, #20]
 8005992:	431a      	orrs	r2, r3
 8005994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005996:	69db      	ldr	r3, [r3, #28]
 8005998:	4313      	orrs	r3, r2
 800599a:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800599c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4ac1      	ldr	r2, [pc, #772]	; (8005ca8 <UART_SetConfig+0x338>)
 80059a4:	4013      	ands	r3, r2
 80059a6:	0019      	movs	r1, r3
 80059a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059aa:	681a      	ldr	r2, [r3, #0]
 80059ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059ae:	430b      	orrs	r3, r1
 80059b0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80059b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	4abc      	ldr	r2, [pc, #752]	; (8005cac <UART_SetConfig+0x33c>)
 80059ba:	4013      	ands	r3, r2
 80059bc:	0018      	movs	r0, r3
 80059be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c0:	68d9      	ldr	r1, [r3, #12]
 80059c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c4:	681a      	ldr	r2, [r3, #0]
 80059c6:	0003      	movs	r3, r0
 80059c8:	430b      	orrs	r3, r1
 80059ca:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80059cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ce:	699b      	ldr	r3, [r3, #24]
 80059d0:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80059d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4ab6      	ldr	r2, [pc, #728]	; (8005cb0 <UART_SetConfig+0x340>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d009      	beq.n	80059f0 <UART_SetConfig+0x80>
 80059dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4ab4      	ldr	r2, [pc, #720]	; (8005cb4 <UART_SetConfig+0x344>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d004      	beq.n	80059f0 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80059e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e8:	6a1b      	ldr	r3, [r3, #32]
 80059ea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80059ec:	4313      	orrs	r3, r2
 80059ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80059f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	689b      	ldr	r3, [r3, #8]
 80059f6:	4ab0      	ldr	r2, [pc, #704]	; (8005cb8 <UART_SetConfig+0x348>)
 80059f8:	4013      	ands	r3, r2
 80059fa:	0019      	movs	r1, r3
 80059fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059fe:	681a      	ldr	r2, [r3, #0]
 8005a00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a02:	430b      	orrs	r3, r1
 8005a04:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a0c:	220f      	movs	r2, #15
 8005a0e:	4393      	bics	r3, r2
 8005a10:	0018      	movs	r0, r3
 8005a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a14:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a18:	681a      	ldr	r2, [r3, #0]
 8005a1a:	0003      	movs	r3, r0
 8005a1c:	430b      	orrs	r3, r1
 8005a1e:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4aa5      	ldr	r2, [pc, #660]	; (8005cbc <UART_SetConfig+0x34c>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d131      	bne.n	8005a8e <UART_SetConfig+0x11e>
 8005a2a:	4ba5      	ldr	r3, [pc, #660]	; (8005cc0 <UART_SetConfig+0x350>)
 8005a2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a2e:	2203      	movs	r2, #3
 8005a30:	4013      	ands	r3, r2
 8005a32:	2b03      	cmp	r3, #3
 8005a34:	d01d      	beq.n	8005a72 <UART_SetConfig+0x102>
 8005a36:	d823      	bhi.n	8005a80 <UART_SetConfig+0x110>
 8005a38:	2b02      	cmp	r3, #2
 8005a3a:	d00c      	beq.n	8005a56 <UART_SetConfig+0xe6>
 8005a3c:	d820      	bhi.n	8005a80 <UART_SetConfig+0x110>
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d002      	beq.n	8005a48 <UART_SetConfig+0xd8>
 8005a42:	2b01      	cmp	r3, #1
 8005a44:	d00e      	beq.n	8005a64 <UART_SetConfig+0xf4>
 8005a46:	e01b      	b.n	8005a80 <UART_SetConfig+0x110>
 8005a48:	231b      	movs	r3, #27
 8005a4a:	2220      	movs	r2, #32
 8005a4c:	189b      	adds	r3, r3, r2
 8005a4e:	19db      	adds	r3, r3, r7
 8005a50:	2200      	movs	r2, #0
 8005a52:	701a      	strb	r2, [r3, #0]
 8005a54:	e154      	b.n	8005d00 <UART_SetConfig+0x390>
 8005a56:	231b      	movs	r3, #27
 8005a58:	2220      	movs	r2, #32
 8005a5a:	189b      	adds	r3, r3, r2
 8005a5c:	19db      	adds	r3, r3, r7
 8005a5e:	2202      	movs	r2, #2
 8005a60:	701a      	strb	r2, [r3, #0]
 8005a62:	e14d      	b.n	8005d00 <UART_SetConfig+0x390>
 8005a64:	231b      	movs	r3, #27
 8005a66:	2220      	movs	r2, #32
 8005a68:	189b      	adds	r3, r3, r2
 8005a6a:	19db      	adds	r3, r3, r7
 8005a6c:	2204      	movs	r2, #4
 8005a6e:	701a      	strb	r2, [r3, #0]
 8005a70:	e146      	b.n	8005d00 <UART_SetConfig+0x390>
 8005a72:	231b      	movs	r3, #27
 8005a74:	2220      	movs	r2, #32
 8005a76:	189b      	adds	r3, r3, r2
 8005a78:	19db      	adds	r3, r3, r7
 8005a7a:	2208      	movs	r2, #8
 8005a7c:	701a      	strb	r2, [r3, #0]
 8005a7e:	e13f      	b.n	8005d00 <UART_SetConfig+0x390>
 8005a80:	231b      	movs	r3, #27
 8005a82:	2220      	movs	r2, #32
 8005a84:	189b      	adds	r3, r3, r2
 8005a86:	19db      	adds	r3, r3, r7
 8005a88:	2210      	movs	r2, #16
 8005a8a:	701a      	strb	r2, [r3, #0]
 8005a8c:	e138      	b.n	8005d00 <UART_SetConfig+0x390>
 8005a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a8c      	ldr	r2, [pc, #560]	; (8005cc4 <UART_SetConfig+0x354>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d131      	bne.n	8005afc <UART_SetConfig+0x18c>
 8005a98:	4b89      	ldr	r3, [pc, #548]	; (8005cc0 <UART_SetConfig+0x350>)
 8005a9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a9c:	220c      	movs	r2, #12
 8005a9e:	4013      	ands	r3, r2
 8005aa0:	2b0c      	cmp	r3, #12
 8005aa2:	d01d      	beq.n	8005ae0 <UART_SetConfig+0x170>
 8005aa4:	d823      	bhi.n	8005aee <UART_SetConfig+0x17e>
 8005aa6:	2b08      	cmp	r3, #8
 8005aa8:	d00c      	beq.n	8005ac4 <UART_SetConfig+0x154>
 8005aaa:	d820      	bhi.n	8005aee <UART_SetConfig+0x17e>
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d002      	beq.n	8005ab6 <UART_SetConfig+0x146>
 8005ab0:	2b04      	cmp	r3, #4
 8005ab2:	d00e      	beq.n	8005ad2 <UART_SetConfig+0x162>
 8005ab4:	e01b      	b.n	8005aee <UART_SetConfig+0x17e>
 8005ab6:	231b      	movs	r3, #27
 8005ab8:	2220      	movs	r2, #32
 8005aba:	189b      	adds	r3, r3, r2
 8005abc:	19db      	adds	r3, r3, r7
 8005abe:	2200      	movs	r2, #0
 8005ac0:	701a      	strb	r2, [r3, #0]
 8005ac2:	e11d      	b.n	8005d00 <UART_SetConfig+0x390>
 8005ac4:	231b      	movs	r3, #27
 8005ac6:	2220      	movs	r2, #32
 8005ac8:	189b      	adds	r3, r3, r2
 8005aca:	19db      	adds	r3, r3, r7
 8005acc:	2202      	movs	r2, #2
 8005ace:	701a      	strb	r2, [r3, #0]
 8005ad0:	e116      	b.n	8005d00 <UART_SetConfig+0x390>
 8005ad2:	231b      	movs	r3, #27
 8005ad4:	2220      	movs	r2, #32
 8005ad6:	189b      	adds	r3, r3, r2
 8005ad8:	19db      	adds	r3, r3, r7
 8005ada:	2204      	movs	r2, #4
 8005adc:	701a      	strb	r2, [r3, #0]
 8005ade:	e10f      	b.n	8005d00 <UART_SetConfig+0x390>
 8005ae0:	231b      	movs	r3, #27
 8005ae2:	2220      	movs	r2, #32
 8005ae4:	189b      	adds	r3, r3, r2
 8005ae6:	19db      	adds	r3, r3, r7
 8005ae8:	2208      	movs	r2, #8
 8005aea:	701a      	strb	r2, [r3, #0]
 8005aec:	e108      	b.n	8005d00 <UART_SetConfig+0x390>
 8005aee:	231b      	movs	r3, #27
 8005af0:	2220      	movs	r2, #32
 8005af2:	189b      	adds	r3, r3, r2
 8005af4:	19db      	adds	r3, r3, r7
 8005af6:	2210      	movs	r2, #16
 8005af8:	701a      	strb	r2, [r3, #0]
 8005afa:	e101      	b.n	8005d00 <UART_SetConfig+0x390>
 8005afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a71      	ldr	r2, [pc, #452]	; (8005cc8 <UART_SetConfig+0x358>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d131      	bne.n	8005b6a <UART_SetConfig+0x1fa>
 8005b06:	4b6e      	ldr	r3, [pc, #440]	; (8005cc0 <UART_SetConfig+0x350>)
 8005b08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b0a:	2230      	movs	r2, #48	; 0x30
 8005b0c:	4013      	ands	r3, r2
 8005b0e:	2b30      	cmp	r3, #48	; 0x30
 8005b10:	d01d      	beq.n	8005b4e <UART_SetConfig+0x1de>
 8005b12:	d823      	bhi.n	8005b5c <UART_SetConfig+0x1ec>
 8005b14:	2b20      	cmp	r3, #32
 8005b16:	d00c      	beq.n	8005b32 <UART_SetConfig+0x1c2>
 8005b18:	d820      	bhi.n	8005b5c <UART_SetConfig+0x1ec>
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d002      	beq.n	8005b24 <UART_SetConfig+0x1b4>
 8005b1e:	2b10      	cmp	r3, #16
 8005b20:	d00e      	beq.n	8005b40 <UART_SetConfig+0x1d0>
 8005b22:	e01b      	b.n	8005b5c <UART_SetConfig+0x1ec>
 8005b24:	231b      	movs	r3, #27
 8005b26:	2220      	movs	r2, #32
 8005b28:	189b      	adds	r3, r3, r2
 8005b2a:	19db      	adds	r3, r3, r7
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	701a      	strb	r2, [r3, #0]
 8005b30:	e0e6      	b.n	8005d00 <UART_SetConfig+0x390>
 8005b32:	231b      	movs	r3, #27
 8005b34:	2220      	movs	r2, #32
 8005b36:	189b      	adds	r3, r3, r2
 8005b38:	19db      	adds	r3, r3, r7
 8005b3a:	2202      	movs	r2, #2
 8005b3c:	701a      	strb	r2, [r3, #0]
 8005b3e:	e0df      	b.n	8005d00 <UART_SetConfig+0x390>
 8005b40:	231b      	movs	r3, #27
 8005b42:	2220      	movs	r2, #32
 8005b44:	189b      	adds	r3, r3, r2
 8005b46:	19db      	adds	r3, r3, r7
 8005b48:	2204      	movs	r2, #4
 8005b4a:	701a      	strb	r2, [r3, #0]
 8005b4c:	e0d8      	b.n	8005d00 <UART_SetConfig+0x390>
 8005b4e:	231b      	movs	r3, #27
 8005b50:	2220      	movs	r2, #32
 8005b52:	189b      	adds	r3, r3, r2
 8005b54:	19db      	adds	r3, r3, r7
 8005b56:	2208      	movs	r2, #8
 8005b58:	701a      	strb	r2, [r3, #0]
 8005b5a:	e0d1      	b.n	8005d00 <UART_SetConfig+0x390>
 8005b5c:	231b      	movs	r3, #27
 8005b5e:	2220      	movs	r2, #32
 8005b60:	189b      	adds	r3, r3, r2
 8005b62:	19db      	adds	r3, r3, r7
 8005b64:	2210      	movs	r2, #16
 8005b66:	701a      	strb	r2, [r3, #0]
 8005b68:	e0ca      	b.n	8005d00 <UART_SetConfig+0x390>
 8005b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a57      	ldr	r2, [pc, #348]	; (8005ccc <UART_SetConfig+0x35c>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d106      	bne.n	8005b82 <UART_SetConfig+0x212>
 8005b74:	231b      	movs	r3, #27
 8005b76:	2220      	movs	r2, #32
 8005b78:	189b      	adds	r3, r3, r2
 8005b7a:	19db      	adds	r3, r3, r7
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	701a      	strb	r2, [r3, #0]
 8005b80:	e0be      	b.n	8005d00 <UART_SetConfig+0x390>
 8005b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a52      	ldr	r2, [pc, #328]	; (8005cd0 <UART_SetConfig+0x360>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d106      	bne.n	8005b9a <UART_SetConfig+0x22a>
 8005b8c:	231b      	movs	r3, #27
 8005b8e:	2220      	movs	r2, #32
 8005b90:	189b      	adds	r3, r3, r2
 8005b92:	19db      	adds	r3, r3, r7
 8005b94:	2200      	movs	r2, #0
 8005b96:	701a      	strb	r2, [r3, #0]
 8005b98:	e0b2      	b.n	8005d00 <UART_SetConfig+0x390>
 8005b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4a4d      	ldr	r2, [pc, #308]	; (8005cd4 <UART_SetConfig+0x364>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d106      	bne.n	8005bb2 <UART_SetConfig+0x242>
 8005ba4:	231b      	movs	r3, #27
 8005ba6:	2220      	movs	r2, #32
 8005ba8:	189b      	adds	r3, r3, r2
 8005baa:	19db      	adds	r3, r3, r7
 8005bac:	2200      	movs	r2, #0
 8005bae:	701a      	strb	r2, [r3, #0]
 8005bb0:	e0a6      	b.n	8005d00 <UART_SetConfig+0x390>
 8005bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a3e      	ldr	r2, [pc, #248]	; (8005cb0 <UART_SetConfig+0x340>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d13e      	bne.n	8005c3a <UART_SetConfig+0x2ca>
 8005bbc:	4b40      	ldr	r3, [pc, #256]	; (8005cc0 <UART_SetConfig+0x350>)
 8005bbe:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005bc0:	23c0      	movs	r3, #192	; 0xc0
 8005bc2:	011b      	lsls	r3, r3, #4
 8005bc4:	4013      	ands	r3, r2
 8005bc6:	22c0      	movs	r2, #192	; 0xc0
 8005bc8:	0112      	lsls	r2, r2, #4
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d027      	beq.n	8005c1e <UART_SetConfig+0x2ae>
 8005bce:	22c0      	movs	r2, #192	; 0xc0
 8005bd0:	0112      	lsls	r2, r2, #4
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d82a      	bhi.n	8005c2c <UART_SetConfig+0x2bc>
 8005bd6:	2280      	movs	r2, #128	; 0x80
 8005bd8:	0112      	lsls	r2, r2, #4
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d011      	beq.n	8005c02 <UART_SetConfig+0x292>
 8005bde:	2280      	movs	r2, #128	; 0x80
 8005be0:	0112      	lsls	r2, r2, #4
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d822      	bhi.n	8005c2c <UART_SetConfig+0x2bc>
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d004      	beq.n	8005bf4 <UART_SetConfig+0x284>
 8005bea:	2280      	movs	r2, #128	; 0x80
 8005bec:	00d2      	lsls	r2, r2, #3
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d00e      	beq.n	8005c10 <UART_SetConfig+0x2a0>
 8005bf2:	e01b      	b.n	8005c2c <UART_SetConfig+0x2bc>
 8005bf4:	231b      	movs	r3, #27
 8005bf6:	2220      	movs	r2, #32
 8005bf8:	189b      	adds	r3, r3, r2
 8005bfa:	19db      	adds	r3, r3, r7
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	701a      	strb	r2, [r3, #0]
 8005c00:	e07e      	b.n	8005d00 <UART_SetConfig+0x390>
 8005c02:	231b      	movs	r3, #27
 8005c04:	2220      	movs	r2, #32
 8005c06:	189b      	adds	r3, r3, r2
 8005c08:	19db      	adds	r3, r3, r7
 8005c0a:	2202      	movs	r2, #2
 8005c0c:	701a      	strb	r2, [r3, #0]
 8005c0e:	e077      	b.n	8005d00 <UART_SetConfig+0x390>
 8005c10:	231b      	movs	r3, #27
 8005c12:	2220      	movs	r2, #32
 8005c14:	189b      	adds	r3, r3, r2
 8005c16:	19db      	adds	r3, r3, r7
 8005c18:	2204      	movs	r2, #4
 8005c1a:	701a      	strb	r2, [r3, #0]
 8005c1c:	e070      	b.n	8005d00 <UART_SetConfig+0x390>
 8005c1e:	231b      	movs	r3, #27
 8005c20:	2220      	movs	r2, #32
 8005c22:	189b      	adds	r3, r3, r2
 8005c24:	19db      	adds	r3, r3, r7
 8005c26:	2208      	movs	r2, #8
 8005c28:	701a      	strb	r2, [r3, #0]
 8005c2a:	e069      	b.n	8005d00 <UART_SetConfig+0x390>
 8005c2c:	231b      	movs	r3, #27
 8005c2e:	2220      	movs	r2, #32
 8005c30:	189b      	adds	r3, r3, r2
 8005c32:	19db      	adds	r3, r3, r7
 8005c34:	2210      	movs	r2, #16
 8005c36:	701a      	strb	r2, [r3, #0]
 8005c38:	e062      	b.n	8005d00 <UART_SetConfig+0x390>
 8005c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a1d      	ldr	r2, [pc, #116]	; (8005cb4 <UART_SetConfig+0x344>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d157      	bne.n	8005cf4 <UART_SetConfig+0x384>
 8005c44:	4b1e      	ldr	r3, [pc, #120]	; (8005cc0 <UART_SetConfig+0x350>)
 8005c46:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005c48:	23c0      	movs	r3, #192	; 0xc0
 8005c4a:	009b      	lsls	r3, r3, #2
 8005c4c:	4013      	ands	r3, r2
 8005c4e:	22c0      	movs	r2, #192	; 0xc0
 8005c50:	0092      	lsls	r2, r2, #2
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d040      	beq.n	8005cd8 <UART_SetConfig+0x368>
 8005c56:	22c0      	movs	r2, #192	; 0xc0
 8005c58:	0092      	lsls	r2, r2, #2
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d843      	bhi.n	8005ce6 <UART_SetConfig+0x376>
 8005c5e:	2280      	movs	r2, #128	; 0x80
 8005c60:	0092      	lsls	r2, r2, #2
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d011      	beq.n	8005c8a <UART_SetConfig+0x31a>
 8005c66:	2280      	movs	r2, #128	; 0x80
 8005c68:	0092      	lsls	r2, r2, #2
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d83b      	bhi.n	8005ce6 <UART_SetConfig+0x376>
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d004      	beq.n	8005c7c <UART_SetConfig+0x30c>
 8005c72:	2280      	movs	r2, #128	; 0x80
 8005c74:	0052      	lsls	r2, r2, #1
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d00e      	beq.n	8005c98 <UART_SetConfig+0x328>
 8005c7a:	e034      	b.n	8005ce6 <UART_SetConfig+0x376>
 8005c7c:	231b      	movs	r3, #27
 8005c7e:	2220      	movs	r2, #32
 8005c80:	189b      	adds	r3, r3, r2
 8005c82:	19db      	adds	r3, r3, r7
 8005c84:	2200      	movs	r2, #0
 8005c86:	701a      	strb	r2, [r3, #0]
 8005c88:	e03a      	b.n	8005d00 <UART_SetConfig+0x390>
 8005c8a:	231b      	movs	r3, #27
 8005c8c:	2220      	movs	r2, #32
 8005c8e:	189b      	adds	r3, r3, r2
 8005c90:	19db      	adds	r3, r3, r7
 8005c92:	2202      	movs	r2, #2
 8005c94:	701a      	strb	r2, [r3, #0]
 8005c96:	e033      	b.n	8005d00 <UART_SetConfig+0x390>
 8005c98:	231b      	movs	r3, #27
 8005c9a:	2220      	movs	r2, #32
 8005c9c:	189b      	adds	r3, r3, r2
 8005c9e:	19db      	adds	r3, r3, r7
 8005ca0:	2204      	movs	r2, #4
 8005ca2:	701a      	strb	r2, [r3, #0]
 8005ca4:	e02c      	b.n	8005d00 <UART_SetConfig+0x390>
 8005ca6:	46c0      	nop			; (mov r8, r8)
 8005ca8:	cfff69f3 	.word	0xcfff69f3
 8005cac:	ffffcfff 	.word	0xffffcfff
 8005cb0:	40008000 	.word	0x40008000
 8005cb4:	40008400 	.word	0x40008400
 8005cb8:	11fff4ff 	.word	0x11fff4ff
 8005cbc:	40013800 	.word	0x40013800
 8005cc0:	40021000 	.word	0x40021000
 8005cc4:	40004400 	.word	0x40004400
 8005cc8:	40004800 	.word	0x40004800
 8005ccc:	40004c00 	.word	0x40004c00
 8005cd0:	40005000 	.word	0x40005000
 8005cd4:	40013c00 	.word	0x40013c00
 8005cd8:	231b      	movs	r3, #27
 8005cda:	2220      	movs	r2, #32
 8005cdc:	189b      	adds	r3, r3, r2
 8005cde:	19db      	adds	r3, r3, r7
 8005ce0:	2208      	movs	r2, #8
 8005ce2:	701a      	strb	r2, [r3, #0]
 8005ce4:	e00c      	b.n	8005d00 <UART_SetConfig+0x390>
 8005ce6:	231b      	movs	r3, #27
 8005ce8:	2220      	movs	r2, #32
 8005cea:	189b      	adds	r3, r3, r2
 8005cec:	19db      	adds	r3, r3, r7
 8005cee:	2210      	movs	r2, #16
 8005cf0:	701a      	strb	r2, [r3, #0]
 8005cf2:	e005      	b.n	8005d00 <UART_SetConfig+0x390>
 8005cf4:	231b      	movs	r3, #27
 8005cf6:	2220      	movs	r2, #32
 8005cf8:	189b      	adds	r3, r3, r2
 8005cfa:	19db      	adds	r3, r3, r7
 8005cfc:	2210      	movs	r2, #16
 8005cfe:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4ac1      	ldr	r2, [pc, #772]	; (800600c <UART_SetConfig+0x69c>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d005      	beq.n	8005d16 <UART_SetConfig+0x3a6>
 8005d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4ac0      	ldr	r2, [pc, #768]	; (8006010 <UART_SetConfig+0x6a0>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d000      	beq.n	8005d16 <UART_SetConfig+0x3a6>
 8005d14:	e093      	b.n	8005e3e <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005d16:	231b      	movs	r3, #27
 8005d18:	2220      	movs	r2, #32
 8005d1a:	189b      	adds	r3, r3, r2
 8005d1c:	19db      	adds	r3, r3, r7
 8005d1e:	781b      	ldrb	r3, [r3, #0]
 8005d20:	2b08      	cmp	r3, #8
 8005d22:	d015      	beq.n	8005d50 <UART_SetConfig+0x3e0>
 8005d24:	dc18      	bgt.n	8005d58 <UART_SetConfig+0x3e8>
 8005d26:	2b04      	cmp	r3, #4
 8005d28:	d00d      	beq.n	8005d46 <UART_SetConfig+0x3d6>
 8005d2a:	dc15      	bgt.n	8005d58 <UART_SetConfig+0x3e8>
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d002      	beq.n	8005d36 <UART_SetConfig+0x3c6>
 8005d30:	2b02      	cmp	r3, #2
 8005d32:	d005      	beq.n	8005d40 <UART_SetConfig+0x3d0>
 8005d34:	e010      	b.n	8005d58 <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d36:	f7fd fa5d 	bl	80031f4 <HAL_RCC_GetPCLK1Freq>
 8005d3a:	0003      	movs	r3, r0
 8005d3c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005d3e:	e014      	b.n	8005d6a <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d40:	4bb4      	ldr	r3, [pc, #720]	; (8006014 <UART_SetConfig+0x6a4>)
 8005d42:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005d44:	e011      	b.n	8005d6a <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d46:	f7fd f9c9 	bl	80030dc <HAL_RCC_GetSysClockFreq>
 8005d4a:	0003      	movs	r3, r0
 8005d4c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005d4e:	e00c      	b.n	8005d6a <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d50:	2380      	movs	r3, #128	; 0x80
 8005d52:	021b      	lsls	r3, r3, #8
 8005d54:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005d56:	e008      	b.n	8005d6a <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 8005d58:	2300      	movs	r3, #0
 8005d5a:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8005d5c:	231a      	movs	r3, #26
 8005d5e:	2220      	movs	r2, #32
 8005d60:	189b      	adds	r3, r3, r2
 8005d62:	19db      	adds	r3, r3, r7
 8005d64:	2201      	movs	r2, #1
 8005d66:	701a      	strb	r2, [r3, #0]
        break;
 8005d68:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005d6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d100      	bne.n	8005d72 <UART_SetConfig+0x402>
 8005d70:	e135      	b.n	8005fde <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005d76:	4ba8      	ldr	r3, [pc, #672]	; (8006018 <UART_SetConfig+0x6a8>)
 8005d78:	0052      	lsls	r2, r2, #1
 8005d7a:	5ad3      	ldrh	r3, [r2, r3]
 8005d7c:	0019      	movs	r1, r3
 8005d7e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005d80:	f7fa f9d2 	bl	8000128 <__udivsi3>
 8005d84:	0003      	movs	r3, r0
 8005d86:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d8a:	685a      	ldr	r2, [r3, #4]
 8005d8c:	0013      	movs	r3, r2
 8005d8e:	005b      	lsls	r3, r3, #1
 8005d90:	189b      	adds	r3, r3, r2
 8005d92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d94:	429a      	cmp	r2, r3
 8005d96:	d305      	bcc.n	8005da4 <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d9a:	685b      	ldr	r3, [r3, #4]
 8005d9c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005d9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005da0:	429a      	cmp	r2, r3
 8005da2:	d906      	bls.n	8005db2 <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 8005da4:	231a      	movs	r3, #26
 8005da6:	2220      	movs	r2, #32
 8005da8:	189b      	adds	r3, r3, r2
 8005daa:	19db      	adds	r3, r3, r7
 8005dac:	2201      	movs	r2, #1
 8005dae:	701a      	strb	r2, [r3, #0]
 8005db0:	e044      	b.n	8005e3c <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005db2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005db4:	61bb      	str	r3, [r7, #24]
 8005db6:	2300      	movs	r3, #0
 8005db8:	61fb      	str	r3, [r7, #28]
 8005dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dbc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005dbe:	4b96      	ldr	r3, [pc, #600]	; (8006018 <UART_SetConfig+0x6a8>)
 8005dc0:	0052      	lsls	r2, r2, #1
 8005dc2:	5ad3      	ldrh	r3, [r2, r3]
 8005dc4:	613b      	str	r3, [r7, #16]
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	617b      	str	r3, [r7, #20]
 8005dca:	693a      	ldr	r2, [r7, #16]
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	69b8      	ldr	r0, [r7, #24]
 8005dd0:	69f9      	ldr	r1, [r7, #28]
 8005dd2:	f7fa fb1f 	bl	8000414 <__aeabi_uldivmod>
 8005dd6:	0002      	movs	r2, r0
 8005dd8:	000b      	movs	r3, r1
 8005dda:	0e11      	lsrs	r1, r2, #24
 8005ddc:	021d      	lsls	r5, r3, #8
 8005dde:	430d      	orrs	r5, r1
 8005de0:	0214      	lsls	r4, r2, #8
 8005de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de4:	685b      	ldr	r3, [r3, #4]
 8005de6:	085b      	lsrs	r3, r3, #1
 8005de8:	60bb      	str	r3, [r7, #8]
 8005dea:	2300      	movs	r3, #0
 8005dec:	60fb      	str	r3, [r7, #12]
 8005dee:	68b8      	ldr	r0, [r7, #8]
 8005df0:	68f9      	ldr	r1, [r7, #12]
 8005df2:	1900      	adds	r0, r0, r4
 8005df4:	4169      	adcs	r1, r5
 8005df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df8:	685b      	ldr	r3, [r3, #4]
 8005dfa:	603b      	str	r3, [r7, #0]
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	607b      	str	r3, [r7, #4]
 8005e00:	683a      	ldr	r2, [r7, #0]
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	f7fa fb06 	bl	8000414 <__aeabi_uldivmod>
 8005e08:	0002      	movs	r2, r0
 8005e0a:	000b      	movs	r3, r1
 8005e0c:	0013      	movs	r3, r2
 8005e0e:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005e10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e12:	23c0      	movs	r3, #192	; 0xc0
 8005e14:	009b      	lsls	r3, r3, #2
 8005e16:	429a      	cmp	r2, r3
 8005e18:	d309      	bcc.n	8005e2e <UART_SetConfig+0x4be>
 8005e1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e1c:	2380      	movs	r3, #128	; 0x80
 8005e1e:	035b      	lsls	r3, r3, #13
 8005e20:	429a      	cmp	r2, r3
 8005e22:	d204      	bcs.n	8005e2e <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 8005e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e2a:	60da      	str	r2, [r3, #12]
 8005e2c:	e006      	b.n	8005e3c <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 8005e2e:	231a      	movs	r3, #26
 8005e30:	2220      	movs	r2, #32
 8005e32:	189b      	adds	r3, r3, r2
 8005e34:	19db      	adds	r3, r3, r7
 8005e36:	2201      	movs	r2, #1
 8005e38:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 8005e3a:	e0d0      	b.n	8005fde <UART_SetConfig+0x66e>
 8005e3c:	e0cf      	b.n	8005fde <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e40:	69da      	ldr	r2, [r3, #28]
 8005e42:	2380      	movs	r3, #128	; 0x80
 8005e44:	021b      	lsls	r3, r3, #8
 8005e46:	429a      	cmp	r2, r3
 8005e48:	d000      	beq.n	8005e4c <UART_SetConfig+0x4dc>
 8005e4a:	e070      	b.n	8005f2e <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 8005e4c:	231b      	movs	r3, #27
 8005e4e:	2220      	movs	r2, #32
 8005e50:	189b      	adds	r3, r3, r2
 8005e52:	19db      	adds	r3, r3, r7
 8005e54:	781b      	ldrb	r3, [r3, #0]
 8005e56:	2b08      	cmp	r3, #8
 8005e58:	d015      	beq.n	8005e86 <UART_SetConfig+0x516>
 8005e5a:	dc18      	bgt.n	8005e8e <UART_SetConfig+0x51e>
 8005e5c:	2b04      	cmp	r3, #4
 8005e5e:	d00d      	beq.n	8005e7c <UART_SetConfig+0x50c>
 8005e60:	dc15      	bgt.n	8005e8e <UART_SetConfig+0x51e>
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d002      	beq.n	8005e6c <UART_SetConfig+0x4fc>
 8005e66:	2b02      	cmp	r3, #2
 8005e68:	d005      	beq.n	8005e76 <UART_SetConfig+0x506>
 8005e6a:	e010      	b.n	8005e8e <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e6c:	f7fd f9c2 	bl	80031f4 <HAL_RCC_GetPCLK1Freq>
 8005e70:	0003      	movs	r3, r0
 8005e72:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005e74:	e014      	b.n	8005ea0 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e76:	4b67      	ldr	r3, [pc, #412]	; (8006014 <UART_SetConfig+0x6a4>)
 8005e78:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005e7a:	e011      	b.n	8005ea0 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e7c:	f7fd f92e 	bl	80030dc <HAL_RCC_GetSysClockFreq>
 8005e80:	0003      	movs	r3, r0
 8005e82:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005e84:	e00c      	b.n	8005ea0 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e86:	2380      	movs	r3, #128	; 0x80
 8005e88:	021b      	lsls	r3, r3, #8
 8005e8a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005e8c:	e008      	b.n	8005ea0 <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 8005e8e:	2300      	movs	r3, #0
 8005e90:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8005e92:	231a      	movs	r3, #26
 8005e94:	2220      	movs	r2, #32
 8005e96:	189b      	adds	r3, r3, r2
 8005e98:	19db      	adds	r3, r3, r7
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	701a      	strb	r2, [r3, #0]
        break;
 8005e9e:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005ea0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d100      	bne.n	8005ea8 <UART_SetConfig+0x538>
 8005ea6:	e09a      	b.n	8005fde <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eaa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005eac:	4b5a      	ldr	r3, [pc, #360]	; (8006018 <UART_SetConfig+0x6a8>)
 8005eae:	0052      	lsls	r2, r2, #1
 8005eb0:	5ad3      	ldrh	r3, [r2, r3]
 8005eb2:	0019      	movs	r1, r3
 8005eb4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005eb6:	f7fa f937 	bl	8000128 <__udivsi3>
 8005eba:	0003      	movs	r3, r0
 8005ebc:	005a      	lsls	r2, r3, #1
 8005ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec0:	685b      	ldr	r3, [r3, #4]
 8005ec2:	085b      	lsrs	r3, r3, #1
 8005ec4:	18d2      	adds	r2, r2, r3
 8005ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	0019      	movs	r1, r3
 8005ecc:	0010      	movs	r0, r2
 8005ece:	f7fa f92b 	bl	8000128 <__udivsi3>
 8005ed2:	0003      	movs	r3, r0
 8005ed4:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ed8:	2b0f      	cmp	r3, #15
 8005eda:	d921      	bls.n	8005f20 <UART_SetConfig+0x5b0>
 8005edc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ede:	2380      	movs	r3, #128	; 0x80
 8005ee0:	025b      	lsls	r3, r3, #9
 8005ee2:	429a      	cmp	r2, r3
 8005ee4:	d21c      	bcs.n	8005f20 <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ee8:	b29a      	uxth	r2, r3
 8005eea:	200e      	movs	r0, #14
 8005eec:	2420      	movs	r4, #32
 8005eee:	1903      	adds	r3, r0, r4
 8005ef0:	19db      	adds	r3, r3, r7
 8005ef2:	210f      	movs	r1, #15
 8005ef4:	438a      	bics	r2, r1
 8005ef6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005efa:	085b      	lsrs	r3, r3, #1
 8005efc:	b29b      	uxth	r3, r3
 8005efe:	2207      	movs	r2, #7
 8005f00:	4013      	ands	r3, r2
 8005f02:	b299      	uxth	r1, r3
 8005f04:	1903      	adds	r3, r0, r4
 8005f06:	19db      	adds	r3, r3, r7
 8005f08:	1902      	adds	r2, r0, r4
 8005f0a:	19d2      	adds	r2, r2, r7
 8005f0c:	8812      	ldrh	r2, [r2, #0]
 8005f0e:	430a      	orrs	r2, r1
 8005f10:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	1902      	adds	r2, r0, r4
 8005f18:	19d2      	adds	r2, r2, r7
 8005f1a:	8812      	ldrh	r2, [r2, #0]
 8005f1c:	60da      	str	r2, [r3, #12]
 8005f1e:	e05e      	b.n	8005fde <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8005f20:	231a      	movs	r3, #26
 8005f22:	2220      	movs	r2, #32
 8005f24:	189b      	adds	r3, r3, r2
 8005f26:	19db      	adds	r3, r3, r7
 8005f28:	2201      	movs	r2, #1
 8005f2a:	701a      	strb	r2, [r3, #0]
 8005f2c:	e057      	b.n	8005fde <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005f2e:	231b      	movs	r3, #27
 8005f30:	2220      	movs	r2, #32
 8005f32:	189b      	adds	r3, r3, r2
 8005f34:	19db      	adds	r3, r3, r7
 8005f36:	781b      	ldrb	r3, [r3, #0]
 8005f38:	2b08      	cmp	r3, #8
 8005f3a:	d015      	beq.n	8005f68 <UART_SetConfig+0x5f8>
 8005f3c:	dc18      	bgt.n	8005f70 <UART_SetConfig+0x600>
 8005f3e:	2b04      	cmp	r3, #4
 8005f40:	d00d      	beq.n	8005f5e <UART_SetConfig+0x5ee>
 8005f42:	dc15      	bgt.n	8005f70 <UART_SetConfig+0x600>
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d002      	beq.n	8005f4e <UART_SetConfig+0x5de>
 8005f48:	2b02      	cmp	r3, #2
 8005f4a:	d005      	beq.n	8005f58 <UART_SetConfig+0x5e8>
 8005f4c:	e010      	b.n	8005f70 <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f4e:	f7fd f951 	bl	80031f4 <HAL_RCC_GetPCLK1Freq>
 8005f52:	0003      	movs	r3, r0
 8005f54:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005f56:	e014      	b.n	8005f82 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f58:	4b2e      	ldr	r3, [pc, #184]	; (8006014 <UART_SetConfig+0x6a4>)
 8005f5a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005f5c:	e011      	b.n	8005f82 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f5e:	f7fd f8bd 	bl	80030dc <HAL_RCC_GetSysClockFreq>
 8005f62:	0003      	movs	r3, r0
 8005f64:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005f66:	e00c      	b.n	8005f82 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f68:	2380      	movs	r3, #128	; 0x80
 8005f6a:	021b      	lsls	r3, r3, #8
 8005f6c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005f6e:	e008      	b.n	8005f82 <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 8005f70:	2300      	movs	r3, #0
 8005f72:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8005f74:	231a      	movs	r3, #26
 8005f76:	2220      	movs	r2, #32
 8005f78:	189b      	adds	r3, r3, r2
 8005f7a:	19db      	adds	r3, r3, r7
 8005f7c:	2201      	movs	r2, #1
 8005f7e:	701a      	strb	r2, [r3, #0]
        break;
 8005f80:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8005f82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d02a      	beq.n	8005fde <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005f8c:	4b22      	ldr	r3, [pc, #136]	; (8006018 <UART_SetConfig+0x6a8>)
 8005f8e:	0052      	lsls	r2, r2, #1
 8005f90:	5ad3      	ldrh	r3, [r2, r3]
 8005f92:	0019      	movs	r1, r3
 8005f94:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005f96:	f7fa f8c7 	bl	8000128 <__udivsi3>
 8005f9a:	0003      	movs	r3, r0
 8005f9c:	001a      	movs	r2, r3
 8005f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa0:	685b      	ldr	r3, [r3, #4]
 8005fa2:	085b      	lsrs	r3, r3, #1
 8005fa4:	18d2      	adds	r2, r2, r3
 8005fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	0019      	movs	r1, r3
 8005fac:	0010      	movs	r0, r2
 8005fae:	f7fa f8bb 	bl	8000128 <__udivsi3>
 8005fb2:	0003      	movs	r3, r0
 8005fb4:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fb8:	2b0f      	cmp	r3, #15
 8005fba:	d90a      	bls.n	8005fd2 <UART_SetConfig+0x662>
 8005fbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fbe:	2380      	movs	r3, #128	; 0x80
 8005fc0:	025b      	lsls	r3, r3, #9
 8005fc2:	429a      	cmp	r2, r3
 8005fc4:	d205      	bcs.n	8005fd2 <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fc8:	b29a      	uxth	r2, r3
 8005fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	60da      	str	r2, [r3, #12]
 8005fd0:	e005      	b.n	8005fde <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8005fd2:	231a      	movs	r3, #26
 8005fd4:	2220      	movs	r2, #32
 8005fd6:	189b      	adds	r3, r3, r2
 8005fd8:	19db      	adds	r3, r3, r7
 8005fda:	2201      	movs	r2, #1
 8005fdc:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe0:	226a      	movs	r2, #106	; 0x6a
 8005fe2:	2101      	movs	r1, #1
 8005fe4:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8005fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe8:	2268      	movs	r2, #104	; 0x68
 8005fea:	2101      	movs	r1, #1
 8005fec:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005ffa:	231a      	movs	r3, #26
 8005ffc:	2220      	movs	r2, #32
 8005ffe:	189b      	adds	r3, r3, r2
 8006000:	19db      	adds	r3, r3, r7
 8006002:	781b      	ldrb	r3, [r3, #0]
}
 8006004:	0018      	movs	r0, r3
 8006006:	46bd      	mov	sp, r7
 8006008:	b010      	add	sp, #64	; 0x40
 800600a:	bdb0      	pop	{r4, r5, r7, pc}
 800600c:	40008000 	.word	0x40008000
 8006010:	40008400 	.word	0x40008400
 8006014:	00f42400 	.word	0x00f42400
 8006018:	0800a6c8 	.word	0x0800a6c8

0800601c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b082      	sub	sp, #8
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006028:	2208      	movs	r2, #8
 800602a:	4013      	ands	r3, r2
 800602c:	d00b      	beq.n	8006046 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	685b      	ldr	r3, [r3, #4]
 8006034:	4a4a      	ldr	r2, [pc, #296]	; (8006160 <UART_AdvFeatureConfig+0x144>)
 8006036:	4013      	ands	r3, r2
 8006038:	0019      	movs	r1, r3
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	430a      	orrs	r2, r1
 8006044:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800604a:	2201      	movs	r2, #1
 800604c:	4013      	ands	r3, r2
 800604e:	d00b      	beq.n	8006068 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	4a43      	ldr	r2, [pc, #268]	; (8006164 <UART_AdvFeatureConfig+0x148>)
 8006058:	4013      	ands	r3, r2
 800605a:	0019      	movs	r1, r3
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	430a      	orrs	r2, r1
 8006066:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800606c:	2202      	movs	r2, #2
 800606e:	4013      	ands	r3, r2
 8006070:	d00b      	beq.n	800608a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	685b      	ldr	r3, [r3, #4]
 8006078:	4a3b      	ldr	r2, [pc, #236]	; (8006168 <UART_AdvFeatureConfig+0x14c>)
 800607a:	4013      	ands	r3, r2
 800607c:	0019      	movs	r1, r3
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	430a      	orrs	r2, r1
 8006088:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800608e:	2204      	movs	r2, #4
 8006090:	4013      	ands	r3, r2
 8006092:	d00b      	beq.n	80060ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	685b      	ldr	r3, [r3, #4]
 800609a:	4a34      	ldr	r2, [pc, #208]	; (800616c <UART_AdvFeatureConfig+0x150>)
 800609c:	4013      	ands	r3, r2
 800609e:	0019      	movs	r1, r3
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	430a      	orrs	r2, r1
 80060aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060b0:	2210      	movs	r2, #16
 80060b2:	4013      	ands	r3, r2
 80060b4:	d00b      	beq.n	80060ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	689b      	ldr	r3, [r3, #8]
 80060bc:	4a2c      	ldr	r2, [pc, #176]	; (8006170 <UART_AdvFeatureConfig+0x154>)
 80060be:	4013      	ands	r3, r2
 80060c0:	0019      	movs	r1, r3
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	430a      	orrs	r2, r1
 80060cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060d2:	2220      	movs	r2, #32
 80060d4:	4013      	ands	r3, r2
 80060d6:	d00b      	beq.n	80060f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	689b      	ldr	r3, [r3, #8]
 80060de:	4a25      	ldr	r2, [pc, #148]	; (8006174 <UART_AdvFeatureConfig+0x158>)
 80060e0:	4013      	ands	r3, r2
 80060e2:	0019      	movs	r1, r3
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	430a      	orrs	r2, r1
 80060ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060f4:	2240      	movs	r2, #64	; 0x40
 80060f6:	4013      	ands	r3, r2
 80060f8:	d01d      	beq.n	8006136 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	4a1d      	ldr	r2, [pc, #116]	; (8006178 <UART_AdvFeatureConfig+0x15c>)
 8006102:	4013      	ands	r3, r2
 8006104:	0019      	movs	r1, r3
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	430a      	orrs	r2, r1
 8006110:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006116:	2380      	movs	r3, #128	; 0x80
 8006118:	035b      	lsls	r3, r3, #13
 800611a:	429a      	cmp	r2, r3
 800611c:	d10b      	bne.n	8006136 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	4a15      	ldr	r2, [pc, #84]	; (800617c <UART_AdvFeatureConfig+0x160>)
 8006126:	4013      	ands	r3, r2
 8006128:	0019      	movs	r1, r3
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	430a      	orrs	r2, r1
 8006134:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800613a:	2280      	movs	r2, #128	; 0x80
 800613c:	4013      	ands	r3, r2
 800613e:	d00b      	beq.n	8006158 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	685b      	ldr	r3, [r3, #4]
 8006146:	4a0e      	ldr	r2, [pc, #56]	; (8006180 <UART_AdvFeatureConfig+0x164>)
 8006148:	4013      	ands	r3, r2
 800614a:	0019      	movs	r1, r3
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	430a      	orrs	r2, r1
 8006156:	605a      	str	r2, [r3, #4]
  }
}
 8006158:	46c0      	nop			; (mov r8, r8)
 800615a:	46bd      	mov	sp, r7
 800615c:	b002      	add	sp, #8
 800615e:	bd80      	pop	{r7, pc}
 8006160:	ffff7fff 	.word	0xffff7fff
 8006164:	fffdffff 	.word	0xfffdffff
 8006168:	fffeffff 	.word	0xfffeffff
 800616c:	fffbffff 	.word	0xfffbffff
 8006170:	ffffefff 	.word	0xffffefff
 8006174:	ffffdfff 	.word	0xffffdfff
 8006178:	ffefffff 	.word	0xffefffff
 800617c:	ff9fffff 	.word	0xff9fffff
 8006180:	fff7ffff 	.word	0xfff7ffff

08006184 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b092      	sub	sp, #72	; 0x48
 8006188:	af02      	add	r7, sp, #8
 800618a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2290      	movs	r2, #144	; 0x90
 8006190:	2100      	movs	r1, #0
 8006192:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006194:	f7fb fe3c 	bl	8001e10 <HAL_GetTick>
 8006198:	0003      	movs	r3, r0
 800619a:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	2208      	movs	r2, #8
 80061a4:	4013      	ands	r3, r2
 80061a6:	2b08      	cmp	r3, #8
 80061a8:	d12d      	bne.n	8006206 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80061aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061ac:	2280      	movs	r2, #128	; 0x80
 80061ae:	0391      	lsls	r1, r2, #14
 80061b0:	6878      	ldr	r0, [r7, #4]
 80061b2:	4a47      	ldr	r2, [pc, #284]	; (80062d0 <UART_CheckIdleState+0x14c>)
 80061b4:	9200      	str	r2, [sp, #0]
 80061b6:	2200      	movs	r2, #0
 80061b8:	f000 f88e 	bl	80062d8 <UART_WaitOnFlagUntilTimeout>
 80061bc:	1e03      	subs	r3, r0, #0
 80061be:	d022      	beq.n	8006206 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80061c0:	f3ef 8310 	mrs	r3, PRIMASK
 80061c4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80061c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80061c8:	63bb      	str	r3, [r7, #56]	; 0x38
 80061ca:	2301      	movs	r3, #1
 80061cc:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061d0:	f383 8810 	msr	PRIMASK, r3
}
 80061d4:	46c0      	nop			; (mov r8, r8)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	681a      	ldr	r2, [r3, #0]
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	2180      	movs	r1, #128	; 0x80
 80061e2:	438a      	bics	r2, r1
 80061e4:	601a      	str	r2, [r3, #0]
 80061e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061ec:	f383 8810 	msr	PRIMASK, r3
}
 80061f0:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2288      	movs	r2, #136	; 0x88
 80061f6:	2120      	movs	r1, #32
 80061f8:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2284      	movs	r2, #132	; 0x84
 80061fe:	2100      	movs	r1, #0
 8006200:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006202:	2303      	movs	r3, #3
 8006204:	e060      	b.n	80062c8 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	2204      	movs	r2, #4
 800620e:	4013      	ands	r3, r2
 8006210:	2b04      	cmp	r3, #4
 8006212:	d146      	bne.n	80062a2 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006214:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006216:	2280      	movs	r2, #128	; 0x80
 8006218:	03d1      	lsls	r1, r2, #15
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	4a2c      	ldr	r2, [pc, #176]	; (80062d0 <UART_CheckIdleState+0x14c>)
 800621e:	9200      	str	r2, [sp, #0]
 8006220:	2200      	movs	r2, #0
 8006222:	f000 f859 	bl	80062d8 <UART_WaitOnFlagUntilTimeout>
 8006226:	1e03      	subs	r3, r0, #0
 8006228:	d03b      	beq.n	80062a2 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800622a:	f3ef 8310 	mrs	r3, PRIMASK
 800622e:	60fb      	str	r3, [r7, #12]
  return(result);
 8006230:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006232:	637b      	str	r3, [r7, #52]	; 0x34
 8006234:	2301      	movs	r3, #1
 8006236:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006238:	693b      	ldr	r3, [r7, #16]
 800623a:	f383 8810 	msr	PRIMASK, r3
}
 800623e:	46c0      	nop			; (mov r8, r8)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	681a      	ldr	r2, [r3, #0]
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4922      	ldr	r1, [pc, #136]	; (80062d4 <UART_CheckIdleState+0x150>)
 800624c:	400a      	ands	r2, r1
 800624e:	601a      	str	r2, [r3, #0]
 8006250:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006252:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006254:	697b      	ldr	r3, [r7, #20]
 8006256:	f383 8810 	msr	PRIMASK, r3
}
 800625a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800625c:	f3ef 8310 	mrs	r3, PRIMASK
 8006260:	61bb      	str	r3, [r7, #24]
  return(result);
 8006262:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006264:	633b      	str	r3, [r7, #48]	; 0x30
 8006266:	2301      	movs	r3, #1
 8006268:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800626a:	69fb      	ldr	r3, [r7, #28]
 800626c:	f383 8810 	msr	PRIMASK, r3
}
 8006270:	46c0      	nop			; (mov r8, r8)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	689a      	ldr	r2, [r3, #8]
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	2101      	movs	r1, #1
 800627e:	438a      	bics	r2, r1
 8006280:	609a      	str	r2, [r3, #8]
 8006282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006284:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006286:	6a3b      	ldr	r3, [r7, #32]
 8006288:	f383 8810 	msr	PRIMASK, r3
}
 800628c:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	228c      	movs	r2, #140	; 0x8c
 8006292:	2120      	movs	r1, #32
 8006294:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2284      	movs	r2, #132	; 0x84
 800629a:	2100      	movs	r1, #0
 800629c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800629e:	2303      	movs	r3, #3
 80062a0:	e012      	b.n	80062c8 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2288      	movs	r2, #136	; 0x88
 80062a6:	2120      	movs	r1, #32
 80062a8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	228c      	movs	r2, #140	; 0x8c
 80062ae:	2120      	movs	r1, #32
 80062b0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2200      	movs	r2, #0
 80062b6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2200      	movs	r2, #0
 80062bc:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2284      	movs	r2, #132	; 0x84
 80062c2:	2100      	movs	r1, #0
 80062c4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80062c6:	2300      	movs	r3, #0
}
 80062c8:	0018      	movs	r0, r3
 80062ca:	46bd      	mov	sp, r7
 80062cc:	b010      	add	sp, #64	; 0x40
 80062ce:	bd80      	pop	{r7, pc}
 80062d0:	01ffffff 	.word	0x01ffffff
 80062d4:	fffffedf 	.word	0xfffffedf

080062d8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b084      	sub	sp, #16
 80062dc:	af00      	add	r7, sp, #0
 80062de:	60f8      	str	r0, [r7, #12]
 80062e0:	60b9      	str	r1, [r7, #8]
 80062e2:	603b      	str	r3, [r7, #0]
 80062e4:	1dfb      	adds	r3, r7, #7
 80062e6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062e8:	e051      	b.n	800638e <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062ea:	69bb      	ldr	r3, [r7, #24]
 80062ec:	3301      	adds	r3, #1
 80062ee:	d04e      	beq.n	800638e <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062f0:	f7fb fd8e 	bl	8001e10 <HAL_GetTick>
 80062f4:	0002      	movs	r2, r0
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	1ad3      	subs	r3, r2, r3
 80062fa:	69ba      	ldr	r2, [r7, #24]
 80062fc:	429a      	cmp	r2, r3
 80062fe:	d302      	bcc.n	8006306 <UART_WaitOnFlagUntilTimeout+0x2e>
 8006300:	69bb      	ldr	r3, [r7, #24]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d101      	bne.n	800630a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8006306:	2303      	movs	r3, #3
 8006308:	e051      	b.n	80063ae <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	2204      	movs	r2, #4
 8006312:	4013      	ands	r3, r2
 8006314:	d03b      	beq.n	800638e <UART_WaitOnFlagUntilTimeout+0xb6>
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	2b80      	cmp	r3, #128	; 0x80
 800631a:	d038      	beq.n	800638e <UART_WaitOnFlagUntilTimeout+0xb6>
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	2b40      	cmp	r3, #64	; 0x40
 8006320:	d035      	beq.n	800638e <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	69db      	ldr	r3, [r3, #28]
 8006328:	2208      	movs	r2, #8
 800632a:	4013      	ands	r3, r2
 800632c:	2b08      	cmp	r3, #8
 800632e:	d111      	bne.n	8006354 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	2208      	movs	r2, #8
 8006336:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	0018      	movs	r0, r3
 800633c:	f000 f960 	bl	8006600 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	2290      	movs	r2, #144	; 0x90
 8006344:	2108      	movs	r1, #8
 8006346:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	2284      	movs	r2, #132	; 0x84
 800634c:	2100      	movs	r1, #0
 800634e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8006350:	2301      	movs	r3, #1
 8006352:	e02c      	b.n	80063ae <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	69da      	ldr	r2, [r3, #28]
 800635a:	2380      	movs	r3, #128	; 0x80
 800635c:	011b      	lsls	r3, r3, #4
 800635e:	401a      	ands	r2, r3
 8006360:	2380      	movs	r3, #128	; 0x80
 8006362:	011b      	lsls	r3, r3, #4
 8006364:	429a      	cmp	r2, r3
 8006366:	d112      	bne.n	800638e <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	2280      	movs	r2, #128	; 0x80
 800636e:	0112      	lsls	r2, r2, #4
 8006370:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	0018      	movs	r0, r3
 8006376:	f000 f943 	bl	8006600 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	2290      	movs	r2, #144	; 0x90
 800637e:	2120      	movs	r1, #32
 8006380:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	2284      	movs	r2, #132	; 0x84
 8006386:	2100      	movs	r1, #0
 8006388:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800638a:	2303      	movs	r3, #3
 800638c:	e00f      	b.n	80063ae <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	69db      	ldr	r3, [r3, #28]
 8006394:	68ba      	ldr	r2, [r7, #8]
 8006396:	4013      	ands	r3, r2
 8006398:	68ba      	ldr	r2, [r7, #8]
 800639a:	1ad3      	subs	r3, r2, r3
 800639c:	425a      	negs	r2, r3
 800639e:	4153      	adcs	r3, r2
 80063a0:	b2db      	uxtb	r3, r3
 80063a2:	001a      	movs	r2, r3
 80063a4:	1dfb      	adds	r3, r7, #7
 80063a6:	781b      	ldrb	r3, [r3, #0]
 80063a8:	429a      	cmp	r2, r3
 80063aa:	d09e      	beq.n	80062ea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80063ac:	2300      	movs	r3, #0
}
 80063ae:	0018      	movs	r0, r3
 80063b0:	46bd      	mov	sp, r7
 80063b2:	b004      	add	sp, #16
 80063b4:	bd80      	pop	{r7, pc}
	...

080063b8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b098      	sub	sp, #96	; 0x60
 80063bc:	af00      	add	r7, sp, #0
 80063be:	60f8      	str	r0, [r7, #12]
 80063c0:	60b9      	str	r1, [r7, #8]
 80063c2:	1dbb      	adds	r3, r7, #6
 80063c4:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	68ba      	ldr	r2, [r7, #8]
 80063ca:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	1dba      	adds	r2, r7, #6
 80063d0:	215c      	movs	r1, #92	; 0x5c
 80063d2:	8812      	ldrh	r2, [r2, #0]
 80063d4:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	1dba      	adds	r2, r7, #6
 80063da:	215e      	movs	r1, #94	; 0x5e
 80063dc:	8812      	ldrh	r2, [r2, #0]
 80063de:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	2200      	movs	r2, #0
 80063e4:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	689a      	ldr	r2, [r3, #8]
 80063ea:	2380      	movs	r3, #128	; 0x80
 80063ec:	015b      	lsls	r3, r3, #5
 80063ee:	429a      	cmp	r2, r3
 80063f0:	d10d      	bne.n	800640e <UART_Start_Receive_IT+0x56>
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	691b      	ldr	r3, [r3, #16]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d104      	bne.n	8006404 <UART_Start_Receive_IT+0x4c>
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	2260      	movs	r2, #96	; 0x60
 80063fe:	497b      	ldr	r1, [pc, #492]	; (80065ec <UART_Start_Receive_IT+0x234>)
 8006400:	5299      	strh	r1, [r3, r2]
 8006402:	e02e      	b.n	8006462 <UART_Start_Receive_IT+0xaa>
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	2260      	movs	r2, #96	; 0x60
 8006408:	21ff      	movs	r1, #255	; 0xff
 800640a:	5299      	strh	r1, [r3, r2]
 800640c:	e029      	b.n	8006462 <UART_Start_Receive_IT+0xaa>
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	689b      	ldr	r3, [r3, #8]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d10d      	bne.n	8006432 <UART_Start_Receive_IT+0x7a>
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	691b      	ldr	r3, [r3, #16]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d104      	bne.n	8006428 <UART_Start_Receive_IT+0x70>
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	2260      	movs	r2, #96	; 0x60
 8006422:	21ff      	movs	r1, #255	; 0xff
 8006424:	5299      	strh	r1, [r3, r2]
 8006426:	e01c      	b.n	8006462 <UART_Start_Receive_IT+0xaa>
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	2260      	movs	r2, #96	; 0x60
 800642c:	217f      	movs	r1, #127	; 0x7f
 800642e:	5299      	strh	r1, [r3, r2]
 8006430:	e017      	b.n	8006462 <UART_Start_Receive_IT+0xaa>
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	689a      	ldr	r2, [r3, #8]
 8006436:	2380      	movs	r3, #128	; 0x80
 8006438:	055b      	lsls	r3, r3, #21
 800643a:	429a      	cmp	r2, r3
 800643c:	d10d      	bne.n	800645a <UART_Start_Receive_IT+0xa2>
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	691b      	ldr	r3, [r3, #16]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d104      	bne.n	8006450 <UART_Start_Receive_IT+0x98>
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	2260      	movs	r2, #96	; 0x60
 800644a:	217f      	movs	r1, #127	; 0x7f
 800644c:	5299      	strh	r1, [r3, r2]
 800644e:	e008      	b.n	8006462 <UART_Start_Receive_IT+0xaa>
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	2260      	movs	r2, #96	; 0x60
 8006454:	213f      	movs	r1, #63	; 0x3f
 8006456:	5299      	strh	r1, [r3, r2]
 8006458:	e003      	b.n	8006462 <UART_Start_Receive_IT+0xaa>
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	2260      	movs	r2, #96	; 0x60
 800645e:	2100      	movs	r1, #0
 8006460:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	2290      	movs	r2, #144	; 0x90
 8006466:	2100      	movs	r1, #0
 8006468:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	228c      	movs	r2, #140	; 0x8c
 800646e:	2122      	movs	r1, #34	; 0x22
 8006470:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006472:	f3ef 8310 	mrs	r3, PRIMASK
 8006476:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 8006478:	6c3b      	ldr	r3, [r7, #64]	; 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800647a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800647c:	2301      	movs	r3, #1
 800647e:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006480:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006482:	f383 8810 	msr	PRIMASK, r3
}
 8006486:	46c0      	nop			; (mov r8, r8)
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	689a      	ldr	r2, [r3, #8]
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	2101      	movs	r1, #1
 8006494:	430a      	orrs	r2, r1
 8006496:	609a      	str	r2, [r3, #8]
 8006498:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800649a:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800649c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800649e:	f383 8810 	msr	PRIMASK, r3
}
 80064a2:	46c0      	nop			; (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80064a8:	2380      	movs	r3, #128	; 0x80
 80064aa:	059b      	lsls	r3, r3, #22
 80064ac:	429a      	cmp	r2, r3
 80064ae:	d150      	bne.n	8006552 <UART_Start_Receive_IT+0x19a>
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	2268      	movs	r2, #104	; 0x68
 80064b4:	5a9b      	ldrh	r3, [r3, r2]
 80064b6:	1dba      	adds	r2, r7, #6
 80064b8:	8812      	ldrh	r2, [r2, #0]
 80064ba:	429a      	cmp	r2, r3
 80064bc:	d349      	bcc.n	8006552 <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	689a      	ldr	r2, [r3, #8]
 80064c2:	2380      	movs	r3, #128	; 0x80
 80064c4:	015b      	lsls	r3, r3, #5
 80064c6:	429a      	cmp	r2, r3
 80064c8:	d107      	bne.n	80064da <UART_Start_Receive_IT+0x122>
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	691b      	ldr	r3, [r3, #16]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d103      	bne.n	80064da <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	4a46      	ldr	r2, [pc, #280]	; (80065f0 <UART_Start_Receive_IT+0x238>)
 80064d6:	675a      	str	r2, [r3, #116]	; 0x74
 80064d8:	e002      	b.n	80064e0 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	4a45      	ldr	r2, [pc, #276]	; (80065f4 <UART_Start_Receive_IT+0x23c>)
 80064de:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	691b      	ldr	r3, [r3, #16]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d019      	beq.n	800651c <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80064e8:	f3ef 8310 	mrs	r3, PRIMASK
 80064ec:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80064ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80064f0:	65bb      	str	r3, [r7, #88]	; 0x58
 80064f2:	2301      	movs	r3, #1
 80064f4:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064f8:	f383 8810 	msr	PRIMASK, r3
}
 80064fc:	46c0      	nop			; (mov r8, r8)
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	681a      	ldr	r2, [r3, #0]
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	2180      	movs	r1, #128	; 0x80
 800650a:	0049      	lsls	r1, r1, #1
 800650c:	430a      	orrs	r2, r1
 800650e:	601a      	str	r2, [r3, #0]
 8006510:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006512:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006514:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006516:	f383 8810 	msr	PRIMASK, r3
}
 800651a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800651c:	f3ef 8310 	mrs	r3, PRIMASK
 8006520:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8006522:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006524:	657b      	str	r3, [r7, #84]	; 0x54
 8006526:	2301      	movs	r3, #1
 8006528:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800652a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800652c:	f383 8810 	msr	PRIMASK, r3
}
 8006530:	46c0      	nop			; (mov r8, r8)
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	689a      	ldr	r2, [r3, #8]
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	2180      	movs	r1, #128	; 0x80
 800653e:	0549      	lsls	r1, r1, #21
 8006540:	430a      	orrs	r2, r1
 8006542:	609a      	str	r2, [r3, #8]
 8006544:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006546:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800654a:	f383 8810 	msr	PRIMASK, r3
}
 800654e:	46c0      	nop			; (mov r8, r8)
 8006550:	e047      	b.n	80065e2 <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	689a      	ldr	r2, [r3, #8]
 8006556:	2380      	movs	r3, #128	; 0x80
 8006558:	015b      	lsls	r3, r3, #5
 800655a:	429a      	cmp	r2, r3
 800655c:	d107      	bne.n	800656e <UART_Start_Receive_IT+0x1b6>
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	691b      	ldr	r3, [r3, #16]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d103      	bne.n	800656e <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	4a23      	ldr	r2, [pc, #140]	; (80065f8 <UART_Start_Receive_IT+0x240>)
 800656a:	675a      	str	r2, [r3, #116]	; 0x74
 800656c:	e002      	b.n	8006574 <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	4a22      	ldr	r2, [pc, #136]	; (80065fc <UART_Start_Receive_IT+0x244>)
 8006572:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	691b      	ldr	r3, [r3, #16]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d019      	beq.n	80065b0 <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800657c:	f3ef 8310 	mrs	r3, PRIMASK
 8006580:	61fb      	str	r3, [r7, #28]
  return(result);
 8006582:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8006584:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006586:	2301      	movs	r3, #1
 8006588:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800658a:	6a3b      	ldr	r3, [r7, #32]
 800658c:	f383 8810 	msr	PRIMASK, r3
}
 8006590:	46c0      	nop			; (mov r8, r8)
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	681a      	ldr	r2, [r3, #0]
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	2190      	movs	r1, #144	; 0x90
 800659e:	0049      	lsls	r1, r1, #1
 80065a0:	430a      	orrs	r2, r1
 80065a2:	601a      	str	r2, [r3, #0]
 80065a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065a6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065aa:	f383 8810 	msr	PRIMASK, r3
}
 80065ae:	e018      	b.n	80065e2 <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80065b0:	f3ef 8310 	mrs	r3, PRIMASK
 80065b4:	613b      	str	r3, [r7, #16]
  return(result);
 80065b6:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80065b8:	653b      	str	r3, [r7, #80]	; 0x50
 80065ba:	2301      	movs	r3, #1
 80065bc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065be:	697b      	ldr	r3, [r7, #20]
 80065c0:	f383 8810 	msr	PRIMASK, r3
}
 80065c4:	46c0      	nop			; (mov r8, r8)
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	681a      	ldr	r2, [r3, #0]
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	2120      	movs	r1, #32
 80065d2:	430a      	orrs	r2, r1
 80065d4:	601a      	str	r2, [r3, #0]
 80065d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80065d8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065da:	69bb      	ldr	r3, [r7, #24]
 80065dc:	f383 8810 	msr	PRIMASK, r3
}
 80065e0:	46c0      	nop			; (mov r8, r8)
    }
  }
  return HAL_OK;
 80065e2:	2300      	movs	r3, #0
}
 80065e4:	0018      	movs	r0, r3
 80065e6:	46bd      	mov	sp, r7
 80065e8:	b018      	add	sp, #96	; 0x60
 80065ea:	bd80      	pop	{r7, pc}
 80065ec:	000001ff 	.word	0x000001ff
 80065f0:	08006e49 	.word	0x08006e49
 80065f4:	08006afd 	.word	0x08006afd
 80065f8:	08006929 	.word	0x08006929
 80065fc:	08006755 	.word	0x08006755

08006600 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b08e      	sub	sp, #56	; 0x38
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006608:	f3ef 8310 	mrs	r3, PRIMASK
 800660c:	617b      	str	r3, [r7, #20]
  return(result);
 800660e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006610:	637b      	str	r3, [r7, #52]	; 0x34
 8006612:	2301      	movs	r3, #1
 8006614:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006616:	69bb      	ldr	r3, [r7, #24]
 8006618:	f383 8810 	msr	PRIMASK, r3
}
 800661c:	46c0      	nop			; (mov r8, r8)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	681a      	ldr	r2, [r3, #0]
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4926      	ldr	r1, [pc, #152]	; (80066c4 <UART_EndRxTransfer+0xc4>)
 800662a:	400a      	ands	r2, r1
 800662c:	601a      	str	r2, [r3, #0]
 800662e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006630:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006632:	69fb      	ldr	r3, [r7, #28]
 8006634:	f383 8810 	msr	PRIMASK, r3
}
 8006638:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800663a:	f3ef 8310 	mrs	r3, PRIMASK
 800663e:	623b      	str	r3, [r7, #32]
  return(result);
 8006640:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006642:	633b      	str	r3, [r7, #48]	; 0x30
 8006644:	2301      	movs	r3, #1
 8006646:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800664a:	f383 8810 	msr	PRIMASK, r3
}
 800664e:	46c0      	nop			; (mov r8, r8)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	689a      	ldr	r2, [r3, #8]
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	491b      	ldr	r1, [pc, #108]	; (80066c8 <UART_EndRxTransfer+0xc8>)
 800665c:	400a      	ands	r2, r1
 800665e:	609a      	str	r2, [r3, #8]
 8006660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006662:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006666:	f383 8810 	msr	PRIMASK, r3
}
 800666a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006670:	2b01      	cmp	r3, #1
 8006672:	d118      	bne.n	80066a6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006674:	f3ef 8310 	mrs	r3, PRIMASK
 8006678:	60bb      	str	r3, [r7, #8]
  return(result);
 800667a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800667c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800667e:	2301      	movs	r3, #1
 8006680:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	f383 8810 	msr	PRIMASK, r3
}
 8006688:	46c0      	nop			; (mov r8, r8)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	681a      	ldr	r2, [r3, #0]
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	2110      	movs	r1, #16
 8006696:	438a      	bics	r2, r1
 8006698:	601a      	str	r2, [r3, #0]
 800669a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800669c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800669e:	693b      	ldr	r3, [r7, #16]
 80066a0:	f383 8810 	msr	PRIMASK, r3
}
 80066a4:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	228c      	movs	r2, #140	; 0x8c
 80066aa:	2120      	movs	r1, #32
 80066ac:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2200      	movs	r2, #0
 80066b2:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2200      	movs	r2, #0
 80066b8:	675a      	str	r2, [r3, #116]	; 0x74
}
 80066ba:	46c0      	nop			; (mov r8, r8)
 80066bc:	46bd      	mov	sp, r7
 80066be:	b00e      	add	sp, #56	; 0x38
 80066c0:	bd80      	pop	{r7, pc}
 80066c2:	46c0      	nop			; (mov r8, r8)
 80066c4:	fffffedf 	.word	0xfffffedf
 80066c8:	effffffe 	.word	0xeffffffe

080066cc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b084      	sub	sp, #16
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066d8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	225e      	movs	r2, #94	; 0x5e
 80066de:	2100      	movs	r1, #0
 80066e0:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	2256      	movs	r2, #86	; 0x56
 80066e6:	2100      	movs	r1, #0
 80066e8:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	0018      	movs	r0, r3
 80066ee:	f7ff f92b 	bl	8005948 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80066f2:	46c0      	nop			; (mov r8, r8)
 80066f4:	46bd      	mov	sp, r7
 80066f6:	b004      	add	sp, #16
 80066f8:	bd80      	pop	{r7, pc}

080066fa <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80066fa:	b580      	push	{r7, lr}
 80066fc:	b086      	sub	sp, #24
 80066fe:	af00      	add	r7, sp, #0
 8006700:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006702:	f3ef 8310 	mrs	r3, PRIMASK
 8006706:	60bb      	str	r3, [r7, #8]
  return(result);
 8006708:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800670a:	617b      	str	r3, [r7, #20]
 800670c:	2301      	movs	r3, #1
 800670e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	f383 8810 	msr	PRIMASK, r3
}
 8006716:	46c0      	nop			; (mov r8, r8)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	681a      	ldr	r2, [r3, #0]
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	2140      	movs	r1, #64	; 0x40
 8006724:	438a      	bics	r2, r1
 8006726:	601a      	str	r2, [r3, #0]
 8006728:	697b      	ldr	r3, [r7, #20]
 800672a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	f383 8810 	msr	PRIMASK, r3
}
 8006732:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2288      	movs	r2, #136	; 0x88
 8006738:	2120      	movs	r1, #32
 800673a:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2200      	movs	r2, #0
 8006740:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	0018      	movs	r0, r3
 8006746:	f7ff f8f7 	bl	8005938 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800674a:	46c0      	nop			; (mov r8, r8)
 800674c:	46bd      	mov	sp, r7
 800674e:	b006      	add	sp, #24
 8006750:	bd80      	pop	{r7, pc}
	...

08006754 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b094      	sub	sp, #80	; 0x50
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800675c:	204e      	movs	r0, #78	; 0x4e
 800675e:	183b      	adds	r3, r7, r0
 8006760:	687a      	ldr	r2, [r7, #4]
 8006762:	2160      	movs	r1, #96	; 0x60
 8006764:	5a52      	ldrh	r2, [r2, r1]
 8006766:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	228c      	movs	r2, #140	; 0x8c
 800676c:	589b      	ldr	r3, [r3, r2]
 800676e:	2b22      	cmp	r3, #34	; 0x22
 8006770:	d000      	beq.n	8006774 <UART_RxISR_8BIT+0x20>
 8006772:	e0c4      	b.n	80068fe <UART_RxISR_8BIT+0x1aa>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800677a:	214c      	movs	r1, #76	; 0x4c
 800677c:	187b      	adds	r3, r7, r1
 800677e:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006780:	187b      	adds	r3, r7, r1
 8006782:	881b      	ldrh	r3, [r3, #0]
 8006784:	b2da      	uxtb	r2, r3
 8006786:	183b      	adds	r3, r7, r0
 8006788:	881b      	ldrh	r3, [r3, #0]
 800678a:	b2d9      	uxtb	r1, r3
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006790:	400a      	ands	r2, r1
 8006792:	b2d2      	uxtb	r2, r2
 8006794:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800679a:	1c5a      	adds	r2, r3, #1
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	225e      	movs	r2, #94	; 0x5e
 80067a4:	5a9b      	ldrh	r3, [r3, r2]
 80067a6:	b29b      	uxth	r3, r3
 80067a8:	3b01      	subs	r3, #1
 80067aa:	b299      	uxth	r1, r3
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	225e      	movs	r2, #94	; 0x5e
 80067b0:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	225e      	movs	r2, #94	; 0x5e
 80067b6:	5a9b      	ldrh	r3, [r3, r2]
 80067b8:	b29b      	uxth	r3, r3
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d000      	beq.n	80067c0 <UART_RxISR_8BIT+0x6c>
 80067be:	e0a6      	b.n	800690e <UART_RxISR_8BIT+0x1ba>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80067c0:	f3ef 8310 	mrs	r3, PRIMASK
 80067c4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80067c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80067c8:	64bb      	str	r3, [r7, #72]	; 0x48
 80067ca:	2301      	movs	r3, #1
 80067cc:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067d0:	f383 8810 	msr	PRIMASK, r3
}
 80067d4:	46c0      	nop			; (mov r8, r8)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	681a      	ldr	r2, [r3, #0]
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	494d      	ldr	r1, [pc, #308]	; (8006918 <UART_RxISR_8BIT+0x1c4>)
 80067e2:	400a      	ands	r2, r1
 80067e4:	601a      	str	r2, [r3, #0]
 80067e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067ec:	f383 8810 	msr	PRIMASK, r3
}
 80067f0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80067f2:	f3ef 8310 	mrs	r3, PRIMASK
 80067f6:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80067f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067fa:	647b      	str	r3, [r7, #68]	; 0x44
 80067fc:	2301      	movs	r3, #1
 80067fe:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006800:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006802:	f383 8810 	msr	PRIMASK, r3
}
 8006806:	46c0      	nop			; (mov r8, r8)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	689a      	ldr	r2, [r3, #8]
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	2101      	movs	r1, #1
 8006814:	438a      	bics	r2, r1
 8006816:	609a      	str	r2, [r3, #8]
 8006818:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800681a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800681c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800681e:	f383 8810 	msr	PRIMASK, r3
}
 8006822:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	228c      	movs	r2, #140	; 0x8c
 8006828:	2120      	movs	r1, #32
 800682a:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2200      	movs	r2, #0
 8006830:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2200      	movs	r2, #0
 8006836:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	4a37      	ldr	r2, [pc, #220]	; (800691c <UART_RxISR_8BIT+0x1c8>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d024      	beq.n	800688c <UART_RxISR_8BIT+0x138>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a36      	ldr	r2, [pc, #216]	; (8006920 <UART_RxISR_8BIT+0x1cc>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d01f      	beq.n	800688c <UART_RxISR_8BIT+0x138>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	685a      	ldr	r2, [r3, #4]
 8006852:	2380      	movs	r3, #128	; 0x80
 8006854:	041b      	lsls	r3, r3, #16
 8006856:	4013      	ands	r3, r2
 8006858:	d018      	beq.n	800688c <UART_RxISR_8BIT+0x138>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800685a:	f3ef 8310 	mrs	r3, PRIMASK
 800685e:	61bb      	str	r3, [r7, #24]
  return(result);
 8006860:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006862:	643b      	str	r3, [r7, #64]	; 0x40
 8006864:	2301      	movs	r3, #1
 8006866:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006868:	69fb      	ldr	r3, [r7, #28]
 800686a:	f383 8810 	msr	PRIMASK, r3
}
 800686e:	46c0      	nop			; (mov r8, r8)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	681a      	ldr	r2, [r3, #0]
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	492a      	ldr	r1, [pc, #168]	; (8006924 <UART_RxISR_8BIT+0x1d0>)
 800687c:	400a      	ands	r2, r1
 800687e:	601a      	str	r2, [r3, #0]
 8006880:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006882:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006884:	6a3b      	ldr	r3, [r7, #32]
 8006886:	f383 8810 	msr	PRIMASK, r3
}
 800688a:	46c0      	nop			; (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006890:	2b01      	cmp	r3, #1
 8006892:	d12f      	bne.n	80068f4 <UART_RxISR_8BIT+0x1a0>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2200      	movs	r2, #0
 8006898:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800689a:	f3ef 8310 	mrs	r3, PRIMASK
 800689e:	60fb      	str	r3, [r7, #12]
  return(result);
 80068a0:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068a4:	2301      	movs	r3, #1
 80068a6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068a8:	693b      	ldr	r3, [r7, #16]
 80068aa:	f383 8810 	msr	PRIMASK, r3
}
 80068ae:	46c0      	nop			; (mov r8, r8)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	681a      	ldr	r2, [r3, #0]
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	2110      	movs	r1, #16
 80068bc:	438a      	bics	r2, r1
 80068be:	601a      	str	r2, [r3, #0]
 80068c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068c2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068c4:	697b      	ldr	r3, [r7, #20]
 80068c6:	f383 8810 	msr	PRIMASK, r3
}
 80068ca:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	69db      	ldr	r3, [r3, #28]
 80068d2:	2210      	movs	r2, #16
 80068d4:	4013      	ands	r3, r2
 80068d6:	2b10      	cmp	r3, #16
 80068d8:	d103      	bne.n	80068e2 <UART_RxISR_8BIT+0x18e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	2210      	movs	r2, #16
 80068e0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	225c      	movs	r2, #92	; 0x5c
 80068e6:	5a9a      	ldrh	r2, [r3, r2]
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	0011      	movs	r1, r2
 80068ec:	0018      	movs	r0, r3
 80068ee:	f7ff f833 	bl	8005958 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80068f2:	e00c      	b.n	800690e <UART_RxISR_8BIT+0x1ba>
        HAL_UART_RxCpltCallback(huart);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	0018      	movs	r0, r3
 80068f8:	f7fa ff2c 	bl	8001754 <HAL_UART_RxCpltCallback>
}
 80068fc:	e007      	b.n	800690e <UART_RxISR_8BIT+0x1ba>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	699a      	ldr	r2, [r3, #24]
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	2108      	movs	r1, #8
 800690a:	430a      	orrs	r2, r1
 800690c:	619a      	str	r2, [r3, #24]
}
 800690e:	46c0      	nop			; (mov r8, r8)
 8006910:	46bd      	mov	sp, r7
 8006912:	b014      	add	sp, #80	; 0x50
 8006914:	bd80      	pop	{r7, pc}
 8006916:	46c0      	nop			; (mov r8, r8)
 8006918:	fffffedf 	.word	0xfffffedf
 800691c:	40008000 	.word	0x40008000
 8006920:	40008400 	.word	0x40008400
 8006924:	fbffffff 	.word	0xfbffffff

08006928 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b094      	sub	sp, #80	; 0x50
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006930:	204e      	movs	r0, #78	; 0x4e
 8006932:	183b      	adds	r3, r7, r0
 8006934:	687a      	ldr	r2, [r7, #4]
 8006936:	2160      	movs	r1, #96	; 0x60
 8006938:	5a52      	ldrh	r2, [r2, r1]
 800693a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	228c      	movs	r2, #140	; 0x8c
 8006940:	589b      	ldr	r3, [r3, r2]
 8006942:	2b22      	cmp	r3, #34	; 0x22
 8006944:	d000      	beq.n	8006948 <UART_RxISR_16BIT+0x20>
 8006946:	e0c4      	b.n	8006ad2 <UART_RxISR_16BIT+0x1aa>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800694e:	214c      	movs	r1, #76	; 0x4c
 8006950:	187b      	adds	r3, r7, r1
 8006952:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006958:	64bb      	str	r3, [r7, #72]	; 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 800695a:	187b      	adds	r3, r7, r1
 800695c:	183a      	adds	r2, r7, r0
 800695e:	881b      	ldrh	r3, [r3, #0]
 8006960:	8812      	ldrh	r2, [r2, #0]
 8006962:	4013      	ands	r3, r2
 8006964:	b29a      	uxth	r2, r3
 8006966:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006968:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800696e:	1c9a      	adds	r2, r3, #2
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	225e      	movs	r2, #94	; 0x5e
 8006978:	5a9b      	ldrh	r3, [r3, r2]
 800697a:	b29b      	uxth	r3, r3
 800697c:	3b01      	subs	r3, #1
 800697e:	b299      	uxth	r1, r3
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	225e      	movs	r2, #94	; 0x5e
 8006984:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	225e      	movs	r2, #94	; 0x5e
 800698a:	5a9b      	ldrh	r3, [r3, r2]
 800698c:	b29b      	uxth	r3, r3
 800698e:	2b00      	cmp	r3, #0
 8006990:	d000      	beq.n	8006994 <UART_RxISR_16BIT+0x6c>
 8006992:	e0a6      	b.n	8006ae2 <UART_RxISR_16BIT+0x1ba>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006994:	f3ef 8310 	mrs	r3, PRIMASK
 8006998:	623b      	str	r3, [r7, #32]
  return(result);
 800699a:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800699c:	647b      	str	r3, [r7, #68]	; 0x44
 800699e:	2301      	movs	r3, #1
 80069a0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a4:	f383 8810 	msr	PRIMASK, r3
}
 80069a8:	46c0      	nop			; (mov r8, r8)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	681a      	ldr	r2, [r3, #0]
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	494d      	ldr	r1, [pc, #308]	; (8006aec <UART_RxISR_16BIT+0x1c4>)
 80069b6:	400a      	ands	r2, r1
 80069b8:	601a      	str	r2, [r3, #0]
 80069ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80069bc:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069c0:	f383 8810 	msr	PRIMASK, r3
}
 80069c4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80069c6:	f3ef 8310 	mrs	r3, PRIMASK
 80069ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 80069cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069ce:	643b      	str	r3, [r7, #64]	; 0x40
 80069d0:	2301      	movs	r3, #1
 80069d2:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069d6:	f383 8810 	msr	PRIMASK, r3
}
 80069da:	46c0      	nop			; (mov r8, r8)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	689a      	ldr	r2, [r3, #8]
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	2101      	movs	r1, #1
 80069e8:	438a      	bics	r2, r1
 80069ea:	609a      	str	r2, [r3, #8]
 80069ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069ee:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069f2:	f383 8810 	msr	PRIMASK, r3
}
 80069f6:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	228c      	movs	r2, #140	; 0x8c
 80069fc:	2120      	movs	r1, #32
 80069fe:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2200      	movs	r2, #0
 8006a04:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2200      	movs	r2, #0
 8006a0a:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4a37      	ldr	r2, [pc, #220]	; (8006af0 <UART_RxISR_16BIT+0x1c8>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d024      	beq.n	8006a60 <UART_RxISR_16BIT+0x138>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4a36      	ldr	r2, [pc, #216]	; (8006af4 <UART_RxISR_16BIT+0x1cc>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d01f      	beq.n	8006a60 <UART_RxISR_16BIT+0x138>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	685a      	ldr	r2, [r3, #4]
 8006a26:	2380      	movs	r3, #128	; 0x80
 8006a28:	041b      	lsls	r3, r3, #16
 8006a2a:	4013      	ands	r3, r2
 8006a2c:	d018      	beq.n	8006a60 <UART_RxISR_16BIT+0x138>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a2e:	f3ef 8310 	mrs	r3, PRIMASK
 8006a32:	617b      	str	r3, [r7, #20]
  return(result);
 8006a34:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006a36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a38:	2301      	movs	r3, #1
 8006a3a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a3c:	69bb      	ldr	r3, [r7, #24]
 8006a3e:	f383 8810 	msr	PRIMASK, r3
}
 8006a42:	46c0      	nop			; (mov r8, r8)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	681a      	ldr	r2, [r3, #0]
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	492a      	ldr	r1, [pc, #168]	; (8006af8 <UART_RxISR_16BIT+0x1d0>)
 8006a50:	400a      	ands	r2, r1
 8006a52:	601a      	str	r2, [r3, #0]
 8006a54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a56:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a58:	69fb      	ldr	r3, [r7, #28]
 8006a5a:	f383 8810 	msr	PRIMASK, r3
}
 8006a5e:	46c0      	nop			; (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a64:	2b01      	cmp	r3, #1
 8006a66:	d12f      	bne.n	8006ac8 <UART_RxISR_16BIT+0x1a0>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a6e:	f3ef 8310 	mrs	r3, PRIMASK
 8006a72:	60bb      	str	r3, [r7, #8]
  return(result);
 8006a74:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a76:	63bb      	str	r3, [r7, #56]	; 0x38
 8006a78:	2301      	movs	r3, #1
 8006a7a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	f383 8810 	msr	PRIMASK, r3
}
 8006a82:	46c0      	nop			; (mov r8, r8)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	681a      	ldr	r2, [r3, #0]
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	2110      	movs	r1, #16
 8006a90:	438a      	bics	r2, r1
 8006a92:	601a      	str	r2, [r3, #0]
 8006a94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a96:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a98:	693b      	ldr	r3, [r7, #16]
 8006a9a:	f383 8810 	msr	PRIMASK, r3
}
 8006a9e:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	69db      	ldr	r3, [r3, #28]
 8006aa6:	2210      	movs	r2, #16
 8006aa8:	4013      	ands	r3, r2
 8006aaa:	2b10      	cmp	r3, #16
 8006aac:	d103      	bne.n	8006ab6 <UART_RxISR_16BIT+0x18e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	2210      	movs	r2, #16
 8006ab4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	225c      	movs	r2, #92	; 0x5c
 8006aba:	5a9a      	ldrh	r2, [r3, r2]
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	0011      	movs	r1, r2
 8006ac0:	0018      	movs	r0, r3
 8006ac2:	f7fe ff49 	bl	8005958 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006ac6:	e00c      	b.n	8006ae2 <UART_RxISR_16BIT+0x1ba>
        HAL_UART_RxCpltCallback(huart);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	0018      	movs	r0, r3
 8006acc:	f7fa fe42 	bl	8001754 <HAL_UART_RxCpltCallback>
}
 8006ad0:	e007      	b.n	8006ae2 <UART_RxISR_16BIT+0x1ba>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	699a      	ldr	r2, [r3, #24]
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	2108      	movs	r1, #8
 8006ade:	430a      	orrs	r2, r1
 8006ae0:	619a      	str	r2, [r3, #24]
}
 8006ae2:	46c0      	nop			; (mov r8, r8)
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	b014      	add	sp, #80	; 0x50
 8006ae8:	bd80      	pop	{r7, pc}
 8006aea:	46c0      	nop			; (mov r8, r8)
 8006aec:	fffffedf 	.word	0xfffffedf
 8006af0:	40008000 	.word	0x40008000
 8006af4:	40008400 	.word	0x40008400
 8006af8:	fbffffff 	.word	0xfbffffff

08006afc <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b0a0      	sub	sp, #128	; 0x80
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8006b04:	237a      	movs	r3, #122	; 0x7a
 8006b06:	18fb      	adds	r3, r7, r3
 8006b08:	687a      	ldr	r2, [r7, #4]
 8006b0a:	2160      	movs	r1, #96	; 0x60
 8006b0c:	5a52      	ldrh	r2, [r2, r1]
 8006b0e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	69db      	ldr	r3, [r3, #28]
 8006b16:	67fb      	str	r3, [r7, #124]	; 0x7c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	689b      	ldr	r3, [r3, #8]
 8006b26:	673b      	str	r3, [r7, #112]	; 0x70

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	228c      	movs	r2, #140	; 0x8c
 8006b2c:	589b      	ldr	r3, [r3, r2]
 8006b2e:	2b22      	cmp	r3, #34	; 0x22
 8006b30:	d000      	beq.n	8006b34 <UART_RxISR_8BIT_FIFOEN+0x38>
 8006b32:	e16f      	b.n	8006e14 <UART_RxISR_8BIT_FIFOEN+0x318>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006b34:	236e      	movs	r3, #110	; 0x6e
 8006b36:	18fb      	adds	r3, r7, r3
 8006b38:	687a      	ldr	r2, [r7, #4]
 8006b3a:	2168      	movs	r1, #104	; 0x68
 8006b3c:	5a52      	ldrh	r2, [r2, r1]
 8006b3e:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006b40:	e116      	b.n	8006d70 <UART_RxISR_8BIT_FIFOEN+0x274>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006b48:	216c      	movs	r1, #108	; 0x6c
 8006b4a:	187b      	adds	r3, r7, r1
 8006b4c:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006b4e:	187b      	adds	r3, r7, r1
 8006b50:	881b      	ldrh	r3, [r3, #0]
 8006b52:	b2da      	uxtb	r2, r3
 8006b54:	237a      	movs	r3, #122	; 0x7a
 8006b56:	18fb      	adds	r3, r7, r3
 8006b58:	881b      	ldrh	r3, [r3, #0]
 8006b5a:	b2d9      	uxtb	r1, r3
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b60:	400a      	ands	r2, r1
 8006b62:	b2d2      	uxtb	r2, r2
 8006b64:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b6a:	1c5a      	adds	r2, r3, #1
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	225e      	movs	r2, #94	; 0x5e
 8006b74:	5a9b      	ldrh	r3, [r3, r2]
 8006b76:	b29b      	uxth	r3, r3
 8006b78:	3b01      	subs	r3, #1
 8006b7a:	b299      	uxth	r1, r3
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	225e      	movs	r2, #94	; 0x5e
 8006b80:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	69db      	ldr	r3, [r3, #28]
 8006b88:	67fb      	str	r3, [r7, #124]	; 0x7c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006b8a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006b8c:	2207      	movs	r2, #7
 8006b8e:	4013      	ands	r3, r2
 8006b90:	d049      	beq.n	8006c26 <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006b92:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006b94:	2201      	movs	r2, #1
 8006b96:	4013      	ands	r3, r2
 8006b98:	d010      	beq.n	8006bbc <UART_RxISR_8BIT_FIFOEN+0xc0>
 8006b9a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8006b9c:	2380      	movs	r3, #128	; 0x80
 8006b9e:	005b      	lsls	r3, r3, #1
 8006ba0:	4013      	ands	r3, r2
 8006ba2:	d00b      	beq.n	8006bbc <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	2201      	movs	r2, #1
 8006baa:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2290      	movs	r2, #144	; 0x90
 8006bb0:	589b      	ldr	r3, [r3, r2]
 8006bb2:	2201      	movs	r2, #1
 8006bb4:	431a      	orrs	r2, r3
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2190      	movs	r1, #144	; 0x90
 8006bba:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006bbc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006bbe:	2202      	movs	r2, #2
 8006bc0:	4013      	ands	r3, r2
 8006bc2:	d00f      	beq.n	8006be4 <UART_RxISR_8BIT_FIFOEN+0xe8>
 8006bc4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	4013      	ands	r3, r2
 8006bca:	d00b      	beq.n	8006be4 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	2202      	movs	r2, #2
 8006bd2:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2290      	movs	r2, #144	; 0x90
 8006bd8:	589b      	ldr	r3, [r3, r2]
 8006bda:	2204      	movs	r2, #4
 8006bdc:	431a      	orrs	r2, r3
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2190      	movs	r1, #144	; 0x90
 8006be2:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006be4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006be6:	2204      	movs	r2, #4
 8006be8:	4013      	ands	r3, r2
 8006bea:	d00f      	beq.n	8006c0c <UART_RxISR_8BIT_FIFOEN+0x110>
 8006bec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006bee:	2201      	movs	r2, #1
 8006bf0:	4013      	ands	r3, r2
 8006bf2:	d00b      	beq.n	8006c0c <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	2204      	movs	r2, #4
 8006bfa:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2290      	movs	r2, #144	; 0x90
 8006c00:	589b      	ldr	r3, [r3, r2]
 8006c02:	2202      	movs	r2, #2
 8006c04:	431a      	orrs	r2, r3
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2190      	movs	r1, #144	; 0x90
 8006c0a:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2290      	movs	r2, #144	; 0x90
 8006c10:	589b      	ldr	r3, [r3, r2]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d007      	beq.n	8006c26 <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	0018      	movs	r0, r3
 8006c1a:	f7fe fe95 	bl	8005948 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2290      	movs	r2, #144	; 0x90
 8006c22:	2100      	movs	r1, #0
 8006c24:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	225e      	movs	r2, #94	; 0x5e
 8006c2a:	5a9b      	ldrh	r3, [r3, r2]
 8006c2c:	b29b      	uxth	r3, r3
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d000      	beq.n	8006c34 <UART_RxISR_8BIT_FIFOEN+0x138>
 8006c32:	e09d      	b.n	8006d70 <UART_RxISR_8BIT_FIFOEN+0x274>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c34:	f3ef 8310 	mrs	r3, PRIMASK
 8006c38:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 8006c3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006c3c:	66bb      	str	r3, [r7, #104]	; 0x68
 8006c3e:	2301      	movs	r3, #1
 8006c40:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c44:	f383 8810 	msr	PRIMASK, r3
}
 8006c48:	46c0      	nop			; (mov r8, r8)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	681a      	ldr	r2, [r3, #0]
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	4975      	ldr	r1, [pc, #468]	; (8006e2c <UART_RxISR_8BIT_FIFOEN+0x330>)
 8006c56:	400a      	ands	r2, r1
 8006c58:	601a      	str	r2, [r3, #0]
 8006c5a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006c5c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c60:	f383 8810 	msr	PRIMASK, r3
}
 8006c64:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c66:	f3ef 8310 	mrs	r3, PRIMASK
 8006c6a:	647b      	str	r3, [r7, #68]	; 0x44
  return(result);
 8006c6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006c6e:	667b      	str	r3, [r7, #100]	; 0x64
 8006c70:	2301      	movs	r3, #1
 8006c72:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c76:	f383 8810 	msr	PRIMASK, r3
}
 8006c7a:	46c0      	nop			; (mov r8, r8)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	689a      	ldr	r2, [r3, #8]
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	496a      	ldr	r1, [pc, #424]	; (8006e30 <UART_RxISR_8BIT_FIFOEN+0x334>)
 8006c88:	400a      	ands	r2, r1
 8006c8a:	609a      	str	r2, [r3, #8]
 8006c8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006c8e:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c92:	f383 8810 	msr	PRIMASK, r3
}
 8006c96:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	228c      	movs	r2, #140	; 0x8c
 8006c9c:	2120      	movs	r1, #32
 8006c9e:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	4a60      	ldr	r2, [pc, #384]	; (8006e34 <UART_RxISR_8BIT_FIFOEN+0x338>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d024      	beq.n	8006d00 <UART_RxISR_8BIT_FIFOEN+0x204>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4a5f      	ldr	r2, [pc, #380]	; (8006e38 <UART_RxISR_8BIT_FIFOEN+0x33c>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d01f      	beq.n	8006d00 <UART_RxISR_8BIT_FIFOEN+0x204>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	685a      	ldr	r2, [r3, #4]
 8006cc6:	2380      	movs	r3, #128	; 0x80
 8006cc8:	041b      	lsls	r3, r3, #16
 8006cca:	4013      	ands	r3, r2
 8006ccc:	d018      	beq.n	8006d00 <UART_RxISR_8BIT_FIFOEN+0x204>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006cce:	f3ef 8310 	mrs	r3, PRIMASK
 8006cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8006cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006cd6:	663b      	str	r3, [r7, #96]	; 0x60
 8006cd8:	2301      	movs	r3, #1
 8006cda:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cde:	f383 8810 	msr	PRIMASK, r3
}
 8006ce2:	46c0      	nop			; (mov r8, r8)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	681a      	ldr	r2, [r3, #0]
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	4953      	ldr	r1, [pc, #332]	; (8006e3c <UART_RxISR_8BIT_FIFOEN+0x340>)
 8006cf0:	400a      	ands	r2, r1
 8006cf2:	601a      	str	r2, [r3, #0]
 8006cf4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006cf6:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006cf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cfa:	f383 8810 	msr	PRIMASK, r3
}
 8006cfe:	46c0      	nop			; (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d04:	2b01      	cmp	r3, #1
 8006d06:	d12f      	bne.n	8006d68 <UART_RxISR_8BIT_FIFOEN+0x26c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d0e:	f3ef 8310 	mrs	r3, PRIMASK
 8006d12:	623b      	str	r3, [r7, #32]
  return(result);
 8006d14:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d16:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006d18:	2301      	movs	r3, #1
 8006d1a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d1e:	f383 8810 	msr	PRIMASK, r3
}
 8006d22:	46c0      	nop			; (mov r8, r8)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	681a      	ldr	r2, [r3, #0]
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	2110      	movs	r1, #16
 8006d30:	438a      	bics	r2, r1
 8006d32:	601a      	str	r2, [r3, #0]
 8006d34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006d36:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d3a:	f383 8810 	msr	PRIMASK, r3
}
 8006d3e:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	69db      	ldr	r3, [r3, #28]
 8006d46:	2210      	movs	r2, #16
 8006d48:	4013      	ands	r3, r2
 8006d4a:	2b10      	cmp	r3, #16
 8006d4c:	d103      	bne.n	8006d56 <UART_RxISR_8BIT_FIFOEN+0x25a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	2210      	movs	r2, #16
 8006d54:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	225c      	movs	r2, #92	; 0x5c
 8006d5a:	5a9a      	ldrh	r2, [r3, r2]
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	0011      	movs	r1, r2
 8006d60:	0018      	movs	r0, r3
 8006d62:	f7fe fdf9 	bl	8005958 <HAL_UARTEx_RxEventCallback>
 8006d66:	e003      	b.n	8006d70 <UART_RxISR_8BIT_FIFOEN+0x274>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	0018      	movs	r0, r3
 8006d6c:	f7fa fcf2 	bl	8001754 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006d70:	236e      	movs	r3, #110	; 0x6e
 8006d72:	18fb      	adds	r3, r7, r3
 8006d74:	881b      	ldrh	r3, [r3, #0]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d004      	beq.n	8006d84 <UART_RxISR_8BIT_FIFOEN+0x288>
 8006d7a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006d7c:	2220      	movs	r2, #32
 8006d7e:	4013      	ands	r3, r2
 8006d80:	d000      	beq.n	8006d84 <UART_RxISR_8BIT_FIFOEN+0x288>
 8006d82:	e6de      	b.n	8006b42 <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006d84:	205a      	movs	r0, #90	; 0x5a
 8006d86:	183b      	adds	r3, r7, r0
 8006d88:	687a      	ldr	r2, [r7, #4]
 8006d8a:	215e      	movs	r1, #94	; 0x5e
 8006d8c:	5a52      	ldrh	r2, [r2, r1]
 8006d8e:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006d90:	0001      	movs	r1, r0
 8006d92:	187b      	adds	r3, r7, r1
 8006d94:	881b      	ldrh	r3, [r3, #0]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d044      	beq.n	8006e24 <UART_RxISR_8BIT_FIFOEN+0x328>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2268      	movs	r2, #104	; 0x68
 8006d9e:	5a9b      	ldrh	r3, [r3, r2]
 8006da0:	187a      	adds	r2, r7, r1
 8006da2:	8812      	ldrh	r2, [r2, #0]
 8006da4:	429a      	cmp	r2, r3
 8006da6:	d23d      	bcs.n	8006e24 <UART_RxISR_8BIT_FIFOEN+0x328>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006da8:	f3ef 8310 	mrs	r3, PRIMASK
 8006dac:	60bb      	str	r3, [r7, #8]
  return(result);
 8006dae:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006db0:	657b      	str	r3, [r7, #84]	; 0x54
 8006db2:	2301      	movs	r3, #1
 8006db4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	f383 8810 	msr	PRIMASK, r3
}
 8006dbc:	46c0      	nop			; (mov r8, r8)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	689a      	ldr	r2, [r3, #8]
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	491d      	ldr	r1, [pc, #116]	; (8006e40 <UART_RxISR_8BIT_FIFOEN+0x344>)
 8006dca:	400a      	ands	r2, r1
 8006dcc:	609a      	str	r2, [r3, #8]
 8006dce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006dd0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006dd2:	693b      	ldr	r3, [r7, #16]
 8006dd4:	f383 8810 	msr	PRIMASK, r3
}
 8006dd8:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	4a19      	ldr	r2, [pc, #100]	; (8006e44 <UART_RxISR_8BIT_FIFOEN+0x348>)
 8006dde:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006de0:	f3ef 8310 	mrs	r3, PRIMASK
 8006de4:	617b      	str	r3, [r7, #20]
  return(result);
 8006de6:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006de8:	653b      	str	r3, [r7, #80]	; 0x50
 8006dea:	2301      	movs	r3, #1
 8006dec:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006dee:	69bb      	ldr	r3, [r7, #24]
 8006df0:	f383 8810 	msr	PRIMASK, r3
}
 8006df4:	46c0      	nop			; (mov r8, r8)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	681a      	ldr	r2, [r3, #0]
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	2120      	movs	r1, #32
 8006e02:	430a      	orrs	r2, r1
 8006e04:	601a      	str	r2, [r3, #0]
 8006e06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e08:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e0a:	69fb      	ldr	r3, [r7, #28]
 8006e0c:	f383 8810 	msr	PRIMASK, r3
}
 8006e10:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006e12:	e007      	b.n	8006e24 <UART_RxISR_8BIT_FIFOEN+0x328>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	699a      	ldr	r2, [r3, #24]
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	2108      	movs	r1, #8
 8006e20:	430a      	orrs	r2, r1
 8006e22:	619a      	str	r2, [r3, #24]
}
 8006e24:	46c0      	nop			; (mov r8, r8)
 8006e26:	46bd      	mov	sp, r7
 8006e28:	b020      	add	sp, #128	; 0x80
 8006e2a:	bd80      	pop	{r7, pc}
 8006e2c:	fffffeff 	.word	0xfffffeff
 8006e30:	effffffe 	.word	0xeffffffe
 8006e34:	40008000 	.word	0x40008000
 8006e38:	40008400 	.word	0x40008400
 8006e3c:	fbffffff 	.word	0xfbffffff
 8006e40:	efffffff 	.word	0xefffffff
 8006e44:	08006755 	.word	0x08006755

08006e48 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b0a2      	sub	sp, #136	; 0x88
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8006e50:	2382      	movs	r3, #130	; 0x82
 8006e52:	18fb      	adds	r3, r7, r3
 8006e54:	687a      	ldr	r2, [r7, #4]
 8006e56:	2160      	movs	r1, #96	; 0x60
 8006e58:	5a52      	ldrh	r2, [r2, r1]
 8006e5a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	69db      	ldr	r3, [r3, #28]
 8006e62:	2284      	movs	r2, #132	; 0x84
 8006e64:	18ba      	adds	r2, r7, r2
 8006e66:	6013      	str	r3, [r2, #0]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	67fb      	str	r3, [r7, #124]	; 0x7c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	689b      	ldr	r3, [r3, #8]
 8006e76:	67bb      	str	r3, [r7, #120]	; 0x78

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	228c      	movs	r2, #140	; 0x8c
 8006e7c:	589b      	ldr	r3, [r3, r2]
 8006e7e:	2b22      	cmp	r3, #34	; 0x22
 8006e80:	d000      	beq.n	8006e84 <UART_RxISR_16BIT_FIFOEN+0x3c>
 8006e82:	e179      	b.n	8007178 <UART_RxISR_16BIT_FIFOEN+0x330>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006e84:	2376      	movs	r3, #118	; 0x76
 8006e86:	18fb      	adds	r3, r7, r3
 8006e88:	687a      	ldr	r2, [r7, #4]
 8006e8a:	2168      	movs	r1, #104	; 0x68
 8006e8c:	5a52      	ldrh	r2, [r2, r1]
 8006e8e:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006e90:	e11e      	b.n	80070d0 <UART_RxISR_16BIT_FIFOEN+0x288>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006e98:	2174      	movs	r1, #116	; 0x74
 8006e9a:	187b      	adds	r3, r7, r1
 8006e9c:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ea2:	673b      	str	r3, [r7, #112]	; 0x70
      *tmp = (uint16_t)(uhdata & uhMask);
 8006ea4:	187b      	adds	r3, r7, r1
 8006ea6:	2282      	movs	r2, #130	; 0x82
 8006ea8:	18ba      	adds	r2, r7, r2
 8006eaa:	881b      	ldrh	r3, [r3, #0]
 8006eac:	8812      	ldrh	r2, [r2, #0]
 8006eae:	4013      	ands	r3, r2
 8006eb0:	b29a      	uxth	r2, r3
 8006eb2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006eb4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006eba:	1c9a      	adds	r2, r3, #2
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	225e      	movs	r2, #94	; 0x5e
 8006ec4:	5a9b      	ldrh	r3, [r3, r2]
 8006ec6:	b29b      	uxth	r3, r3
 8006ec8:	3b01      	subs	r3, #1
 8006eca:	b299      	uxth	r1, r3
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	225e      	movs	r2, #94	; 0x5e
 8006ed0:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	69db      	ldr	r3, [r3, #28]
 8006ed8:	2184      	movs	r1, #132	; 0x84
 8006eda:	187a      	adds	r2, r7, r1
 8006edc:	6013      	str	r3, [r2, #0]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006ede:	187b      	adds	r3, r7, r1
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	2207      	movs	r2, #7
 8006ee4:	4013      	ands	r3, r2
 8006ee6:	d04e      	beq.n	8006f86 <UART_RxISR_16BIT_FIFOEN+0x13e>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006ee8:	187b      	adds	r3, r7, r1
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	2201      	movs	r2, #1
 8006eee:	4013      	ands	r3, r2
 8006ef0:	d010      	beq.n	8006f14 <UART_RxISR_16BIT_FIFOEN+0xcc>
 8006ef2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8006ef4:	2380      	movs	r3, #128	; 0x80
 8006ef6:	005b      	lsls	r3, r3, #1
 8006ef8:	4013      	ands	r3, r2
 8006efa:	d00b      	beq.n	8006f14 <UART_RxISR_16BIT_FIFOEN+0xcc>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	2201      	movs	r2, #1
 8006f02:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2290      	movs	r2, #144	; 0x90
 8006f08:	589b      	ldr	r3, [r3, r2]
 8006f0a:	2201      	movs	r2, #1
 8006f0c:	431a      	orrs	r2, r3
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2190      	movs	r1, #144	; 0x90
 8006f12:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006f14:	2384      	movs	r3, #132	; 0x84
 8006f16:	18fb      	adds	r3, r7, r3
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	2202      	movs	r2, #2
 8006f1c:	4013      	ands	r3, r2
 8006f1e:	d00f      	beq.n	8006f40 <UART_RxISR_16BIT_FIFOEN+0xf8>
 8006f20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f22:	2201      	movs	r2, #1
 8006f24:	4013      	ands	r3, r2
 8006f26:	d00b      	beq.n	8006f40 <UART_RxISR_16BIT_FIFOEN+0xf8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	2202      	movs	r2, #2
 8006f2e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2290      	movs	r2, #144	; 0x90
 8006f34:	589b      	ldr	r3, [r3, r2]
 8006f36:	2204      	movs	r2, #4
 8006f38:	431a      	orrs	r2, r3
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2190      	movs	r1, #144	; 0x90
 8006f3e:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006f40:	2384      	movs	r3, #132	; 0x84
 8006f42:	18fb      	adds	r3, r7, r3
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	2204      	movs	r2, #4
 8006f48:	4013      	ands	r3, r2
 8006f4a:	d00f      	beq.n	8006f6c <UART_RxISR_16BIT_FIFOEN+0x124>
 8006f4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f4e:	2201      	movs	r2, #1
 8006f50:	4013      	ands	r3, r2
 8006f52:	d00b      	beq.n	8006f6c <UART_RxISR_16BIT_FIFOEN+0x124>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	2204      	movs	r2, #4
 8006f5a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2290      	movs	r2, #144	; 0x90
 8006f60:	589b      	ldr	r3, [r3, r2]
 8006f62:	2202      	movs	r2, #2
 8006f64:	431a      	orrs	r2, r3
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2190      	movs	r1, #144	; 0x90
 8006f6a:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2290      	movs	r2, #144	; 0x90
 8006f70:	589b      	ldr	r3, [r3, r2]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d007      	beq.n	8006f86 <UART_RxISR_16BIT_FIFOEN+0x13e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	0018      	movs	r0, r3
 8006f7a:	f7fe fce5 	bl	8005948 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2290      	movs	r2, #144	; 0x90
 8006f82:	2100      	movs	r1, #0
 8006f84:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	225e      	movs	r2, #94	; 0x5e
 8006f8a:	5a9b      	ldrh	r3, [r3, r2]
 8006f8c:	b29b      	uxth	r3, r3
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d000      	beq.n	8006f94 <UART_RxISR_16BIT_FIFOEN+0x14c>
 8006f92:	e09d      	b.n	80070d0 <UART_RxISR_16BIT_FIFOEN+0x288>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f94:	f3ef 8310 	mrs	r3, PRIMASK
 8006f98:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8006f9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006f9c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006fa2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fa4:	f383 8810 	msr	PRIMASK, r3
}
 8006fa8:	46c0      	nop			; (mov r8, r8)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	681a      	ldr	r2, [r3, #0]
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4976      	ldr	r1, [pc, #472]	; (8007190 <UART_RxISR_16BIT_FIFOEN+0x348>)
 8006fb6:	400a      	ands	r2, r1
 8006fb8:	601a      	str	r2, [r3, #0]
 8006fba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fbc:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006fbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006fc0:	f383 8810 	msr	PRIMASK, r3
}
 8006fc4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006fc6:	f3ef 8310 	mrs	r3, PRIMASK
 8006fca:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8006fcc:	6cbb      	ldr	r3, [r7, #72]	; 0x48

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006fce:	66bb      	str	r3, [r7, #104]	; 0x68
 8006fd0:	2301      	movs	r3, #1
 8006fd2:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006fd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fd6:	f383 8810 	msr	PRIMASK, r3
}
 8006fda:	46c0      	nop			; (mov r8, r8)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	689a      	ldr	r2, [r3, #8]
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	496b      	ldr	r1, [pc, #428]	; (8007194 <UART_RxISR_16BIT_FIFOEN+0x34c>)
 8006fe8:	400a      	ands	r2, r1
 8006fea:	609a      	str	r2, [r3, #8]
 8006fec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006fee:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ff0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ff2:	f383 8810 	msr	PRIMASK, r3
}
 8006ff6:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	228c      	movs	r2, #140	; 0x8c
 8006ffc:	2120      	movs	r1, #32
 8006ffe:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2200      	movs	r2, #0
 8007004:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2200      	movs	r2, #0
 800700a:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4a61      	ldr	r2, [pc, #388]	; (8007198 <UART_RxISR_16BIT_FIFOEN+0x350>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d024      	beq.n	8007060 <UART_RxISR_16BIT_FIFOEN+0x218>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4a60      	ldr	r2, [pc, #384]	; (800719c <UART_RxISR_16BIT_FIFOEN+0x354>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d01f      	beq.n	8007060 <UART_RxISR_16BIT_FIFOEN+0x218>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	685a      	ldr	r2, [r3, #4]
 8007026:	2380      	movs	r3, #128	; 0x80
 8007028:	041b      	lsls	r3, r3, #16
 800702a:	4013      	ands	r3, r2
 800702c:	d018      	beq.n	8007060 <UART_RxISR_16BIT_FIFOEN+0x218>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800702e:	f3ef 8310 	mrs	r3, PRIMASK
 8007032:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8007034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007036:	667b      	str	r3, [r7, #100]	; 0x64
 8007038:	2301      	movs	r3, #1
 800703a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800703c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800703e:	f383 8810 	msr	PRIMASK, r3
}
 8007042:	46c0      	nop			; (mov r8, r8)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	681a      	ldr	r2, [r3, #0]
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	4954      	ldr	r1, [pc, #336]	; (80071a0 <UART_RxISR_16BIT_FIFOEN+0x358>)
 8007050:	400a      	ands	r2, r1
 8007052:	601a      	str	r2, [r3, #0]
 8007054:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007056:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800705a:	f383 8810 	msr	PRIMASK, r3
}
 800705e:	46c0      	nop			; (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007064:	2b01      	cmp	r3, #1
 8007066:	d12f      	bne.n	80070c8 <UART_RxISR_16BIT_FIFOEN+0x280>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2200      	movs	r2, #0
 800706c:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800706e:	f3ef 8310 	mrs	r3, PRIMASK
 8007072:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8007074:	6a7b      	ldr	r3, [r7, #36]	; 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007076:	663b      	str	r3, [r7, #96]	; 0x60
 8007078:	2301      	movs	r3, #1
 800707a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800707c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800707e:	f383 8810 	msr	PRIMASK, r3
}
 8007082:	46c0      	nop			; (mov r8, r8)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	681a      	ldr	r2, [r3, #0]
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	2110      	movs	r1, #16
 8007090:	438a      	bics	r2, r1
 8007092:	601a      	str	r2, [r3, #0]
 8007094:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007096:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800709a:	f383 8810 	msr	PRIMASK, r3
}
 800709e:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	69db      	ldr	r3, [r3, #28]
 80070a6:	2210      	movs	r2, #16
 80070a8:	4013      	ands	r3, r2
 80070aa:	2b10      	cmp	r3, #16
 80070ac:	d103      	bne.n	80070b6 <UART_RxISR_16BIT_FIFOEN+0x26e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	2210      	movs	r2, #16
 80070b4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	225c      	movs	r2, #92	; 0x5c
 80070ba:	5a9a      	ldrh	r2, [r3, r2]
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	0011      	movs	r1, r2
 80070c0:	0018      	movs	r0, r3
 80070c2:	f7fe fc49 	bl	8005958 <HAL_UARTEx_RxEventCallback>
 80070c6:	e003      	b.n	80070d0 <UART_RxISR_16BIT_FIFOEN+0x288>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	0018      	movs	r0, r3
 80070cc:	f7fa fb42 	bl	8001754 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80070d0:	2376      	movs	r3, #118	; 0x76
 80070d2:	18fb      	adds	r3, r7, r3
 80070d4:	881b      	ldrh	r3, [r3, #0]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d006      	beq.n	80070e8 <UART_RxISR_16BIT_FIFOEN+0x2a0>
 80070da:	2384      	movs	r3, #132	; 0x84
 80070dc:	18fb      	adds	r3, r7, r3
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	2220      	movs	r2, #32
 80070e2:	4013      	ands	r3, r2
 80070e4:	d000      	beq.n	80070e8 <UART_RxISR_16BIT_FIFOEN+0x2a0>
 80070e6:	e6d4      	b.n	8006e92 <UART_RxISR_16BIT_FIFOEN+0x4a>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80070e8:	205e      	movs	r0, #94	; 0x5e
 80070ea:	183b      	adds	r3, r7, r0
 80070ec:	687a      	ldr	r2, [r7, #4]
 80070ee:	215e      	movs	r1, #94	; 0x5e
 80070f0:	5a52      	ldrh	r2, [r2, r1]
 80070f2:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80070f4:	0001      	movs	r1, r0
 80070f6:	187b      	adds	r3, r7, r1
 80070f8:	881b      	ldrh	r3, [r3, #0]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d044      	beq.n	8007188 <UART_RxISR_16BIT_FIFOEN+0x340>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2268      	movs	r2, #104	; 0x68
 8007102:	5a9b      	ldrh	r3, [r3, r2]
 8007104:	187a      	adds	r2, r7, r1
 8007106:	8812      	ldrh	r2, [r2, #0]
 8007108:	429a      	cmp	r2, r3
 800710a:	d23d      	bcs.n	8007188 <UART_RxISR_16BIT_FIFOEN+0x340>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800710c:	f3ef 8310 	mrs	r3, PRIMASK
 8007110:	60fb      	str	r3, [r7, #12]
  return(result);
 8007112:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007114:	65bb      	str	r3, [r7, #88]	; 0x58
 8007116:	2301      	movs	r3, #1
 8007118:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800711a:	693b      	ldr	r3, [r7, #16]
 800711c:	f383 8810 	msr	PRIMASK, r3
}
 8007120:	46c0      	nop			; (mov r8, r8)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	689a      	ldr	r2, [r3, #8]
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	491d      	ldr	r1, [pc, #116]	; (80071a4 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 800712e:	400a      	ands	r2, r1
 8007130:	609a      	str	r2, [r3, #8]
 8007132:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007134:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007136:	697b      	ldr	r3, [r7, #20]
 8007138:	f383 8810 	msr	PRIMASK, r3
}
 800713c:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	4a19      	ldr	r2, [pc, #100]	; (80071a8 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8007142:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007144:	f3ef 8310 	mrs	r3, PRIMASK
 8007148:	61bb      	str	r3, [r7, #24]
  return(result);
 800714a:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800714c:	657b      	str	r3, [r7, #84]	; 0x54
 800714e:	2301      	movs	r3, #1
 8007150:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007152:	69fb      	ldr	r3, [r7, #28]
 8007154:	f383 8810 	msr	PRIMASK, r3
}
 8007158:	46c0      	nop			; (mov r8, r8)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	681a      	ldr	r2, [r3, #0]
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	2120      	movs	r1, #32
 8007166:	430a      	orrs	r2, r1
 8007168:	601a      	str	r2, [r3, #0]
 800716a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800716c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800716e:	6a3b      	ldr	r3, [r7, #32]
 8007170:	f383 8810 	msr	PRIMASK, r3
}
 8007174:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007176:	e007      	b.n	8007188 <UART_RxISR_16BIT_FIFOEN+0x340>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	699a      	ldr	r2, [r3, #24]
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	2108      	movs	r1, #8
 8007184:	430a      	orrs	r2, r1
 8007186:	619a      	str	r2, [r3, #24]
}
 8007188:	46c0      	nop			; (mov r8, r8)
 800718a:	46bd      	mov	sp, r7
 800718c:	b022      	add	sp, #136	; 0x88
 800718e:	bd80      	pop	{r7, pc}
 8007190:	fffffeff 	.word	0xfffffeff
 8007194:	effffffe 	.word	0xeffffffe
 8007198:	40008000 	.word	0x40008000
 800719c:	40008400 	.word	0x40008400
 80071a0:	fbffffff 	.word	0xfbffffff
 80071a4:	efffffff 	.word	0xefffffff
 80071a8:	08006929 	.word	0x08006929

080071ac <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b082      	sub	sp, #8
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80071b4:	46c0      	nop			; (mov r8, r8)
 80071b6:	46bd      	mov	sp, r7
 80071b8:	b002      	add	sp, #8
 80071ba:	bd80      	pop	{r7, pc}

080071bc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b082      	sub	sp, #8
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80071c4:	46c0      	nop			; (mov r8, r8)
 80071c6:	46bd      	mov	sp, r7
 80071c8:	b002      	add	sp, #8
 80071ca:	bd80      	pop	{r7, pc}

080071cc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b082      	sub	sp, #8
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80071d4:	46c0      	nop			; (mov r8, r8)
 80071d6:	46bd      	mov	sp, r7
 80071d8:	b002      	add	sp, #8
 80071da:	bd80      	pop	{r7, pc}

080071dc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b084      	sub	sp, #16
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2284      	movs	r2, #132	; 0x84
 80071e8:	5c9b      	ldrb	r3, [r3, r2]
 80071ea:	2b01      	cmp	r3, #1
 80071ec:	d101      	bne.n	80071f2 <HAL_UARTEx_DisableFifoMode+0x16>
 80071ee:	2302      	movs	r3, #2
 80071f0:	e027      	b.n	8007242 <HAL_UARTEx_DisableFifoMode+0x66>
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2284      	movs	r2, #132	; 0x84
 80071f6:	2101      	movs	r1, #1
 80071f8:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2288      	movs	r2, #136	; 0x88
 80071fe:	2124      	movs	r1, #36	; 0x24
 8007200:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	681a      	ldr	r2, [r3, #0]
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	2101      	movs	r1, #1
 8007216:	438a      	bics	r2, r1
 8007218:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	4a0b      	ldr	r2, [pc, #44]	; (800724c <HAL_UARTEx_DisableFifoMode+0x70>)
 800721e:	4013      	ands	r3, r2
 8007220:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2200      	movs	r2, #0
 8007226:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	68fa      	ldr	r2, [r7, #12]
 800722e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2288      	movs	r2, #136	; 0x88
 8007234:	2120      	movs	r1, #32
 8007236:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2284      	movs	r2, #132	; 0x84
 800723c:	2100      	movs	r1, #0
 800723e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007240:	2300      	movs	r3, #0
}
 8007242:	0018      	movs	r0, r3
 8007244:	46bd      	mov	sp, r7
 8007246:	b004      	add	sp, #16
 8007248:	bd80      	pop	{r7, pc}
 800724a:	46c0      	nop			; (mov r8, r8)
 800724c:	dfffffff 	.word	0xdfffffff

08007250 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b084      	sub	sp, #16
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
 8007258:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2284      	movs	r2, #132	; 0x84
 800725e:	5c9b      	ldrb	r3, [r3, r2]
 8007260:	2b01      	cmp	r3, #1
 8007262:	d101      	bne.n	8007268 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007264:	2302      	movs	r3, #2
 8007266:	e02e      	b.n	80072c6 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2284      	movs	r2, #132	; 0x84
 800726c:	2101      	movs	r1, #1
 800726e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2288      	movs	r2, #136	; 0x88
 8007274:	2124      	movs	r1, #36	; 0x24
 8007276:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	681a      	ldr	r2, [r3, #0]
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	2101      	movs	r1, #1
 800728c:	438a      	bics	r2, r1
 800728e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	689b      	ldr	r3, [r3, #8]
 8007296:	00db      	lsls	r3, r3, #3
 8007298:	08d9      	lsrs	r1, r3, #3
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	683a      	ldr	r2, [r7, #0]
 80072a0:	430a      	orrs	r2, r1
 80072a2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	0018      	movs	r0, r3
 80072a8:	f000 f854 	bl	8007354 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	68fa      	ldr	r2, [r7, #12]
 80072b2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2288      	movs	r2, #136	; 0x88
 80072b8:	2120      	movs	r1, #32
 80072ba:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2284      	movs	r2, #132	; 0x84
 80072c0:	2100      	movs	r1, #0
 80072c2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80072c4:	2300      	movs	r3, #0
}
 80072c6:	0018      	movs	r0, r3
 80072c8:	46bd      	mov	sp, r7
 80072ca:	b004      	add	sp, #16
 80072cc:	bd80      	pop	{r7, pc}
	...

080072d0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b084      	sub	sp, #16
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
 80072d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2284      	movs	r2, #132	; 0x84
 80072de:	5c9b      	ldrb	r3, [r3, r2]
 80072e0:	2b01      	cmp	r3, #1
 80072e2:	d101      	bne.n	80072e8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80072e4:	2302      	movs	r3, #2
 80072e6:	e02f      	b.n	8007348 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2284      	movs	r2, #132	; 0x84
 80072ec:	2101      	movs	r1, #1
 80072ee:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2288      	movs	r2, #136	; 0x88
 80072f4:	2124      	movs	r1, #36	; 0x24
 80072f6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	681a      	ldr	r2, [r3, #0]
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	2101      	movs	r1, #1
 800730c:	438a      	bics	r2, r1
 800730e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	689b      	ldr	r3, [r3, #8]
 8007316:	4a0e      	ldr	r2, [pc, #56]	; (8007350 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8007318:	4013      	ands	r3, r2
 800731a:	0019      	movs	r1, r3
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	683a      	ldr	r2, [r7, #0]
 8007322:	430a      	orrs	r2, r1
 8007324:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	0018      	movs	r0, r3
 800732a:	f000 f813 	bl	8007354 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	68fa      	ldr	r2, [r7, #12]
 8007334:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2288      	movs	r2, #136	; 0x88
 800733a:	2120      	movs	r1, #32
 800733c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2284      	movs	r2, #132	; 0x84
 8007342:	2100      	movs	r1, #0
 8007344:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007346:	2300      	movs	r3, #0
}
 8007348:	0018      	movs	r0, r3
 800734a:	46bd      	mov	sp, r7
 800734c:	b004      	add	sp, #16
 800734e:	bd80      	pop	{r7, pc}
 8007350:	f1ffffff 	.word	0xf1ffffff

08007354 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007354:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007356:	b085      	sub	sp, #20
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007360:	2b00      	cmp	r3, #0
 8007362:	d108      	bne.n	8007376 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	226a      	movs	r2, #106	; 0x6a
 8007368:	2101      	movs	r1, #1
 800736a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2268      	movs	r2, #104	; 0x68
 8007370:	2101      	movs	r1, #1
 8007372:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007374:	e043      	b.n	80073fe <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007376:	260f      	movs	r6, #15
 8007378:	19bb      	adds	r3, r7, r6
 800737a:	2208      	movs	r2, #8
 800737c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800737e:	200e      	movs	r0, #14
 8007380:	183b      	adds	r3, r7, r0
 8007382:	2208      	movs	r2, #8
 8007384:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	689b      	ldr	r3, [r3, #8]
 800738c:	0e5b      	lsrs	r3, r3, #25
 800738e:	b2da      	uxtb	r2, r3
 8007390:	240d      	movs	r4, #13
 8007392:	193b      	adds	r3, r7, r4
 8007394:	2107      	movs	r1, #7
 8007396:	400a      	ands	r2, r1
 8007398:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	689b      	ldr	r3, [r3, #8]
 80073a0:	0f5b      	lsrs	r3, r3, #29
 80073a2:	b2da      	uxtb	r2, r3
 80073a4:	250c      	movs	r5, #12
 80073a6:	197b      	adds	r3, r7, r5
 80073a8:	2107      	movs	r1, #7
 80073aa:	400a      	ands	r2, r1
 80073ac:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80073ae:	183b      	adds	r3, r7, r0
 80073b0:	781b      	ldrb	r3, [r3, #0]
 80073b2:	197a      	adds	r2, r7, r5
 80073b4:	7812      	ldrb	r2, [r2, #0]
 80073b6:	4914      	ldr	r1, [pc, #80]	; (8007408 <UARTEx_SetNbDataToProcess+0xb4>)
 80073b8:	5c8a      	ldrb	r2, [r1, r2]
 80073ba:	435a      	muls	r2, r3
 80073bc:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80073be:	197b      	adds	r3, r7, r5
 80073c0:	781b      	ldrb	r3, [r3, #0]
 80073c2:	4a12      	ldr	r2, [pc, #72]	; (800740c <UARTEx_SetNbDataToProcess+0xb8>)
 80073c4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80073c6:	0019      	movs	r1, r3
 80073c8:	f7f8 ff38 	bl	800023c <__divsi3>
 80073cc:	0003      	movs	r3, r0
 80073ce:	b299      	uxth	r1, r3
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	226a      	movs	r2, #106	; 0x6a
 80073d4:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80073d6:	19bb      	adds	r3, r7, r6
 80073d8:	781b      	ldrb	r3, [r3, #0]
 80073da:	193a      	adds	r2, r7, r4
 80073dc:	7812      	ldrb	r2, [r2, #0]
 80073de:	490a      	ldr	r1, [pc, #40]	; (8007408 <UARTEx_SetNbDataToProcess+0xb4>)
 80073e0:	5c8a      	ldrb	r2, [r1, r2]
 80073e2:	435a      	muls	r2, r3
 80073e4:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80073e6:	193b      	adds	r3, r7, r4
 80073e8:	781b      	ldrb	r3, [r3, #0]
 80073ea:	4a08      	ldr	r2, [pc, #32]	; (800740c <UARTEx_SetNbDataToProcess+0xb8>)
 80073ec:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80073ee:	0019      	movs	r1, r3
 80073f0:	f7f8 ff24 	bl	800023c <__divsi3>
 80073f4:	0003      	movs	r3, r0
 80073f6:	b299      	uxth	r1, r3
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2268      	movs	r2, #104	; 0x68
 80073fc:	5299      	strh	r1, [r3, r2]
}
 80073fe:	46c0      	nop			; (mov r8, r8)
 8007400:	46bd      	mov	sp, r7
 8007402:	b005      	add	sp, #20
 8007404:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007406:	46c0      	nop			; (mov r8, r8)
 8007408:	0800a6e0 	.word	0x0800a6e0
 800740c:	0800a6e8 	.word	0x0800a6e8

08007410 <astronode_send_cfg_wr>:
                            bool deep_sleep_mode,
                            bool message_ack_event_pin_mask,
                            bool reset_notification_event_pin_mask,
							bool command_available_event_pin_mask,
							bool message_tx_event_pin_mask)
{
 8007410:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007412:	b0e7      	sub	sp, #412	; 0x19c
 8007414:	af00      	add	r7, sp, #0
 8007416:	0005      	movs	r5, r0
 8007418:	000c      	movs	r4, r1
 800741a:	0010      	movs	r0, r2
 800741c:	0019      	movs	r1, r3
 800741e:	4b4b      	ldr	r3, [pc, #300]	; (800754c <astronode_send_cfg_wr+0x13c>)
 8007420:	26cc      	movs	r6, #204	; 0xcc
 8007422:	0076      	lsls	r6, r6, #1
 8007424:	199b      	adds	r3, r3, r6
 8007426:	19db      	adds	r3, r3, r7
 8007428:	1c2a      	adds	r2, r5, #0
 800742a:	701a      	strb	r2, [r3, #0]
 800742c:	4b48      	ldr	r3, [pc, #288]	; (8007550 <astronode_send_cfg_wr+0x140>)
 800742e:	0035      	movs	r5, r6
 8007430:	195b      	adds	r3, r3, r5
 8007432:	19db      	adds	r3, r3, r7
 8007434:	1c22      	adds	r2, r4, #0
 8007436:	701a      	strb	r2, [r3, #0]
 8007438:	4b46      	ldr	r3, [pc, #280]	; (8007554 <astronode_send_cfg_wr+0x144>)
 800743a:	002c      	movs	r4, r5
 800743c:	191b      	adds	r3, r3, r4
 800743e:	19db      	adds	r3, r3, r7
 8007440:	1c02      	adds	r2, r0, #0
 8007442:	701a      	strb	r2, [r3, #0]
 8007444:	4b44      	ldr	r3, [pc, #272]	; (8007558 <astronode_send_cfg_wr+0x148>)
 8007446:	191b      	adds	r3, r3, r4
 8007448:	19db      	adds	r3, r3, r7
 800744a:	1c0a      	adds	r2, r1, #0
 800744c:	701a      	strb	r2, [r3, #0]
    astronode_app_msg_t request = {0};
 800744e:	25d0      	movs	r5, #208	; 0xd0
 8007450:	197b      	adds	r3, r7, r5
 8007452:	0018      	movs	r0, r3
 8007454:	23c6      	movs	r3, #198	; 0xc6
 8007456:	001a      	movs	r2, r3
 8007458:	2100      	movs	r1, #0
 800745a:	f000 ff0d 	bl	8008278 <memset>
    astronode_app_msg_t answer = {0};
 800745e:	4b3f      	ldr	r3, [pc, #252]	; (800755c <astronode_send_cfg_wr+0x14c>)
 8007460:	191b      	adds	r3, r3, r4
 8007462:	19db      	adds	r3, r3, r7
 8007464:	0018      	movs	r0, r3
 8007466:	23c6      	movs	r3, #198	; 0xc6
 8007468:	001a      	movs	r2, r3
 800746a:	2100      	movs	r1, #0
 800746c:	f000 ff04 	bl	8008278 <memset>

    request.op_code = ASTRONODE_OP_CODE_CFG_WR;
 8007470:	0029      	movs	r1, r5
 8007472:	187b      	adds	r3, r7, r1
 8007474:	2205      	movs	r2, #5
 8007476:	701a      	strb	r2, [r3, #0]

    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_CONFIG] = payload_acknowledgment << ASTRONODE_BIT_OFFSET_PAYLOAD_ACK
        | add_geolocation << ASTRONODE_BIT_OFFSET_ADD_GEO
 8007478:	4b34      	ldr	r3, [pc, #208]	; (800754c <astronode_send_cfg_wr+0x13c>)
 800747a:	191b      	adds	r3, r3, r4
 800747c:	19db      	adds	r3, r3, r7
 800747e:	2200      	movs	r2, #0
 8007480:	569a      	ldrsb	r2, [r3, r2]
 8007482:	4b33      	ldr	r3, [pc, #204]	; (8007550 <astronode_send_cfg_wr+0x140>)
 8007484:	191b      	adds	r3, r3, r4
 8007486:	19db      	adds	r3, r3, r7
 8007488:	781b      	ldrb	r3, [r3, #0]
 800748a:	005b      	lsls	r3, r3, #1
 800748c:	b25b      	sxtb	r3, r3
 800748e:	4313      	orrs	r3, r2
 8007490:	b25a      	sxtb	r2, r3
        | enable_ephemeris << ASTRONODE_BIT_OFFSET_ENABLE_EPH
 8007492:	4b30      	ldr	r3, [pc, #192]	; (8007554 <astronode_send_cfg_wr+0x144>)
 8007494:	191b      	adds	r3, r3, r4
 8007496:	19db      	adds	r3, r3, r7
 8007498:	781b      	ldrb	r3, [r3, #0]
 800749a:	009b      	lsls	r3, r3, #2
 800749c:	b25b      	sxtb	r3, r3
 800749e:	4313      	orrs	r3, r2
 80074a0:	b25a      	sxtb	r2, r3
        | deep_sleep_mode << ASTRONODE_BIT_OFFSET_DEEP_SLEEP_MODE;
 80074a2:	4b2d      	ldr	r3, [pc, #180]	; (8007558 <astronode_send_cfg_wr+0x148>)
 80074a4:	191b      	adds	r3, r3, r4
 80074a6:	19db      	adds	r3, r3, r7
 80074a8:	781b      	ldrb	r3, [r3, #0]
 80074aa:	00db      	lsls	r3, r3, #3
 80074ac:	b25b      	sxtb	r3, r3
 80074ae:	4313      	orrs	r3, r2
 80074b0:	b25b      	sxtb	r3, r3
 80074b2:	b2da      	uxtb	r2, r3
    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_CONFIG] = payload_acknowledgment << ASTRONODE_BIT_OFFSET_PAYLOAD_ACK
 80074b4:	187b      	adds	r3, r7, r1
 80074b6:	705a      	strb	r2, [r3, #1]

    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_EVT_PIN_MASK] = message_ack_event_pin_mask << ASTRONODE_BIT_OFFSET_MSG_ACK_EVT_PIN_MASK
        | reset_notification_event_pin_mask << ASTRONODE_BIT_OFFSET_RST_NTF_EVT_PIN_MASK
 80074b8:	23d4      	movs	r3, #212	; 0xd4
 80074ba:	005b      	lsls	r3, r3, #1
 80074bc:	2508      	movs	r5, #8
 80074be:	195b      	adds	r3, r3, r5
 80074c0:	19db      	adds	r3, r3, r7
 80074c2:	2200      	movs	r2, #0
 80074c4:	569a      	ldrsb	r2, [r3, r2]
 80074c6:	23d6      	movs	r3, #214	; 0xd6
 80074c8:	005b      	lsls	r3, r3, #1
 80074ca:	195b      	adds	r3, r3, r5
 80074cc:	19db      	adds	r3, r3, r7
 80074ce:	781b      	ldrb	r3, [r3, #0]
 80074d0:	005b      	lsls	r3, r3, #1
 80074d2:	b25b      	sxtb	r3, r3
 80074d4:	4313      	orrs	r3, r2
 80074d6:	b25a      	sxtb	r2, r3
        | command_available_event_pin_mask << ASTRONODE_BIT_OFFSET_CMD_AVA_EVT_PIN_MASK
 80074d8:	23d8      	movs	r3, #216	; 0xd8
 80074da:	005b      	lsls	r3, r3, #1
 80074dc:	195b      	adds	r3, r3, r5
 80074de:	19db      	adds	r3, r3, r7
 80074e0:	781b      	ldrb	r3, [r3, #0]
 80074e2:	009b      	lsls	r3, r3, #2
 80074e4:	b25b      	sxtb	r3, r3
 80074e6:	4313      	orrs	r3, r2
 80074e8:	b25a      	sxtb	r2, r3
        | message_tx_event_pin_mask << ASTRONODE_BIT_OFFSET_MSG_TXP_EVT_PIN_MASK;
 80074ea:	23da      	movs	r3, #218	; 0xda
 80074ec:	005b      	lsls	r3, r3, #1
 80074ee:	195b      	adds	r3, r3, r5
 80074f0:	19db      	adds	r3, r3, r7
 80074f2:	781b      	ldrb	r3, [r3, #0]
 80074f4:	00db      	lsls	r3, r3, #3
 80074f6:	b25b      	sxtb	r3, r3
 80074f8:	4313      	orrs	r3, r2
 80074fa:	b25b      	sxtb	r3, r3
 80074fc:	b2da      	uxtb	r2, r3
    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_EVT_PIN_MASK] = message_ack_event_pin_mask << ASTRONODE_BIT_OFFSET_MSG_ACK_EVT_PIN_MASK
 80074fe:	187b      	adds	r3, r7, r1
 8007500:	70da      	strb	r2, [r3, #3]

    request.payload_len = 3;
 8007502:	0008      	movs	r0, r1
 8007504:	187b      	adds	r3, r7, r1
 8007506:	22c4      	movs	r2, #196	; 0xc4
 8007508:	2103      	movs	r1, #3
 800750a:	5299      	strh	r1, [r3, r2]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 800750c:	002b      	movs	r3, r5
 800750e:	18fa      	adds	r2, r7, r3
 8007510:	183b      	adds	r3, r7, r0
 8007512:	0011      	movs	r1, r2
 8007514:	0018      	movs	r0, r3
 8007516:	f000 fb33 	bl	8007b80 <astronode_transport_send_receive>
 800751a:	0003      	movs	r3, r0
 800751c:	2b01      	cmp	r3, #1
 800751e:	d10f      	bne.n	8007540 <astronode_send_cfg_wr+0x130>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_CFG_WA)
 8007520:	4b0e      	ldr	r3, [pc, #56]	; (800755c <astronode_send_cfg_wr+0x14c>)
 8007522:	191b      	adds	r3, r3, r4
 8007524:	19db      	adds	r3, r3, r7
 8007526:	781b      	ldrb	r3, [r3, #0]
 8007528:	2b85      	cmp	r3, #133	; 0x85
 800752a:	d105      	bne.n	8007538 <astronode_send_cfg_wr+0x128>
        {
            send_debug_logs("Astronode configuration successfully set.");
 800752c:	4b0c      	ldr	r3, [pc, #48]	; (8007560 <astronode_send_cfg_wr+0x150>)
 800752e:	0018      	movs	r0, r3
 8007530:	f7f9 fe60 	bl	80011f4 <send_debug_logs>
            return true ;
 8007534:	2301      	movs	r3, #1
 8007536:	e004      	b.n	8007542 <astronode_send_cfg_wr+0x132>
        }
        else
        {
            send_debug_logs("Failed to set the Astronode configuration.");
 8007538:	4b0a      	ldr	r3, [pc, #40]	; (8007564 <astronode_send_cfg_wr+0x154>)
 800753a:	0018      	movs	r0, r3
 800753c:	f7f9 fe5a 	bl	80011f4 <send_debug_logs>
        }
    }
    return false ;
 8007540:	2300      	movs	r3, #0
}
 8007542:	0018      	movs	r0, r3
 8007544:	46bd      	mov	sp, r7
 8007546:	b067      	add	sp, #412	; 0x19c
 8007548:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800754a:	46c0      	nop			; (mov r8, r8)
 800754c:	fffffe6f 	.word	0xfffffe6f
 8007550:	fffffe6e 	.word	0xfffffe6e
 8007554:	fffffe6d 	.word	0xfffffe6d
 8007558:	fffffe6c 	.word	0xfffffe6c
 800755c:	fffffe70 	.word	0xfffffe70
 8007560:	08009434 	.word	0x08009434
 8007564:	08009460 	.word	0x08009460

08007568 <astronode_send_mpn_rr>:
        }
    }
}

void astronode_send_mpn_rr(void)
{
 8007568:	b5f0      	push	{r4, r5, r6, r7, lr}
 800756a:	b0ed      	sub	sp, #436	; 0x1b4
 800756c:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 800756e:	21c8      	movs	r1, #200	; 0xc8
 8007570:	2318      	movs	r3, #24
 8007572:	18cb      	adds	r3, r1, r3
 8007574:	19db      	adds	r3, r3, r7
 8007576:	0018      	movs	r0, r3
 8007578:	23c6      	movs	r3, #198	; 0xc6
 800757a:	001a      	movs	r2, r3
 800757c:	2100      	movs	r1, #0
 800757e:	f000 fe7b 	bl	8008278 <memset>
    astronode_app_msg_t answer = {0};
 8007582:	4b4a      	ldr	r3, [pc, #296]	; (80076ac <astronode_send_mpn_rr+0x144>)
 8007584:	26cc      	movs	r6, #204	; 0xcc
 8007586:	0076      	lsls	r6, r6, #1
 8007588:	199b      	adds	r3, r3, r6
 800758a:	2218      	movs	r2, #24
 800758c:	4694      	mov	ip, r2
 800758e:	44bc      	add	ip, r7
 8007590:	4463      	add	r3, ip
 8007592:	0018      	movs	r0, r3
 8007594:	23c6      	movs	r3, #198	; 0xc6
 8007596:	001a      	movs	r2, r3
 8007598:	2100      	movs	r1, #0
 800759a:	f000 fe6d 	bl	8008278 <memset>

    request.op_code = ASTRONODE_OP_CODE_MPN_RR;
 800759e:	21c8      	movs	r1, #200	; 0xc8
 80075a0:	2318      	movs	r3, #24
 80075a2:	18cb      	adds	r3, r1, r3
 80075a4:	19db      	adds	r3, r3, r7
 80075a6:	221b      	movs	r2, #27
 80075a8:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 80075aa:	2318      	movs	r3, #24
 80075ac:	18fa      	adds	r2, r7, r3
 80075ae:	2318      	movs	r3, #24
 80075b0:	18cb      	adds	r3, r1, r3
 80075b2:	19db      	adds	r3, r3, r7
 80075b4:	0011      	movs	r1, r2
 80075b6:	0018      	movs	r0, r3
 80075b8:	f000 fae2 	bl	8007b80 <astronode_transport_send_receive>
 80075bc:	0003      	movs	r3, r0
 80075be:	2b01      	cmp	r3, #1
 80075c0:	d16f      	bne.n	80076a2 <astronode_send_mpn_rr+0x13a>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_MPN_RA)
 80075c2:	4b3a      	ldr	r3, [pc, #232]	; (80076ac <astronode_send_mpn_rr+0x144>)
 80075c4:	0032      	movs	r2, r6
 80075c6:	189b      	adds	r3, r3, r2
 80075c8:	2118      	movs	r1, #24
 80075ca:	468c      	mov	ip, r1
 80075cc:	44bc      	add	ip, r7
 80075ce:	4463      	add	r3, ip
 80075d0:	781b      	ldrb	r3, [r3, #0]
 80075d2:	2b9b      	cmp	r3, #155	; 0x9b
 80075d4:	d161      	bne.n	800769a <astronode_send_mpn_rr+0x132>
        {
 80075d6:	466b      	mov	r3, sp
 80075d8:	001e      	movs	r6, r3
            char product_number[answer.payload_len];
 80075da:	4b34      	ldr	r3, [pc, #208]	; (80076ac <astronode_send_mpn_rr+0x144>)
 80075dc:	189b      	adds	r3, r3, r2
 80075de:	2218      	movs	r2, #24
 80075e0:	4694      	mov	ip, r2
 80075e2:	44bc      	add	ip, r7
 80075e4:	4463      	add	r3, ip
 80075e6:	22c4      	movs	r2, #196	; 0xc4
 80075e8:	5a9b      	ldrh	r3, [r3, r2]
 80075ea:	001a      	movs	r2, r3
 80075ec:	3a01      	subs	r2, #1
 80075ee:	21ca      	movs	r1, #202	; 0xca
 80075f0:	0049      	lsls	r1, r1, #1
 80075f2:	2018      	movs	r0, #24
 80075f4:	1809      	adds	r1, r1, r0
 80075f6:	19c9      	adds	r1, r1, r7
 80075f8:	600a      	str	r2, [r1, #0]
 80075fa:	001c      	movs	r4, r3
 80075fc:	2200      	movs	r2, #0
 80075fe:	0015      	movs	r5, r2
 8007600:	0020      	movs	r0, r4
 8007602:	0029      	movs	r1, r5
 8007604:	0004      	movs	r4, r0
 8007606:	0f62      	lsrs	r2, r4, #29
 8007608:	000c      	movs	r4, r1
 800760a:	00e4      	lsls	r4, r4, #3
 800760c:	617c      	str	r4, [r7, #20]
 800760e:	697c      	ldr	r4, [r7, #20]
 8007610:	4314      	orrs	r4, r2
 8007612:	617c      	str	r4, [r7, #20]
 8007614:	0001      	movs	r1, r0
 8007616:	00c9      	lsls	r1, r1, #3
 8007618:	6139      	str	r1, [r7, #16]
 800761a:	603b      	str	r3, [r7, #0]
 800761c:	2200      	movs	r2, #0
 800761e:	607a      	str	r2, [r7, #4]
 8007620:	6838      	ldr	r0, [r7, #0]
 8007622:	6879      	ldr	r1, [r7, #4]
 8007624:	0004      	movs	r4, r0
 8007626:	0f62      	lsrs	r2, r4, #29
 8007628:	000c      	movs	r4, r1
 800762a:	00e4      	lsls	r4, r4, #3
 800762c:	60fc      	str	r4, [r7, #12]
 800762e:	68fc      	ldr	r4, [r7, #12]
 8007630:	4314      	orrs	r4, r2
 8007632:	60fc      	str	r4, [r7, #12]
 8007634:	0001      	movs	r1, r0
 8007636:	00ca      	lsls	r2, r1, #3
 8007638:	60ba      	str	r2, [r7, #8]
 800763a:	3307      	adds	r3, #7
 800763c:	08db      	lsrs	r3, r3, #3
 800763e:	00db      	lsls	r3, r3, #3
 8007640:	4669      	mov	r1, sp
 8007642:	1acb      	subs	r3, r1, r3
 8007644:	469d      	mov	sp, r3
 8007646:	466b      	mov	r3, sp
 8007648:	3300      	adds	r3, #0
 800764a:	24c8      	movs	r4, #200	; 0xc8
 800764c:	0064      	lsls	r4, r4, #1
 800764e:	2218      	movs	r2, #24
 8007650:	18a2      	adds	r2, r4, r2
 8007652:	19d1      	adds	r1, r2, r7
 8007654:	600b      	str	r3, [r1, #0]
            send_debug_logs("Module's product number is:");
 8007656:	4b16      	ldr	r3, [pc, #88]	; (80076b0 <astronode_send_mpn_rr+0x148>)
 8007658:	0018      	movs	r0, r3
 800765a:	f7f9 fdcb 	bl	80011f4 <send_debug_logs>
            snprintf(product_number, answer.payload_len, "%s", answer.p_payload);
 800765e:	4b13      	ldr	r3, [pc, #76]	; (80076ac <astronode_send_mpn_rr+0x144>)
 8007660:	22cc      	movs	r2, #204	; 0xcc
 8007662:	0052      	lsls	r2, r2, #1
 8007664:	189b      	adds	r3, r3, r2
 8007666:	2218      	movs	r2, #24
 8007668:	4694      	mov	ip, r2
 800766a:	44bc      	add	ip, r7
 800766c:	4463      	add	r3, ip
 800766e:	22c4      	movs	r2, #196	; 0xc4
 8007670:	5a9b      	ldrh	r3, [r3, r2]
 8007672:	0019      	movs	r1, r3
 8007674:	2318      	movs	r3, #24
 8007676:	18fb      	adds	r3, r7, r3
 8007678:	3301      	adds	r3, #1
 800767a:	4a0e      	ldr	r2, [pc, #56]	; (80076b4 <astronode_send_mpn_rr+0x14c>)
 800767c:	2018      	movs	r0, #24
 800767e:	1820      	adds	r0, r4, r0
 8007680:	19c0      	adds	r0, r0, r7
 8007682:	6800      	ldr	r0, [r0, #0]
 8007684:	f000 fda4 	bl	80081d0 <sniprintf>
            send_debug_logs(product_number);
 8007688:	2318      	movs	r3, #24
 800768a:	18e3      	adds	r3, r4, r3
 800768c:	19db      	adds	r3, r3, r7
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	0018      	movs	r0, r3
 8007692:	f7f9 fdaf 	bl	80011f4 <send_debug_logs>
 8007696:	46b5      	mov	sp, r6
        else
        {
            send_debug_logs("Failed to read module Serial Number.");
        }
    }
}
 8007698:	e003      	b.n	80076a2 <astronode_send_mpn_rr+0x13a>
            send_debug_logs("Failed to read module Serial Number.");
 800769a:	4b07      	ldr	r3, [pc, #28]	; (80076b8 <astronode_send_mpn_rr+0x150>)
 800769c:	0018      	movs	r0, r3
 800769e:	f7f9 fda9 	bl	80011f4 <send_debug_logs>
}
 80076a2:	46c0      	nop			; (mov r8, r8)
 80076a4:	46bd      	mov	sp, r7
 80076a6:	b06d      	add	sp, #436	; 0x1b4
 80076a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80076aa:	46c0      	nop			; (mov r8, r8)
 80076ac:	fffffe68 	.word	0xfffffe68
 80076b0:	080099c4 	.word	0x080099c4
 80076b4:	080094fc 	.word	0x080094fc
 80076b8:	08009538 	.word	0x08009538

080076bc <ascii_to_value>:

//------------------------------------------------------------------------------
// Function definitions
//------------------------------------------------------------------------------
static bool ascii_to_value(const uint8_t ascii, uint8_t *p_value)
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b082      	sub	sp, #8
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	0002      	movs	r2, r0
 80076c4:	6039      	str	r1, [r7, #0]
 80076c6:	1dfb      	adds	r3, r7, #7
 80076c8:	701a      	strb	r2, [r3, #0]
    if (ascii >= '0' && ascii <= '9')
 80076ca:	1dfb      	adds	r3, r7, #7
 80076cc:	781b      	ldrb	r3, [r3, #0]
 80076ce:	2b2f      	cmp	r3, #47	; 0x2f
 80076d0:	d90b      	bls.n	80076ea <ascii_to_value+0x2e>
 80076d2:	1dfb      	adds	r3, r7, #7
 80076d4:	781b      	ldrb	r3, [r3, #0]
 80076d6:	2b39      	cmp	r3, #57	; 0x39
 80076d8:	d807      	bhi.n	80076ea <ascii_to_value+0x2e>
    {
        *p_value = ascii - '0';
 80076da:	1dfb      	adds	r3, r7, #7
 80076dc:	781b      	ldrb	r3, [r3, #0]
 80076de:	3b30      	subs	r3, #48	; 0x30
 80076e0:	b2da      	uxtb	r2, r3
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	701a      	strb	r2, [r3, #0]
        return true;
 80076e6:	2301      	movs	r3, #1
 80076e8:	e010      	b.n	800770c <ascii_to_value+0x50>
    }
    else if (ascii >= 'A' && ascii <= 'F')
 80076ea:	1dfb      	adds	r3, r7, #7
 80076ec:	781b      	ldrb	r3, [r3, #0]
 80076ee:	2b40      	cmp	r3, #64	; 0x40
 80076f0:	d90b      	bls.n	800770a <ascii_to_value+0x4e>
 80076f2:	1dfb      	adds	r3, r7, #7
 80076f4:	781b      	ldrb	r3, [r3, #0]
 80076f6:	2b46      	cmp	r3, #70	; 0x46
 80076f8:	d807      	bhi.n	800770a <ascii_to_value+0x4e>
    {
        *p_value = ascii - 'A' + 10;
 80076fa:	1dfb      	adds	r3, r7, #7
 80076fc:	781b      	ldrb	r3, [r3, #0]
 80076fe:	3b37      	subs	r3, #55	; 0x37
 8007700:	b2da      	uxtb	r2, r3
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	701a      	strb	r2, [r3, #0]
        return true;
 8007706:	2301      	movs	r3, #1
 8007708:	e000      	b.n	800770c <ascii_to_value+0x50>
    }
    else
    {
        return false;
 800770a:	2300      	movs	r3, #0
    }
}
 800770c:	0018      	movs	r0, r3
 800770e:	46bd      	mov	sp, r7
 8007710:	b002      	add	sp, #8
 8007712:	bd80      	pop	{r7, pc}

08007714 <astronode_create_request_transport>:

static uint16_t astronode_create_request_transport(astronode_app_msg_t *p_source_message, uint8_t *p_destination_buffer)
{
 8007714:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007716:	b085      	sub	sp, #20
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
 800771c:	6039      	str	r1, [r7, #0]
    uint16_t index = 0;
 800771e:	250e      	movs	r5, #14
 8007720:	197b      	adds	r3, r7, r5
 8007722:	2200      	movs	r2, #0
 8007724:	801a      	strh	r2, [r3, #0]

    p_destination_buffer[index++] = ASTRONODE_TRANSPORT_STX;
 8007726:	197b      	adds	r3, r7, r5
 8007728:	881b      	ldrh	r3, [r3, #0]
 800772a:	197a      	adds	r2, r7, r5
 800772c:	1c59      	adds	r1, r3, #1
 800772e:	8011      	strh	r1, [r2, #0]
 8007730:	001a      	movs	r2, r3
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	189b      	adds	r3, r3, r2
 8007736:	2202      	movs	r2, #2
 8007738:	701a      	strb	r2, [r3, #0]

    uint16_t crc = calculate_crc((const uint8_t *)&p_source_message->op_code, 1, 0xFFFF);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	260a      	movs	r6, #10
 800773e:	19bc      	adds	r4, r7, r6
 8007740:	4a44      	ldr	r2, [pc, #272]	; (8007854 <astronode_create_request_transport+0x140>)
 8007742:	2101      	movs	r1, #1
 8007744:	0018      	movs	r0, r3
 8007746:	f000 fa7d 	bl	8007c44 <calculate_crc>
 800774a:	0003      	movs	r3, r0
 800774c:	8023      	strh	r3, [r4, #0]
    crc = calculate_crc((const uint8_t *)&p_source_message->p_payload, p_source_message->payload_len, crc);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	1c58      	adds	r0, r3, #1
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	22c4      	movs	r2, #196	; 0xc4
 8007756:	5a99      	ldrh	r1, [r3, r2]
 8007758:	19bc      	adds	r4, r7, r6
 800775a:	19bb      	adds	r3, r7, r6
 800775c:	881b      	ldrh	r3, [r3, #0]
 800775e:	001a      	movs	r2, r3
 8007760:	f000 fa70 	bl	8007c44 <calculate_crc>
 8007764:	0003      	movs	r3, r0
 8007766:	8023      	strh	r3, [r4, #0]
    crc = ((crc << 8) & 0xff00) | ((crc >> 8) & 0x00ff);
 8007768:	19bb      	adds	r3, r7, r6
 800776a:	881b      	ldrh	r3, [r3, #0]
 800776c:	021b      	lsls	r3, r3, #8
 800776e:	b21a      	sxth	r2, r3
 8007770:	0031      	movs	r1, r6
 8007772:	19bb      	adds	r3, r7, r6
 8007774:	881b      	ldrh	r3, [r3, #0]
 8007776:	0a1b      	lsrs	r3, r3, #8
 8007778:	b29b      	uxth	r3, r3
 800777a:	b21b      	sxth	r3, r3
 800777c:	4313      	orrs	r3, r2
 800777e:	b21a      	sxth	r2, r3
 8007780:	187b      	adds	r3, r7, r1
 8007782:	801a      	strh	r2, [r3, #0]

    uint8_to_ascii_buffer(p_source_message->op_code, &p_destination_buffer[index]);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	7818      	ldrb	r0, [r3, #0]
 8007788:	197b      	adds	r3, r7, r5
 800778a:	881b      	ldrh	r3, [r3, #0]
 800778c:	683a      	ldr	r2, [r7, #0]
 800778e:	18d3      	adds	r3, r2, r3
 8007790:	0019      	movs	r1, r3
 8007792:	f000 fbeb 	bl	8007f6c <uint8_to_ascii_buffer>
    index += 2;
 8007796:	197b      	adds	r3, r7, r5
 8007798:	197a      	adds	r2, r7, r5
 800779a:	8812      	ldrh	r2, [r2, #0]
 800779c:	3202      	adds	r2, #2
 800779e:	801a      	strh	r2, [r3, #0]

    for (uint16_t i = 0; i < p_source_message->payload_len; i++)
 80077a0:	230c      	movs	r3, #12
 80077a2:	18fb      	adds	r3, r7, r3
 80077a4:	2200      	movs	r2, #0
 80077a6:	801a      	strh	r2, [r3, #0]
 80077a8:	e017      	b.n	80077da <astronode_create_request_transport+0xc6>
    {
        uint8_to_ascii_buffer(p_source_message->p_payload[i], &p_destination_buffer[index]);
 80077aa:	240c      	movs	r4, #12
 80077ac:	193b      	adds	r3, r7, r4
 80077ae:	881b      	ldrh	r3, [r3, #0]
 80077b0:	687a      	ldr	r2, [r7, #4]
 80077b2:	18d3      	adds	r3, r2, r3
 80077b4:	7858      	ldrb	r0, [r3, #1]
 80077b6:	250e      	movs	r5, #14
 80077b8:	197b      	adds	r3, r7, r5
 80077ba:	881b      	ldrh	r3, [r3, #0]
 80077bc:	683a      	ldr	r2, [r7, #0]
 80077be:	18d3      	adds	r3, r2, r3
 80077c0:	0019      	movs	r1, r3
 80077c2:	f000 fbd3 	bl	8007f6c <uint8_to_ascii_buffer>
        index += 2;
 80077c6:	197b      	adds	r3, r7, r5
 80077c8:	197a      	adds	r2, r7, r5
 80077ca:	8812      	ldrh	r2, [r2, #0]
 80077cc:	3202      	adds	r2, #2
 80077ce:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < p_source_message->payload_len; i++)
 80077d0:	193b      	adds	r3, r7, r4
 80077d2:	881a      	ldrh	r2, [r3, #0]
 80077d4:	193b      	adds	r3, r7, r4
 80077d6:	3201      	adds	r2, #1
 80077d8:	801a      	strh	r2, [r3, #0]
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	22c4      	movs	r2, #196	; 0xc4
 80077de:	5a9b      	ldrh	r3, [r3, r2]
 80077e0:	220c      	movs	r2, #12
 80077e2:	18ba      	adds	r2, r7, r2
 80077e4:	8812      	ldrh	r2, [r2, #0]
 80077e6:	429a      	cmp	r2, r3
 80077e8:	d3df      	bcc.n	80077aa <astronode_create_request_transport+0x96>
    }

    uint8_to_ascii_buffer(crc >> 8, &p_destination_buffer[index]);
 80077ea:	250a      	movs	r5, #10
 80077ec:	197b      	adds	r3, r7, r5
 80077ee:	881b      	ldrh	r3, [r3, #0]
 80077f0:	0a1b      	lsrs	r3, r3, #8
 80077f2:	b29b      	uxth	r3, r3
 80077f4:	b2d8      	uxtb	r0, r3
 80077f6:	240e      	movs	r4, #14
 80077f8:	193b      	adds	r3, r7, r4
 80077fa:	881b      	ldrh	r3, [r3, #0]
 80077fc:	683a      	ldr	r2, [r7, #0]
 80077fe:	18d3      	adds	r3, r2, r3
 8007800:	0019      	movs	r1, r3
 8007802:	f000 fbb3 	bl	8007f6c <uint8_to_ascii_buffer>
    index += 2;
 8007806:	0021      	movs	r1, r4
 8007808:	187b      	adds	r3, r7, r1
 800780a:	187a      	adds	r2, r7, r1
 800780c:	8812      	ldrh	r2, [r2, #0]
 800780e:	3202      	adds	r2, #2
 8007810:	801a      	strh	r2, [r3, #0]
    uint8_to_ascii_buffer(crc & 0xFF, &p_destination_buffer[index]);
 8007812:	197b      	adds	r3, r7, r5
 8007814:	881b      	ldrh	r3, [r3, #0]
 8007816:	b2d8      	uxtb	r0, r3
 8007818:	000c      	movs	r4, r1
 800781a:	187b      	adds	r3, r7, r1
 800781c:	881b      	ldrh	r3, [r3, #0]
 800781e:	683a      	ldr	r2, [r7, #0]
 8007820:	18d3      	adds	r3, r2, r3
 8007822:	0019      	movs	r1, r3
 8007824:	f000 fba2 	bl	8007f6c <uint8_to_ascii_buffer>
    index += 2;
 8007828:	0020      	movs	r0, r4
 800782a:	183b      	adds	r3, r7, r0
 800782c:	183a      	adds	r2, r7, r0
 800782e:	8812      	ldrh	r2, [r2, #0]
 8007830:	3202      	adds	r2, #2
 8007832:	801a      	strh	r2, [r3, #0]

    p_destination_buffer[index++] = ASTRONODE_TRANSPORT_ETX;
 8007834:	183b      	adds	r3, r7, r0
 8007836:	881b      	ldrh	r3, [r3, #0]
 8007838:	183a      	adds	r2, r7, r0
 800783a:	1c59      	adds	r1, r3, #1
 800783c:	8011      	strh	r1, [r2, #0]
 800783e:	001a      	movs	r2, r3
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	189b      	adds	r3, r3, r2
 8007844:	2203      	movs	r2, #3
 8007846:	701a      	strb	r2, [r3, #0]

    return index;
 8007848:	183b      	adds	r3, r7, r0
 800784a:	881b      	ldrh	r3, [r3, #0]
}
 800784c:	0018      	movs	r0, r3
 800784e:	46bd      	mov	sp, r7
 8007850:	b005      	add	sp, #20
 8007852:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007854:	0000ffff 	.word	0x0000ffff

08007858 <astronode_decode_answer_transport>:

static return_status_t astronode_decode_answer_transport(uint8_t *p_source_buffer, uint16_t length_buffer, astronode_app_msg_t *p_destination_message)
{
 8007858:	b5f0      	push	{r4, r5, r6, r7, lr}
 800785a:	b089      	sub	sp, #36	; 0x24
 800785c:	af00      	add	r7, sp, #0
 800785e:	60f8      	str	r0, [r7, #12]
 8007860:	607a      	str	r2, [r7, #4]
 8007862:	230a      	movs	r3, #10
 8007864:	18fb      	adds	r3, r7, r3
 8007866:	1c0a      	adds	r2, r1, #0
 8007868:	801a      	strh	r2, [r3, #0]
    if (p_source_buffer[0] != ASTRONODE_TRANSPORT_STX)
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	781b      	ldrb	r3, [r3, #0]
 800786e:	2b02      	cmp	r3, #2
 8007870:	d005      	beq.n	800787e <astronode_decode_answer_transport+0x26>
    {
        send_debug_logs("ERROR : Message received from the Astronode does not start with STX character.");
 8007872:	4bbd      	ldr	r3, [pc, #756]	; (8007b68 <astronode_decode_answer_transport+0x310>)
 8007874:	0018      	movs	r0, r3
 8007876:	f7f9 fcbd 	bl	80011f4 <send_debug_logs>
        return RS_FAILURE;
 800787a:	2300      	movs	r3, #0
 800787c:	e170      	b.n	8007b60 <astronode_decode_answer_transport+0x308>
    }

    if (length_buffer % 2 == 1 || length_buffer < 8) // 8: STX, ETX, 2 x opcode, 4 x CRC
 800787e:	210a      	movs	r1, #10
 8007880:	187b      	adds	r3, r7, r1
 8007882:	881b      	ldrh	r3, [r3, #0]
 8007884:	2201      	movs	r2, #1
 8007886:	4013      	ands	r3, r2
 8007888:	b29b      	uxth	r3, r3
 800788a:	2b00      	cmp	r3, #0
 800788c:	d103      	bne.n	8007896 <astronode_decode_answer_transport+0x3e>
 800788e:	187b      	adds	r3, r7, r1
 8007890:	881b      	ldrh	r3, [r3, #0]
 8007892:	2b07      	cmp	r3, #7
 8007894:	d805      	bhi.n	80078a2 <astronode_decode_answer_transport+0x4a>
    {
        send_debug_logs("ERROR : Message received from the Astronode is missing at least one character.");
 8007896:	4bb5      	ldr	r3, [pc, #724]	; (8007b6c <astronode_decode_answer_transport+0x314>)
 8007898:	0018      	movs	r0, r3
 800789a:	f7f9 fcab 	bl	80011f4 <send_debug_logs>
        return RS_FAILURE;
 800789e:	2300      	movs	r3, #0
 80078a0:	e15e      	b.n	8007b60 <astronode_decode_answer_transport+0x308>
    }

    p_destination_message->payload_len = (length_buffer - 8) / 2;
 80078a2:	230a      	movs	r3, #10
 80078a4:	18fb      	adds	r3, r7, r3
 80078a6:	881b      	ldrh	r3, [r3, #0]
 80078a8:	3b08      	subs	r3, #8
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	da00      	bge.n	80078b0 <astronode_decode_answer_transport+0x58>
 80078ae:	3301      	adds	r3, #1
 80078b0:	105b      	asrs	r3, r3, #1
 80078b2:	b299      	uxth	r1, r3
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	22c4      	movs	r2, #196	; 0xc4
 80078b8:	5299      	strh	r1, [r3, r2]

    if (p_source_buffer[length_buffer - 1] != ASTRONODE_TRANSPORT_ETX)
 80078ba:	230a      	movs	r3, #10
 80078bc:	18fb      	adds	r3, r7, r3
 80078be:	881b      	ldrh	r3, [r3, #0]
 80078c0:	3b01      	subs	r3, #1
 80078c2:	68fa      	ldr	r2, [r7, #12]
 80078c4:	18d3      	adds	r3, r2, r3
 80078c6:	781b      	ldrb	r3, [r3, #0]
 80078c8:	2b03      	cmp	r3, #3
 80078ca:	d005      	beq.n	80078d8 <astronode_decode_answer_transport+0x80>
    {
        send_debug_logs("ERROR : Message received from the Astronode does not end with ETX character.");
 80078cc:	4ba8      	ldr	r3, [pc, #672]	; (8007b70 <astronode_decode_answer_transport+0x318>)
 80078ce:	0018      	movs	r0, r3
 80078d0:	f7f9 fc90 	bl	80011f4 <send_debug_logs>
        return RS_FAILURE;
 80078d4:	2300      	movs	r3, #0
 80078d6:	e143      	b.n	8007b60 <astronode_decode_answer_transport+0x308>
    }

    uint8_t nibble_high = 0;
 80078d8:	2117      	movs	r1, #23
 80078da:	187b      	adds	r3, r7, r1
 80078dc:	2200      	movs	r2, #0
 80078de:	701a      	strb	r2, [r3, #0]
    uint8_t nibble_low = 0;
 80078e0:	2416      	movs	r4, #22
 80078e2:	193b      	adds	r3, r7, r4
 80078e4:	2200      	movs	r2, #0
 80078e6:	701a      	strb	r2, [r3, #0]

    // Op code
    if (ascii_to_value(p_source_buffer[1], &nibble_high) == false
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	3301      	adds	r3, #1
 80078ec:	781b      	ldrb	r3, [r3, #0]
 80078ee:	187a      	adds	r2, r7, r1
 80078f0:	0011      	movs	r1, r2
 80078f2:	0018      	movs	r0, r3
 80078f4:	f7ff fee2 	bl	80076bc <ascii_to_value>
 80078f8:	0003      	movs	r3, r0
 80078fa:	001a      	movs	r2, r3
 80078fc:	2301      	movs	r3, #1
 80078fe:	4053      	eors	r3, r2
 8007900:	b2db      	uxtb	r3, r3
 8007902:	2b00      	cmp	r3, #0
 8007904:	d10e      	bne.n	8007924 <astronode_decode_answer_transport+0xcc>
        || ascii_to_value(p_source_buffer[2], &nibble_low) == false)
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	3302      	adds	r3, #2
 800790a:	781b      	ldrb	r3, [r3, #0]
 800790c:	193a      	adds	r2, r7, r4
 800790e:	0011      	movs	r1, r2
 8007910:	0018      	movs	r0, r3
 8007912:	f7ff fed3 	bl	80076bc <ascii_to_value>
 8007916:	0003      	movs	r3, r0
 8007918:	001a      	movs	r2, r3
 800791a:	2301      	movs	r3, #1
 800791c:	4053      	eors	r3, r2
 800791e:	b2db      	uxtb	r3, r3
 8007920:	2b00      	cmp	r3, #0
 8007922:	d005      	beq.n	8007930 <astronode_decode_answer_transport+0xd8>
    {
        send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 8007924:	4b93      	ldr	r3, [pc, #588]	; (8007b74 <astronode_decode_answer_transport+0x31c>)
 8007926:	0018      	movs	r0, r3
 8007928:	f7f9 fc64 	bl	80011f4 <send_debug_logs>
        return RS_FAILURE;
 800792c:	2300      	movs	r3, #0
 800792e:	e117      	b.n	8007b60 <astronode_decode_answer_transport+0x308>
    }

    p_destination_message->op_code = (nibble_high << 4) + nibble_low;
 8007930:	2317      	movs	r3, #23
 8007932:	18fb      	adds	r3, r7, r3
 8007934:	781b      	ldrb	r3, [r3, #0]
 8007936:	011b      	lsls	r3, r3, #4
 8007938:	b2da      	uxtb	r2, r3
 800793a:	2316      	movs	r3, #22
 800793c:	18fb      	adds	r3, r7, r3
 800793e:	781b      	ldrb	r3, [r3, #0]
 8007940:	18d3      	adds	r3, r2, r3
 8007942:	b2da      	uxtb	r2, r3
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	701a      	strb	r2, [r3, #0]

    // Payload
    for (uint16_t i = 3, j = 0; i < length_buffer - 5; i += 2)
 8007948:	231e      	movs	r3, #30
 800794a:	18fb      	adds	r3, r7, r3
 800794c:	2203      	movs	r2, #3
 800794e:	801a      	strh	r2, [r3, #0]
 8007950:	231c      	movs	r3, #28
 8007952:	18fb      	adds	r3, r7, r3
 8007954:	2200      	movs	r2, #0
 8007956:	801a      	strh	r2, [r3, #0]
 8007958:	e045      	b.n	80079e6 <astronode_decode_answer_transport+0x18e>
    {
        if (ascii_to_value(p_source_buffer[i], &nibble_high) == false
 800795a:	241e      	movs	r4, #30
 800795c:	193b      	adds	r3, r7, r4
 800795e:	881b      	ldrh	r3, [r3, #0]
 8007960:	68fa      	ldr	r2, [r7, #12]
 8007962:	18d3      	adds	r3, r2, r3
 8007964:	781b      	ldrb	r3, [r3, #0]
 8007966:	2217      	movs	r2, #23
 8007968:	18ba      	adds	r2, r7, r2
 800796a:	0011      	movs	r1, r2
 800796c:	0018      	movs	r0, r3
 800796e:	f7ff fea5 	bl	80076bc <ascii_to_value>
 8007972:	0003      	movs	r3, r0
 8007974:	001a      	movs	r2, r3
 8007976:	2301      	movs	r3, #1
 8007978:	4053      	eors	r3, r2
 800797a:	b2db      	uxtb	r3, r3
 800797c:	2b00      	cmp	r3, #0
 800797e:	d112      	bne.n	80079a6 <astronode_decode_answer_transport+0x14e>
            || ascii_to_value(p_source_buffer[i + 1], &nibble_low) == false)
 8007980:	193b      	adds	r3, r7, r4
 8007982:	881b      	ldrh	r3, [r3, #0]
 8007984:	3301      	adds	r3, #1
 8007986:	68fa      	ldr	r2, [r7, #12]
 8007988:	18d3      	adds	r3, r2, r3
 800798a:	781b      	ldrb	r3, [r3, #0]
 800798c:	2216      	movs	r2, #22
 800798e:	18ba      	adds	r2, r7, r2
 8007990:	0011      	movs	r1, r2
 8007992:	0018      	movs	r0, r3
 8007994:	f7ff fe92 	bl	80076bc <ascii_to_value>
 8007998:	0003      	movs	r3, r0
 800799a:	001a      	movs	r2, r3
 800799c:	2301      	movs	r3, #1
 800799e:	4053      	eors	r3, r2
 80079a0:	b2db      	uxtb	r3, r3
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d005      	beq.n	80079b2 <astronode_decode_answer_transport+0x15a>
        {
            send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 80079a6:	4b73      	ldr	r3, [pc, #460]	; (8007b74 <astronode_decode_answer_transport+0x31c>)
 80079a8:	0018      	movs	r0, r3
 80079aa:	f7f9 fc23 	bl	80011f4 <send_debug_logs>
            return RS_FAILURE;
 80079ae:	2300      	movs	r3, #0
 80079b0:	e0d6      	b.n	8007b60 <astronode_decode_answer_transport+0x308>
        }

        p_destination_message->p_payload[j++] = (nibble_high << 4) + nibble_low;
 80079b2:	2317      	movs	r3, #23
 80079b4:	18fb      	adds	r3, r7, r3
 80079b6:	781b      	ldrb	r3, [r3, #0]
 80079b8:	011b      	lsls	r3, r3, #4
 80079ba:	b2d9      	uxtb	r1, r3
 80079bc:	2316      	movs	r3, #22
 80079be:	18fb      	adds	r3, r7, r3
 80079c0:	781a      	ldrb	r2, [r3, #0]
 80079c2:	201c      	movs	r0, #28
 80079c4:	183b      	adds	r3, r7, r0
 80079c6:	881b      	ldrh	r3, [r3, #0]
 80079c8:	1838      	adds	r0, r7, r0
 80079ca:	1c5c      	adds	r4, r3, #1
 80079cc:	8004      	strh	r4, [r0, #0]
 80079ce:	0018      	movs	r0, r3
 80079d0:	188b      	adds	r3, r1, r2
 80079d2:	b2da      	uxtb	r2, r3
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	181b      	adds	r3, r3, r0
 80079d8:	705a      	strb	r2, [r3, #1]
    for (uint16_t i = 3, j = 0; i < length_buffer - 5; i += 2)
 80079da:	221e      	movs	r2, #30
 80079dc:	18bb      	adds	r3, r7, r2
 80079de:	18ba      	adds	r2, r7, r2
 80079e0:	8812      	ldrh	r2, [r2, #0]
 80079e2:	3202      	adds	r2, #2
 80079e4:	801a      	strh	r2, [r3, #0]
 80079e6:	231e      	movs	r3, #30
 80079e8:	18fb      	adds	r3, r7, r3
 80079ea:	881a      	ldrh	r2, [r3, #0]
 80079ec:	260a      	movs	r6, #10
 80079ee:	19bb      	adds	r3, r7, r6
 80079f0:	881b      	ldrh	r3, [r3, #0]
 80079f2:	3b05      	subs	r3, #5
 80079f4:	429a      	cmp	r2, r3
 80079f6:	dbb0      	blt.n	800795a <astronode_decode_answer_transport+0x102>
    }

    // CRC
    uint16_t crc_calculated = calculate_crc((const uint8_t *)&p_destination_message->op_code, 1, 0xFFFF);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	251a      	movs	r5, #26
 80079fc:	197c      	adds	r4, r7, r5
 80079fe:	4a5e      	ldr	r2, [pc, #376]	; (8007b78 <astronode_decode_answer_transport+0x320>)
 8007a00:	2101      	movs	r1, #1
 8007a02:	0018      	movs	r0, r3
 8007a04:	f000 f91e 	bl	8007c44 <calculate_crc>
 8007a08:	0003      	movs	r3, r0
 8007a0a:	8023      	strh	r3, [r4, #0]
    crc_calculated = calculate_crc((const uint8_t *)&p_destination_message->p_payload, p_destination_message->payload_len, crc_calculated);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	1c58      	adds	r0, r3, #1
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	22c4      	movs	r2, #196	; 0xc4
 8007a14:	5a99      	ldrh	r1, [r3, r2]
 8007a16:	197c      	adds	r4, r7, r5
 8007a18:	197b      	adds	r3, r7, r5
 8007a1a:	881b      	ldrh	r3, [r3, #0]
 8007a1c:	001a      	movs	r2, r3
 8007a1e:	f000 f911 	bl	8007c44 <calculate_crc>
 8007a22:	0003      	movs	r3, r0
 8007a24:	8023      	strh	r3, [r4, #0]
    crc_calculated = ((crc_calculated << 8) & 0xff00) | ((crc_calculated >> 8) & 0x00ff);
 8007a26:	197b      	adds	r3, r7, r5
 8007a28:	881b      	ldrh	r3, [r3, #0]
 8007a2a:	021b      	lsls	r3, r3, #8
 8007a2c:	b21a      	sxth	r2, r3
 8007a2e:	0029      	movs	r1, r5
 8007a30:	197b      	adds	r3, r7, r5
 8007a32:	881b      	ldrh	r3, [r3, #0]
 8007a34:	0a1b      	lsrs	r3, r3, #8
 8007a36:	b29b      	uxth	r3, r3
 8007a38:	b21b      	sxth	r3, r3
 8007a3a:	4313      	orrs	r3, r2
 8007a3c:	b21a      	sxth	r2, r3
 8007a3e:	187b      	adds	r3, r7, r1
 8007a40:	801a      	strh	r2, [r3, #0]


    if (ascii_to_value(p_source_buffer[length_buffer - 5], &nibble_high) == false
 8007a42:	19bb      	adds	r3, r7, r6
 8007a44:	881b      	ldrh	r3, [r3, #0]
 8007a46:	3b05      	subs	r3, #5
 8007a48:	68fa      	ldr	r2, [r7, #12]
 8007a4a:	18d3      	adds	r3, r2, r3
 8007a4c:	781b      	ldrb	r3, [r3, #0]
 8007a4e:	2217      	movs	r2, #23
 8007a50:	18ba      	adds	r2, r7, r2
 8007a52:	0011      	movs	r1, r2
 8007a54:	0018      	movs	r0, r3
 8007a56:	f7ff fe31 	bl	80076bc <ascii_to_value>
 8007a5a:	0003      	movs	r3, r0
 8007a5c:	001a      	movs	r2, r3
 8007a5e:	2301      	movs	r3, #1
 8007a60:	4053      	eors	r3, r2
 8007a62:	b2db      	uxtb	r3, r3
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d112      	bne.n	8007a8e <astronode_decode_answer_transport+0x236>
        || ascii_to_value(p_source_buffer[length_buffer - 4], &nibble_low) == false)
 8007a68:	19bb      	adds	r3, r7, r6
 8007a6a:	881b      	ldrh	r3, [r3, #0]
 8007a6c:	3b04      	subs	r3, #4
 8007a6e:	68fa      	ldr	r2, [r7, #12]
 8007a70:	18d3      	adds	r3, r2, r3
 8007a72:	781b      	ldrb	r3, [r3, #0]
 8007a74:	2216      	movs	r2, #22
 8007a76:	18ba      	adds	r2, r7, r2
 8007a78:	0011      	movs	r1, r2
 8007a7a:	0018      	movs	r0, r3
 8007a7c:	f7ff fe1e 	bl	80076bc <ascii_to_value>
 8007a80:	0003      	movs	r3, r0
 8007a82:	001a      	movs	r2, r3
 8007a84:	2301      	movs	r3, #1
 8007a86:	4053      	eors	r3, r2
 8007a88:	b2db      	uxtb	r3, r3
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d005      	beq.n	8007a9a <astronode_decode_answer_transport+0x242>
    {
        send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 8007a8e:	4b39      	ldr	r3, [pc, #228]	; (8007b74 <astronode_decode_answer_transport+0x31c>)
 8007a90:	0018      	movs	r0, r3
 8007a92:	f7f9 fbaf 	bl	80011f4 <send_debug_logs>
        return RS_FAILURE;
 8007a96:	2300      	movs	r3, #0
 8007a98:	e062      	b.n	8007b60 <astronode_decode_answer_transport+0x308>
    }

    uint16_t crc_received = (nibble_high << 12) + (nibble_low << 8);
 8007a9a:	2017      	movs	r0, #23
 8007a9c:	183b      	adds	r3, r7, r0
 8007a9e:	781b      	ldrb	r3, [r3, #0]
 8007aa0:	b29b      	uxth	r3, r3
 8007aa2:	031b      	lsls	r3, r3, #12
 8007aa4:	b299      	uxth	r1, r3
 8007aa6:	2416      	movs	r4, #22
 8007aa8:	193b      	adds	r3, r7, r4
 8007aaa:	781b      	ldrb	r3, [r3, #0]
 8007aac:	b29b      	uxth	r3, r3
 8007aae:	021b      	lsls	r3, r3, #8
 8007ab0:	b29a      	uxth	r2, r3
 8007ab2:	2318      	movs	r3, #24
 8007ab4:	18fb      	adds	r3, r7, r3
 8007ab6:	188a      	adds	r2, r1, r2
 8007ab8:	801a      	strh	r2, [r3, #0]

    if (ascii_to_value(p_source_buffer[length_buffer - 3], &nibble_high) == false
 8007aba:	250a      	movs	r5, #10
 8007abc:	197b      	adds	r3, r7, r5
 8007abe:	881b      	ldrh	r3, [r3, #0]
 8007ac0:	3b03      	subs	r3, #3
 8007ac2:	68fa      	ldr	r2, [r7, #12]
 8007ac4:	18d3      	adds	r3, r2, r3
 8007ac6:	781b      	ldrb	r3, [r3, #0]
 8007ac8:	183a      	adds	r2, r7, r0
 8007aca:	0011      	movs	r1, r2
 8007acc:	0018      	movs	r0, r3
 8007ace:	f7ff fdf5 	bl	80076bc <ascii_to_value>
 8007ad2:	0003      	movs	r3, r0
 8007ad4:	001a      	movs	r2, r3
 8007ad6:	2301      	movs	r3, #1
 8007ad8:	4053      	eors	r3, r2
 8007ada:	b2db      	uxtb	r3, r3
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d111      	bne.n	8007b04 <astronode_decode_answer_transport+0x2ac>
        || ascii_to_value(p_source_buffer[length_buffer - 2], &nibble_low) == false)
 8007ae0:	197b      	adds	r3, r7, r5
 8007ae2:	881b      	ldrh	r3, [r3, #0]
 8007ae4:	3b02      	subs	r3, #2
 8007ae6:	68fa      	ldr	r2, [r7, #12]
 8007ae8:	18d3      	adds	r3, r2, r3
 8007aea:	781b      	ldrb	r3, [r3, #0]
 8007aec:	193a      	adds	r2, r7, r4
 8007aee:	0011      	movs	r1, r2
 8007af0:	0018      	movs	r0, r3
 8007af2:	f7ff fde3 	bl	80076bc <ascii_to_value>
 8007af6:	0003      	movs	r3, r0
 8007af8:	001a      	movs	r2, r3
 8007afa:	2301      	movs	r3, #1
 8007afc:	4053      	eors	r3, r2
 8007afe:	b2db      	uxtb	r3, r3
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d005      	beq.n	8007b10 <astronode_decode_answer_transport+0x2b8>
    {
        send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 8007b04:	4b1b      	ldr	r3, [pc, #108]	; (8007b74 <astronode_decode_answer_transport+0x31c>)
 8007b06:	0018      	movs	r0, r3
 8007b08:	f7f9 fb74 	bl	80011f4 <send_debug_logs>
        return RS_FAILURE;
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	e027      	b.n	8007b60 <astronode_decode_answer_transport+0x308>
    }

    crc_received += (nibble_high << 4) + nibble_low;
 8007b10:	2317      	movs	r3, #23
 8007b12:	18fb      	adds	r3, r7, r3
 8007b14:	781b      	ldrb	r3, [r3, #0]
 8007b16:	b29b      	uxth	r3, r3
 8007b18:	011b      	lsls	r3, r3, #4
 8007b1a:	b29a      	uxth	r2, r3
 8007b1c:	2316      	movs	r3, #22
 8007b1e:	18fb      	adds	r3, r7, r3
 8007b20:	781b      	ldrb	r3, [r3, #0]
 8007b22:	b29b      	uxth	r3, r3
 8007b24:	18d3      	adds	r3, r2, r3
 8007b26:	b299      	uxth	r1, r3
 8007b28:	2018      	movs	r0, #24
 8007b2a:	183b      	adds	r3, r7, r0
 8007b2c:	183a      	adds	r2, r7, r0
 8007b2e:	8812      	ldrh	r2, [r2, #0]
 8007b30:	188a      	adds	r2, r1, r2
 8007b32:	801a      	strh	r2, [r3, #0]

    if (crc_received != crc_calculated)
 8007b34:	183a      	adds	r2, r7, r0
 8007b36:	231a      	movs	r3, #26
 8007b38:	18fb      	adds	r3, r7, r3
 8007b3a:	8812      	ldrh	r2, [r2, #0]
 8007b3c:	881b      	ldrh	r3, [r3, #0]
 8007b3e:	429a      	cmp	r2, r3
 8007b40:	d005      	beq.n	8007b4e <astronode_decode_answer_transport+0x2f6>
    {
        send_debug_logs("ERROR : CRC sent by the Astronode does not match the expected CRC");
 8007b42:	4b0e      	ldr	r3, [pc, #56]	; (8007b7c <astronode_decode_answer_transport+0x324>)
 8007b44:	0018      	movs	r0, r3
 8007b46:	f7f9 fb55 	bl	80011f4 <send_debug_logs>
        return RS_FAILURE;
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	e008      	b.n	8007b60 <astronode_decode_answer_transport+0x308>
    }

    if (p_destination_message->op_code == ASTRONODE_OP_CODE_ERROR)
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	781b      	ldrb	r3, [r3, #0]
 8007b52:	2bff      	cmp	r3, #255	; 0xff
 8007b54:	d103      	bne.n	8007b5e <astronode_decode_answer_transport+0x306>
    {
        check_for_error(p_destination_message);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	0018      	movs	r0, r3
 8007b5a:	f000 f8c3 	bl	8007ce4 <check_for_error>
    }

    return RS_SUCCESS;
 8007b5e:	2301      	movs	r3, #1
}
 8007b60:	0018      	movs	r0, r3
 8007b62:	46bd      	mov	sp, r7
 8007b64:	b009      	add	sp, #36	; 0x24
 8007b66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b68:	08009fa8 	.word	0x08009fa8
 8007b6c:	08009ff8 	.word	0x08009ff8
 8007b70:	0800a048 	.word	0x0800a048
 8007b74:	0800a098 	.word	0x0800a098
 8007b78:	0000ffff 	.word	0x0000ffff
 8007b7c:	0800a0e4 	.word	0x0800a0e4

08007b80 <astronode_transport_send_receive>:

return_status_t astronode_transport_send_receive(astronode_app_msg_t *p_request, astronode_app_msg_t *p_answer)
{
 8007b80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b82:	4c2b      	ldr	r4, [pc, #172]	; (8007c30 <astronode_transport_send_receive+0xb0>)
 8007b84:	44a5      	add	sp, r4
 8007b86:	af00      	add	r7, sp, #0
 8007b88:	6078      	str	r0, [r7, #4]
 8007b8a:	6039      	str	r1, [r7, #0]
    uint8_t request_transport[ASTRONODE_TRANSPORT_MSG_MAX_LEN_BYTES] = {0};
 8007b8c:	4b29      	ldr	r3, [pc, #164]	; (8007c34 <astronode_transport_send_receive+0xb4>)
 8007b8e:	25ca      	movs	r5, #202	; 0xca
 8007b90:	00ad      	lsls	r5, r5, #2
 8007b92:	195b      	adds	r3, r3, r5
 8007b94:	19db      	adds	r3, r3, r7
 8007b96:	2200      	movs	r2, #0
 8007b98:	601a      	str	r2, [r3, #0]
 8007b9a:	3304      	adds	r3, #4
 8007b9c:	22c4      	movs	r2, #196	; 0xc4
 8007b9e:	0052      	lsls	r2, r2, #1
 8007ba0:	2100      	movs	r1, #0
 8007ba2:	0018      	movs	r0, r3
 8007ba4:	f000 fb68 	bl	8008278 <memset>
    uint8_t answer_transport[ASTRONODE_TRANSPORT_MSG_MAX_LEN_BYTES] = {0};
 8007ba8:	4b23      	ldr	r3, [pc, #140]	; (8007c38 <astronode_transport_send_receive+0xb8>)
 8007baa:	195b      	adds	r3, r3, r5
 8007bac:	19db      	adds	r3, r3, r7
 8007bae:	2200      	movs	r2, #0
 8007bb0:	601a      	str	r2, [r3, #0]
 8007bb2:	3304      	adds	r3, #4
 8007bb4:	22c4      	movs	r2, #196	; 0xc4
 8007bb6:	0052      	lsls	r2, r2, #1
 8007bb8:	2100      	movs	r1, #0
 8007bba:	0018      	movs	r0, r3
 8007bbc:	f000 fb5c 	bl	8008278 <memset>
    uint16_t answer_length =  0;
 8007bc0:	4b1e      	ldr	r3, [pc, #120]	; (8007c3c <astronode_transport_send_receive+0xbc>)
 8007bc2:	195b      	adds	r3, r3, r5
 8007bc4:	19db      	adds	r3, r3, r7
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	801a      	strh	r2, [r3, #0]

    uint16_t request_length = astronode_create_request_transport(p_request, request_transport);
 8007bca:	4e1d      	ldr	r6, [pc, #116]	; (8007c40 <astronode_transport_send_receive+0xc0>)
 8007bcc:	19bc      	adds	r4, r7, r6
 8007bce:	23cc      	movs	r3, #204	; 0xcc
 8007bd0:	005b      	lsls	r3, r3, #1
 8007bd2:	18fa      	adds	r2, r7, r3
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	0011      	movs	r1, r2
 8007bd8:	0018      	movs	r0, r3
 8007bda:	f7ff fd9b 	bl	8007714 <astronode_create_request_transport>
 8007bde:	0003      	movs	r3, r0
 8007be0:	8023      	strh	r3, [r4, #0]

    send_astronode_request(request_transport, request_length);
 8007be2:	19bb      	adds	r3, r7, r6
 8007be4:	881a      	ldrh	r2, [r3, #0]
 8007be6:	23cc      	movs	r3, #204	; 0xcc
 8007be8:	005b      	lsls	r3, r3, #1
 8007bea:	18fb      	adds	r3, r7, r3
 8007bec:	0011      	movs	r1, r2
 8007bee:	0018      	movs	r0, r3
 8007bf0:	f7f9 fc6e 	bl	80014d0 <send_astronode_request>
    if(receive_astronode_answer(answer_transport, &answer_length) == RS_SUCCESS)
 8007bf4:	230a      	movs	r3, #10
 8007bf6:	18fa      	adds	r2, r7, r3
 8007bf8:	240c      	movs	r4, #12
 8007bfa:	193b      	adds	r3, r7, r4
 8007bfc:	0011      	movs	r1, r2
 8007bfe:	0018      	movs	r0, r3
 8007c00:	f000 f92c 	bl	8007e5c <receive_astronode_answer>
 8007c04:	0003      	movs	r3, r0
 8007c06:	2b01      	cmp	r3, #1
 8007c08:	d10a      	bne.n	8007c20 <astronode_transport_send_receive+0xa0>
    {
        return astronode_decode_answer_transport(answer_transport, answer_length, p_answer);
 8007c0a:	4b0c      	ldr	r3, [pc, #48]	; (8007c3c <astronode_transport_send_receive+0xbc>)
 8007c0c:	195b      	adds	r3, r3, r5
 8007c0e:	19db      	adds	r3, r3, r7
 8007c10:	8819      	ldrh	r1, [r3, #0]
 8007c12:	683a      	ldr	r2, [r7, #0]
 8007c14:	193b      	adds	r3, r7, r4
 8007c16:	0018      	movs	r0, r3
 8007c18:	f7ff fe1e 	bl	8007858 <astronode_decode_answer_transport>
 8007c1c:	0003      	movs	r3, r0
 8007c1e:	e000      	b.n	8007c22 <astronode_transport_send_receive+0xa2>
    }
    else
    {
        return RS_FAILURE;
 8007c20:	2300      	movs	r3, #0
    }
}
 8007c22:	0018      	movs	r0, r3
 8007c24:	46bd      	mov	sp, r7
 8007c26:	23cb      	movs	r3, #203	; 0xcb
 8007c28:	009b      	lsls	r3, r3, #2
 8007c2a:	449d      	add	sp, r3
 8007c2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c2e:	46c0      	nop			; (mov r8, r8)
 8007c30:	fffffcd4 	.word	0xfffffcd4
 8007c34:	fffffe70 	.word	0xfffffe70
 8007c38:	fffffce4 	.word	0xfffffce4
 8007c3c:	fffffce2 	.word	0xfffffce2
 8007c40:	00000326 	.word	0x00000326

08007c44 <calculate_crc>:

static uint16_t calculate_crc(const uint8_t *p_data, uint16_t data_len, uint16_t init_value)
{
 8007c44:	b590      	push	{r4, r7, lr}
 8007c46:	b085      	sub	sp, #20
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
 8007c4c:	0008      	movs	r0, r1
 8007c4e:	0011      	movs	r1, r2
 8007c50:	1cbb      	adds	r3, r7, #2
 8007c52:	1c02      	adds	r2, r0, #0
 8007c54:	801a      	strh	r2, [r3, #0]
 8007c56:	003b      	movs	r3, r7
 8007c58:	1c0a      	adds	r2, r1, #0
 8007c5a:	801a      	strh	r2, [r3, #0]
    uint16_t crc = init_value;
 8007c5c:	230e      	movs	r3, #14
 8007c5e:	18fb      	adds	r3, r7, r3
 8007c60:	003a      	movs	r2, r7
 8007c62:	8812      	ldrh	r2, [r2, #0]
 8007c64:	801a      	strh	r2, [r3, #0]

    while (data_len--)
 8007c66:	e02e      	b.n	8007cc6 <calculate_crc+0x82>
    {
        uint16_t x = crc >> 8 ^ *p_data++;
 8007c68:	240e      	movs	r4, #14
 8007c6a:	193b      	adds	r3, r7, r4
 8007c6c:	881b      	ldrh	r3, [r3, #0]
 8007c6e:	0a1b      	lsrs	r3, r3, #8
 8007c70:	b299      	uxth	r1, r3
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	1c5a      	adds	r2, r3, #1
 8007c76:	607a      	str	r2, [r7, #4]
 8007c78:	781b      	ldrb	r3, [r3, #0]
 8007c7a:	b29a      	uxth	r2, r3
 8007c7c:	200c      	movs	r0, #12
 8007c7e:	183b      	adds	r3, r7, r0
 8007c80:	404a      	eors	r2, r1
 8007c82:	801a      	strh	r2, [r3, #0]
        x ^= x >> 4;
 8007c84:	183b      	adds	r3, r7, r0
 8007c86:	881b      	ldrh	r3, [r3, #0]
 8007c88:	091b      	lsrs	r3, r3, #4
 8007c8a:	b299      	uxth	r1, r3
 8007c8c:	183b      	adds	r3, r7, r0
 8007c8e:	183a      	adds	r2, r7, r0
 8007c90:	8812      	ldrh	r2, [r2, #0]
 8007c92:	404a      	eors	r2, r1
 8007c94:	801a      	strh	r2, [r3, #0]
        crc = (crc << 8) ^ (x << 12) ^ (x << 5) ^ (x);
 8007c96:	0021      	movs	r1, r4
 8007c98:	187b      	adds	r3, r7, r1
 8007c9a:	881b      	ldrh	r3, [r3, #0]
 8007c9c:	021b      	lsls	r3, r3, #8
 8007c9e:	b21a      	sxth	r2, r3
 8007ca0:	183b      	adds	r3, r7, r0
 8007ca2:	881b      	ldrh	r3, [r3, #0]
 8007ca4:	031b      	lsls	r3, r3, #12
 8007ca6:	b21b      	sxth	r3, r3
 8007ca8:	4053      	eors	r3, r2
 8007caa:	b21a      	sxth	r2, r3
 8007cac:	183b      	adds	r3, r7, r0
 8007cae:	881b      	ldrh	r3, [r3, #0]
 8007cb0:	015b      	lsls	r3, r3, #5
 8007cb2:	b21b      	sxth	r3, r3
 8007cb4:	4053      	eors	r3, r2
 8007cb6:	b21a      	sxth	r2, r3
 8007cb8:	183b      	adds	r3, r7, r0
 8007cba:	2000      	movs	r0, #0
 8007cbc:	5e1b      	ldrsh	r3, [r3, r0]
 8007cbe:	4053      	eors	r3, r2
 8007cc0:	b21a      	sxth	r2, r3
 8007cc2:	187b      	adds	r3, r7, r1
 8007cc4:	801a      	strh	r2, [r3, #0]
    while (data_len--)
 8007cc6:	1cbb      	adds	r3, r7, #2
 8007cc8:	881b      	ldrh	r3, [r3, #0]
 8007cca:	1cba      	adds	r2, r7, #2
 8007ccc:	1e59      	subs	r1, r3, #1
 8007cce:	8011      	strh	r1, [r2, #0]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d1c9      	bne.n	8007c68 <calculate_crc+0x24>
    }
    return crc;
 8007cd4:	230e      	movs	r3, #14
 8007cd6:	18fb      	adds	r3, r7, r3
 8007cd8:	881b      	ldrh	r3, [r3, #0]
}
 8007cda:	0018      	movs	r0, r3
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	b005      	add	sp, #20
 8007ce0:	bd90      	pop	{r4, r7, pc}
	...

08007ce4 <check_for_error>:

static void check_for_error(astronode_app_msg_t *p_answer)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b084      	sub	sp, #16
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
    uint16_t error_code = p_answer->p_payload[0] + (p_answer->p_payload[1] << 8);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	785b      	ldrb	r3, [r3, #1]
 8007cf0:	b299      	uxth	r1, r3
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	789b      	ldrb	r3, [r3, #2]
 8007cf6:	b29b      	uxth	r3, r3
 8007cf8:	021b      	lsls	r3, r3, #8
 8007cfa:	b29a      	uxth	r2, r3
 8007cfc:	200e      	movs	r0, #14
 8007cfe:	183b      	adds	r3, r7, r0
 8007d00:	188a      	adds	r2, r1, r2
 8007d02:	801a      	strh	r2, [r3, #0]

    switch (error_code)
 8007d04:	183b      	adds	r3, r7, r0
 8007d06:	881b      	ldrh	r3, [r3, #0]
 8007d08:	4a40      	ldr	r2, [pc, #256]	; (8007e0c <check_for_error+0x128>)
 8007d0a:	4293      	cmp	r3, r2
 8007d0c:	d100      	bne.n	8007d10 <check_for_error+0x2c>
 8007d0e:	e06f      	b.n	8007df0 <check_for_error+0x10c>
 8007d10:	4a3e      	ldr	r2, [pc, #248]	; (8007e0c <check_for_error+0x128>)
 8007d12:	4293      	cmp	r3, r2
 8007d14:	dd00      	ble.n	8007d18 <check_for_error+0x34>
 8007d16:	e070      	b.n	8007dfa <check_for_error+0x116>
 8007d18:	4a3d      	ldr	r2, [pc, #244]	; (8007e10 <check_for_error+0x12c>)
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	d100      	bne.n	8007d20 <check_for_error+0x3c>
 8007d1e:	e062      	b.n	8007de6 <check_for_error+0x102>
 8007d20:	4a3b      	ldr	r2, [pc, #236]	; (8007e10 <check_for_error+0x12c>)
 8007d22:	4293      	cmp	r3, r2
 8007d24:	dd00      	ble.n	8007d28 <check_for_error+0x44>
 8007d26:	e068      	b.n	8007dfa <check_for_error+0x116>
 8007d28:	4a3a      	ldr	r2, [pc, #232]	; (8007e14 <check_for_error+0x130>)
 8007d2a:	4293      	cmp	r3, r2
 8007d2c:	d056      	beq.n	8007ddc <check_for_error+0xf8>
 8007d2e:	4a39      	ldr	r2, [pc, #228]	; (8007e14 <check_for_error+0x130>)
 8007d30:	4293      	cmp	r3, r2
 8007d32:	dd00      	ble.n	8007d36 <check_for_error+0x52>
 8007d34:	e061      	b.n	8007dfa <check_for_error+0x116>
 8007d36:	4a38      	ldr	r2, [pc, #224]	; (8007e18 <check_for_error+0x134>)
 8007d38:	4293      	cmp	r3, r2
 8007d3a:	d04a      	beq.n	8007dd2 <check_for_error+0xee>
 8007d3c:	4a36      	ldr	r2, [pc, #216]	; (8007e18 <check_for_error+0x134>)
 8007d3e:	4293      	cmp	r3, r2
 8007d40:	dc5b      	bgt.n	8007dfa <check_for_error+0x116>
 8007d42:	4a36      	ldr	r2, [pc, #216]	; (8007e1c <check_for_error+0x138>)
 8007d44:	4293      	cmp	r3, r2
 8007d46:	d03f      	beq.n	8007dc8 <check_for_error+0xe4>
 8007d48:	4a34      	ldr	r2, [pc, #208]	; (8007e1c <check_for_error+0x138>)
 8007d4a:	4293      	cmp	r3, r2
 8007d4c:	dc55      	bgt.n	8007dfa <check_for_error+0x116>
 8007d4e:	4a34      	ldr	r2, [pc, #208]	; (8007e20 <check_for_error+0x13c>)
 8007d50:	4293      	cmp	r3, r2
 8007d52:	d034      	beq.n	8007dbe <check_for_error+0xda>
 8007d54:	4a32      	ldr	r2, [pc, #200]	; (8007e20 <check_for_error+0x13c>)
 8007d56:	4293      	cmp	r3, r2
 8007d58:	dc4f      	bgt.n	8007dfa <check_for_error+0x116>
 8007d5a:	4a32      	ldr	r2, [pc, #200]	; (8007e24 <check_for_error+0x140>)
 8007d5c:	4293      	cmp	r3, r2
 8007d5e:	d029      	beq.n	8007db4 <check_for_error+0xd0>
 8007d60:	4a30      	ldr	r2, [pc, #192]	; (8007e24 <check_for_error+0x140>)
 8007d62:	4293      	cmp	r3, r2
 8007d64:	dc49      	bgt.n	8007dfa <check_for_error+0x116>
 8007d66:	4a30      	ldr	r2, [pc, #192]	; (8007e28 <check_for_error+0x144>)
 8007d68:	4293      	cmp	r3, r2
 8007d6a:	d01e      	beq.n	8007daa <check_for_error+0xc6>
 8007d6c:	4a2e      	ldr	r2, [pc, #184]	; (8007e28 <check_for_error+0x144>)
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	dc43      	bgt.n	8007dfa <check_for_error+0x116>
 8007d72:	2222      	movs	r2, #34	; 0x22
 8007d74:	32ff      	adds	r2, #255	; 0xff
 8007d76:	4293      	cmp	r3, r2
 8007d78:	d012      	beq.n	8007da0 <check_for_error+0xbc>
 8007d7a:	2291      	movs	r2, #145	; 0x91
 8007d7c:	0052      	lsls	r2, r2, #1
 8007d7e:	4293      	cmp	r3, r2
 8007d80:	da3b      	bge.n	8007dfa <check_for_error+0x116>
 8007d82:	2b01      	cmp	r3, #1
 8007d84:	d002      	beq.n	8007d8c <check_for_error+0xa8>
 8007d86:	2b11      	cmp	r3, #17
 8007d88:	d005      	beq.n	8007d96 <check_for_error+0xb2>
 8007d8a:	e036      	b.n	8007dfa <check_for_error+0x116>
    {
        case ASTRONODE_ERR_CODE_CRC_NOT_VALID:
            send_debug_logs("[ERROR] CRC_NOT_VALID : Discrepancy between provided CRC and expected CRC.");
 8007d8c:	4b27      	ldr	r3, [pc, #156]	; (8007e2c <check_for_error+0x148>)
 8007d8e:	0018      	movs	r0, r3
 8007d90:	f7f9 fa30 	bl	80011f4 <send_debug_logs>
            break;
 8007d94:	e036      	b.n	8007e04 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_LENGTH_NOT_VALID:
            send_debug_logs("[ERROR] LENGTH_NOT_VALID : Message exceeds the maximum length allowed by the given operation code.");
 8007d96:	4b26      	ldr	r3, [pc, #152]	; (8007e30 <check_for_error+0x14c>)
 8007d98:	0018      	movs	r0, r3
 8007d9a:	f7f9 fa2b 	bl	80011f4 <send_debug_logs>
            break;
 8007d9e:	e031      	b.n	8007e04 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_OPCODE_NOT_VALID:
            send_debug_logs("[ERROR] OPCODE_NOT_VALID : Invalid operation code used.");
 8007da0:	4b24      	ldr	r3, [pc, #144]	; (8007e34 <check_for_error+0x150>)
 8007da2:	0018      	movs	r0, r3
 8007da4:	f7f9 fa26 	bl	80011f4 <send_debug_logs>
            break;
 8007da8:	e02c      	b.n	8007e04 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_FORMAT_NOT_VALID:
            send_debug_logs("[ERROR] FORMAT_NOT_VALID : At least one of the fields (SSID, password, token) is not composed of exclusively printable standard ASCII characters (0x20 to 0x7E).");
 8007daa:	4b23      	ldr	r3, [pc, #140]	; (8007e38 <check_for_error+0x154>)
 8007dac:	0018      	movs	r0, r3
 8007dae:	f7f9 fa21 	bl	80011f4 <send_debug_logs>
            break;
 8007db2:	e027      	b.n	8007e04 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_FLASH_WRITING_FAILED:
            send_debug_logs("[ERROR] FLASH_WRITING_FAILED : Failed to write the Wi-Fi settings (SSID, password, token) to the flash.");
 8007db4:	4b21      	ldr	r3, [pc, #132]	; (8007e3c <check_for_error+0x158>)
 8007db6:	0018      	movs	r0, r3
 8007db8:	f7f9 fa1c 	bl	80011f4 <send_debug_logs>
            break;
 8007dbc:	e022      	b.n	8007e04 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_BUFFER_FULL:
            send_debug_logs("[ERROR] BUFFER_FULL : Failed to queue the payload because the sending queue is already full.");
 8007dbe:	4b20      	ldr	r3, [pc, #128]	; (8007e40 <check_for_error+0x15c>)
 8007dc0:	0018      	movs	r0, r3
 8007dc2:	f7f9 fa17 	bl	80011f4 <send_debug_logs>
            break;
 8007dc6:	e01d      	b.n	8007e04 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_DUPLICATE_ID:
            send_debug_logs("[ERROR] DUPLICATE_ID : Failed to queue the payload because the Payload ID provided by the asset is already in use in the Astronode queue.");
 8007dc8:	4b1e      	ldr	r3, [pc, #120]	; (8007e44 <check_for_error+0x160>)
 8007dca:	0018      	movs	r0, r3
 8007dcc:	f7f9 fa12 	bl	80011f4 <send_debug_logs>
            break;
 8007dd0:	e018      	b.n	8007e04 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_BUFFER_EMPTY:
            send_debug_logs("[ERROR] BUFFER_EMPTY : Failed to dequeue a payload from the buffer because the buffer is empty.");
 8007dd2:	4b1d      	ldr	r3, [pc, #116]	; (8007e48 <check_for_error+0x164>)
 8007dd4:	0018      	movs	r0, r3
 8007dd6:	f7f9 fa0d 	bl	80011f4 <send_debug_logs>
            break;
 8007dda:	e013      	b.n	8007e04 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_INVALID_POS:
            send_debug_logs("[ERROR] INVALID_POS : Failed to update the geolocation information. Latitude and longitude fields must in the range [-90,90] degrees and [-180,180] degrees, respectively.");
 8007ddc:	4b1b      	ldr	r3, [pc, #108]	; (8007e4c <check_for_error+0x168>)
 8007dde:	0018      	movs	r0, r3
 8007de0:	f7f9 fa08 	bl	80011f4 <send_debug_logs>
            break;
 8007de4:	e00e      	b.n	8007e04 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_NO_ACK:
            send_debug_logs("[ERROR] NO_ACK : No satellite acknowledgement available for any payload.");
 8007de6:	4b1a      	ldr	r3, [pc, #104]	; (8007e50 <check_for_error+0x16c>)
 8007de8:	0018      	movs	r0, r3
 8007dea:	f7f9 fa03 	bl	80011f4 <send_debug_logs>
            break;
 8007dee:	e009      	b.n	8007e04 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_NO_CLEAR:
            send_debug_logs("[ERROR] NO_CLEAR : No payload ack to clear, or it was already cleared.");
 8007df0:	4b18      	ldr	r3, [pc, #96]	; (8007e54 <check_for_error+0x170>)
 8007df2:	0018      	movs	r0, r3
 8007df4:	f7f9 f9fe 	bl	80011f4 <send_debug_logs>
            break;
 8007df8:	e004      	b.n	8007e04 <check_for_error+0x120>

        default:
            send_debug_logs("[ERROR] error_code is not defined.");
 8007dfa:	4b17      	ldr	r3, [pc, #92]	; (8007e58 <check_for_error+0x174>)
 8007dfc:	0018      	movs	r0, r3
 8007dfe:	f7f9 f9f9 	bl	80011f4 <send_debug_logs>
            break;
 8007e02:	46c0      	nop			; (mov r8, r8)
    }
}
 8007e04:	46c0      	nop			; (mov r8, r8)
 8007e06:	46bd      	mov	sp, r7
 8007e08:	b004      	add	sp, #16
 8007e0a:	bd80      	pop	{r7, pc}
 8007e0c:	00004601 	.word	0x00004601
 8007e10:	00004501 	.word	0x00004501
 8007e14:	00003501 	.word	0x00003501
 8007e18:	00002601 	.word	0x00002601
 8007e1c:	00002511 	.word	0x00002511
 8007e20:	00002501 	.word	0x00002501
 8007e24:	00000611 	.word	0x00000611
 8007e28:	00000601 	.word	0x00000601
 8007e2c:	0800a128 	.word	0x0800a128
 8007e30:	0800a174 	.word	0x0800a174
 8007e34:	0800a1d8 	.word	0x0800a1d8
 8007e38:	0800a210 	.word	0x0800a210
 8007e3c:	0800a2b4 	.word	0x0800a2b4
 8007e40:	0800a31c 	.word	0x0800a31c
 8007e44:	0800a37c 	.word	0x0800a37c
 8007e48:	0800a408 	.word	0x0800a408
 8007e4c:	0800a468 	.word	0x0800a468
 8007e50:	0800a514 	.word	0x0800a514
 8007e54:	0800a560 	.word	0x0800a560
 8007e58:	0800a5a8 	.word	0x0800a5a8

08007e5c <receive_astronode_answer>:

static return_status_t receive_astronode_answer(uint8_t *p_rx_buffer, uint16_t *p_buffer_length)
{
 8007e5c:	b5b0      	push	{r4, r5, r7, lr}
 8007e5e:	b086      	sub	sp, #24
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
 8007e64:	6039      	str	r1, [r7, #0]
    uint8_t rx_char = 0;
 8007e66:	230f      	movs	r3, #15
 8007e68:	18fb      	adds	r3, r7, r3
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	701a      	strb	r2, [r3, #0]
    uint16_t length = 0;
 8007e6e:	2316      	movs	r3, #22
 8007e70:	18fb      	adds	r3, r7, r3
 8007e72:	2200      	movs	r2, #0
 8007e74:	801a      	strh	r2, [r3, #0]
    uint32_t timeout_answer_received = get_systick();
 8007e76:	f7f9 fb49 	bl	800150c <get_systick>
 8007e7a:	0003      	movs	r3, r0
 8007e7c:	613b      	str	r3, [r7, #16]
    bool is_answer_received = false;
 8007e7e:	2315      	movs	r3, #21
 8007e80:	18fb      	adds	r3, r7, r3
 8007e82:	2200      	movs	r2, #0
 8007e84:	701a      	strb	r2, [r3, #0]

    while (is_answer_received == false)
 8007e86:	e054      	b.n	8007f32 <receive_astronode_answer+0xd6>
    {
        if (is_systick_timeout_over(timeout_answer_received, ASTRONODE_ANSWER_TIMEOUT_MS))
 8007e88:	4a34      	ldr	r2, [pc, #208]	; (8007f5c <receive_astronode_answer+0x100>)
 8007e8a:	693b      	ldr	r3, [r7, #16]
 8007e8c:	0011      	movs	r1, r2
 8007e8e:	0018      	movs	r0, r3
 8007e90:	f7f9 fb44 	bl	800151c <is_systick_timeout_over>
 8007e94:	1e03      	subs	r3, r0, #0
 8007e96:	d005      	beq.n	8007ea4 <receive_astronode_answer+0x48>
        {
            send_debug_logs("ERROR : Received answer timeout..");
 8007e98:	4b31      	ldr	r3, [pc, #196]	; (8007f60 <receive_astronode_answer+0x104>)
 8007e9a:	0018      	movs	r0, r3
 8007e9c:	f7f9 f9aa 	bl	80011f4 <send_debug_logs>
            return RS_FAILURE;
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	e057      	b.n	8007f54 <receive_astronode_answer+0xf8>
        }
        if (is_astronode_character_received(&rx_char))
 8007ea4:	250f      	movs	r5, #15
 8007ea6:	197b      	adds	r3, r7, r5
 8007ea8:	0018      	movs	r0, r3
 8007eaa:	f7f9 fb4d 	bl	8001548 <is_astronode_character_received>
 8007eae:	0003      	movs	r3, r0
 8007eb0:	0019      	movs	r1, r3
 8007eb2:	2016      	movs	r0, #22
 8007eb4:	183b      	adds	r3, r7, r0
 8007eb6:	183a      	adds	r2, r7, r0
 8007eb8:	8812      	ldrh	r2, [r2, #0]
 8007eba:	801a      	strh	r2, [r3, #0]
 8007ebc:	2415      	movs	r4, #21
 8007ebe:	193b      	adds	r3, r7, r4
 8007ec0:	193a      	adds	r2, r7, r4
 8007ec2:	7812      	ldrb	r2, [r2, #0]
 8007ec4:	701a      	strb	r2, [r3, #0]
 8007ec6:	2900      	cmp	r1, #0
 8007ec8:	d033      	beq.n	8007f32 <receive_astronode_answer+0xd6>
        {
            if (rx_char == ASTRONODE_TRANSPORT_STX)
 8007eca:	197b      	adds	r3, r7, r5
 8007ecc:	781b      	ldrb	r3, [r3, #0]
 8007ece:	2b02      	cmp	r3, #2
 8007ed0:	d105      	bne.n	8007ede <receive_astronode_answer+0x82>
            {
                is_answer_received = false;
 8007ed2:	193b      	adds	r3, r7, r4
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	701a      	strb	r2, [r3, #0]
                length = 0;
 8007ed8:	183b      	adds	r3, r7, r0
 8007eda:	2200      	movs	r2, #0
 8007edc:	801a      	strh	r2, [r3, #0]
            }

            p_rx_buffer[length] = rx_char;
 8007ede:	2116      	movs	r1, #22
 8007ee0:	187b      	adds	r3, r7, r1
 8007ee2:	881b      	ldrh	r3, [r3, #0]
 8007ee4:	687a      	ldr	r2, [r7, #4]
 8007ee6:	18d3      	adds	r3, r2, r3
 8007ee8:	220f      	movs	r2, #15
 8007eea:	18ba      	adds	r2, r7, r2
 8007eec:	7812      	ldrb	r2, [r2, #0]
 8007eee:	701a      	strb	r2, [r3, #0]
            length++;
 8007ef0:	187b      	adds	r3, r7, r1
 8007ef2:	881a      	ldrh	r2, [r3, #0]
 8007ef4:	187b      	adds	r3, r7, r1
 8007ef6:	3201      	adds	r2, #1
 8007ef8:	801a      	strh	r2, [r3, #0]

            if (length > ASTRONODE_MAX_LENGTH_RESPONSE)
 8007efa:	187b      	adds	r3, r7, r1
 8007efc:	881b      	ldrh	r3, [r3, #0]
 8007efe:	2bb2      	cmp	r3, #178	; 0xb2
 8007f00:	d905      	bls.n	8007f0e <receive_astronode_answer+0xb2>
            {
                send_debug_logs("ERROR : Message received from the Astronode exceed maximum length allowed.");
 8007f02:	4b18      	ldr	r3, [pc, #96]	; (8007f64 <receive_astronode_answer+0x108>)
 8007f04:	0018      	movs	r0, r3
 8007f06:	f7f9 f975 	bl	80011f4 <send_debug_logs>
                return RS_FAILURE;
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	e022      	b.n	8007f54 <receive_astronode_answer+0xf8>
            }

            if (rx_char == ASTRONODE_TRANSPORT_ETX)
 8007f0e:	230f      	movs	r3, #15
 8007f10:	18fb      	adds	r3, r7, r3
 8007f12:	781b      	ldrb	r3, [r3, #0]
 8007f14:	2b03      	cmp	r3, #3
 8007f16:	d10c      	bne.n	8007f32 <receive_astronode_answer+0xd6>
            {
                if (length > 1)
 8007f18:	2216      	movs	r2, #22
 8007f1a:	18bb      	adds	r3, r7, r2
 8007f1c:	881b      	ldrh	r3, [r3, #0]
 8007f1e:	2b01      	cmp	r3, #1
 8007f20:	d907      	bls.n	8007f32 <receive_astronode_answer+0xd6>
                {
                    *p_buffer_length = length;
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	18ba      	adds	r2, r7, r2
 8007f26:	8812      	ldrh	r2, [r2, #0]
 8007f28:	801a      	strh	r2, [r3, #0]
                    is_answer_received = true;
 8007f2a:	2315      	movs	r3, #21
 8007f2c:	18fb      	adds	r3, r7, r3
 8007f2e:	2201      	movs	r2, #1
 8007f30:	701a      	strb	r2, [r3, #0]
    while (is_answer_received == false)
 8007f32:	2315      	movs	r3, #21
 8007f34:	18fb      	adds	r3, r7, r3
 8007f36:	781b      	ldrb	r3, [r3, #0]
 8007f38:	2201      	movs	r2, #1
 8007f3a:	4053      	eors	r3, r2
 8007f3c:	b2db      	uxtb	r3, r3
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d1a2      	bne.n	8007e88 <receive_astronode_answer+0x2c>
                }
            }
        }
    }
    send_debug_logs("Message received from the Astronode <-- ");
 8007f42:	4b09      	ldr	r3, [pc, #36]	; (8007f68 <receive_astronode_answer+0x10c>)
 8007f44:	0018      	movs	r0, r3
 8007f46:	f7f9 f955 	bl	80011f4 <send_debug_logs>
    send_debug_logs((char *) p_rx_buffer);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	0018      	movs	r0, r3
 8007f4e:	f7f9 f951 	bl	80011f4 <send_debug_logs>

    return RS_SUCCESS;
 8007f52:	2301      	movs	r3, #1
}
 8007f54:	0018      	movs	r0, r3
 8007f56:	46bd      	mov	sp, r7
 8007f58:	b006      	add	sp, #24
 8007f5a:	bdb0      	pop	{r4, r5, r7, pc}
 8007f5c:	000005dc 	.word	0x000005dc
 8007f60:	0800a5cc 	.word	0x0800a5cc
 8007f64:	0800a5f0 	.word	0x0800a5f0
 8007f68:	0800a63c 	.word	0x0800a63c

08007f6c <uint8_to_ascii_buffer>:

static void uint8_to_ascii_buffer(const uint8_t value, uint8_t *p_target_buffer)
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b082      	sub	sp, #8
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	0002      	movs	r2, r0
 8007f74:	6039      	str	r1, [r7, #0]
 8007f76:	1dfb      	adds	r3, r7, #7
 8007f78:	701a      	strb	r2, [r3, #0]
    p_target_buffer[0] = g_ascii_lookup[value >> 4];
 8007f7a:	1dfb      	adds	r3, r7, #7
 8007f7c:	781b      	ldrb	r3, [r3, #0]
 8007f7e:	091b      	lsrs	r3, r3, #4
 8007f80:	b2db      	uxtb	r3, r3
 8007f82:	001a      	movs	r2, r3
 8007f84:	4b08      	ldr	r3, [pc, #32]	; (8007fa8 <uint8_to_ascii_buffer+0x3c>)
 8007f86:	5c9a      	ldrb	r2, [r3, r2]
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	701a      	strb	r2, [r3, #0]
    p_target_buffer[1] = g_ascii_lookup[value & 0x0F];
 8007f8c:	1dfb      	adds	r3, r7, #7
 8007f8e:	781b      	ldrb	r3, [r3, #0]
 8007f90:	220f      	movs	r2, #15
 8007f92:	401a      	ands	r2, r3
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	3301      	adds	r3, #1
 8007f98:	4903      	ldr	r1, [pc, #12]	; (8007fa8 <uint8_to_ascii_buffer+0x3c>)
 8007f9a:	5c8a      	ldrb	r2, [r1, r2]
 8007f9c:	701a      	strb	r2, [r3, #0]
}
 8007f9e:	46c0      	nop			; (mov r8, r8)
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	b002      	add	sp, #8
 8007fa4:	bd80      	pop	{r7, pc}
 8007fa6:	46c0      	nop			; (mov r8, r8)
 8007fa8:	0800a6f0 	.word	0x0800a6f0

08007fac <lis2dw12_read_reg>:
  *
  */
int32_t __weak lis2dw12_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 8007fac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007fae:	b087      	sub	sp, #28
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	60f8      	str	r0, [r7, #12]
 8007fb4:	0008      	movs	r0, r1
 8007fb6:	607a      	str	r2, [r7, #4]
 8007fb8:	0019      	movs	r1, r3
 8007fba:	260b      	movs	r6, #11
 8007fbc:	19bb      	adds	r3, r7, r6
 8007fbe:	1c02      	adds	r2, r0, #0
 8007fc0:	701a      	strb	r2, [r3, #0]
 8007fc2:	2508      	movs	r5, #8
 8007fc4:	197b      	adds	r3, r7, r5
 8007fc6:	1c0a      	adds	r2, r1, #0
 8007fc8:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	685c      	ldr	r4, [r3, #4]
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	68d8      	ldr	r0, [r3, #12]
 8007fd2:	197b      	adds	r3, r7, r5
 8007fd4:	881d      	ldrh	r5, [r3, #0]
 8007fd6:	687a      	ldr	r2, [r7, #4]
 8007fd8:	19bb      	adds	r3, r7, r6
 8007fda:	7819      	ldrb	r1, [r3, #0]
 8007fdc:	002b      	movs	r3, r5
 8007fde:	47a0      	blx	r4
 8007fe0:	0003      	movs	r3, r0
 8007fe2:	617b      	str	r3, [r7, #20]

  return ret;
 8007fe4:	697b      	ldr	r3, [r7, #20]
}
 8007fe6:	0018      	movs	r0, r3
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	b007      	add	sp, #28
 8007fec:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007fee <lis2dw12_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8007fee:	b580      	push	{r7, lr}
 8007ff0:	b084      	sub	sp, #16
 8007ff2:	af00      	add	r7, sp, #0
 8007ff4:	6078      	str	r0, [r7, #4]
 8007ff6:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_WHO_AM_I, buff, 1);
 8007ff8:	683a      	ldr	r2, [r7, #0]
 8007ffa:	6878      	ldr	r0, [r7, #4]
 8007ffc:	2301      	movs	r3, #1
 8007ffe:	210f      	movs	r1, #15
 8008000:	f7ff ffd4 	bl	8007fac <lis2dw12_read_reg>
 8008004:	0003      	movs	r3, r0
 8008006:	60fb      	str	r3, [r7, #12]

  return ret;
 8008008:	68fb      	ldr	r3, [r7, #12]
}
 800800a:	0018      	movs	r0, r3
 800800c:	46bd      	mov	sp, r7
 800800e:	b004      	add	sp, #16
 8008010:	bd80      	pop	{r7, pc}

08008012 <my_lis2dw12_init>:
 */

#include "my_lis2dw12.h"

bool my_lis2dw12_init ( stmdev_ctx_t* ctx )
{
 8008012:	b580      	push	{r7, lr}
 8008014:	b084      	sub	sp, #16
 8008016:	af00      	add	r7, sp, #0
 8008018:	6078      	str	r0, [r7, #4]
	uint8_t rst = 1 ;
 800801a:	230f      	movs	r3, #15
 800801c:	18fb      	adds	r3, r7, r3
 800801e:	2201      	movs	r2, #1
 8008020:	701a      	strb	r2, [r3, #0]
	/*Restore default configuration */
//	lis2dw12_reset_set ( ctx , PROPERTY_ENABLE ) ;
//	do {
//		lis2dw12_reset_get ( ctx, &rst ) ;
//	} while ( rst ) ;
	if ( my_lis2dw12_get_id ( ctx ) == LIS2DW12_ID )
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	0018      	movs	r0, r3
 8008026:	f000 f80a 	bl	800803e <my_lis2dw12_get_id>
 800802a:	0003      	movs	r3, r0
 800802c:	2b33      	cmp	r3, #51	; 0x33
 800802e:	d101      	bne.n	8008034 <my_lis2dw12_init+0x22>
//		lis2dw12_power_mode_set 	( ctx , LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit ) ;
//		lis2dw12_data_rate_set 		( ctx , LIS2DW12_XL_ODR_200Hz ) ;
//		lis2dw12_filter_path_set 	( ctx , LIS2DW12_HIGH_PASS_ON_OUT ) ;
//		lis2dw12_wkup_dur_set		( ctx , 0 ) ;
//		lis2dw12_wkup_threshold_set	( ctx, 2 ) ;
		return true ;
 8008030:	2301      	movs	r3, #1
 8008032:	e000      	b.n	8008036 <my_lis2dw12_init+0x24>
	}
	return 0 ;
 8008034:	2300      	movs	r3, #0
}
 8008036:	0018      	movs	r0, r3
 8008038:	46bd      	mov	sp, r7
 800803a:	b004      	add	sp, #16
 800803c:	bd80      	pop	{r7, pc}

0800803e <my_lis2dw12_get_id>:

uint8_t my_lis2dw12_get_id ( stmdev_ctx_t* ctx )
{
 800803e:	b590      	push	{r4, r7, lr}
 8008040:	b085      	sub	sp, #20
 8008042:	af00      	add	r7, sp, #0
 8008044:	6078      	str	r0, [r7, #4]
	uint8_t id = 0 ;
 8008046:	210f      	movs	r1, #15
 8008048:	187b      	adds	r3, r7, r1
 800804a:	2200      	movs	r2, #0
 800804c:	701a      	strb	r2, [r3, #0]
	lis2dw12_device_id_get ( ctx , &id ) ;
 800804e:	000c      	movs	r4, r1
 8008050:	187a      	adds	r2, r7, r1
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	0011      	movs	r1, r2
 8008056:	0018      	movs	r0, r3
 8008058:	f7ff ffc9 	bl	8007fee <lis2dw12_device_id_get>
	return id ;
 800805c:	193b      	adds	r3, r7, r4
 800805e:	781b      	ldrb	r3, [r3, #0]
}
 8008060:	0018      	movs	r0, r3
 8008062:	46bd      	mov	sp, r7
 8008064:	b005      	add	sp, #20
 8008066:	bd90      	pop	{r4, r7, pc}

08008068 <sbrk_aligned>:
 8008068:	b570      	push	{r4, r5, r6, lr}
 800806a:	4e0f      	ldr	r6, [pc, #60]	; (80080a8 <sbrk_aligned+0x40>)
 800806c:	000d      	movs	r5, r1
 800806e:	6831      	ldr	r1, [r6, #0]
 8008070:	0004      	movs	r4, r0
 8008072:	2900      	cmp	r1, #0
 8008074:	d102      	bne.n	800807c <sbrk_aligned+0x14>
 8008076:	f000 f907 	bl	8008288 <_sbrk_r>
 800807a:	6030      	str	r0, [r6, #0]
 800807c:	0029      	movs	r1, r5
 800807e:	0020      	movs	r0, r4
 8008080:	f000 f902 	bl	8008288 <_sbrk_r>
 8008084:	1c43      	adds	r3, r0, #1
 8008086:	d00a      	beq.n	800809e <sbrk_aligned+0x36>
 8008088:	2303      	movs	r3, #3
 800808a:	1cc5      	adds	r5, r0, #3
 800808c:	439d      	bics	r5, r3
 800808e:	42a8      	cmp	r0, r5
 8008090:	d007      	beq.n	80080a2 <sbrk_aligned+0x3a>
 8008092:	1a29      	subs	r1, r5, r0
 8008094:	0020      	movs	r0, r4
 8008096:	f000 f8f7 	bl	8008288 <_sbrk_r>
 800809a:	3001      	adds	r0, #1
 800809c:	d101      	bne.n	80080a2 <sbrk_aligned+0x3a>
 800809e:	2501      	movs	r5, #1
 80080a0:	426d      	negs	r5, r5
 80080a2:	0028      	movs	r0, r5
 80080a4:	bd70      	pop	{r4, r5, r6, pc}
 80080a6:	46c0      	nop			; (mov r8, r8)
 80080a8:	20001440 	.word	0x20001440

080080ac <_malloc_r>:
 80080ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80080ae:	2203      	movs	r2, #3
 80080b0:	1ccb      	adds	r3, r1, #3
 80080b2:	4393      	bics	r3, r2
 80080b4:	3308      	adds	r3, #8
 80080b6:	0006      	movs	r6, r0
 80080b8:	001f      	movs	r7, r3
 80080ba:	2b0c      	cmp	r3, #12
 80080bc:	d238      	bcs.n	8008130 <_malloc_r+0x84>
 80080be:	270c      	movs	r7, #12
 80080c0:	42b9      	cmp	r1, r7
 80080c2:	d837      	bhi.n	8008134 <_malloc_r+0x88>
 80080c4:	0030      	movs	r0, r6
 80080c6:	f000 f873 	bl	80081b0 <__malloc_lock>
 80080ca:	4b38      	ldr	r3, [pc, #224]	; (80081ac <_malloc_r+0x100>)
 80080cc:	9300      	str	r3, [sp, #0]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	001c      	movs	r4, r3
 80080d2:	2c00      	cmp	r4, #0
 80080d4:	d133      	bne.n	800813e <_malloc_r+0x92>
 80080d6:	0039      	movs	r1, r7
 80080d8:	0030      	movs	r0, r6
 80080da:	f7ff ffc5 	bl	8008068 <sbrk_aligned>
 80080de:	0004      	movs	r4, r0
 80080e0:	1c43      	adds	r3, r0, #1
 80080e2:	d15e      	bne.n	80081a2 <_malloc_r+0xf6>
 80080e4:	9b00      	ldr	r3, [sp, #0]
 80080e6:	681c      	ldr	r4, [r3, #0]
 80080e8:	0025      	movs	r5, r4
 80080ea:	2d00      	cmp	r5, #0
 80080ec:	d14e      	bne.n	800818c <_malloc_r+0xe0>
 80080ee:	2c00      	cmp	r4, #0
 80080f0:	d051      	beq.n	8008196 <_malloc_r+0xea>
 80080f2:	6823      	ldr	r3, [r4, #0]
 80080f4:	0029      	movs	r1, r5
 80080f6:	18e3      	adds	r3, r4, r3
 80080f8:	0030      	movs	r0, r6
 80080fa:	9301      	str	r3, [sp, #4]
 80080fc:	f000 f8c4 	bl	8008288 <_sbrk_r>
 8008100:	9b01      	ldr	r3, [sp, #4]
 8008102:	4283      	cmp	r3, r0
 8008104:	d147      	bne.n	8008196 <_malloc_r+0xea>
 8008106:	6823      	ldr	r3, [r4, #0]
 8008108:	0030      	movs	r0, r6
 800810a:	1aff      	subs	r7, r7, r3
 800810c:	0039      	movs	r1, r7
 800810e:	f7ff ffab 	bl	8008068 <sbrk_aligned>
 8008112:	3001      	adds	r0, #1
 8008114:	d03f      	beq.n	8008196 <_malloc_r+0xea>
 8008116:	6823      	ldr	r3, [r4, #0]
 8008118:	19db      	adds	r3, r3, r7
 800811a:	6023      	str	r3, [r4, #0]
 800811c:	9b00      	ldr	r3, [sp, #0]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d040      	beq.n	80081a6 <_malloc_r+0xfa>
 8008124:	685a      	ldr	r2, [r3, #4]
 8008126:	42a2      	cmp	r2, r4
 8008128:	d133      	bne.n	8008192 <_malloc_r+0xe6>
 800812a:	2200      	movs	r2, #0
 800812c:	605a      	str	r2, [r3, #4]
 800812e:	e014      	b.n	800815a <_malloc_r+0xae>
 8008130:	2b00      	cmp	r3, #0
 8008132:	dac5      	bge.n	80080c0 <_malloc_r+0x14>
 8008134:	230c      	movs	r3, #12
 8008136:	2500      	movs	r5, #0
 8008138:	6033      	str	r3, [r6, #0]
 800813a:	0028      	movs	r0, r5
 800813c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800813e:	6821      	ldr	r1, [r4, #0]
 8008140:	1bc9      	subs	r1, r1, r7
 8008142:	d420      	bmi.n	8008186 <_malloc_r+0xda>
 8008144:	290b      	cmp	r1, #11
 8008146:	d918      	bls.n	800817a <_malloc_r+0xce>
 8008148:	19e2      	adds	r2, r4, r7
 800814a:	6027      	str	r7, [r4, #0]
 800814c:	42a3      	cmp	r3, r4
 800814e:	d112      	bne.n	8008176 <_malloc_r+0xca>
 8008150:	9b00      	ldr	r3, [sp, #0]
 8008152:	601a      	str	r2, [r3, #0]
 8008154:	6863      	ldr	r3, [r4, #4]
 8008156:	6011      	str	r1, [r2, #0]
 8008158:	6053      	str	r3, [r2, #4]
 800815a:	0030      	movs	r0, r6
 800815c:	0025      	movs	r5, r4
 800815e:	f000 f82f 	bl	80081c0 <__malloc_unlock>
 8008162:	2207      	movs	r2, #7
 8008164:	350b      	adds	r5, #11
 8008166:	1d23      	adds	r3, r4, #4
 8008168:	4395      	bics	r5, r2
 800816a:	1aea      	subs	r2, r5, r3
 800816c:	429d      	cmp	r5, r3
 800816e:	d0e4      	beq.n	800813a <_malloc_r+0x8e>
 8008170:	1b5b      	subs	r3, r3, r5
 8008172:	50a3      	str	r3, [r4, r2]
 8008174:	e7e1      	b.n	800813a <_malloc_r+0x8e>
 8008176:	605a      	str	r2, [r3, #4]
 8008178:	e7ec      	b.n	8008154 <_malloc_r+0xa8>
 800817a:	6862      	ldr	r2, [r4, #4]
 800817c:	42a3      	cmp	r3, r4
 800817e:	d1d5      	bne.n	800812c <_malloc_r+0x80>
 8008180:	9b00      	ldr	r3, [sp, #0]
 8008182:	601a      	str	r2, [r3, #0]
 8008184:	e7e9      	b.n	800815a <_malloc_r+0xae>
 8008186:	0023      	movs	r3, r4
 8008188:	6864      	ldr	r4, [r4, #4]
 800818a:	e7a2      	b.n	80080d2 <_malloc_r+0x26>
 800818c:	002c      	movs	r4, r5
 800818e:	686d      	ldr	r5, [r5, #4]
 8008190:	e7ab      	b.n	80080ea <_malloc_r+0x3e>
 8008192:	0013      	movs	r3, r2
 8008194:	e7c4      	b.n	8008120 <_malloc_r+0x74>
 8008196:	230c      	movs	r3, #12
 8008198:	0030      	movs	r0, r6
 800819a:	6033      	str	r3, [r6, #0]
 800819c:	f000 f810 	bl	80081c0 <__malloc_unlock>
 80081a0:	e7cb      	b.n	800813a <_malloc_r+0x8e>
 80081a2:	6027      	str	r7, [r4, #0]
 80081a4:	e7d9      	b.n	800815a <_malloc_r+0xae>
 80081a6:	605b      	str	r3, [r3, #4]
 80081a8:	deff      	udf	#255	; 0xff
 80081aa:	46c0      	nop			; (mov r8, r8)
 80081ac:	2000143c 	.word	0x2000143c

080081b0 <__malloc_lock>:
 80081b0:	b510      	push	{r4, lr}
 80081b2:	4802      	ldr	r0, [pc, #8]	; (80081bc <__malloc_lock+0xc>)
 80081b4:	f000 f8a4 	bl	8008300 <__retarget_lock_acquire_recursive>
 80081b8:	bd10      	pop	{r4, pc}
 80081ba:	46c0      	nop			; (mov r8, r8)
 80081bc:	20001580 	.word	0x20001580

080081c0 <__malloc_unlock>:
 80081c0:	b510      	push	{r4, lr}
 80081c2:	4802      	ldr	r0, [pc, #8]	; (80081cc <__malloc_unlock+0xc>)
 80081c4:	f000 f89d 	bl	8008302 <__retarget_lock_release_recursive>
 80081c8:	bd10      	pop	{r4, pc}
 80081ca:	46c0      	nop			; (mov r8, r8)
 80081cc:	20001580 	.word	0x20001580

080081d0 <sniprintf>:
 80081d0:	b40c      	push	{r2, r3}
 80081d2:	b530      	push	{r4, r5, lr}
 80081d4:	4b17      	ldr	r3, [pc, #92]	; (8008234 <sniprintf+0x64>)
 80081d6:	000c      	movs	r4, r1
 80081d8:	681d      	ldr	r5, [r3, #0]
 80081da:	b09d      	sub	sp, #116	; 0x74
 80081dc:	2900      	cmp	r1, #0
 80081de:	da08      	bge.n	80081f2 <sniprintf+0x22>
 80081e0:	238b      	movs	r3, #139	; 0x8b
 80081e2:	2001      	movs	r0, #1
 80081e4:	602b      	str	r3, [r5, #0]
 80081e6:	4240      	negs	r0, r0
 80081e8:	b01d      	add	sp, #116	; 0x74
 80081ea:	bc30      	pop	{r4, r5}
 80081ec:	bc08      	pop	{r3}
 80081ee:	b002      	add	sp, #8
 80081f0:	4718      	bx	r3
 80081f2:	2382      	movs	r3, #130	; 0x82
 80081f4:	466a      	mov	r2, sp
 80081f6:	009b      	lsls	r3, r3, #2
 80081f8:	8293      	strh	r3, [r2, #20]
 80081fa:	2300      	movs	r3, #0
 80081fc:	9002      	str	r0, [sp, #8]
 80081fe:	9006      	str	r0, [sp, #24]
 8008200:	4299      	cmp	r1, r3
 8008202:	d000      	beq.n	8008206 <sniprintf+0x36>
 8008204:	1e4b      	subs	r3, r1, #1
 8008206:	9304      	str	r3, [sp, #16]
 8008208:	9307      	str	r3, [sp, #28]
 800820a:	2301      	movs	r3, #1
 800820c:	466a      	mov	r2, sp
 800820e:	425b      	negs	r3, r3
 8008210:	82d3      	strh	r3, [r2, #22]
 8008212:	0028      	movs	r0, r5
 8008214:	ab21      	add	r3, sp, #132	; 0x84
 8008216:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008218:	a902      	add	r1, sp, #8
 800821a:	9301      	str	r3, [sp, #4]
 800821c:	f000 f928 	bl	8008470 <_svfiprintf_r>
 8008220:	1c43      	adds	r3, r0, #1
 8008222:	da01      	bge.n	8008228 <sniprintf+0x58>
 8008224:	238b      	movs	r3, #139	; 0x8b
 8008226:	602b      	str	r3, [r5, #0]
 8008228:	2c00      	cmp	r4, #0
 800822a:	d0dd      	beq.n	80081e8 <sniprintf+0x18>
 800822c:	2200      	movs	r2, #0
 800822e:	9b02      	ldr	r3, [sp, #8]
 8008230:	701a      	strb	r2, [r3, #0]
 8008232:	e7d9      	b.n	80081e8 <sniprintf+0x18>
 8008234:	2000005c 	.word	0x2000005c

08008238 <siprintf>:
 8008238:	b40e      	push	{r1, r2, r3}
 800823a:	b500      	push	{lr}
 800823c:	490b      	ldr	r1, [pc, #44]	; (800826c <siprintf+0x34>)
 800823e:	b09c      	sub	sp, #112	; 0x70
 8008240:	ab1d      	add	r3, sp, #116	; 0x74
 8008242:	9002      	str	r0, [sp, #8]
 8008244:	9006      	str	r0, [sp, #24]
 8008246:	9107      	str	r1, [sp, #28]
 8008248:	9104      	str	r1, [sp, #16]
 800824a:	4809      	ldr	r0, [pc, #36]	; (8008270 <siprintf+0x38>)
 800824c:	4909      	ldr	r1, [pc, #36]	; (8008274 <siprintf+0x3c>)
 800824e:	cb04      	ldmia	r3!, {r2}
 8008250:	9105      	str	r1, [sp, #20]
 8008252:	6800      	ldr	r0, [r0, #0]
 8008254:	a902      	add	r1, sp, #8
 8008256:	9301      	str	r3, [sp, #4]
 8008258:	f000 f90a 	bl	8008470 <_svfiprintf_r>
 800825c:	2200      	movs	r2, #0
 800825e:	9b02      	ldr	r3, [sp, #8]
 8008260:	701a      	strb	r2, [r3, #0]
 8008262:	b01c      	add	sp, #112	; 0x70
 8008264:	bc08      	pop	{r3}
 8008266:	b003      	add	sp, #12
 8008268:	4718      	bx	r3
 800826a:	46c0      	nop			; (mov r8, r8)
 800826c:	7fffffff 	.word	0x7fffffff
 8008270:	2000005c 	.word	0x2000005c
 8008274:	ffff0208 	.word	0xffff0208

08008278 <memset>:
 8008278:	0003      	movs	r3, r0
 800827a:	1882      	adds	r2, r0, r2
 800827c:	4293      	cmp	r3, r2
 800827e:	d100      	bne.n	8008282 <memset+0xa>
 8008280:	4770      	bx	lr
 8008282:	7019      	strb	r1, [r3, #0]
 8008284:	3301      	adds	r3, #1
 8008286:	e7f9      	b.n	800827c <memset+0x4>

08008288 <_sbrk_r>:
 8008288:	2300      	movs	r3, #0
 800828a:	b570      	push	{r4, r5, r6, lr}
 800828c:	4d06      	ldr	r5, [pc, #24]	; (80082a8 <_sbrk_r+0x20>)
 800828e:	0004      	movs	r4, r0
 8008290:	0008      	movs	r0, r1
 8008292:	602b      	str	r3, [r5, #0]
 8008294:	f7f9 fcda 	bl	8001c4c <_sbrk>
 8008298:	1c43      	adds	r3, r0, #1
 800829a:	d103      	bne.n	80082a4 <_sbrk_r+0x1c>
 800829c:	682b      	ldr	r3, [r5, #0]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d000      	beq.n	80082a4 <_sbrk_r+0x1c>
 80082a2:	6023      	str	r3, [r4, #0]
 80082a4:	bd70      	pop	{r4, r5, r6, pc}
 80082a6:	46c0      	nop			; (mov r8, r8)
 80082a8:	2000157c 	.word	0x2000157c

080082ac <__errno>:
 80082ac:	4b01      	ldr	r3, [pc, #4]	; (80082b4 <__errno+0x8>)
 80082ae:	6818      	ldr	r0, [r3, #0]
 80082b0:	4770      	bx	lr
 80082b2:	46c0      	nop			; (mov r8, r8)
 80082b4:	2000005c 	.word	0x2000005c

080082b8 <__libc_init_array>:
 80082b8:	b570      	push	{r4, r5, r6, lr}
 80082ba:	2600      	movs	r6, #0
 80082bc:	4c0c      	ldr	r4, [pc, #48]	; (80082f0 <__libc_init_array+0x38>)
 80082be:	4d0d      	ldr	r5, [pc, #52]	; (80082f4 <__libc_init_array+0x3c>)
 80082c0:	1b64      	subs	r4, r4, r5
 80082c2:	10a4      	asrs	r4, r4, #2
 80082c4:	42a6      	cmp	r6, r4
 80082c6:	d109      	bne.n	80082dc <__libc_init_array+0x24>
 80082c8:	2600      	movs	r6, #0
 80082ca:	f000 fba7 	bl	8008a1c <_init>
 80082ce:	4c0a      	ldr	r4, [pc, #40]	; (80082f8 <__libc_init_array+0x40>)
 80082d0:	4d0a      	ldr	r5, [pc, #40]	; (80082fc <__libc_init_array+0x44>)
 80082d2:	1b64      	subs	r4, r4, r5
 80082d4:	10a4      	asrs	r4, r4, #2
 80082d6:	42a6      	cmp	r6, r4
 80082d8:	d105      	bne.n	80082e6 <__libc_init_array+0x2e>
 80082da:	bd70      	pop	{r4, r5, r6, pc}
 80082dc:	00b3      	lsls	r3, r6, #2
 80082de:	58eb      	ldr	r3, [r5, r3]
 80082e0:	4798      	blx	r3
 80082e2:	3601      	adds	r6, #1
 80082e4:	e7ee      	b.n	80082c4 <__libc_init_array+0xc>
 80082e6:	00b3      	lsls	r3, r6, #2
 80082e8:	58eb      	ldr	r3, [r5, r3]
 80082ea:	4798      	blx	r3
 80082ec:	3601      	adds	r6, #1
 80082ee:	e7f2      	b.n	80082d6 <__libc_init_array+0x1e>
 80082f0:	0800a73c 	.word	0x0800a73c
 80082f4:	0800a73c 	.word	0x0800a73c
 80082f8:	0800a740 	.word	0x0800a740
 80082fc:	0800a73c 	.word	0x0800a73c

08008300 <__retarget_lock_acquire_recursive>:
 8008300:	4770      	bx	lr

08008302 <__retarget_lock_release_recursive>:
 8008302:	4770      	bx	lr

08008304 <memcpy>:
 8008304:	2300      	movs	r3, #0
 8008306:	b510      	push	{r4, lr}
 8008308:	429a      	cmp	r2, r3
 800830a:	d100      	bne.n	800830e <memcpy+0xa>
 800830c:	bd10      	pop	{r4, pc}
 800830e:	5ccc      	ldrb	r4, [r1, r3]
 8008310:	54c4      	strb	r4, [r0, r3]
 8008312:	3301      	adds	r3, #1
 8008314:	e7f8      	b.n	8008308 <memcpy+0x4>
	...

08008318 <_free_r>:
 8008318:	b570      	push	{r4, r5, r6, lr}
 800831a:	0005      	movs	r5, r0
 800831c:	2900      	cmp	r1, #0
 800831e:	d010      	beq.n	8008342 <_free_r+0x2a>
 8008320:	1f0c      	subs	r4, r1, #4
 8008322:	6823      	ldr	r3, [r4, #0]
 8008324:	2b00      	cmp	r3, #0
 8008326:	da00      	bge.n	800832a <_free_r+0x12>
 8008328:	18e4      	adds	r4, r4, r3
 800832a:	0028      	movs	r0, r5
 800832c:	f7ff ff40 	bl	80081b0 <__malloc_lock>
 8008330:	4a1d      	ldr	r2, [pc, #116]	; (80083a8 <_free_r+0x90>)
 8008332:	6813      	ldr	r3, [r2, #0]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d105      	bne.n	8008344 <_free_r+0x2c>
 8008338:	6063      	str	r3, [r4, #4]
 800833a:	6014      	str	r4, [r2, #0]
 800833c:	0028      	movs	r0, r5
 800833e:	f7ff ff3f 	bl	80081c0 <__malloc_unlock>
 8008342:	bd70      	pop	{r4, r5, r6, pc}
 8008344:	42a3      	cmp	r3, r4
 8008346:	d908      	bls.n	800835a <_free_r+0x42>
 8008348:	6820      	ldr	r0, [r4, #0]
 800834a:	1821      	adds	r1, r4, r0
 800834c:	428b      	cmp	r3, r1
 800834e:	d1f3      	bne.n	8008338 <_free_r+0x20>
 8008350:	6819      	ldr	r1, [r3, #0]
 8008352:	685b      	ldr	r3, [r3, #4]
 8008354:	1809      	adds	r1, r1, r0
 8008356:	6021      	str	r1, [r4, #0]
 8008358:	e7ee      	b.n	8008338 <_free_r+0x20>
 800835a:	001a      	movs	r2, r3
 800835c:	685b      	ldr	r3, [r3, #4]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d001      	beq.n	8008366 <_free_r+0x4e>
 8008362:	42a3      	cmp	r3, r4
 8008364:	d9f9      	bls.n	800835a <_free_r+0x42>
 8008366:	6811      	ldr	r1, [r2, #0]
 8008368:	1850      	adds	r0, r2, r1
 800836a:	42a0      	cmp	r0, r4
 800836c:	d10b      	bne.n	8008386 <_free_r+0x6e>
 800836e:	6820      	ldr	r0, [r4, #0]
 8008370:	1809      	adds	r1, r1, r0
 8008372:	1850      	adds	r0, r2, r1
 8008374:	6011      	str	r1, [r2, #0]
 8008376:	4283      	cmp	r3, r0
 8008378:	d1e0      	bne.n	800833c <_free_r+0x24>
 800837a:	6818      	ldr	r0, [r3, #0]
 800837c:	685b      	ldr	r3, [r3, #4]
 800837e:	1841      	adds	r1, r0, r1
 8008380:	6011      	str	r1, [r2, #0]
 8008382:	6053      	str	r3, [r2, #4]
 8008384:	e7da      	b.n	800833c <_free_r+0x24>
 8008386:	42a0      	cmp	r0, r4
 8008388:	d902      	bls.n	8008390 <_free_r+0x78>
 800838a:	230c      	movs	r3, #12
 800838c:	602b      	str	r3, [r5, #0]
 800838e:	e7d5      	b.n	800833c <_free_r+0x24>
 8008390:	6820      	ldr	r0, [r4, #0]
 8008392:	1821      	adds	r1, r4, r0
 8008394:	428b      	cmp	r3, r1
 8008396:	d103      	bne.n	80083a0 <_free_r+0x88>
 8008398:	6819      	ldr	r1, [r3, #0]
 800839a:	685b      	ldr	r3, [r3, #4]
 800839c:	1809      	adds	r1, r1, r0
 800839e:	6021      	str	r1, [r4, #0]
 80083a0:	6063      	str	r3, [r4, #4]
 80083a2:	6054      	str	r4, [r2, #4]
 80083a4:	e7ca      	b.n	800833c <_free_r+0x24>
 80083a6:	46c0      	nop			; (mov r8, r8)
 80083a8:	2000143c 	.word	0x2000143c

080083ac <__ssputs_r>:
 80083ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80083ae:	b085      	sub	sp, #20
 80083b0:	9301      	str	r3, [sp, #4]
 80083b2:	9203      	str	r2, [sp, #12]
 80083b4:	688e      	ldr	r6, [r1, #8]
 80083b6:	9a01      	ldr	r2, [sp, #4]
 80083b8:	0007      	movs	r7, r0
 80083ba:	000c      	movs	r4, r1
 80083bc:	680b      	ldr	r3, [r1, #0]
 80083be:	4296      	cmp	r6, r2
 80083c0:	d831      	bhi.n	8008426 <__ssputs_r+0x7a>
 80083c2:	898a      	ldrh	r2, [r1, #12]
 80083c4:	2190      	movs	r1, #144	; 0x90
 80083c6:	00c9      	lsls	r1, r1, #3
 80083c8:	420a      	tst	r2, r1
 80083ca:	d029      	beq.n	8008420 <__ssputs_r+0x74>
 80083cc:	2003      	movs	r0, #3
 80083ce:	6921      	ldr	r1, [r4, #16]
 80083d0:	1a5b      	subs	r3, r3, r1
 80083d2:	9302      	str	r3, [sp, #8]
 80083d4:	6963      	ldr	r3, [r4, #20]
 80083d6:	4343      	muls	r3, r0
 80083d8:	0fdd      	lsrs	r5, r3, #31
 80083da:	18ed      	adds	r5, r5, r3
 80083dc:	9b01      	ldr	r3, [sp, #4]
 80083de:	9802      	ldr	r0, [sp, #8]
 80083e0:	3301      	adds	r3, #1
 80083e2:	181b      	adds	r3, r3, r0
 80083e4:	106d      	asrs	r5, r5, #1
 80083e6:	42ab      	cmp	r3, r5
 80083e8:	d900      	bls.n	80083ec <__ssputs_r+0x40>
 80083ea:	001d      	movs	r5, r3
 80083ec:	0552      	lsls	r2, r2, #21
 80083ee:	d529      	bpl.n	8008444 <__ssputs_r+0x98>
 80083f0:	0029      	movs	r1, r5
 80083f2:	0038      	movs	r0, r7
 80083f4:	f7ff fe5a 	bl	80080ac <_malloc_r>
 80083f8:	1e06      	subs	r6, r0, #0
 80083fa:	d02d      	beq.n	8008458 <__ssputs_r+0xac>
 80083fc:	9a02      	ldr	r2, [sp, #8]
 80083fe:	6921      	ldr	r1, [r4, #16]
 8008400:	f7ff ff80 	bl	8008304 <memcpy>
 8008404:	89a2      	ldrh	r2, [r4, #12]
 8008406:	4b19      	ldr	r3, [pc, #100]	; (800846c <__ssputs_r+0xc0>)
 8008408:	401a      	ands	r2, r3
 800840a:	2380      	movs	r3, #128	; 0x80
 800840c:	4313      	orrs	r3, r2
 800840e:	81a3      	strh	r3, [r4, #12]
 8008410:	9b02      	ldr	r3, [sp, #8]
 8008412:	6126      	str	r6, [r4, #16]
 8008414:	18f6      	adds	r6, r6, r3
 8008416:	6026      	str	r6, [r4, #0]
 8008418:	6165      	str	r5, [r4, #20]
 800841a:	9e01      	ldr	r6, [sp, #4]
 800841c:	1aed      	subs	r5, r5, r3
 800841e:	60a5      	str	r5, [r4, #8]
 8008420:	9b01      	ldr	r3, [sp, #4]
 8008422:	429e      	cmp	r6, r3
 8008424:	d900      	bls.n	8008428 <__ssputs_r+0x7c>
 8008426:	9e01      	ldr	r6, [sp, #4]
 8008428:	0032      	movs	r2, r6
 800842a:	9903      	ldr	r1, [sp, #12]
 800842c:	6820      	ldr	r0, [r4, #0]
 800842e:	f000 fa9f 	bl	8008970 <memmove>
 8008432:	2000      	movs	r0, #0
 8008434:	68a3      	ldr	r3, [r4, #8]
 8008436:	1b9b      	subs	r3, r3, r6
 8008438:	60a3      	str	r3, [r4, #8]
 800843a:	6823      	ldr	r3, [r4, #0]
 800843c:	199b      	adds	r3, r3, r6
 800843e:	6023      	str	r3, [r4, #0]
 8008440:	b005      	add	sp, #20
 8008442:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008444:	002a      	movs	r2, r5
 8008446:	0038      	movs	r0, r7
 8008448:	f000 fab0 	bl	80089ac <_realloc_r>
 800844c:	1e06      	subs	r6, r0, #0
 800844e:	d1df      	bne.n	8008410 <__ssputs_r+0x64>
 8008450:	0038      	movs	r0, r7
 8008452:	6921      	ldr	r1, [r4, #16]
 8008454:	f7ff ff60 	bl	8008318 <_free_r>
 8008458:	230c      	movs	r3, #12
 800845a:	2001      	movs	r0, #1
 800845c:	603b      	str	r3, [r7, #0]
 800845e:	89a2      	ldrh	r2, [r4, #12]
 8008460:	3334      	adds	r3, #52	; 0x34
 8008462:	4313      	orrs	r3, r2
 8008464:	81a3      	strh	r3, [r4, #12]
 8008466:	4240      	negs	r0, r0
 8008468:	e7ea      	b.n	8008440 <__ssputs_r+0x94>
 800846a:	46c0      	nop			; (mov r8, r8)
 800846c:	fffffb7f 	.word	0xfffffb7f

08008470 <_svfiprintf_r>:
 8008470:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008472:	b0a1      	sub	sp, #132	; 0x84
 8008474:	9003      	str	r0, [sp, #12]
 8008476:	001d      	movs	r5, r3
 8008478:	898b      	ldrh	r3, [r1, #12]
 800847a:	000f      	movs	r7, r1
 800847c:	0016      	movs	r6, r2
 800847e:	061b      	lsls	r3, r3, #24
 8008480:	d511      	bpl.n	80084a6 <_svfiprintf_r+0x36>
 8008482:	690b      	ldr	r3, [r1, #16]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d10e      	bne.n	80084a6 <_svfiprintf_r+0x36>
 8008488:	2140      	movs	r1, #64	; 0x40
 800848a:	f7ff fe0f 	bl	80080ac <_malloc_r>
 800848e:	6038      	str	r0, [r7, #0]
 8008490:	6138      	str	r0, [r7, #16]
 8008492:	2800      	cmp	r0, #0
 8008494:	d105      	bne.n	80084a2 <_svfiprintf_r+0x32>
 8008496:	230c      	movs	r3, #12
 8008498:	9a03      	ldr	r2, [sp, #12]
 800849a:	3801      	subs	r0, #1
 800849c:	6013      	str	r3, [r2, #0]
 800849e:	b021      	add	sp, #132	; 0x84
 80084a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80084a2:	2340      	movs	r3, #64	; 0x40
 80084a4:	617b      	str	r3, [r7, #20]
 80084a6:	2300      	movs	r3, #0
 80084a8:	ac08      	add	r4, sp, #32
 80084aa:	6163      	str	r3, [r4, #20]
 80084ac:	3320      	adds	r3, #32
 80084ae:	7663      	strb	r3, [r4, #25]
 80084b0:	3310      	adds	r3, #16
 80084b2:	76a3      	strb	r3, [r4, #26]
 80084b4:	9507      	str	r5, [sp, #28]
 80084b6:	0035      	movs	r5, r6
 80084b8:	782b      	ldrb	r3, [r5, #0]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d001      	beq.n	80084c2 <_svfiprintf_r+0x52>
 80084be:	2b25      	cmp	r3, #37	; 0x25
 80084c0:	d148      	bne.n	8008554 <_svfiprintf_r+0xe4>
 80084c2:	1bab      	subs	r3, r5, r6
 80084c4:	9305      	str	r3, [sp, #20]
 80084c6:	42b5      	cmp	r5, r6
 80084c8:	d00b      	beq.n	80084e2 <_svfiprintf_r+0x72>
 80084ca:	0032      	movs	r2, r6
 80084cc:	0039      	movs	r1, r7
 80084ce:	9803      	ldr	r0, [sp, #12]
 80084d0:	f7ff ff6c 	bl	80083ac <__ssputs_r>
 80084d4:	3001      	adds	r0, #1
 80084d6:	d100      	bne.n	80084da <_svfiprintf_r+0x6a>
 80084d8:	e0af      	b.n	800863a <_svfiprintf_r+0x1ca>
 80084da:	6963      	ldr	r3, [r4, #20]
 80084dc:	9a05      	ldr	r2, [sp, #20]
 80084de:	189b      	adds	r3, r3, r2
 80084e0:	6163      	str	r3, [r4, #20]
 80084e2:	782b      	ldrb	r3, [r5, #0]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d100      	bne.n	80084ea <_svfiprintf_r+0x7a>
 80084e8:	e0a7      	b.n	800863a <_svfiprintf_r+0x1ca>
 80084ea:	2201      	movs	r2, #1
 80084ec:	2300      	movs	r3, #0
 80084ee:	4252      	negs	r2, r2
 80084f0:	6062      	str	r2, [r4, #4]
 80084f2:	a904      	add	r1, sp, #16
 80084f4:	3254      	adds	r2, #84	; 0x54
 80084f6:	1852      	adds	r2, r2, r1
 80084f8:	1c6e      	adds	r6, r5, #1
 80084fa:	6023      	str	r3, [r4, #0]
 80084fc:	60e3      	str	r3, [r4, #12]
 80084fe:	60a3      	str	r3, [r4, #8]
 8008500:	7013      	strb	r3, [r2, #0]
 8008502:	65a3      	str	r3, [r4, #88]	; 0x58
 8008504:	4b55      	ldr	r3, [pc, #340]	; (800865c <_svfiprintf_r+0x1ec>)
 8008506:	2205      	movs	r2, #5
 8008508:	0018      	movs	r0, r3
 800850a:	7831      	ldrb	r1, [r6, #0]
 800850c:	9305      	str	r3, [sp, #20]
 800850e:	f000 fa42 	bl	8008996 <memchr>
 8008512:	1c75      	adds	r5, r6, #1
 8008514:	2800      	cmp	r0, #0
 8008516:	d11f      	bne.n	8008558 <_svfiprintf_r+0xe8>
 8008518:	6822      	ldr	r2, [r4, #0]
 800851a:	06d3      	lsls	r3, r2, #27
 800851c:	d504      	bpl.n	8008528 <_svfiprintf_r+0xb8>
 800851e:	2353      	movs	r3, #83	; 0x53
 8008520:	a904      	add	r1, sp, #16
 8008522:	185b      	adds	r3, r3, r1
 8008524:	2120      	movs	r1, #32
 8008526:	7019      	strb	r1, [r3, #0]
 8008528:	0713      	lsls	r3, r2, #28
 800852a:	d504      	bpl.n	8008536 <_svfiprintf_r+0xc6>
 800852c:	2353      	movs	r3, #83	; 0x53
 800852e:	a904      	add	r1, sp, #16
 8008530:	185b      	adds	r3, r3, r1
 8008532:	212b      	movs	r1, #43	; 0x2b
 8008534:	7019      	strb	r1, [r3, #0]
 8008536:	7833      	ldrb	r3, [r6, #0]
 8008538:	2b2a      	cmp	r3, #42	; 0x2a
 800853a:	d016      	beq.n	800856a <_svfiprintf_r+0xfa>
 800853c:	0035      	movs	r5, r6
 800853e:	2100      	movs	r1, #0
 8008540:	200a      	movs	r0, #10
 8008542:	68e3      	ldr	r3, [r4, #12]
 8008544:	782a      	ldrb	r2, [r5, #0]
 8008546:	1c6e      	adds	r6, r5, #1
 8008548:	3a30      	subs	r2, #48	; 0x30
 800854a:	2a09      	cmp	r2, #9
 800854c:	d94e      	bls.n	80085ec <_svfiprintf_r+0x17c>
 800854e:	2900      	cmp	r1, #0
 8008550:	d111      	bne.n	8008576 <_svfiprintf_r+0x106>
 8008552:	e017      	b.n	8008584 <_svfiprintf_r+0x114>
 8008554:	3501      	adds	r5, #1
 8008556:	e7af      	b.n	80084b8 <_svfiprintf_r+0x48>
 8008558:	9b05      	ldr	r3, [sp, #20]
 800855a:	6822      	ldr	r2, [r4, #0]
 800855c:	1ac0      	subs	r0, r0, r3
 800855e:	2301      	movs	r3, #1
 8008560:	4083      	lsls	r3, r0
 8008562:	4313      	orrs	r3, r2
 8008564:	002e      	movs	r6, r5
 8008566:	6023      	str	r3, [r4, #0]
 8008568:	e7cc      	b.n	8008504 <_svfiprintf_r+0x94>
 800856a:	9b07      	ldr	r3, [sp, #28]
 800856c:	1d19      	adds	r1, r3, #4
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	9107      	str	r1, [sp, #28]
 8008572:	2b00      	cmp	r3, #0
 8008574:	db01      	blt.n	800857a <_svfiprintf_r+0x10a>
 8008576:	930b      	str	r3, [sp, #44]	; 0x2c
 8008578:	e004      	b.n	8008584 <_svfiprintf_r+0x114>
 800857a:	425b      	negs	r3, r3
 800857c:	60e3      	str	r3, [r4, #12]
 800857e:	2302      	movs	r3, #2
 8008580:	4313      	orrs	r3, r2
 8008582:	6023      	str	r3, [r4, #0]
 8008584:	782b      	ldrb	r3, [r5, #0]
 8008586:	2b2e      	cmp	r3, #46	; 0x2e
 8008588:	d10a      	bne.n	80085a0 <_svfiprintf_r+0x130>
 800858a:	786b      	ldrb	r3, [r5, #1]
 800858c:	2b2a      	cmp	r3, #42	; 0x2a
 800858e:	d135      	bne.n	80085fc <_svfiprintf_r+0x18c>
 8008590:	9b07      	ldr	r3, [sp, #28]
 8008592:	3502      	adds	r5, #2
 8008594:	1d1a      	adds	r2, r3, #4
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	9207      	str	r2, [sp, #28]
 800859a:	2b00      	cmp	r3, #0
 800859c:	db2b      	blt.n	80085f6 <_svfiprintf_r+0x186>
 800859e:	9309      	str	r3, [sp, #36]	; 0x24
 80085a0:	4e2f      	ldr	r6, [pc, #188]	; (8008660 <_svfiprintf_r+0x1f0>)
 80085a2:	2203      	movs	r2, #3
 80085a4:	0030      	movs	r0, r6
 80085a6:	7829      	ldrb	r1, [r5, #0]
 80085a8:	f000 f9f5 	bl	8008996 <memchr>
 80085ac:	2800      	cmp	r0, #0
 80085ae:	d006      	beq.n	80085be <_svfiprintf_r+0x14e>
 80085b0:	2340      	movs	r3, #64	; 0x40
 80085b2:	1b80      	subs	r0, r0, r6
 80085b4:	4083      	lsls	r3, r0
 80085b6:	6822      	ldr	r2, [r4, #0]
 80085b8:	3501      	adds	r5, #1
 80085ba:	4313      	orrs	r3, r2
 80085bc:	6023      	str	r3, [r4, #0]
 80085be:	7829      	ldrb	r1, [r5, #0]
 80085c0:	2206      	movs	r2, #6
 80085c2:	4828      	ldr	r0, [pc, #160]	; (8008664 <_svfiprintf_r+0x1f4>)
 80085c4:	1c6e      	adds	r6, r5, #1
 80085c6:	7621      	strb	r1, [r4, #24]
 80085c8:	f000 f9e5 	bl	8008996 <memchr>
 80085cc:	2800      	cmp	r0, #0
 80085ce:	d03c      	beq.n	800864a <_svfiprintf_r+0x1da>
 80085d0:	4b25      	ldr	r3, [pc, #148]	; (8008668 <_svfiprintf_r+0x1f8>)
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d125      	bne.n	8008622 <_svfiprintf_r+0x1b2>
 80085d6:	2207      	movs	r2, #7
 80085d8:	9b07      	ldr	r3, [sp, #28]
 80085da:	3307      	adds	r3, #7
 80085dc:	4393      	bics	r3, r2
 80085de:	3308      	adds	r3, #8
 80085e0:	9307      	str	r3, [sp, #28]
 80085e2:	6963      	ldr	r3, [r4, #20]
 80085e4:	9a04      	ldr	r2, [sp, #16]
 80085e6:	189b      	adds	r3, r3, r2
 80085e8:	6163      	str	r3, [r4, #20]
 80085ea:	e764      	b.n	80084b6 <_svfiprintf_r+0x46>
 80085ec:	4343      	muls	r3, r0
 80085ee:	0035      	movs	r5, r6
 80085f0:	2101      	movs	r1, #1
 80085f2:	189b      	adds	r3, r3, r2
 80085f4:	e7a6      	b.n	8008544 <_svfiprintf_r+0xd4>
 80085f6:	2301      	movs	r3, #1
 80085f8:	425b      	negs	r3, r3
 80085fa:	e7d0      	b.n	800859e <_svfiprintf_r+0x12e>
 80085fc:	2300      	movs	r3, #0
 80085fe:	200a      	movs	r0, #10
 8008600:	001a      	movs	r2, r3
 8008602:	3501      	adds	r5, #1
 8008604:	6063      	str	r3, [r4, #4]
 8008606:	7829      	ldrb	r1, [r5, #0]
 8008608:	1c6e      	adds	r6, r5, #1
 800860a:	3930      	subs	r1, #48	; 0x30
 800860c:	2909      	cmp	r1, #9
 800860e:	d903      	bls.n	8008618 <_svfiprintf_r+0x1a8>
 8008610:	2b00      	cmp	r3, #0
 8008612:	d0c5      	beq.n	80085a0 <_svfiprintf_r+0x130>
 8008614:	9209      	str	r2, [sp, #36]	; 0x24
 8008616:	e7c3      	b.n	80085a0 <_svfiprintf_r+0x130>
 8008618:	4342      	muls	r2, r0
 800861a:	0035      	movs	r5, r6
 800861c:	2301      	movs	r3, #1
 800861e:	1852      	adds	r2, r2, r1
 8008620:	e7f1      	b.n	8008606 <_svfiprintf_r+0x196>
 8008622:	aa07      	add	r2, sp, #28
 8008624:	9200      	str	r2, [sp, #0]
 8008626:	0021      	movs	r1, r4
 8008628:	003a      	movs	r2, r7
 800862a:	4b10      	ldr	r3, [pc, #64]	; (800866c <_svfiprintf_r+0x1fc>)
 800862c:	9803      	ldr	r0, [sp, #12]
 800862e:	e000      	b.n	8008632 <_svfiprintf_r+0x1c2>
 8008630:	bf00      	nop
 8008632:	9004      	str	r0, [sp, #16]
 8008634:	9b04      	ldr	r3, [sp, #16]
 8008636:	3301      	adds	r3, #1
 8008638:	d1d3      	bne.n	80085e2 <_svfiprintf_r+0x172>
 800863a:	89bb      	ldrh	r3, [r7, #12]
 800863c:	980d      	ldr	r0, [sp, #52]	; 0x34
 800863e:	065b      	lsls	r3, r3, #25
 8008640:	d400      	bmi.n	8008644 <_svfiprintf_r+0x1d4>
 8008642:	e72c      	b.n	800849e <_svfiprintf_r+0x2e>
 8008644:	2001      	movs	r0, #1
 8008646:	4240      	negs	r0, r0
 8008648:	e729      	b.n	800849e <_svfiprintf_r+0x2e>
 800864a:	aa07      	add	r2, sp, #28
 800864c:	9200      	str	r2, [sp, #0]
 800864e:	0021      	movs	r1, r4
 8008650:	003a      	movs	r2, r7
 8008652:	4b06      	ldr	r3, [pc, #24]	; (800866c <_svfiprintf_r+0x1fc>)
 8008654:	9803      	ldr	r0, [sp, #12]
 8008656:	f000 f87b 	bl	8008750 <_printf_i>
 800865a:	e7ea      	b.n	8008632 <_svfiprintf_r+0x1c2>
 800865c:	0800a700 	.word	0x0800a700
 8008660:	0800a706 	.word	0x0800a706
 8008664:	0800a70a 	.word	0x0800a70a
 8008668:	00000000 	.word	0x00000000
 800866c:	080083ad 	.word	0x080083ad

08008670 <_printf_common>:
 8008670:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008672:	0016      	movs	r6, r2
 8008674:	9301      	str	r3, [sp, #4]
 8008676:	688a      	ldr	r2, [r1, #8]
 8008678:	690b      	ldr	r3, [r1, #16]
 800867a:	000c      	movs	r4, r1
 800867c:	9000      	str	r0, [sp, #0]
 800867e:	4293      	cmp	r3, r2
 8008680:	da00      	bge.n	8008684 <_printf_common+0x14>
 8008682:	0013      	movs	r3, r2
 8008684:	0022      	movs	r2, r4
 8008686:	6033      	str	r3, [r6, #0]
 8008688:	3243      	adds	r2, #67	; 0x43
 800868a:	7812      	ldrb	r2, [r2, #0]
 800868c:	2a00      	cmp	r2, #0
 800868e:	d001      	beq.n	8008694 <_printf_common+0x24>
 8008690:	3301      	adds	r3, #1
 8008692:	6033      	str	r3, [r6, #0]
 8008694:	6823      	ldr	r3, [r4, #0]
 8008696:	069b      	lsls	r3, r3, #26
 8008698:	d502      	bpl.n	80086a0 <_printf_common+0x30>
 800869a:	6833      	ldr	r3, [r6, #0]
 800869c:	3302      	adds	r3, #2
 800869e:	6033      	str	r3, [r6, #0]
 80086a0:	6822      	ldr	r2, [r4, #0]
 80086a2:	2306      	movs	r3, #6
 80086a4:	0015      	movs	r5, r2
 80086a6:	401d      	ands	r5, r3
 80086a8:	421a      	tst	r2, r3
 80086aa:	d027      	beq.n	80086fc <_printf_common+0x8c>
 80086ac:	0023      	movs	r3, r4
 80086ae:	3343      	adds	r3, #67	; 0x43
 80086b0:	781b      	ldrb	r3, [r3, #0]
 80086b2:	1e5a      	subs	r2, r3, #1
 80086b4:	4193      	sbcs	r3, r2
 80086b6:	6822      	ldr	r2, [r4, #0]
 80086b8:	0692      	lsls	r2, r2, #26
 80086ba:	d430      	bmi.n	800871e <_printf_common+0xae>
 80086bc:	0022      	movs	r2, r4
 80086be:	9901      	ldr	r1, [sp, #4]
 80086c0:	9800      	ldr	r0, [sp, #0]
 80086c2:	9d08      	ldr	r5, [sp, #32]
 80086c4:	3243      	adds	r2, #67	; 0x43
 80086c6:	47a8      	blx	r5
 80086c8:	3001      	adds	r0, #1
 80086ca:	d025      	beq.n	8008718 <_printf_common+0xa8>
 80086cc:	2206      	movs	r2, #6
 80086ce:	6823      	ldr	r3, [r4, #0]
 80086d0:	2500      	movs	r5, #0
 80086d2:	4013      	ands	r3, r2
 80086d4:	2b04      	cmp	r3, #4
 80086d6:	d105      	bne.n	80086e4 <_printf_common+0x74>
 80086d8:	6833      	ldr	r3, [r6, #0]
 80086da:	68e5      	ldr	r5, [r4, #12]
 80086dc:	1aed      	subs	r5, r5, r3
 80086de:	43eb      	mvns	r3, r5
 80086e0:	17db      	asrs	r3, r3, #31
 80086e2:	401d      	ands	r5, r3
 80086e4:	68a3      	ldr	r3, [r4, #8]
 80086e6:	6922      	ldr	r2, [r4, #16]
 80086e8:	4293      	cmp	r3, r2
 80086ea:	dd01      	ble.n	80086f0 <_printf_common+0x80>
 80086ec:	1a9b      	subs	r3, r3, r2
 80086ee:	18ed      	adds	r5, r5, r3
 80086f0:	2600      	movs	r6, #0
 80086f2:	42b5      	cmp	r5, r6
 80086f4:	d120      	bne.n	8008738 <_printf_common+0xc8>
 80086f6:	2000      	movs	r0, #0
 80086f8:	e010      	b.n	800871c <_printf_common+0xac>
 80086fa:	3501      	adds	r5, #1
 80086fc:	68e3      	ldr	r3, [r4, #12]
 80086fe:	6832      	ldr	r2, [r6, #0]
 8008700:	1a9b      	subs	r3, r3, r2
 8008702:	42ab      	cmp	r3, r5
 8008704:	ddd2      	ble.n	80086ac <_printf_common+0x3c>
 8008706:	0022      	movs	r2, r4
 8008708:	2301      	movs	r3, #1
 800870a:	9901      	ldr	r1, [sp, #4]
 800870c:	9800      	ldr	r0, [sp, #0]
 800870e:	9f08      	ldr	r7, [sp, #32]
 8008710:	3219      	adds	r2, #25
 8008712:	47b8      	blx	r7
 8008714:	3001      	adds	r0, #1
 8008716:	d1f0      	bne.n	80086fa <_printf_common+0x8a>
 8008718:	2001      	movs	r0, #1
 800871a:	4240      	negs	r0, r0
 800871c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800871e:	2030      	movs	r0, #48	; 0x30
 8008720:	18e1      	adds	r1, r4, r3
 8008722:	3143      	adds	r1, #67	; 0x43
 8008724:	7008      	strb	r0, [r1, #0]
 8008726:	0021      	movs	r1, r4
 8008728:	1c5a      	adds	r2, r3, #1
 800872a:	3145      	adds	r1, #69	; 0x45
 800872c:	7809      	ldrb	r1, [r1, #0]
 800872e:	18a2      	adds	r2, r4, r2
 8008730:	3243      	adds	r2, #67	; 0x43
 8008732:	3302      	adds	r3, #2
 8008734:	7011      	strb	r1, [r2, #0]
 8008736:	e7c1      	b.n	80086bc <_printf_common+0x4c>
 8008738:	0022      	movs	r2, r4
 800873a:	2301      	movs	r3, #1
 800873c:	9901      	ldr	r1, [sp, #4]
 800873e:	9800      	ldr	r0, [sp, #0]
 8008740:	9f08      	ldr	r7, [sp, #32]
 8008742:	321a      	adds	r2, #26
 8008744:	47b8      	blx	r7
 8008746:	3001      	adds	r0, #1
 8008748:	d0e6      	beq.n	8008718 <_printf_common+0xa8>
 800874a:	3601      	adds	r6, #1
 800874c:	e7d1      	b.n	80086f2 <_printf_common+0x82>
	...

08008750 <_printf_i>:
 8008750:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008752:	b08b      	sub	sp, #44	; 0x2c
 8008754:	9206      	str	r2, [sp, #24]
 8008756:	000a      	movs	r2, r1
 8008758:	3243      	adds	r2, #67	; 0x43
 800875a:	9307      	str	r3, [sp, #28]
 800875c:	9005      	str	r0, [sp, #20]
 800875e:	9204      	str	r2, [sp, #16]
 8008760:	7e0a      	ldrb	r2, [r1, #24]
 8008762:	000c      	movs	r4, r1
 8008764:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008766:	2a78      	cmp	r2, #120	; 0x78
 8008768:	d809      	bhi.n	800877e <_printf_i+0x2e>
 800876a:	2a62      	cmp	r2, #98	; 0x62
 800876c:	d80b      	bhi.n	8008786 <_printf_i+0x36>
 800876e:	2a00      	cmp	r2, #0
 8008770:	d100      	bne.n	8008774 <_printf_i+0x24>
 8008772:	e0be      	b.n	80088f2 <_printf_i+0x1a2>
 8008774:	497c      	ldr	r1, [pc, #496]	; (8008968 <_printf_i+0x218>)
 8008776:	9103      	str	r1, [sp, #12]
 8008778:	2a58      	cmp	r2, #88	; 0x58
 800877a:	d100      	bne.n	800877e <_printf_i+0x2e>
 800877c:	e093      	b.n	80088a6 <_printf_i+0x156>
 800877e:	0026      	movs	r6, r4
 8008780:	3642      	adds	r6, #66	; 0x42
 8008782:	7032      	strb	r2, [r6, #0]
 8008784:	e022      	b.n	80087cc <_printf_i+0x7c>
 8008786:	0010      	movs	r0, r2
 8008788:	3863      	subs	r0, #99	; 0x63
 800878a:	2815      	cmp	r0, #21
 800878c:	d8f7      	bhi.n	800877e <_printf_i+0x2e>
 800878e:	f7f7 fcc1 	bl	8000114 <__gnu_thumb1_case_shi>
 8008792:	0016      	.short	0x0016
 8008794:	fff6001f 	.word	0xfff6001f
 8008798:	fff6fff6 	.word	0xfff6fff6
 800879c:	001ffff6 	.word	0x001ffff6
 80087a0:	fff6fff6 	.word	0xfff6fff6
 80087a4:	fff6fff6 	.word	0xfff6fff6
 80087a8:	003600a3 	.word	0x003600a3
 80087ac:	fff60083 	.word	0xfff60083
 80087b0:	00b4fff6 	.word	0x00b4fff6
 80087b4:	0036fff6 	.word	0x0036fff6
 80087b8:	fff6fff6 	.word	0xfff6fff6
 80087bc:	0087      	.short	0x0087
 80087be:	0026      	movs	r6, r4
 80087c0:	681a      	ldr	r2, [r3, #0]
 80087c2:	3642      	adds	r6, #66	; 0x42
 80087c4:	1d11      	adds	r1, r2, #4
 80087c6:	6019      	str	r1, [r3, #0]
 80087c8:	6813      	ldr	r3, [r2, #0]
 80087ca:	7033      	strb	r3, [r6, #0]
 80087cc:	2301      	movs	r3, #1
 80087ce:	e0a2      	b.n	8008916 <_printf_i+0x1c6>
 80087d0:	6818      	ldr	r0, [r3, #0]
 80087d2:	6809      	ldr	r1, [r1, #0]
 80087d4:	1d02      	adds	r2, r0, #4
 80087d6:	060d      	lsls	r5, r1, #24
 80087d8:	d50b      	bpl.n	80087f2 <_printf_i+0xa2>
 80087da:	6805      	ldr	r5, [r0, #0]
 80087dc:	601a      	str	r2, [r3, #0]
 80087de:	2d00      	cmp	r5, #0
 80087e0:	da03      	bge.n	80087ea <_printf_i+0x9a>
 80087e2:	232d      	movs	r3, #45	; 0x2d
 80087e4:	9a04      	ldr	r2, [sp, #16]
 80087e6:	426d      	negs	r5, r5
 80087e8:	7013      	strb	r3, [r2, #0]
 80087ea:	4b5f      	ldr	r3, [pc, #380]	; (8008968 <_printf_i+0x218>)
 80087ec:	270a      	movs	r7, #10
 80087ee:	9303      	str	r3, [sp, #12]
 80087f0:	e01b      	b.n	800882a <_printf_i+0xda>
 80087f2:	6805      	ldr	r5, [r0, #0]
 80087f4:	601a      	str	r2, [r3, #0]
 80087f6:	0649      	lsls	r1, r1, #25
 80087f8:	d5f1      	bpl.n	80087de <_printf_i+0x8e>
 80087fa:	b22d      	sxth	r5, r5
 80087fc:	e7ef      	b.n	80087de <_printf_i+0x8e>
 80087fe:	680d      	ldr	r5, [r1, #0]
 8008800:	6819      	ldr	r1, [r3, #0]
 8008802:	1d08      	adds	r0, r1, #4
 8008804:	6018      	str	r0, [r3, #0]
 8008806:	062e      	lsls	r6, r5, #24
 8008808:	d501      	bpl.n	800880e <_printf_i+0xbe>
 800880a:	680d      	ldr	r5, [r1, #0]
 800880c:	e003      	b.n	8008816 <_printf_i+0xc6>
 800880e:	066d      	lsls	r5, r5, #25
 8008810:	d5fb      	bpl.n	800880a <_printf_i+0xba>
 8008812:	680d      	ldr	r5, [r1, #0]
 8008814:	b2ad      	uxth	r5, r5
 8008816:	4b54      	ldr	r3, [pc, #336]	; (8008968 <_printf_i+0x218>)
 8008818:	2708      	movs	r7, #8
 800881a:	9303      	str	r3, [sp, #12]
 800881c:	2a6f      	cmp	r2, #111	; 0x6f
 800881e:	d000      	beq.n	8008822 <_printf_i+0xd2>
 8008820:	3702      	adds	r7, #2
 8008822:	0023      	movs	r3, r4
 8008824:	2200      	movs	r2, #0
 8008826:	3343      	adds	r3, #67	; 0x43
 8008828:	701a      	strb	r2, [r3, #0]
 800882a:	6863      	ldr	r3, [r4, #4]
 800882c:	60a3      	str	r3, [r4, #8]
 800882e:	2b00      	cmp	r3, #0
 8008830:	db03      	blt.n	800883a <_printf_i+0xea>
 8008832:	2104      	movs	r1, #4
 8008834:	6822      	ldr	r2, [r4, #0]
 8008836:	438a      	bics	r2, r1
 8008838:	6022      	str	r2, [r4, #0]
 800883a:	2d00      	cmp	r5, #0
 800883c:	d102      	bne.n	8008844 <_printf_i+0xf4>
 800883e:	9e04      	ldr	r6, [sp, #16]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d00c      	beq.n	800885e <_printf_i+0x10e>
 8008844:	9e04      	ldr	r6, [sp, #16]
 8008846:	0028      	movs	r0, r5
 8008848:	0039      	movs	r1, r7
 800884a:	f7f7 fcf3 	bl	8000234 <__aeabi_uidivmod>
 800884e:	9b03      	ldr	r3, [sp, #12]
 8008850:	3e01      	subs	r6, #1
 8008852:	5c5b      	ldrb	r3, [r3, r1]
 8008854:	7033      	strb	r3, [r6, #0]
 8008856:	002b      	movs	r3, r5
 8008858:	0005      	movs	r5, r0
 800885a:	429f      	cmp	r7, r3
 800885c:	d9f3      	bls.n	8008846 <_printf_i+0xf6>
 800885e:	2f08      	cmp	r7, #8
 8008860:	d109      	bne.n	8008876 <_printf_i+0x126>
 8008862:	6823      	ldr	r3, [r4, #0]
 8008864:	07db      	lsls	r3, r3, #31
 8008866:	d506      	bpl.n	8008876 <_printf_i+0x126>
 8008868:	6862      	ldr	r2, [r4, #4]
 800886a:	6923      	ldr	r3, [r4, #16]
 800886c:	429a      	cmp	r2, r3
 800886e:	dc02      	bgt.n	8008876 <_printf_i+0x126>
 8008870:	2330      	movs	r3, #48	; 0x30
 8008872:	3e01      	subs	r6, #1
 8008874:	7033      	strb	r3, [r6, #0]
 8008876:	9b04      	ldr	r3, [sp, #16]
 8008878:	1b9b      	subs	r3, r3, r6
 800887a:	6123      	str	r3, [r4, #16]
 800887c:	9b07      	ldr	r3, [sp, #28]
 800887e:	0021      	movs	r1, r4
 8008880:	9300      	str	r3, [sp, #0]
 8008882:	9805      	ldr	r0, [sp, #20]
 8008884:	9b06      	ldr	r3, [sp, #24]
 8008886:	aa09      	add	r2, sp, #36	; 0x24
 8008888:	f7ff fef2 	bl	8008670 <_printf_common>
 800888c:	3001      	adds	r0, #1
 800888e:	d147      	bne.n	8008920 <_printf_i+0x1d0>
 8008890:	2001      	movs	r0, #1
 8008892:	4240      	negs	r0, r0
 8008894:	b00b      	add	sp, #44	; 0x2c
 8008896:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008898:	2220      	movs	r2, #32
 800889a:	6809      	ldr	r1, [r1, #0]
 800889c:	430a      	orrs	r2, r1
 800889e:	6022      	str	r2, [r4, #0]
 80088a0:	2278      	movs	r2, #120	; 0x78
 80088a2:	4932      	ldr	r1, [pc, #200]	; (800896c <_printf_i+0x21c>)
 80088a4:	9103      	str	r1, [sp, #12]
 80088a6:	0021      	movs	r1, r4
 80088a8:	3145      	adds	r1, #69	; 0x45
 80088aa:	700a      	strb	r2, [r1, #0]
 80088ac:	6819      	ldr	r1, [r3, #0]
 80088ae:	6822      	ldr	r2, [r4, #0]
 80088b0:	c920      	ldmia	r1!, {r5}
 80088b2:	0610      	lsls	r0, r2, #24
 80088b4:	d402      	bmi.n	80088bc <_printf_i+0x16c>
 80088b6:	0650      	lsls	r0, r2, #25
 80088b8:	d500      	bpl.n	80088bc <_printf_i+0x16c>
 80088ba:	b2ad      	uxth	r5, r5
 80088bc:	6019      	str	r1, [r3, #0]
 80088be:	07d3      	lsls	r3, r2, #31
 80088c0:	d502      	bpl.n	80088c8 <_printf_i+0x178>
 80088c2:	2320      	movs	r3, #32
 80088c4:	4313      	orrs	r3, r2
 80088c6:	6023      	str	r3, [r4, #0]
 80088c8:	2710      	movs	r7, #16
 80088ca:	2d00      	cmp	r5, #0
 80088cc:	d1a9      	bne.n	8008822 <_printf_i+0xd2>
 80088ce:	2220      	movs	r2, #32
 80088d0:	6823      	ldr	r3, [r4, #0]
 80088d2:	4393      	bics	r3, r2
 80088d4:	6023      	str	r3, [r4, #0]
 80088d6:	e7a4      	b.n	8008822 <_printf_i+0xd2>
 80088d8:	681a      	ldr	r2, [r3, #0]
 80088da:	680d      	ldr	r5, [r1, #0]
 80088dc:	1d10      	adds	r0, r2, #4
 80088de:	6949      	ldr	r1, [r1, #20]
 80088e0:	6018      	str	r0, [r3, #0]
 80088e2:	6813      	ldr	r3, [r2, #0]
 80088e4:	062e      	lsls	r6, r5, #24
 80088e6:	d501      	bpl.n	80088ec <_printf_i+0x19c>
 80088e8:	6019      	str	r1, [r3, #0]
 80088ea:	e002      	b.n	80088f2 <_printf_i+0x1a2>
 80088ec:	066d      	lsls	r5, r5, #25
 80088ee:	d5fb      	bpl.n	80088e8 <_printf_i+0x198>
 80088f0:	8019      	strh	r1, [r3, #0]
 80088f2:	2300      	movs	r3, #0
 80088f4:	9e04      	ldr	r6, [sp, #16]
 80088f6:	6123      	str	r3, [r4, #16]
 80088f8:	e7c0      	b.n	800887c <_printf_i+0x12c>
 80088fa:	681a      	ldr	r2, [r3, #0]
 80088fc:	1d11      	adds	r1, r2, #4
 80088fe:	6019      	str	r1, [r3, #0]
 8008900:	6816      	ldr	r6, [r2, #0]
 8008902:	2100      	movs	r1, #0
 8008904:	0030      	movs	r0, r6
 8008906:	6862      	ldr	r2, [r4, #4]
 8008908:	f000 f845 	bl	8008996 <memchr>
 800890c:	2800      	cmp	r0, #0
 800890e:	d001      	beq.n	8008914 <_printf_i+0x1c4>
 8008910:	1b80      	subs	r0, r0, r6
 8008912:	6060      	str	r0, [r4, #4]
 8008914:	6863      	ldr	r3, [r4, #4]
 8008916:	6123      	str	r3, [r4, #16]
 8008918:	2300      	movs	r3, #0
 800891a:	9a04      	ldr	r2, [sp, #16]
 800891c:	7013      	strb	r3, [r2, #0]
 800891e:	e7ad      	b.n	800887c <_printf_i+0x12c>
 8008920:	0032      	movs	r2, r6
 8008922:	6923      	ldr	r3, [r4, #16]
 8008924:	9906      	ldr	r1, [sp, #24]
 8008926:	9805      	ldr	r0, [sp, #20]
 8008928:	9d07      	ldr	r5, [sp, #28]
 800892a:	47a8      	blx	r5
 800892c:	3001      	adds	r0, #1
 800892e:	d0af      	beq.n	8008890 <_printf_i+0x140>
 8008930:	6823      	ldr	r3, [r4, #0]
 8008932:	079b      	lsls	r3, r3, #30
 8008934:	d415      	bmi.n	8008962 <_printf_i+0x212>
 8008936:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008938:	68e0      	ldr	r0, [r4, #12]
 800893a:	4298      	cmp	r0, r3
 800893c:	daaa      	bge.n	8008894 <_printf_i+0x144>
 800893e:	0018      	movs	r0, r3
 8008940:	e7a8      	b.n	8008894 <_printf_i+0x144>
 8008942:	0022      	movs	r2, r4
 8008944:	2301      	movs	r3, #1
 8008946:	9906      	ldr	r1, [sp, #24]
 8008948:	9805      	ldr	r0, [sp, #20]
 800894a:	9e07      	ldr	r6, [sp, #28]
 800894c:	3219      	adds	r2, #25
 800894e:	47b0      	blx	r6
 8008950:	3001      	adds	r0, #1
 8008952:	d09d      	beq.n	8008890 <_printf_i+0x140>
 8008954:	3501      	adds	r5, #1
 8008956:	68e3      	ldr	r3, [r4, #12]
 8008958:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800895a:	1a9b      	subs	r3, r3, r2
 800895c:	42ab      	cmp	r3, r5
 800895e:	dcf0      	bgt.n	8008942 <_printf_i+0x1f2>
 8008960:	e7e9      	b.n	8008936 <_printf_i+0x1e6>
 8008962:	2500      	movs	r5, #0
 8008964:	e7f7      	b.n	8008956 <_printf_i+0x206>
 8008966:	46c0      	nop			; (mov r8, r8)
 8008968:	0800a711 	.word	0x0800a711
 800896c:	0800a722 	.word	0x0800a722

08008970 <memmove>:
 8008970:	b510      	push	{r4, lr}
 8008972:	4288      	cmp	r0, r1
 8008974:	d902      	bls.n	800897c <memmove+0xc>
 8008976:	188b      	adds	r3, r1, r2
 8008978:	4298      	cmp	r0, r3
 800897a:	d303      	bcc.n	8008984 <memmove+0x14>
 800897c:	2300      	movs	r3, #0
 800897e:	e007      	b.n	8008990 <memmove+0x20>
 8008980:	5c8b      	ldrb	r3, [r1, r2]
 8008982:	5483      	strb	r3, [r0, r2]
 8008984:	3a01      	subs	r2, #1
 8008986:	d2fb      	bcs.n	8008980 <memmove+0x10>
 8008988:	bd10      	pop	{r4, pc}
 800898a:	5ccc      	ldrb	r4, [r1, r3]
 800898c:	54c4      	strb	r4, [r0, r3]
 800898e:	3301      	adds	r3, #1
 8008990:	429a      	cmp	r2, r3
 8008992:	d1fa      	bne.n	800898a <memmove+0x1a>
 8008994:	e7f8      	b.n	8008988 <memmove+0x18>

08008996 <memchr>:
 8008996:	b2c9      	uxtb	r1, r1
 8008998:	1882      	adds	r2, r0, r2
 800899a:	4290      	cmp	r0, r2
 800899c:	d101      	bne.n	80089a2 <memchr+0xc>
 800899e:	2000      	movs	r0, #0
 80089a0:	4770      	bx	lr
 80089a2:	7803      	ldrb	r3, [r0, #0]
 80089a4:	428b      	cmp	r3, r1
 80089a6:	d0fb      	beq.n	80089a0 <memchr+0xa>
 80089a8:	3001      	adds	r0, #1
 80089aa:	e7f6      	b.n	800899a <memchr+0x4>

080089ac <_realloc_r>:
 80089ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80089ae:	0007      	movs	r7, r0
 80089b0:	000e      	movs	r6, r1
 80089b2:	0014      	movs	r4, r2
 80089b4:	2900      	cmp	r1, #0
 80089b6:	d105      	bne.n	80089c4 <_realloc_r+0x18>
 80089b8:	0011      	movs	r1, r2
 80089ba:	f7ff fb77 	bl	80080ac <_malloc_r>
 80089be:	0005      	movs	r5, r0
 80089c0:	0028      	movs	r0, r5
 80089c2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80089c4:	2a00      	cmp	r2, #0
 80089c6:	d103      	bne.n	80089d0 <_realloc_r+0x24>
 80089c8:	f7ff fca6 	bl	8008318 <_free_r>
 80089cc:	0025      	movs	r5, r4
 80089ce:	e7f7      	b.n	80089c0 <_realloc_r+0x14>
 80089d0:	f000 f81b 	bl	8008a0a <_malloc_usable_size_r>
 80089d4:	9001      	str	r0, [sp, #4]
 80089d6:	4284      	cmp	r4, r0
 80089d8:	d803      	bhi.n	80089e2 <_realloc_r+0x36>
 80089da:	0035      	movs	r5, r6
 80089dc:	0843      	lsrs	r3, r0, #1
 80089de:	42a3      	cmp	r3, r4
 80089e0:	d3ee      	bcc.n	80089c0 <_realloc_r+0x14>
 80089e2:	0021      	movs	r1, r4
 80089e4:	0038      	movs	r0, r7
 80089e6:	f7ff fb61 	bl	80080ac <_malloc_r>
 80089ea:	1e05      	subs	r5, r0, #0
 80089ec:	d0e8      	beq.n	80089c0 <_realloc_r+0x14>
 80089ee:	9b01      	ldr	r3, [sp, #4]
 80089f0:	0022      	movs	r2, r4
 80089f2:	429c      	cmp	r4, r3
 80089f4:	d900      	bls.n	80089f8 <_realloc_r+0x4c>
 80089f6:	001a      	movs	r2, r3
 80089f8:	0031      	movs	r1, r6
 80089fa:	0028      	movs	r0, r5
 80089fc:	f7ff fc82 	bl	8008304 <memcpy>
 8008a00:	0031      	movs	r1, r6
 8008a02:	0038      	movs	r0, r7
 8008a04:	f7ff fc88 	bl	8008318 <_free_r>
 8008a08:	e7da      	b.n	80089c0 <_realloc_r+0x14>

08008a0a <_malloc_usable_size_r>:
 8008a0a:	1f0b      	subs	r3, r1, #4
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	1f18      	subs	r0, r3, #4
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	da01      	bge.n	8008a18 <_malloc_usable_size_r+0xe>
 8008a14:	580b      	ldr	r3, [r1, r0]
 8008a16:	18c0      	adds	r0, r0, r3
 8008a18:	4770      	bx	lr
	...

08008a1c <_init>:
 8008a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a1e:	46c0      	nop			; (mov r8, r8)
 8008a20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a22:	bc08      	pop	{r3}
 8008a24:	469e      	mov	lr, r3
 8008a26:	4770      	bx	lr

08008a28 <_fini>:
 8008a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a2a:	46c0      	nop			; (mov r8, r8)
 8008a2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a2e:	bc08      	pop	{r3}
 8008a30:	469e      	mov	lr, r3
 8008a32:	4770      	bx	lr
