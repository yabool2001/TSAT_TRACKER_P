
TSAT_TRACKER_P.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000087ec  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001c64  080088a8  080088a8  000188a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a50c  0800a50c  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  0800a50c  0800a50c  0001a50c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a514  0800a514  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a514  0800a514  0001a514  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a518  0800a518  0001a518  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  0800a51c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001524  20000060  0800a57c  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001584  0800a57c  00021584  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a1ac  00000000  00000000  000200cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000031bc  00000000  00000000  0003a277  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001838  00000000  00000000  0003d438  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001314  00000000  00000000  0003ec70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f49f  00000000  00000000  0003ff84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b50d  00000000  00000000  0005f423  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c99cc  00000000  00000000  0007a930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005efc  00000000  00000000  001442fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004d  00000000  00000000  0014a1f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000060 	.word	0x20000060
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08008890 	.word	0x08008890

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000064 	.word	0x20000064
 8000100:	08008890 	.word	0x08008890

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_shi>:
 8000114:	b403      	push	{r0, r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0040      	lsls	r0, r0, #1
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	5e09      	ldrsh	r1, [r1, r0]
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	448e      	add	lr, r1
 8000124:	bc03      	pop	{r0, r1}
 8000126:	4770      	bx	lr

08000128 <__udivsi3>:
 8000128:	2200      	movs	r2, #0
 800012a:	0843      	lsrs	r3, r0, #1
 800012c:	428b      	cmp	r3, r1
 800012e:	d374      	bcc.n	800021a <__udivsi3+0xf2>
 8000130:	0903      	lsrs	r3, r0, #4
 8000132:	428b      	cmp	r3, r1
 8000134:	d35f      	bcc.n	80001f6 <__udivsi3+0xce>
 8000136:	0a03      	lsrs	r3, r0, #8
 8000138:	428b      	cmp	r3, r1
 800013a:	d344      	bcc.n	80001c6 <__udivsi3+0x9e>
 800013c:	0b03      	lsrs	r3, r0, #12
 800013e:	428b      	cmp	r3, r1
 8000140:	d328      	bcc.n	8000194 <__udivsi3+0x6c>
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d30d      	bcc.n	8000164 <__udivsi3+0x3c>
 8000148:	22ff      	movs	r2, #255	; 0xff
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	ba12      	rev	r2, r2
 800014e:	0c03      	lsrs	r3, r0, #16
 8000150:	428b      	cmp	r3, r1
 8000152:	d302      	bcc.n	800015a <__udivsi3+0x32>
 8000154:	1212      	asrs	r2, r2, #8
 8000156:	0209      	lsls	r1, r1, #8
 8000158:	d065      	beq.n	8000226 <__udivsi3+0xfe>
 800015a:	0b03      	lsrs	r3, r0, #12
 800015c:	428b      	cmp	r3, r1
 800015e:	d319      	bcc.n	8000194 <__udivsi3+0x6c>
 8000160:	e000      	b.n	8000164 <__udivsi3+0x3c>
 8000162:	0a09      	lsrs	r1, r1, #8
 8000164:	0bc3      	lsrs	r3, r0, #15
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x46>
 800016a:	03cb      	lsls	r3, r1, #15
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b83      	lsrs	r3, r0, #14
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x52>
 8000176:	038b      	lsls	r3, r1, #14
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b43      	lsrs	r3, r0, #13
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x5e>
 8000182:	034b      	lsls	r3, r1, #13
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b03      	lsrs	r3, r0, #12
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x6a>
 800018e:	030b      	lsls	r3, r1, #12
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0ac3      	lsrs	r3, r0, #11
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x76>
 800019a:	02cb      	lsls	r3, r1, #11
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a83      	lsrs	r3, r0, #10
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x82>
 80001a6:	028b      	lsls	r3, r1, #10
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a43      	lsrs	r3, r0, #9
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x8e>
 80001b2:	024b      	lsls	r3, r1, #9
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a03      	lsrs	r3, r0, #8
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x9a>
 80001be:	020b      	lsls	r3, r1, #8
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	d2cd      	bcs.n	8000162 <__udivsi3+0x3a>
 80001c6:	09c3      	lsrs	r3, r0, #7
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xa8>
 80001cc:	01cb      	lsls	r3, r1, #7
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0983      	lsrs	r3, r0, #6
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xb4>
 80001d8:	018b      	lsls	r3, r1, #6
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0943      	lsrs	r3, r0, #5
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xc0>
 80001e4:	014b      	lsls	r3, r1, #5
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0903      	lsrs	r3, r0, #4
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xcc>
 80001f0:	010b      	lsls	r3, r1, #4
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	08c3      	lsrs	r3, r0, #3
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xd8>
 80001fc:	00cb      	lsls	r3, r1, #3
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0883      	lsrs	r3, r0, #2
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xe4>
 8000208:	008b      	lsls	r3, r1, #2
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0843      	lsrs	r3, r0, #1
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xf0>
 8000214:	004b      	lsls	r3, r1, #1
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	1a41      	subs	r1, r0, r1
 800021c:	d200      	bcs.n	8000220 <__udivsi3+0xf8>
 800021e:	4601      	mov	r1, r0
 8000220:	4152      	adcs	r2, r2
 8000222:	4610      	mov	r0, r2
 8000224:	4770      	bx	lr
 8000226:	e7ff      	b.n	8000228 <__udivsi3+0x100>
 8000228:	b501      	push	{r0, lr}
 800022a:	2000      	movs	r0, #0
 800022c:	f000 f8f0 	bl	8000410 <__aeabi_idiv0>
 8000230:	bd02      	pop	{r1, pc}
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uidivmod>:
 8000234:	2900      	cmp	r1, #0
 8000236:	d0f7      	beq.n	8000228 <__udivsi3+0x100>
 8000238:	e776      	b.n	8000128 <__udivsi3>
 800023a:	4770      	bx	lr

0800023c <__divsi3>:
 800023c:	4603      	mov	r3, r0
 800023e:	430b      	orrs	r3, r1
 8000240:	d47f      	bmi.n	8000342 <__divsi3+0x106>
 8000242:	2200      	movs	r2, #0
 8000244:	0843      	lsrs	r3, r0, #1
 8000246:	428b      	cmp	r3, r1
 8000248:	d374      	bcc.n	8000334 <__divsi3+0xf8>
 800024a:	0903      	lsrs	r3, r0, #4
 800024c:	428b      	cmp	r3, r1
 800024e:	d35f      	bcc.n	8000310 <__divsi3+0xd4>
 8000250:	0a03      	lsrs	r3, r0, #8
 8000252:	428b      	cmp	r3, r1
 8000254:	d344      	bcc.n	80002e0 <__divsi3+0xa4>
 8000256:	0b03      	lsrs	r3, r0, #12
 8000258:	428b      	cmp	r3, r1
 800025a:	d328      	bcc.n	80002ae <__divsi3+0x72>
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d30d      	bcc.n	800027e <__divsi3+0x42>
 8000262:	22ff      	movs	r2, #255	; 0xff
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	ba12      	rev	r2, r2
 8000268:	0c03      	lsrs	r3, r0, #16
 800026a:	428b      	cmp	r3, r1
 800026c:	d302      	bcc.n	8000274 <__divsi3+0x38>
 800026e:	1212      	asrs	r2, r2, #8
 8000270:	0209      	lsls	r1, r1, #8
 8000272:	d065      	beq.n	8000340 <__divsi3+0x104>
 8000274:	0b03      	lsrs	r3, r0, #12
 8000276:	428b      	cmp	r3, r1
 8000278:	d319      	bcc.n	80002ae <__divsi3+0x72>
 800027a:	e000      	b.n	800027e <__divsi3+0x42>
 800027c:	0a09      	lsrs	r1, r1, #8
 800027e:	0bc3      	lsrs	r3, r0, #15
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x4c>
 8000284:	03cb      	lsls	r3, r1, #15
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b83      	lsrs	r3, r0, #14
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x58>
 8000290:	038b      	lsls	r3, r1, #14
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b43      	lsrs	r3, r0, #13
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x64>
 800029c:	034b      	lsls	r3, r1, #13
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b03      	lsrs	r3, r0, #12
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x70>
 80002a8:	030b      	lsls	r3, r1, #12
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0ac3      	lsrs	r3, r0, #11
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x7c>
 80002b4:	02cb      	lsls	r3, r1, #11
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a83      	lsrs	r3, r0, #10
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x88>
 80002c0:	028b      	lsls	r3, r1, #10
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a43      	lsrs	r3, r0, #9
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x94>
 80002cc:	024b      	lsls	r3, r1, #9
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a03      	lsrs	r3, r0, #8
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0xa0>
 80002d8:	020b      	lsls	r3, r1, #8
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	d2cd      	bcs.n	800027c <__divsi3+0x40>
 80002e0:	09c3      	lsrs	r3, r0, #7
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xae>
 80002e6:	01cb      	lsls	r3, r1, #7
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0983      	lsrs	r3, r0, #6
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xba>
 80002f2:	018b      	lsls	r3, r1, #6
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0943      	lsrs	r3, r0, #5
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xc6>
 80002fe:	014b      	lsls	r3, r1, #5
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0903      	lsrs	r3, r0, #4
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xd2>
 800030a:	010b      	lsls	r3, r1, #4
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	08c3      	lsrs	r3, r0, #3
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xde>
 8000316:	00cb      	lsls	r3, r1, #3
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0883      	lsrs	r3, r0, #2
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xea>
 8000322:	008b      	lsls	r3, r1, #2
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0843      	lsrs	r3, r0, #1
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xf6>
 800032e:	004b      	lsls	r3, r1, #1
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	1a41      	subs	r1, r0, r1
 8000336:	d200      	bcs.n	800033a <__divsi3+0xfe>
 8000338:	4601      	mov	r1, r0
 800033a:	4152      	adcs	r2, r2
 800033c:	4610      	mov	r0, r2
 800033e:	4770      	bx	lr
 8000340:	e05d      	b.n	80003fe <__divsi3+0x1c2>
 8000342:	0fca      	lsrs	r2, r1, #31
 8000344:	d000      	beq.n	8000348 <__divsi3+0x10c>
 8000346:	4249      	negs	r1, r1
 8000348:	1003      	asrs	r3, r0, #32
 800034a:	d300      	bcc.n	800034e <__divsi3+0x112>
 800034c:	4240      	negs	r0, r0
 800034e:	4053      	eors	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	469c      	mov	ip, r3
 8000354:	0903      	lsrs	r3, r0, #4
 8000356:	428b      	cmp	r3, r1
 8000358:	d32d      	bcc.n	80003b6 <__divsi3+0x17a>
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d312      	bcc.n	8000386 <__divsi3+0x14a>
 8000360:	22fc      	movs	r2, #252	; 0xfc
 8000362:	0189      	lsls	r1, r1, #6
 8000364:	ba12      	rev	r2, r2
 8000366:	0a03      	lsrs	r3, r0, #8
 8000368:	428b      	cmp	r3, r1
 800036a:	d30c      	bcc.n	8000386 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	1192      	asrs	r2, r2, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d308      	bcc.n	8000386 <__divsi3+0x14a>
 8000374:	0189      	lsls	r1, r1, #6
 8000376:	1192      	asrs	r2, r2, #6
 8000378:	428b      	cmp	r3, r1
 800037a:	d304      	bcc.n	8000386 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	d03a      	beq.n	80003f6 <__divsi3+0x1ba>
 8000380:	1192      	asrs	r2, r2, #6
 8000382:	e000      	b.n	8000386 <__divsi3+0x14a>
 8000384:	0989      	lsrs	r1, r1, #6
 8000386:	09c3      	lsrs	r3, r0, #7
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x154>
 800038c:	01cb      	lsls	r3, r1, #7
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0983      	lsrs	r3, r0, #6
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x160>
 8000398:	018b      	lsls	r3, r1, #6
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0943      	lsrs	r3, r0, #5
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x16c>
 80003a4:	014b      	lsls	r3, r1, #5
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0903      	lsrs	r3, r0, #4
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x178>
 80003b0:	010b      	lsls	r3, r1, #4
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	08c3      	lsrs	r3, r0, #3
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x184>
 80003bc:	00cb      	lsls	r3, r1, #3
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0883      	lsrs	r3, r0, #2
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x190>
 80003c8:	008b      	lsls	r3, r1, #2
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	d2d9      	bcs.n	8000384 <__divsi3+0x148>
 80003d0:	0843      	lsrs	r3, r0, #1
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d301      	bcc.n	80003da <__divsi3+0x19e>
 80003d6:	004b      	lsls	r3, r1, #1
 80003d8:	1ac0      	subs	r0, r0, r3
 80003da:	4152      	adcs	r2, r2
 80003dc:	1a41      	subs	r1, r0, r1
 80003de:	d200      	bcs.n	80003e2 <__divsi3+0x1a6>
 80003e0:	4601      	mov	r1, r0
 80003e2:	4663      	mov	r3, ip
 80003e4:	4152      	adcs	r2, r2
 80003e6:	105b      	asrs	r3, r3, #1
 80003e8:	4610      	mov	r0, r2
 80003ea:	d301      	bcc.n	80003f0 <__divsi3+0x1b4>
 80003ec:	4240      	negs	r0, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d500      	bpl.n	80003f4 <__divsi3+0x1b8>
 80003f2:	4249      	negs	r1, r1
 80003f4:	4770      	bx	lr
 80003f6:	4663      	mov	r3, ip
 80003f8:	105b      	asrs	r3, r3, #1
 80003fa:	d300      	bcc.n	80003fe <__divsi3+0x1c2>
 80003fc:	4240      	negs	r0, r0
 80003fe:	b501      	push	{r0, lr}
 8000400:	2000      	movs	r0, #0
 8000402:	f000 f805 	bl	8000410 <__aeabi_idiv0>
 8000406:	bd02      	pop	{r1, pc}

08000408 <__aeabi_idivmod>:
 8000408:	2900      	cmp	r1, #0
 800040a:	d0f8      	beq.n	80003fe <__divsi3+0x1c2>
 800040c:	e716      	b.n	800023c <__divsi3>
 800040e:	4770      	bx	lr

08000410 <__aeabi_idiv0>:
 8000410:	4770      	bx	lr
 8000412:	46c0      	nop			; (mov r8, r8)

08000414 <__aeabi_uldivmod>:
 8000414:	2b00      	cmp	r3, #0
 8000416:	d111      	bne.n	800043c <__aeabi_uldivmod+0x28>
 8000418:	2a00      	cmp	r2, #0
 800041a:	d10f      	bne.n	800043c <__aeabi_uldivmod+0x28>
 800041c:	2900      	cmp	r1, #0
 800041e:	d100      	bne.n	8000422 <__aeabi_uldivmod+0xe>
 8000420:	2800      	cmp	r0, #0
 8000422:	d002      	beq.n	800042a <__aeabi_uldivmod+0x16>
 8000424:	2100      	movs	r1, #0
 8000426:	43c9      	mvns	r1, r1
 8000428:	0008      	movs	r0, r1
 800042a:	b407      	push	{r0, r1, r2}
 800042c:	4802      	ldr	r0, [pc, #8]	; (8000438 <__aeabi_uldivmod+0x24>)
 800042e:	a102      	add	r1, pc, #8	; (adr r1, 8000438 <__aeabi_uldivmod+0x24>)
 8000430:	1840      	adds	r0, r0, r1
 8000432:	9002      	str	r0, [sp, #8]
 8000434:	bd03      	pop	{r0, r1, pc}
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	ffffffd9 	.word	0xffffffd9
 800043c:	b403      	push	{r0, r1}
 800043e:	4668      	mov	r0, sp
 8000440:	b501      	push	{r0, lr}
 8000442:	9802      	ldr	r0, [sp, #8]
 8000444:	f000 f806 	bl	8000454 <__udivmoddi4>
 8000448:	9b01      	ldr	r3, [sp, #4]
 800044a:	469e      	mov	lr, r3
 800044c:	b002      	add	sp, #8
 800044e:	bc0c      	pop	{r2, r3}
 8000450:	4770      	bx	lr
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__udivmoddi4>:
 8000454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000456:	4657      	mov	r7, sl
 8000458:	464e      	mov	r6, r9
 800045a:	4645      	mov	r5, r8
 800045c:	46de      	mov	lr, fp
 800045e:	b5e0      	push	{r5, r6, r7, lr}
 8000460:	0004      	movs	r4, r0
 8000462:	000d      	movs	r5, r1
 8000464:	4692      	mov	sl, r2
 8000466:	4699      	mov	r9, r3
 8000468:	b083      	sub	sp, #12
 800046a:	428b      	cmp	r3, r1
 800046c:	d830      	bhi.n	80004d0 <__udivmoddi4+0x7c>
 800046e:	d02d      	beq.n	80004cc <__udivmoddi4+0x78>
 8000470:	4649      	mov	r1, r9
 8000472:	4650      	mov	r0, sl
 8000474:	f000 f8d8 	bl	8000628 <__clzdi2>
 8000478:	0029      	movs	r1, r5
 800047a:	0006      	movs	r6, r0
 800047c:	0020      	movs	r0, r4
 800047e:	f000 f8d3 	bl	8000628 <__clzdi2>
 8000482:	1a33      	subs	r3, r6, r0
 8000484:	4698      	mov	r8, r3
 8000486:	3b20      	subs	r3, #32
 8000488:	d434      	bmi.n	80004f4 <__udivmoddi4+0xa0>
 800048a:	469b      	mov	fp, r3
 800048c:	4653      	mov	r3, sl
 800048e:	465a      	mov	r2, fp
 8000490:	4093      	lsls	r3, r2
 8000492:	4642      	mov	r2, r8
 8000494:	001f      	movs	r7, r3
 8000496:	4653      	mov	r3, sl
 8000498:	4093      	lsls	r3, r2
 800049a:	001e      	movs	r6, r3
 800049c:	42af      	cmp	r7, r5
 800049e:	d83b      	bhi.n	8000518 <__udivmoddi4+0xc4>
 80004a0:	42af      	cmp	r7, r5
 80004a2:	d100      	bne.n	80004a6 <__udivmoddi4+0x52>
 80004a4:	e079      	b.n	800059a <__udivmoddi4+0x146>
 80004a6:	465b      	mov	r3, fp
 80004a8:	1ba4      	subs	r4, r4, r6
 80004aa:	41bd      	sbcs	r5, r7
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	da00      	bge.n	80004b2 <__udivmoddi4+0x5e>
 80004b0:	e076      	b.n	80005a0 <__udivmoddi4+0x14c>
 80004b2:	2200      	movs	r2, #0
 80004b4:	2300      	movs	r3, #0
 80004b6:	9200      	str	r2, [sp, #0]
 80004b8:	9301      	str	r3, [sp, #4]
 80004ba:	2301      	movs	r3, #1
 80004bc:	465a      	mov	r2, fp
 80004be:	4093      	lsls	r3, r2
 80004c0:	9301      	str	r3, [sp, #4]
 80004c2:	2301      	movs	r3, #1
 80004c4:	4642      	mov	r2, r8
 80004c6:	4093      	lsls	r3, r2
 80004c8:	9300      	str	r3, [sp, #0]
 80004ca:	e029      	b.n	8000520 <__udivmoddi4+0xcc>
 80004cc:	4282      	cmp	r2, r0
 80004ce:	d9cf      	bls.n	8000470 <__udivmoddi4+0x1c>
 80004d0:	2200      	movs	r2, #0
 80004d2:	2300      	movs	r3, #0
 80004d4:	9200      	str	r2, [sp, #0]
 80004d6:	9301      	str	r3, [sp, #4]
 80004d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <__udivmoddi4+0x8e>
 80004de:	601c      	str	r4, [r3, #0]
 80004e0:	605d      	str	r5, [r3, #4]
 80004e2:	9800      	ldr	r0, [sp, #0]
 80004e4:	9901      	ldr	r1, [sp, #4]
 80004e6:	b003      	add	sp, #12
 80004e8:	bcf0      	pop	{r4, r5, r6, r7}
 80004ea:	46bb      	mov	fp, r7
 80004ec:	46b2      	mov	sl, r6
 80004ee:	46a9      	mov	r9, r5
 80004f0:	46a0      	mov	r8, r4
 80004f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004f4:	4642      	mov	r2, r8
 80004f6:	469b      	mov	fp, r3
 80004f8:	2320      	movs	r3, #32
 80004fa:	1a9b      	subs	r3, r3, r2
 80004fc:	4652      	mov	r2, sl
 80004fe:	40da      	lsrs	r2, r3
 8000500:	4641      	mov	r1, r8
 8000502:	0013      	movs	r3, r2
 8000504:	464a      	mov	r2, r9
 8000506:	408a      	lsls	r2, r1
 8000508:	0017      	movs	r7, r2
 800050a:	4642      	mov	r2, r8
 800050c:	431f      	orrs	r7, r3
 800050e:	4653      	mov	r3, sl
 8000510:	4093      	lsls	r3, r2
 8000512:	001e      	movs	r6, r3
 8000514:	42af      	cmp	r7, r5
 8000516:	d9c3      	bls.n	80004a0 <__udivmoddi4+0x4c>
 8000518:	2200      	movs	r2, #0
 800051a:	2300      	movs	r3, #0
 800051c:	9200      	str	r2, [sp, #0]
 800051e:	9301      	str	r3, [sp, #4]
 8000520:	4643      	mov	r3, r8
 8000522:	2b00      	cmp	r3, #0
 8000524:	d0d8      	beq.n	80004d8 <__udivmoddi4+0x84>
 8000526:	07fb      	lsls	r3, r7, #31
 8000528:	0872      	lsrs	r2, r6, #1
 800052a:	431a      	orrs	r2, r3
 800052c:	4646      	mov	r6, r8
 800052e:	087b      	lsrs	r3, r7, #1
 8000530:	e00e      	b.n	8000550 <__udivmoddi4+0xfc>
 8000532:	42ab      	cmp	r3, r5
 8000534:	d101      	bne.n	800053a <__udivmoddi4+0xe6>
 8000536:	42a2      	cmp	r2, r4
 8000538:	d80c      	bhi.n	8000554 <__udivmoddi4+0x100>
 800053a:	1aa4      	subs	r4, r4, r2
 800053c:	419d      	sbcs	r5, r3
 800053e:	2001      	movs	r0, #1
 8000540:	1924      	adds	r4, r4, r4
 8000542:	416d      	adcs	r5, r5
 8000544:	2100      	movs	r1, #0
 8000546:	3e01      	subs	r6, #1
 8000548:	1824      	adds	r4, r4, r0
 800054a:	414d      	adcs	r5, r1
 800054c:	2e00      	cmp	r6, #0
 800054e:	d006      	beq.n	800055e <__udivmoddi4+0x10a>
 8000550:	42ab      	cmp	r3, r5
 8000552:	d9ee      	bls.n	8000532 <__udivmoddi4+0xde>
 8000554:	3e01      	subs	r6, #1
 8000556:	1924      	adds	r4, r4, r4
 8000558:	416d      	adcs	r5, r5
 800055a:	2e00      	cmp	r6, #0
 800055c:	d1f8      	bne.n	8000550 <__udivmoddi4+0xfc>
 800055e:	9800      	ldr	r0, [sp, #0]
 8000560:	9901      	ldr	r1, [sp, #4]
 8000562:	465b      	mov	r3, fp
 8000564:	1900      	adds	r0, r0, r4
 8000566:	4169      	adcs	r1, r5
 8000568:	2b00      	cmp	r3, #0
 800056a:	db24      	blt.n	80005b6 <__udivmoddi4+0x162>
 800056c:	002b      	movs	r3, r5
 800056e:	465a      	mov	r2, fp
 8000570:	4644      	mov	r4, r8
 8000572:	40d3      	lsrs	r3, r2
 8000574:	002a      	movs	r2, r5
 8000576:	40e2      	lsrs	r2, r4
 8000578:	001c      	movs	r4, r3
 800057a:	465b      	mov	r3, fp
 800057c:	0015      	movs	r5, r2
 800057e:	2b00      	cmp	r3, #0
 8000580:	db2a      	blt.n	80005d8 <__udivmoddi4+0x184>
 8000582:	0026      	movs	r6, r4
 8000584:	409e      	lsls	r6, r3
 8000586:	0033      	movs	r3, r6
 8000588:	0026      	movs	r6, r4
 800058a:	4647      	mov	r7, r8
 800058c:	40be      	lsls	r6, r7
 800058e:	0032      	movs	r2, r6
 8000590:	1a80      	subs	r0, r0, r2
 8000592:	4199      	sbcs	r1, r3
 8000594:	9000      	str	r0, [sp, #0]
 8000596:	9101      	str	r1, [sp, #4]
 8000598:	e79e      	b.n	80004d8 <__udivmoddi4+0x84>
 800059a:	42a3      	cmp	r3, r4
 800059c:	d8bc      	bhi.n	8000518 <__udivmoddi4+0xc4>
 800059e:	e782      	b.n	80004a6 <__udivmoddi4+0x52>
 80005a0:	4642      	mov	r2, r8
 80005a2:	2320      	movs	r3, #32
 80005a4:	2100      	movs	r1, #0
 80005a6:	1a9b      	subs	r3, r3, r2
 80005a8:	2200      	movs	r2, #0
 80005aa:	9100      	str	r1, [sp, #0]
 80005ac:	9201      	str	r2, [sp, #4]
 80005ae:	2201      	movs	r2, #1
 80005b0:	40da      	lsrs	r2, r3
 80005b2:	9201      	str	r2, [sp, #4]
 80005b4:	e785      	b.n	80004c2 <__udivmoddi4+0x6e>
 80005b6:	4642      	mov	r2, r8
 80005b8:	2320      	movs	r3, #32
 80005ba:	1a9b      	subs	r3, r3, r2
 80005bc:	002a      	movs	r2, r5
 80005be:	4646      	mov	r6, r8
 80005c0:	409a      	lsls	r2, r3
 80005c2:	0023      	movs	r3, r4
 80005c4:	40f3      	lsrs	r3, r6
 80005c6:	4644      	mov	r4, r8
 80005c8:	4313      	orrs	r3, r2
 80005ca:	002a      	movs	r2, r5
 80005cc:	40e2      	lsrs	r2, r4
 80005ce:	001c      	movs	r4, r3
 80005d0:	465b      	mov	r3, fp
 80005d2:	0015      	movs	r5, r2
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	dad4      	bge.n	8000582 <__udivmoddi4+0x12e>
 80005d8:	4642      	mov	r2, r8
 80005da:	002f      	movs	r7, r5
 80005dc:	2320      	movs	r3, #32
 80005de:	0026      	movs	r6, r4
 80005e0:	4097      	lsls	r7, r2
 80005e2:	1a9b      	subs	r3, r3, r2
 80005e4:	40de      	lsrs	r6, r3
 80005e6:	003b      	movs	r3, r7
 80005e8:	4333      	orrs	r3, r6
 80005ea:	e7cd      	b.n	8000588 <__udivmoddi4+0x134>

080005ec <__clzsi2>:
 80005ec:	211c      	movs	r1, #28
 80005ee:	2301      	movs	r3, #1
 80005f0:	041b      	lsls	r3, r3, #16
 80005f2:	4298      	cmp	r0, r3
 80005f4:	d301      	bcc.n	80005fa <__clzsi2+0xe>
 80005f6:	0c00      	lsrs	r0, r0, #16
 80005f8:	3910      	subs	r1, #16
 80005fa:	0a1b      	lsrs	r3, r3, #8
 80005fc:	4298      	cmp	r0, r3
 80005fe:	d301      	bcc.n	8000604 <__clzsi2+0x18>
 8000600:	0a00      	lsrs	r0, r0, #8
 8000602:	3908      	subs	r1, #8
 8000604:	091b      	lsrs	r3, r3, #4
 8000606:	4298      	cmp	r0, r3
 8000608:	d301      	bcc.n	800060e <__clzsi2+0x22>
 800060a:	0900      	lsrs	r0, r0, #4
 800060c:	3904      	subs	r1, #4
 800060e:	a202      	add	r2, pc, #8	; (adr r2, 8000618 <__clzsi2+0x2c>)
 8000610:	5c10      	ldrb	r0, [r2, r0]
 8000612:	1840      	adds	r0, r0, r1
 8000614:	4770      	bx	lr
 8000616:	46c0      	nop			; (mov r8, r8)
 8000618:	02020304 	.word	0x02020304
 800061c:	01010101 	.word	0x01010101
	...

08000628 <__clzdi2>:
 8000628:	b510      	push	{r4, lr}
 800062a:	2900      	cmp	r1, #0
 800062c:	d103      	bne.n	8000636 <__clzdi2+0xe>
 800062e:	f7ff ffdd 	bl	80005ec <__clzsi2>
 8000632:	3020      	adds	r0, #32
 8000634:	e002      	b.n	800063c <__clzdi2+0x14>
 8000636:	0008      	movs	r0, r1
 8000638:	f7ff ffd8 	bl	80005ec <__clzsi2>
 800063c:	bd10      	pop	{r4, pc}
 800063e:	46c0      	nop			; (mov r8, r8)

08000640 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000640:	b590      	push	{r4, r7, lr}
 8000642:	b0c7      	sub	sp, #284	; 0x11c
 8000644:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000646:	f001 faa1 	bl	8001b8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800064a:	f000 fa43 	bl	8000ad4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800064e:	f000 fc0f 	bl	8000e70 <MX_GPIO_Init>
  MX_RTC_Init();
 8000652:	f000 fa8b 	bl	8000b6c <MX_RTC_Init>
  MX_SPI1_Init();
 8000656:	f000 fab7 	bl	8000bc8 <MX_SPI1_Init>
  MX_TIM6_Init();
 800065a:	f000 faf3 	bl	8000c44 <MX_TIM6_Init>
  MX_USART2_UART_Init();
 800065e:	f000 fb2f 	bl	8000cc0 <MX_USART2_UART_Init>
  HAL_UART_Transmit ( HUART_DBG , (uint8_t*) hello , strlen ( hello ) , UART_TIMEOUT ) ;
 8000662:	4bd1      	ldr	r3, [pc, #836]	; (80009a8 <main+0x368>)
 8000664:	681c      	ldr	r4, [r3, #0]
 8000666:	4bd0      	ldr	r3, [pc, #832]	; (80009a8 <main+0x368>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	0018      	movs	r0, r3
 800066c:	f7ff fd4a 	bl	8000104 <strlen>
 8000670:	0003      	movs	r3, r0
 8000672:	b29a      	uxth	r2, r3
 8000674:	23fa      	movs	r3, #250	; 0xfa
 8000676:	009b      	lsls	r3, r3, #2
 8000678:	48cc      	ldr	r0, [pc, #816]	; (80009ac <main+0x36c>)
 800067a:	0021      	movs	r1, r4
 800067c:	f004 fb80 	bl	8004d80 <HAL_UART_Transmit>
  MX_USART3_UART_Init();
 8000680:	f000 fb6c 	bl	8000d5c <MX_USART3_UART_Init>
  MX_USART5_UART_Init();
 8000684:	f000 fbb8 	bl	8000df8 <MX_USART5_UART_Init>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8000688:	b662      	cpsie	i
}
 800068a:	46c0      	nop			; (mov r8, r8)

  __enable_irq();
  /* USER CODE BEGIN 2 */
  fifo_init(uart2_tx_buffer, BUFFER_SIZE, &uart_fifo);
 800068c:	4ac8      	ldr	r2, [pc, #800]	; (80009b0 <main+0x370>)
 800068e:	2380      	movs	r3, #128	; 0x80
 8000690:	0159      	lsls	r1, r3, #5
 8000692:	4bc8      	ldr	r3, [pc, #800]	; (80009b4 <main+0x374>)
 8000694:	0018      	movs	r0, r3
 8000696:	f000 fea5 	bl	80013e4 <fifo_init>



  my_tim_init () ;
 800069a:	f000 fe11 	bl	80012c0 <my_tim_init>
  send_debug_logs ( "The device test started. You have max. 10 minutes to complete each steps.\n" ) ;
 800069e:	4bc6      	ldr	r3, [pc, #792]	; (80009b8 <main+0x378>)
 80006a0:	0018      	movs	r0, r3
 80006a2:	f000 fd11 	bl	80010c8 <send_debug_logs>
  send_debug_logs ( "GREEN LED ON\n" ) ;
 80006a6:	4bc5      	ldr	r3, [pc, #788]	; (80009bc <main+0x37c>)
 80006a8:	0018      	movs	r0, r3
 80006aa:	f000 fd0d 	bl	80010c8 <send_debug_logs>
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 80006ae:	4bc4      	ldr	r3, [pc, #784]	; (80009c0 <main+0x380>)
 80006b0:	2201      	movs	r2, #1
 80006b2:	2101      	movs	r1, #1
 80006b4:	0018      	movs	r0, r3
 80006b6:	f001 ff46 	bl	8002546 <HAL_GPIO_WritePin>
  HAL_Delay(2000);
 80006ba:	23fa      	movs	r3, #250	; 0xfa
 80006bc:	00db      	lsls	r3, r3, #3
 80006be:	0018      	movs	r0, r3
 80006c0:	f001 faea 	bl	8001c98 <HAL_Delay>
  send_debug_logs ( "GREEN LED OFF\n" ) ;
 80006c4:	4bbf      	ldr	r3, [pc, #764]	; (80009c4 <main+0x384>)
 80006c6:	0018      	movs	r0, r3
 80006c8:	f000 fcfe 	bl	80010c8 <send_debug_logs>
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80006cc:	4bbc      	ldr	r3, [pc, #752]	; (80009c0 <main+0x380>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	2101      	movs	r1, #1
 80006d2:	0018      	movs	r0, r3
 80006d4:	f001 ff37 	bl	8002546 <HAL_GPIO_WritePin>
  HAL_Delay(200);
 80006d8:	20c8      	movs	r0, #200	; 0xc8
 80006da:	f001 fadd 	bl	8001c98 <HAL_Delay>
  send_debug_logs ( "BLUE LED ON\n" ) ;
 80006de:	4bba      	ldr	r3, [pc, #744]	; (80009c8 <main+0x388>)
 80006e0:	0018      	movs	r0, r3
 80006e2:	f000 fcf1 	bl	80010c8 <send_debug_logs>
  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_SET);
 80006e6:	4bb6      	ldr	r3, [pc, #728]	; (80009c0 <main+0x380>)
 80006e8:	2201      	movs	r2, #1
 80006ea:	2102      	movs	r1, #2
 80006ec:	0018      	movs	r0, r3
 80006ee:	f001 ff2a 	bl	8002546 <HAL_GPIO_WritePin>
  HAL_Delay(2000);
 80006f2:	23fa      	movs	r3, #250	; 0xfa
 80006f4:	00db      	lsls	r3, r3, #3
 80006f6:	0018      	movs	r0, r3
 80006f8:	f001 face 	bl	8001c98 <HAL_Delay>
  send_debug_logs ( "BLUE LED OFF\n" ) ;
 80006fc:	4bb3      	ldr	r3, [pc, #716]	; (80009cc <main+0x38c>)
 80006fe:	0018      	movs	r0, r3
 8000700:	f000 fce2 	bl	80010c8 <send_debug_logs>
  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 8000704:	4bae      	ldr	r3, [pc, #696]	; (80009c0 <main+0x380>)
 8000706:	2200      	movs	r2, #0
 8000708:	2102      	movs	r1, #2
 800070a:	0018      	movs	r0, r3
 800070c:	f001 ff1b 	bl	8002546 <HAL_GPIO_WritePin>

  // ACC TEST



  send_debug_logs ( "** Ambient Light Sensor test - 10 seconds\n" ) ;
 8000710:	4baf      	ldr	r3, [pc, #700]	; (80009d0 <main+0x390>)
 8000712:	0018      	movs	r0, r3
 8000714:	f000 fcd8 	bl	80010c8 <send_debug_logs>
  send_debug_logs ( "Cover light sensor -> green light should be ON.\n" ) ;
 8000718:	4bae      	ldr	r3, [pc, #696]	; (80009d4 <main+0x394>)
 800071a:	0018      	movs	r0, r3
 800071c:	f000 fcd4 	bl	80010c8 <send_debug_logs>
  send_debug_logs ( "Uncover light sensor -> green light should be OFF.\n" ) ;
 8000720:	4bad      	ldr	r3, [pc, #692]	; (80009d8 <main+0x398>)
 8000722:	0018      	movs	r0, r3
 8000724:	f000 fcd0 	bl	80010c8 <send_debug_logs>
  tim_seconds = 0 ;
 8000728:	4bac      	ldr	r3, [pc, #688]	; (80009dc <main+0x39c>)
 800072a:	2200      	movs	r2, #0
 800072c:	801a      	strh	r2, [r3, #0]
  my_tim_start () ;
 800072e:	f000 fdd3 	bl	80012d8 <my_tim_start>
  while ( tim_seconds < 10 )
 8000732:	e016      	b.n	8000762 <main+0x122>
      {

  	  if(HAL_GPIO_ReadPin(ALS_SENS_GPIO_Port, ALS_SENS_Pin))
 8000734:	2380      	movs	r3, #128	; 0x80
 8000736:	005a      	lsls	r2, r3, #1
 8000738:	23a0      	movs	r3, #160	; 0xa0
 800073a:	05db      	lsls	r3, r3, #23
 800073c:	0011      	movs	r1, r2
 800073e:	0018      	movs	r0, r3
 8000740:	f001 fee4 	bl	800250c <HAL_GPIO_ReadPin>
 8000744:	1e03      	subs	r3, r0, #0
 8000746:	d006      	beq.n	8000756 <main+0x116>
  		  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000748:	4b9d      	ldr	r3, [pc, #628]	; (80009c0 <main+0x380>)
 800074a:	2200      	movs	r2, #0
 800074c:	2101      	movs	r1, #1
 800074e:	0018      	movs	r0, r3
 8000750:	f001 fef9 	bl	8002546 <HAL_GPIO_WritePin>
 8000754:	e005      	b.n	8000762 <main+0x122>
  	  else
  		  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 8000756:	4b9a      	ldr	r3, [pc, #616]	; (80009c0 <main+0x380>)
 8000758:	2201      	movs	r2, #1
 800075a:	2101      	movs	r1, #1
 800075c:	0018      	movs	r0, r3
 800075e:	f001 fef2 	bl	8002546 <HAL_GPIO_WritePin>
  while ( tim_seconds < 10 )
 8000762:	4b9e      	ldr	r3, [pc, #632]	; (80009dc <main+0x39c>)
 8000764:	881b      	ldrh	r3, [r3, #0]
 8000766:	2b09      	cmp	r3, #9
 8000768:	d9e4      	bls.n	8000734 <main+0xf4>
      }
    my_tim_stop () ;
 800076a:	f000 fdc5 	bl	80012f8 <my_tim_stop>


    HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 800076e:	4b94      	ldr	r3, [pc, #592]	; (80009c0 <main+0x380>)
 8000770:	2200      	movs	r2, #0
 8000772:	2101      	movs	r1, #1
 8000774:	0018      	movs	r0, r3
 8000776:	f001 fee6 	bl	8002546 <HAL_GPIO_WritePin>
    send_debug_logs ( "** Accelerometer test - 10 seconds\n" ) ;
 800077a:	4b99      	ldr	r3, [pc, #612]	; (80009e0 <main+0x3a0>)
 800077c:	0018      	movs	r0, r3
 800077e:	f000 fca3 	bl	80010c8 <send_debug_logs>
    send_debug_logs ( "** Only checks if ID of ACC is correct\n" ) ;
 8000782:	4b98      	ldr	r3, [pc, #608]	; (80009e4 <main+0x3a4>)
 8000784:	0018      	movs	r0, r3
 8000786:	f000 fc9f 	bl	80010c8 <send_debug_logs>

    tim_seconds = 0 ;
 800078a:	4b94      	ldr	r3, [pc, #592]	; (80009dc <main+0x39c>)
 800078c:	2200      	movs	r2, #0
 800078e:	801a      	strh	r2, [r3, #0]
    my_tim_start () ;
 8000790:	f000 fda2 	bl	80012d8 <my_tim_start>

  while ( tim_seconds < 10 )
 8000794:	e01b      	b.n	80007ce <main+0x18e>
  {
	  send_debug_logs ( "* IIS2DHTR test started - 10 seconds" ) ;
 8000796:	4b94      	ldr	r3, [pc, #592]	; (80009e8 <main+0x3a8>)
 8000798:	0018      	movs	r0, r3
 800079a:	f000 fc95 	bl	80010c8 <send_debug_logs>
	  my_acc_ctx.write_reg = my_lis2dw12_platform_write ;
 800079e:	4b93      	ldr	r3, [pc, #588]	; (80009ec <main+0x3ac>)
 80007a0:	4a93      	ldr	r2, [pc, #588]	; (80009f0 <main+0x3b0>)
 80007a2:	601a      	str	r2, [r3, #0]
	  my_acc_ctx.read_reg = my_lis2dw12_platform_read ;
 80007a4:	4b91      	ldr	r3, [pc, #580]	; (80009ec <main+0x3ac>)
 80007a6:	4a93      	ldr	r2, [pc, #588]	; (80009f4 <main+0x3b4>)
 80007a8:	605a      	str	r2, [r3, #4]
	  my_acc_ctx.handle = HACC ;
 80007aa:	4b90      	ldr	r3, [pc, #576]	; (80009ec <main+0x3ac>)
 80007ac:	4a92      	ldr	r2, [pc, #584]	; (80009f8 <main+0x3b8>)
 80007ae:	60da      	str	r2, [r3, #12]
	  if ( my_lis2dw12_init ( &my_acc_ctx ) )
 80007b0:	4b8e      	ldr	r3, [pc, #568]	; (80009ec <main+0x3ac>)
 80007b2:	0018      	movs	r0, r3
 80007b4:	f007 fb67 	bl	8007e86 <my_lis2dw12_init>
 80007b8:	1e03      	subs	r3, r0, #0
 80007ba:	d004      	beq.n	80007c6 <main+0x186>
	  {
		  send_debug_logs ( "**ID is correct." ) ;
 80007bc:	4b8f      	ldr	r3, [pc, #572]	; (80009fc <main+0x3bc>)
 80007be:	0018      	movs	r0, r3
 80007c0:	f000 fc82 	bl	80010c8 <send_debug_logs>
		  break;
 80007c4:	e007      	b.n	80007d6 <main+0x196>
	  }
	  else
	  {
		  send_debug_logs ( "** ID is not received or wrong" ) ;
 80007c6:	4b8e      	ldr	r3, [pc, #568]	; (8000a00 <main+0x3c0>)
 80007c8:	0018      	movs	r0, r3
 80007ca:	f000 fc7d 	bl	80010c8 <send_debug_logs>
  while ( tim_seconds < 10 )
 80007ce:	4b83      	ldr	r3, [pc, #524]	; (80009dc <main+0x39c>)
 80007d0:	881b      	ldrh	r3, [r3, #0]
 80007d2:	2b09      	cmp	r3, #9
 80007d4:	d9df      	bls.n	8000796 <main+0x156>
	 //	  if ( test )
	 //		  break ;
	 //	  else
	 //		  send_debug_logs ( "* Something went wrong! MCU did not received INT1." ) ;
  }
  my_tim_stop () ;
 80007d6:	f000 fd8f 	bl	80012f8 <my_tim_stop>


  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80007da:	4b79      	ldr	r3, [pc, #484]	; (80009c0 <main+0x380>)
 80007dc:	2200      	movs	r2, #0
 80007de:	2101      	movs	r1, #1
 80007e0:	0018      	movs	r0, r3
 80007e2:	f001 feb0 	bl	8002546 <HAL_GPIO_WritePin>

  // GNSS TEST

  uint8_t 	rxd_byte = 0 ;
 80007e6:	24ff      	movs	r4, #255	; 0xff
 80007e8:	193b      	adds	r3, r7, r4
 80007ea:	2200      	movs	r2, #0
 80007ec:	701a      	strb	r2, [r3, #0]
  uint8_t 	i_nmea = 0 ;
 80007ee:	1dfb      	adds	r3, r7, #7
 80007f0:	33ff      	adds	r3, #255	; 0xff
 80007f2:	2200      	movs	r2, #0
 80007f4:	701a      	strb	r2, [r3, #0]
  uint8_t 	gsv_tns = 0 ;
 80007f6:	1dbb      	adds	r3, r7, #6
 80007f8:	33ff      	adds	r3, #255	; 0xff
 80007fa:	2200      	movs	r2, #0
 80007fc:	701a      	strb	r2, [r3, #0]
  uint8_t 	nmea_message[MY_NMEA_MESSAGE_MAX_SIZE] = {0} ;
 80007fe:	4b81      	ldr	r3, [pc, #516]	; (8000a04 <main+0x3c4>)
 8000800:	2284      	movs	r2, #132	; 0x84
 8000802:	0052      	lsls	r2, r2, #1
 8000804:	189b      	adds	r3, r3, r2
 8000806:	19db      	adds	r3, r3, r7
 8000808:	2200      	movs	r2, #0
 800080a:	601a      	str	r2, [r3, #0]
 800080c:	3304      	adds	r3, #4
 800080e:	22f6      	movs	r2, #246	; 0xf6
 8000810:	2100      	movs	r1, #0
 8000812:	0018      	movs	r0, r3
 8000814:	f007 fc6a 	bl	80080ec <memset>
  char*		nmea_gsv_label = "GSV" ;
 8000818:	4b7b      	ldr	r3, [pc, #492]	; (8000a08 <main+0x3c8>)
 800081a:	1c7a      	adds	r2, r7, #1
 800081c:	32ff      	adds	r2, #255	; 0xff
 800081e:	6013      	str	r3, [r2, #0]


  my_gnss_on () ;
 8000820:	f000 fcf4 	bl	800120c <my_gnss_on>
  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_SET);
 8000824:	4b66      	ldr	r3, [pc, #408]	; (80009c0 <main+0x380>)
 8000826:	2201      	movs	r2, #1
 8000828:	2102      	movs	r1, #2
 800082a:	0018      	movs	r0, r3
 800082c:	f001 fe8b 	bl	8002546 <HAL_GPIO_WritePin>
  send_debug_logs ( "* Changing RF path to GNSS - CTL1 H, CTL2 L\n" ) ;
 8000830:	4b76      	ldr	r3, [pc, #472]	; (8000a0c <main+0x3cc>)
 8000832:	0018      	movs	r0, r3
 8000834:	f000 fc48 	bl	80010c8 <send_debug_logs>
  HAL_GPIO_WritePin(RF_SW_CTL1_GPIO_Port, RF_SW_CTL1_Pin, GPIO_PIN_SET);
 8000838:	2380      	movs	r3, #128	; 0x80
 800083a:	00db      	lsls	r3, r3, #3
 800083c:	4874      	ldr	r0, [pc, #464]	; (8000a10 <main+0x3d0>)
 800083e:	2201      	movs	r2, #1
 8000840:	0019      	movs	r1, r3
 8000842:	f001 fe80 	bl	8002546 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTL2_GPIO_Port, RF_SW_CTL2_Pin, GPIO_PIN_RESET);
 8000846:	2380      	movs	r3, #128	; 0x80
 8000848:	011b      	lsls	r3, r3, #4
 800084a:	4871      	ldr	r0, [pc, #452]	; (8000a10 <main+0x3d0>)
 800084c:	2200      	movs	r2, #0
 800084e:	0019      	movs	r1, r3
 8000850:	f001 fe79 	bl	8002546 <HAL_GPIO_WritePin>

  send_debug_logs ( "* LC76G test started. Try to complete it within 10 minutes." ) ;
 8000854:	4b6f      	ldr	r3, [pc, #444]	; (8000a14 <main+0x3d4>)
 8000856:	0018      	movs	r0, r3
 8000858:	f000 fc36 	bl	80010c8 <send_debug_logs>
  send_debug_logs ( "* GREEN LED indicate succesful 3D position fix.\n" ) ;
 800085c:	4b6e      	ldr	r3, [pc, #440]	; (8000a18 <main+0x3d8>)
 800085e:	0018      	movs	r0, r3
 8000860:	f000 fc32 	bl	80010c8 <send_debug_logs>
  HAL_UART_Receive_IT(HUART_GNSS, &rxd_byte, 1);
 8000864:	1939      	adds	r1, r7, r4
 8000866:	4b6d      	ldr	r3, [pc, #436]	; (8000a1c <main+0x3dc>)
 8000868:	2201      	movs	r2, #1
 800086a:	0018      	movs	r0, r3
 800086c:	f004 fc12 	bl	8005094 <HAL_UART_Receive_IT>

  tim_seconds = 0 ;
 8000870:	4b5a      	ldr	r3, [pc, #360]	; (80009dc <main+0x39c>)
 8000872:	2200      	movs	r2, #0
 8000874:	801a      	strh	r2, [r3, #0]
  my_tim_start () ;
 8000876:	f000 fd2f 	bl	80012d8 <my_tim_start>
  while ( tim_seconds < TIM_SECONDS_THS_SYSTEM_RESET  )
 800087a:	e04f      	b.n	800091c <main+0x2dc>
//	  HAL_UART_Receive ( HUART_GNSS , &rxd_byte , 2 , UART_TIMEOUT ) ;
//	  HAL_UART_Transmit ( HUART_DBG , &rxd_byte , 2 , UART_TIMEOUT ) ;
//	  send_debug_logs ( "* dumb" ) ;
	 while(!(fifo_is_empty(&uart_fifo))) {
	              // Transmit the data from UART5 to UART2
		  	  	  if(!(fifo_get(&uart_fifo, &rxd_byte)))
 800087c:	24ff      	movs	r4, #255	; 0xff
 800087e:	193a      	adds	r2, r7, r4
 8000880:	4b4b      	ldr	r3, [pc, #300]	; (80009b0 <main+0x370>)
 8000882:	0011      	movs	r1, r2
 8000884:	0018      	movs	r0, r3
 8000886:	f000 fe44 	bl	8001512 <fifo_get>
 800088a:	1e03      	subs	r3, r0, #0
 800088c:	d106      	bne.n	800089c <main+0x25c>
				  HAL_UART_Transmit(HUART_DBG, &rxd_byte, 1, UART_TIMEOUT);
 800088e:	23fa      	movs	r3, #250	; 0xfa
 8000890:	009b      	lsls	r3, r3, #2
 8000892:	1939      	adds	r1, r7, r4
 8000894:	4845      	ldr	r0, [pc, #276]	; (80009ac <main+0x36c>)
 8000896:	2201      	movs	r2, #1
 8000898:	f004 fa72 	bl	8004d80 <HAL_UART_Transmit>
	 while(!(fifo_is_empty(&uart_fifo))) {
 800089c:	4b44      	ldr	r3, [pc, #272]	; (80009b0 <main+0x370>)
 800089e:	0018      	movs	r0, r3
 80008a0:	f000 fdde 	bl	8001460 <fifo_is_empty>
 80008a4:	0003      	movs	r3, r0
 80008a6:	001a      	movs	r2, r3
 80008a8:	2301      	movs	r3, #1
 80008aa:	4053      	eors	r3, r2
 80008ac:	b2db      	uxtb	r3, r3
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d1e4      	bne.n	800087c <main+0x23c>
//	              HAL_UART_Transmit(HUART_DBG, uart5_rx_buffer, uart5_rx_index, UART_TIMEOUT);
//	              uart5_rx_index = 0; // Reset the index after transmission

	          }
	 if(HAL_GPIO_ReadPin(GNSS_3DFIX_GPIO_Port, GNSS_3DFIX_Pin))
 80008b2:	4b57      	ldr	r3, [pc, #348]	; (8000a10 <main+0x3d0>)
 80008b4:	2120      	movs	r1, #32
 80008b6:	0018      	movs	r0, r3
 80008b8:	f001 fe28 	bl	800250c <HAL_GPIO_ReadPin>
 80008bc:	1e03      	subs	r3, r0, #0
 80008be:	d004      	beq.n	80008ca <main+0x28a>
		 send_debug_logs ( "\n3D FIX pin HIGH\n" );
 80008c0:	4b57      	ldr	r3, [pc, #348]	; (8000a20 <main+0x3e0>)
 80008c2:	0018      	movs	r0, r3
 80008c4:	f000 fc00 	bl	80010c8 <send_debug_logs>
 80008c8:	e003      	b.n	80008d2 <main+0x292>
	 else
		 send_debug_logs ( "\n3D FIX pin LOW\n" );
 80008ca:	4b56      	ldr	r3, [pc, #344]	; (8000a24 <main+0x3e4>)
 80008cc:	0018      	movs	r0, r3
 80008ce:	f000 fbfb 	bl	80010c8 <send_debug_logs>

	 if(HAL_GPIO_ReadPin(GNSS_JAM_GPIO_Port, GNSS_JAM_Pin))
 80008d2:	4b4f      	ldr	r3, [pc, #316]	; (8000a10 <main+0x3d0>)
 80008d4:	2140      	movs	r1, #64	; 0x40
 80008d6:	0018      	movs	r0, r3
 80008d8:	f001 fe18 	bl	800250c <HAL_GPIO_ReadPin>
 80008dc:	1e03      	subs	r3, r0, #0
 80008de:	d004      	beq.n	80008ea <main+0x2aa>
	 		 send_debug_logs ( "JAM pin HIGH\n" );
 80008e0:	4b51      	ldr	r3, [pc, #324]	; (8000a28 <main+0x3e8>)
 80008e2:	0018      	movs	r0, r3
 80008e4:	f000 fbf0 	bl	80010c8 <send_debug_logs>
 80008e8:	e003      	b.n	80008f2 <main+0x2b2>
	 	 else
	 		 send_debug_logs ( "JAM pin LOW\n" );
 80008ea:	4b50      	ldr	r3, [pc, #320]	; (8000a2c <main+0x3ec>)
 80008ec:	0018      	movs	r0, r3
 80008ee:	f000 fbeb 	bl	80010c8 <send_debug_logs>

	 if(HAL_GPIO_ReadPin(GNSS_GEOF_GPIO_Port, GNSS_GEOF_Pin))
 80008f2:	4b47      	ldr	r3, [pc, #284]	; (8000a10 <main+0x3d0>)
 80008f4:	2180      	movs	r1, #128	; 0x80
 80008f6:	0018      	movs	r0, r3
 80008f8:	f001 fe08 	bl	800250c <HAL_GPIO_ReadPin>
 80008fc:	1e03      	subs	r3, r0, #0
 80008fe:	d004      	beq.n	800090a <main+0x2ca>
	 		 send_debug_logs ( "GEOFFENCE pin HIGH\n" );
 8000900:	4b4b      	ldr	r3, [pc, #300]	; (8000a30 <main+0x3f0>)
 8000902:	0018      	movs	r0, r3
 8000904:	f000 fbe0 	bl	80010c8 <send_debug_logs>
 8000908:	e003      	b.n	8000912 <main+0x2d2>
	 	 else
	 		 send_debug_logs ( "GEOFFENCE pin LOW\n" );
 800090a:	4b4a      	ldr	r3, [pc, #296]	; (8000a34 <main+0x3f4>)
 800090c:	0018      	movs	r0, r3
 800090e:	f000 fbdb 	bl	80010c8 <send_debug_logs>
	 HAL_Delay(1000);
 8000912:	23fa      	movs	r3, #250	; 0xfa
 8000914:	009b      	lsls	r3, r3, #2
 8000916:	0018      	movs	r0, r3
 8000918:	f001 f9be 	bl	8001c98 <HAL_Delay>
  while ( tim_seconds < TIM_SECONDS_THS_SYSTEM_RESET  )
 800091c:	4b2f      	ldr	r3, [pc, #188]	; (80009dc <main+0x39c>)
 800091e:	881a      	ldrh	r2, [r3, #0]
 8000920:	2396      	movs	r3, #150	; 0x96
 8000922:	009b      	lsls	r3, r3, #2
 8000924:	429a      	cmp	r2, r3
 8000926:	d3b9      	bcc.n	800089c <main+0x25c>
//					  break ;
//			  }
//		  }
//	  }
  }
  my_gnss_off ();
 8000928:	f000 fc88 	bl	800123c <my_gnss_off>
  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 800092c:	4b24      	ldr	r3, [pc, #144]	; (80009c0 <main+0x380>)
 800092e:	2200      	movs	r2, #0
 8000930:	2102      	movs	r1, #2
 8000932:	0018      	movs	r0, r3
 8000934:	f001 fe07 	bl	8002546 <HAL_GPIO_WritePin>
  my_tim_stop ();
 8000938:	f000 fcde 	bl	80012f8 <my_tim_stop>

  send_debug_logs ( "* Changing RF path to Astronode - CTL2 H, CTL1 L\n" );
 800093c:	4b3e      	ldr	r3, [pc, #248]	; (8000a38 <main+0x3f8>)
 800093e:	0018      	movs	r0, r3
 8000940:	f000 fbc2 	bl	80010c8 <send_debug_logs>
  HAL_GPIO_WritePin(RF_SW_CTL2_GPIO_Port, RF_SW_CTL2_Pin, GPIO_PIN_SET);
 8000944:	2380      	movs	r3, #128	; 0x80
 8000946:	011b      	lsls	r3, r3, #4
 8000948:	4831      	ldr	r0, [pc, #196]	; (8000a10 <main+0x3d0>)
 800094a:	2201      	movs	r2, #1
 800094c:	0019      	movs	r1, r3
 800094e:	f001 fdfa 	bl	8002546 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTL1_GPIO_Port, RF_SW_CTL1_Pin, GPIO_PIN_RESET);
 8000952:	2380      	movs	r3, #128	; 0x80
 8000954:	00db      	lsls	r3, r3, #3
 8000956:	482e      	ldr	r0, [pc, #184]	; (8000a10 <main+0x3d0>)
 8000958:	2200      	movs	r2, #0
 800095a:	0019      	movs	r1, r3
 800095c:	f001 fdf3 	bl	8002546 <HAL_GPIO_WritePin>

  if ( gsv_tns )
 8000960:	1dbb      	adds	r3, r7, #6
 8000962:	33ff      	adds	r3, #255	; 0xff
 8000964:	781b      	ldrb	r3, [r3, #0]
 8000966:	2b00      	cmp	r3, #0
 8000968:	d00f      	beq.n	800098a <main+0x34a>
  {
	  sprintf ( uart_buff , "* Good! LC76G test has been accomplished. No of SV: %d" , gsv_tns ) ;
 800096a:	1dbb      	adds	r3, r7, #6
 800096c:	33ff      	adds	r3, #255	; 0xff
 800096e:	781a      	ldrb	r2, [r3, #0]
 8000970:	4932      	ldr	r1, [pc, #200]	; (8000a3c <main+0x3fc>)
 8000972:	4b33      	ldr	r3, [pc, #204]	; (8000a40 <main+0x400>)
 8000974:	0018      	movs	r0, r3
 8000976:	f007 fb99 	bl	80080ac <siprintf>
	  send_debug_logs ( uart_buff ) ;
 800097a:	4b31      	ldr	r3, [pc, #196]	; (8000a40 <main+0x400>)
 800097c:	0018      	movs	r0, r3
 800097e:	f000 fba3 	bl	80010c8 <send_debug_logs>
	  uart_buff[0] = 0 ;
 8000982:	4b2f      	ldr	r3, [pc, #188]	; (8000a40 <main+0x400>)
 8000984:	2200      	movs	r2, #0
 8000986:	701a      	strb	r2, [r3, #0]
 8000988:	e003      	b.n	8000992 <main+0x352>
  }
  else
  {
	  send_debug_logs ( "\n* Something went wrong! LC76G did not find any SV." ) ;
 800098a:	4b2e      	ldr	r3, [pc, #184]	; (8000a44 <main+0x404>)
 800098c:	0018      	movs	r0, r3
 800098e:	f000 fb9b 	bl	80010c8 <send_debug_logs>
  }

  // ASTRO TEST
  bool cfg_wr = false ;
 8000992:	2308      	movs	r3, #8
 8000994:	33ff      	adds	r3, #255	; 0xff
 8000996:	18fb      	adds	r3, r7, r3
 8000998:	2200      	movs	r2, #0
 800099a:	701a      	strb	r2, [r3, #0]
  tim_seconds = 0 ;
 800099c:	4b0f      	ldr	r3, [pc, #60]	; (80009dc <main+0x39c>)
 800099e:	2200      	movs	r2, #0
 80009a0:	801a      	strh	r2, [r3, #0]
  my_tim_start() ;
 80009a2:	f000 fc99 	bl	80012d8 <my_tim_start>
  while ( tim_seconds < 30 && !cfg_wr )
 80009a6:	e067      	b.n	8000a78 <main+0x438>
 80009a8:	20000000 	.word	0x20000000
 80009ac:	20000158 	.word	0x20000158
 80009b0:	20001424 	.word	0x20001424
 80009b4:	20000424 	.word	0x20000424
 80009b8:	080088ec 	.word	0x080088ec
 80009bc:	08008938 	.word	0x08008938
 80009c0:	50000c00 	.word	0x50000c00
 80009c4:	08008948 	.word	0x08008948
 80009c8:	08008958 	.word	0x08008958
 80009cc:	08008968 	.word	0x08008968
 80009d0:	08008978 	.word	0x08008978
 80009d4:	080089a4 	.word	0x080089a4
 80009d8:	080089d8 	.word	0x080089d8
 80009dc:	20000420 	.word	0x20000420
 80009e0:	08008a0c 	.word	0x08008a0c
 80009e4:	08008a30 	.word	0x08008a30
 80009e8:	08008a58 	.word	0x08008a58
 80009ec:	20000410 	.word	0x20000410
 80009f0:	08001129 	.word	0x08001129
 80009f4:	08001193 	.word	0x08001193
 80009f8:	200000a8 	.word	0x200000a8
 80009fc:	08008a80 	.word	0x08008a80
 8000a00:	08008a94 	.word	0x08008a94
 8000a04:	fffffefc 	.word	0xfffffefc
 8000a08:	08008ab4 	.word	0x08008ab4
 8000a0c:	08008ab8 	.word	0x08008ab8
 8000a10:	50000400 	.word	0x50000400
 8000a14:	08008ae8 	.word	0x08008ae8
 8000a18:	08008b24 	.word	0x08008b24
 8000a1c:	20000280 	.word	0x20000280
 8000a20:	08008b58 	.word	0x08008b58
 8000a24:	08008b6c 	.word	0x08008b6c
 8000a28:	08008b80 	.word	0x08008b80
 8000a2c:	08008b90 	.word	0x08008b90
 8000a30:	08008ba0 	.word	0x08008ba0
 8000a34:	08008bb4 	.word	0x08008bb4
 8000a38:	08008bc8 	.word	0x08008bc8
 8000a3c:	08008bfc 	.word	0x08008bfc
 8000a40:	20000314 	.word	0x20000314
 8000a44:	08008c34 	.word	0x08008c34
  {
	  reset_astronode () ;
 8000a48:	f000 fc62 	bl	8001310 <reset_astronode>
	  HAL_Delay ( 100 ) ;
 8000a4c:	2064      	movs	r0, #100	; 0x64
 8000a4e:	f001 f923 	bl	8001c98 <HAL_Delay>
	  cfg_wr = astronode_send_cfg_wr ( true , true , true , false , true , true , true , false  ) ;
 8000a52:	2308      	movs	r3, #8
 8000a54:	33ff      	adds	r3, #255	; 0xff
 8000a56:	18fc      	adds	r4, r7, r3
 8000a58:	2300      	movs	r3, #0
 8000a5a:	9303      	str	r3, [sp, #12]
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	9302      	str	r3, [sp, #8]
 8000a60:	2301      	movs	r3, #1
 8000a62:	9301      	str	r3, [sp, #4]
 8000a64:	2301      	movs	r3, #1
 8000a66:	9300      	str	r3, [sp, #0]
 8000a68:	2300      	movs	r3, #0
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	2101      	movs	r1, #1
 8000a6e:	2001      	movs	r0, #1
 8000a70:	f006 fc08 	bl	8007284 <astronode_send_cfg_wr>
 8000a74:	0003      	movs	r3, r0
 8000a76:	7023      	strb	r3, [r4, #0]
  while ( tim_seconds < 30 && !cfg_wr )
 8000a78:	4b12      	ldr	r3, [pc, #72]	; (8000ac4 <main+0x484>)
 8000a7a:	881b      	ldrh	r3, [r3, #0]
 8000a7c:	2b1d      	cmp	r3, #29
 8000a7e:	d808      	bhi.n	8000a92 <main+0x452>
 8000a80:	2308      	movs	r3, #8
 8000a82:	33ff      	adds	r3, #255	; 0xff
 8000a84:	18fb      	adds	r3, r7, r3
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	2201      	movs	r2, #1
 8000a8a:	4053      	eors	r3, r2
 8000a8c:	b2db      	uxtb	r3, r3
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d1da      	bne.n	8000a48 <main+0x408>
  }
  my_tim_stop() ;
 8000a92:	f000 fc31 	bl	80012f8 <my_tim_stop>
  if ( cfg_wr )
 8000a96:	2308      	movs	r3, #8
 8000a98:	33ff      	adds	r3, #255	; 0xff
 8000a9a:	18fb      	adds	r3, r7, r3
 8000a9c:	781b      	ldrb	r3, [r3, #0]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d006      	beq.n	8000ab0 <main+0x470>
  {
	  astronode_send_mpn_rr () ;
 8000aa2:	f006 fc9b 	bl	80073dc <astronode_send_mpn_rr>
	  send_debug_logs ( "* Good! Astronode test has been accomplished." ) ;
 8000aa6:	4b08      	ldr	r3, [pc, #32]	; (8000ac8 <main+0x488>)
 8000aa8:	0018      	movs	r0, r3
 8000aaa:	f000 fb0d 	bl	80010c8 <send_debug_logs>
 8000aae:	e003      	b.n	8000ab8 <main+0x478>
  }
  else
  {
	  send_debug_logs ( "\n* Something went wrong! Astronode did not work fine." ) ;
 8000ab0:	4b06      	ldr	r3, [pc, #24]	; (8000acc <main+0x48c>)
 8000ab2:	0018      	movs	r0, r3
 8000ab4:	f000 fb08 	bl	80010c8 <send_debug_logs>
  }
  send_debug_logs ( "\nThis is the end of the test." ) ;
 8000ab8:	4b05      	ldr	r3, [pc, #20]	; (8000ad0 <main+0x490>)
 8000aba:	0018      	movs	r0, r3
 8000abc:	f000 fb04 	bl	80010c8 <send_debug_logs>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ac0:	e7fe      	b.n	8000ac0 <main+0x480>
 8000ac2:	46c0      	nop			; (mov r8, r8)
 8000ac4:	20000420 	.word	0x20000420
 8000ac8:	08008c68 	.word	0x08008c68
 8000acc:	08008c98 	.word	0x08008c98
 8000ad0:	08008cd0 	.word	0x08008cd0

08000ad4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ad4:	b590      	push	{r4, r7, lr}
 8000ad6:	b095      	sub	sp, #84	; 0x54
 8000ad8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ada:	2414      	movs	r4, #20
 8000adc:	193b      	adds	r3, r7, r4
 8000ade:	0018      	movs	r0, r3
 8000ae0:	233c      	movs	r3, #60	; 0x3c
 8000ae2:	001a      	movs	r2, r3
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	f007 fb01 	bl	80080ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000aea:	1d3b      	adds	r3, r7, #4
 8000aec:	0018      	movs	r0, r3
 8000aee:	2310      	movs	r3, #16
 8000af0:	001a      	movs	r2, r3
 8000af2:	2100      	movs	r1, #0
 8000af4:	f007 fafa 	bl	80080ec <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000af8:	2380      	movs	r3, #128	; 0x80
 8000afa:	009b      	lsls	r3, r3, #2
 8000afc:	0018      	movs	r0, r3
 8000afe:	f001 fd73 	bl	80025e8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000b02:	193b      	adds	r3, r7, r4
 8000b04:	220a      	movs	r2, #10
 8000b06:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b08:	193b      	adds	r3, r7, r4
 8000b0a:	2280      	movs	r2, #128	; 0x80
 8000b0c:	0052      	lsls	r2, r2, #1
 8000b0e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000b10:	0021      	movs	r1, r4
 8000b12:	187b      	adds	r3, r7, r1
 8000b14:	2200      	movs	r2, #0
 8000b16:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b18:	187b      	adds	r3, r7, r1
 8000b1a:	2240      	movs	r2, #64	; 0x40
 8000b1c:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000b1e:	187b      	adds	r3, r7, r1
 8000b20:	2201      	movs	r2, #1
 8000b22:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b24:	187b      	adds	r3, r7, r1
 8000b26:	2200      	movs	r2, #0
 8000b28:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b2a:	187b      	adds	r3, r7, r1
 8000b2c:	0018      	movs	r0, r3
 8000b2e:	f001 fda7 	bl	8002680 <HAL_RCC_OscConfig>
 8000b32:	1e03      	subs	r3, r0, #0
 8000b34:	d001      	beq.n	8000b3a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000b36:	f000 fd89 	bl	800164c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b3a:	1d3b      	adds	r3, r7, #4
 8000b3c:	2207      	movs	r2, #7
 8000b3e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b40:	1d3b      	adds	r3, r7, #4
 8000b42:	2200      	movs	r2, #0
 8000b44:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b46:	1d3b      	adds	r3, r7, #4
 8000b48:	2200      	movs	r2, #0
 8000b4a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b4c:	1d3b      	adds	r3, r7, #4
 8000b4e:	2200      	movs	r2, #0
 8000b50:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b52:	1d3b      	adds	r3, r7, #4
 8000b54:	2100      	movs	r1, #0
 8000b56:	0018      	movs	r0, r3
 8000b58:	f002 f8f2 	bl	8002d40 <HAL_RCC_ClockConfig>
 8000b5c:	1e03      	subs	r3, r0, #0
 8000b5e:	d001      	beq.n	8000b64 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000b60:	f000 fd74 	bl	800164c <Error_Handler>
  }
}
 8000b64:	46c0      	nop			; (mov r8, r8)
 8000b66:	46bd      	mov	sp, r7
 8000b68:	b015      	add	sp, #84	; 0x54
 8000b6a:	bd90      	pop	{r4, r7, pc}

08000b6c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000b70:	4b13      	ldr	r3, [pc, #76]	; (8000bc0 <MX_RTC_Init+0x54>)
 8000b72:	4a14      	ldr	r2, [pc, #80]	; (8000bc4 <MX_RTC_Init+0x58>)
 8000b74:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000b76:	4b12      	ldr	r3, [pc, #72]	; (8000bc0 <MX_RTC_Init+0x54>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8000b7c:	4b10      	ldr	r3, [pc, #64]	; (8000bc0 <MX_RTC_Init+0x54>)
 8000b7e:	227f      	movs	r2, #127	; 0x7f
 8000b80:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 8000b82:	4b0f      	ldr	r3, [pc, #60]	; (8000bc0 <MX_RTC_Init+0x54>)
 8000b84:	22ff      	movs	r2, #255	; 0xff
 8000b86:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000b88:	4b0d      	ldr	r3, [pc, #52]	; (8000bc0 <MX_RTC_Init+0x54>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000b8e:	4b0c      	ldr	r3, [pc, #48]	; (8000bc0 <MX_RTC_Init+0x54>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000b94:	4b0a      	ldr	r3, [pc, #40]	; (8000bc0 <MX_RTC_Init+0x54>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000b9a:	4b09      	ldr	r3, [pc, #36]	; (8000bc0 <MX_RTC_Init+0x54>)
 8000b9c:	2280      	movs	r2, #128	; 0x80
 8000b9e:	05d2      	lsls	r2, r2, #23
 8000ba0:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000ba2:	4b07      	ldr	r3, [pc, #28]	; (8000bc0 <MX_RTC_Init+0x54>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000ba8:	4b05      	ldr	r3, [pc, #20]	; (8000bc0 <MX_RTC_Init+0x54>)
 8000baa:	0018      	movs	r0, r3
 8000bac:	f002 fcae 	bl	800350c <HAL_RTC_Init>
 8000bb0:	1e03      	subs	r3, r0, #0
 8000bb2:	d001      	beq.n	8000bb8 <MX_RTC_Init+0x4c>
  {
    Error_Handler();
 8000bb4:	f000 fd4a 	bl	800164c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000bb8:	46c0      	nop			; (mov r8, r8)
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	46c0      	nop			; (mov r8, r8)
 8000bc0:	2000007c 	.word	0x2000007c
 8000bc4:	40002800 	.word	0x40002800

08000bc8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000bcc:	4b1b      	ldr	r3, [pc, #108]	; (8000c3c <MX_SPI1_Init+0x74>)
 8000bce:	4a1c      	ldr	r2, [pc, #112]	; (8000c40 <MX_SPI1_Init+0x78>)
 8000bd0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000bd2:	4b1a      	ldr	r3, [pc, #104]	; (8000c3c <MX_SPI1_Init+0x74>)
 8000bd4:	2282      	movs	r2, #130	; 0x82
 8000bd6:	0052      	lsls	r2, r2, #1
 8000bd8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000bda:	4b18      	ldr	r3, [pc, #96]	; (8000c3c <MX_SPI1_Init+0x74>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000be0:	4b16      	ldr	r3, [pc, #88]	; (8000c3c <MX_SPI1_Init+0x74>)
 8000be2:	22e0      	movs	r2, #224	; 0xe0
 8000be4:	00d2      	lsls	r2, r2, #3
 8000be6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000be8:	4b14      	ldr	r3, [pc, #80]	; (8000c3c <MX_SPI1_Init+0x74>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bee:	4b13      	ldr	r3, [pc, #76]	; (8000c3c <MX_SPI1_Init+0x74>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000bf4:	4b11      	ldr	r3, [pc, #68]	; (8000c3c <MX_SPI1_Init+0x74>)
 8000bf6:	2280      	movs	r2, #128	; 0x80
 8000bf8:	0092      	lsls	r2, r2, #2
 8000bfa:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000bfc:	4b0f      	ldr	r3, [pc, #60]	; (8000c3c <MX_SPI1_Init+0x74>)
 8000bfe:	2210      	movs	r2, #16
 8000c00:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c02:	4b0e      	ldr	r3, [pc, #56]	; (8000c3c <MX_SPI1_Init+0x74>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c08:	4b0c      	ldr	r3, [pc, #48]	; (8000c3c <MX_SPI1_Init+0x74>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c0e:	4b0b      	ldr	r3, [pc, #44]	; (8000c3c <MX_SPI1_Init+0x74>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000c14:	4b09      	ldr	r3, [pc, #36]	; (8000c3c <MX_SPI1_Init+0x74>)
 8000c16:	2207      	movs	r2, #7
 8000c18:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000c1a:	4b08      	ldr	r3, [pc, #32]	; (8000c3c <MX_SPI1_Init+0x74>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c20:	4b06      	ldr	r3, [pc, #24]	; (8000c3c <MX_SPI1_Init+0x74>)
 8000c22:	2208      	movs	r2, #8
 8000c24:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c26:	4b05      	ldr	r3, [pc, #20]	; (8000c3c <MX_SPI1_Init+0x74>)
 8000c28:	0018      	movs	r0, r3
 8000c2a:	f002 fdbd 	bl	80037a8 <HAL_SPI_Init>
 8000c2e:	1e03      	subs	r3, r0, #0
 8000c30:	d001      	beq.n	8000c36 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000c32:	f000 fd0b 	bl	800164c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c36:	46c0      	nop			; (mov r8, r8)
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	200000a8 	.word	0x200000a8
 8000c40:	40013000 	.word	0x40013000

08000c44 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b084      	sub	sp, #16
 8000c48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c4a:	1d3b      	adds	r3, r7, #4
 8000c4c:	0018      	movs	r0, r3
 8000c4e:	230c      	movs	r3, #12
 8000c50:	001a      	movs	r2, r3
 8000c52:	2100      	movs	r1, #0
 8000c54:	f007 fa4a 	bl	80080ec <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000c58:	4b15      	ldr	r3, [pc, #84]	; (8000cb0 <MX_TIM6_Init+0x6c>)
 8000c5a:	4a16      	ldr	r2, [pc, #88]	; (8000cb4 <MX_TIM6_Init+0x70>)
 8000c5c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16000-1;
 8000c5e:	4b14      	ldr	r3, [pc, #80]	; (8000cb0 <MX_TIM6_Init+0x6c>)
 8000c60:	4a15      	ldr	r2, [pc, #84]	; (8000cb8 <MX_TIM6_Init+0x74>)
 8000c62:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c64:	4b12      	ldr	r3, [pc, #72]	; (8000cb0 <MX_TIM6_Init+0x6c>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 8000c6a:	4b11      	ldr	r3, [pc, #68]	; (8000cb0 <MX_TIM6_Init+0x6c>)
 8000c6c:	4a13      	ldr	r2, [pc, #76]	; (8000cbc <MX_TIM6_Init+0x78>)
 8000c6e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c70:	4b0f      	ldr	r3, [pc, #60]	; (8000cb0 <MX_TIM6_Init+0x6c>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000c76:	4b0e      	ldr	r3, [pc, #56]	; (8000cb0 <MX_TIM6_Init+0x6c>)
 8000c78:	0018      	movs	r0, r3
 8000c7a:	f003 fcb5 	bl	80045e8 <HAL_TIM_Base_Init>
 8000c7e:	1e03      	subs	r3, r0, #0
 8000c80:	d001      	beq.n	8000c86 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8000c82:	f000 fce3 	bl	800164c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c86:	1d3b      	adds	r3, r7, #4
 8000c88:	2200      	movs	r2, #0
 8000c8a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c8c:	1d3b      	adds	r3, r7, #4
 8000c8e:	2200      	movs	r2, #0
 8000c90:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000c92:	1d3a      	adds	r2, r7, #4
 8000c94:	4b06      	ldr	r3, [pc, #24]	; (8000cb0 <MX_TIM6_Init+0x6c>)
 8000c96:	0011      	movs	r1, r2
 8000c98:	0018      	movs	r0, r3
 8000c9a:	f003 ff4d 	bl	8004b38 <HAL_TIMEx_MasterConfigSynchronization>
 8000c9e:	1e03      	subs	r3, r0, #0
 8000ca0:	d001      	beq.n	8000ca6 <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8000ca2:	f000 fcd3 	bl	800164c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000ca6:	46c0      	nop			; (mov r8, r8)
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	b004      	add	sp, #16
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	46c0      	nop			; (mov r8, r8)
 8000cb0:	2000010c 	.word	0x2000010c
 8000cb4:	40001000 	.word	0x40001000
 8000cb8:	00003e7f 	.word	0x00003e7f
 8000cbc:	000003e7 	.word	0x000003e7

08000cc0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000cc4:	4b23      	ldr	r3, [pc, #140]	; (8000d54 <MX_USART2_UART_Init+0x94>)
 8000cc6:	4a24      	ldr	r2, [pc, #144]	; (8000d58 <MX_USART2_UART_Init+0x98>)
 8000cc8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000cca:	4b22      	ldr	r3, [pc, #136]	; (8000d54 <MX_USART2_UART_Init+0x94>)
 8000ccc:	22e1      	movs	r2, #225	; 0xe1
 8000cce:	0252      	lsls	r2, r2, #9
 8000cd0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000cd2:	4b20      	ldr	r3, [pc, #128]	; (8000d54 <MX_USART2_UART_Init+0x94>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000cd8:	4b1e      	ldr	r3, [pc, #120]	; (8000d54 <MX_USART2_UART_Init+0x94>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000cde:	4b1d      	ldr	r3, [pc, #116]	; (8000d54 <MX_USART2_UART_Init+0x94>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ce4:	4b1b      	ldr	r3, [pc, #108]	; (8000d54 <MX_USART2_UART_Init+0x94>)
 8000ce6:	220c      	movs	r2, #12
 8000ce8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cea:	4b1a      	ldr	r3, [pc, #104]	; (8000d54 <MX_USART2_UART_Init+0x94>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cf0:	4b18      	ldr	r3, [pc, #96]	; (8000d54 <MX_USART2_UART_Init+0x94>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cf6:	4b17      	ldr	r3, [pc, #92]	; (8000d54 <MX_USART2_UART_Init+0x94>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000cfc:	4b15      	ldr	r3, [pc, #84]	; (8000d54 <MX_USART2_UART_Init+0x94>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d02:	4b14      	ldr	r3, [pc, #80]	; (8000d54 <MX_USART2_UART_Init+0x94>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d08:	4b12      	ldr	r3, [pc, #72]	; (8000d54 <MX_USART2_UART_Init+0x94>)
 8000d0a:	0018      	movs	r0, r3
 8000d0c:	f003 ffa2 	bl	8004c54 <HAL_UART_Init>
 8000d10:	1e03      	subs	r3, r0, #0
 8000d12:	d001      	beq.n	8000d18 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000d14:	f000 fc9a 	bl	800164c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d18:	4b0e      	ldr	r3, [pc, #56]	; (8000d54 <MX_USART2_UART_Init+0x94>)
 8000d1a:	2100      	movs	r1, #0
 8000d1c:	0018      	movs	r0, r3
 8000d1e:	f006 f9d1 	bl	80070c4 <HAL_UARTEx_SetTxFifoThreshold>
 8000d22:	1e03      	subs	r3, r0, #0
 8000d24:	d001      	beq.n	8000d2a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000d26:	f000 fc91 	bl	800164c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d2a:	4b0a      	ldr	r3, [pc, #40]	; (8000d54 <MX_USART2_UART_Init+0x94>)
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	0018      	movs	r0, r3
 8000d30:	f006 fa08 	bl	8007144 <HAL_UARTEx_SetRxFifoThreshold>
 8000d34:	1e03      	subs	r3, r0, #0
 8000d36:	d001      	beq.n	8000d3c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000d38:	f000 fc88 	bl	800164c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000d3c:	4b05      	ldr	r3, [pc, #20]	; (8000d54 <MX_USART2_UART_Init+0x94>)
 8000d3e:	0018      	movs	r0, r3
 8000d40:	f006 f986 	bl	8007050 <HAL_UARTEx_DisableFifoMode>
 8000d44:	1e03      	subs	r3, r0, #0
 8000d46:	d001      	beq.n	8000d4c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000d48:	f000 fc80 	bl	800164c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d4c:	46c0      	nop			; (mov r8, r8)
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	46c0      	nop			; (mov r8, r8)
 8000d54:	20000158 	.word	0x20000158
 8000d58:	40004400 	.word	0x40004400

08000d5c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d60:	4b23      	ldr	r3, [pc, #140]	; (8000df0 <MX_USART3_UART_Init+0x94>)
 8000d62:	4a24      	ldr	r2, [pc, #144]	; (8000df4 <MX_USART3_UART_Init+0x98>)
 8000d64:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000d66:	4b22      	ldr	r3, [pc, #136]	; (8000df0 <MX_USART3_UART_Init+0x94>)
 8000d68:	2296      	movs	r2, #150	; 0x96
 8000d6a:	0192      	lsls	r2, r2, #6
 8000d6c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d6e:	4b20      	ldr	r3, [pc, #128]	; (8000df0 <MX_USART3_UART_Init+0x94>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d74:	4b1e      	ldr	r3, [pc, #120]	; (8000df0 <MX_USART3_UART_Init+0x94>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d7a:	4b1d      	ldr	r3, [pc, #116]	; (8000df0 <MX_USART3_UART_Init+0x94>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d80:	4b1b      	ldr	r3, [pc, #108]	; (8000df0 <MX_USART3_UART_Init+0x94>)
 8000d82:	220c      	movs	r2, #12
 8000d84:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d86:	4b1a      	ldr	r3, [pc, #104]	; (8000df0 <MX_USART3_UART_Init+0x94>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d8c:	4b18      	ldr	r3, [pc, #96]	; (8000df0 <MX_USART3_UART_Init+0x94>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d92:	4b17      	ldr	r3, [pc, #92]	; (8000df0 <MX_USART3_UART_Init+0x94>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d98:	4b15      	ldr	r3, [pc, #84]	; (8000df0 <MX_USART3_UART_Init+0x94>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d9e:	4b14      	ldr	r3, [pc, #80]	; (8000df0 <MX_USART3_UART_Init+0x94>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000da4:	4b12      	ldr	r3, [pc, #72]	; (8000df0 <MX_USART3_UART_Init+0x94>)
 8000da6:	0018      	movs	r0, r3
 8000da8:	f003 ff54 	bl	8004c54 <HAL_UART_Init>
 8000dac:	1e03      	subs	r3, r0, #0
 8000dae:	d001      	beq.n	8000db4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000db0:	f000 fc4c 	bl	800164c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000db4:	4b0e      	ldr	r3, [pc, #56]	; (8000df0 <MX_USART3_UART_Init+0x94>)
 8000db6:	2100      	movs	r1, #0
 8000db8:	0018      	movs	r0, r3
 8000dba:	f006 f983 	bl	80070c4 <HAL_UARTEx_SetTxFifoThreshold>
 8000dbe:	1e03      	subs	r3, r0, #0
 8000dc0:	d001      	beq.n	8000dc6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000dc2:	f000 fc43 	bl	800164c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000dc6:	4b0a      	ldr	r3, [pc, #40]	; (8000df0 <MX_USART3_UART_Init+0x94>)
 8000dc8:	2100      	movs	r1, #0
 8000dca:	0018      	movs	r0, r3
 8000dcc:	f006 f9ba 	bl	8007144 <HAL_UARTEx_SetRxFifoThreshold>
 8000dd0:	1e03      	subs	r3, r0, #0
 8000dd2:	d001      	beq.n	8000dd8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000dd4:	f000 fc3a 	bl	800164c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000dd8:	4b05      	ldr	r3, [pc, #20]	; (8000df0 <MX_USART3_UART_Init+0x94>)
 8000dda:	0018      	movs	r0, r3
 8000ddc:	f006 f938 	bl	8007050 <HAL_UARTEx_DisableFifoMode>
 8000de0:	1e03      	subs	r3, r0, #0
 8000de2:	d001      	beq.n	8000de8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000de4:	f000 fc32 	bl	800164c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000de8:	46c0      	nop			; (mov r8, r8)
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	46c0      	nop			; (mov r8, r8)
 8000df0:	200001ec 	.word	0x200001ec
 8000df4:	40004800 	.word	0x40004800

08000df8 <MX_USART5_UART_Init>:
  * @brief USART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART5_UART_Init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE END USART5_Init 0 */

  /* USER CODE BEGIN USART5_Init 1 */

  /* USER CODE END USART5_Init 1 */
  huart5.Instance = USART5;
 8000dfc:	4b1a      	ldr	r3, [pc, #104]	; (8000e68 <MX_USART5_UART_Init+0x70>)
 8000dfe:	4a1b      	ldr	r2, [pc, #108]	; (8000e6c <MX_USART5_UART_Init+0x74>)
 8000e00:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000e02:	4b19      	ldr	r3, [pc, #100]	; (8000e68 <MX_USART5_UART_Init+0x70>)
 8000e04:	22e1      	movs	r2, #225	; 0xe1
 8000e06:	0252      	lsls	r2, r2, #9
 8000e08:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000e0a:	4b17      	ldr	r3, [pc, #92]	; (8000e68 <MX_USART5_UART_Init+0x70>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000e10:	4b15      	ldr	r3, [pc, #84]	; (8000e68 <MX_USART5_UART_Init+0x70>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000e16:	4b14      	ldr	r3, [pc, #80]	; (8000e68 <MX_USART5_UART_Init+0x70>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000e1c:	4b12      	ldr	r3, [pc, #72]	; (8000e68 <MX_USART5_UART_Init+0x70>)
 8000e1e:	220c      	movs	r2, #12
 8000e20:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e22:	4b11      	ldr	r3, [pc, #68]	; (8000e68 <MX_USART5_UART_Init+0x70>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e28:	4b0f      	ldr	r3, [pc, #60]	; (8000e68 <MX_USART5_UART_Init+0x70>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e2e:	4b0e      	ldr	r3, [pc, #56]	; (8000e68 <MX_USART5_UART_Init+0x70>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e34:	4b0c      	ldr	r3, [pc, #48]	; (8000e68 <MX_USART5_UART_Init+0x70>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e3a:	4b0b      	ldr	r3, [pc, #44]	; (8000e68 <MX_USART5_UART_Init+0x70>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000e40:	4b09      	ldr	r3, [pc, #36]	; (8000e68 <MX_USART5_UART_Init+0x70>)
 8000e42:	0018      	movs	r0, r3
 8000e44:	f003 ff06 	bl	8004c54 <HAL_UART_Init>
 8000e48:	1e03      	subs	r3, r0, #0
 8000e4a:	d001      	beq.n	8000e50 <MX_USART5_UART_Init+0x58>
  {
    Error_Handler();
 8000e4c:	f000 fbfe 	bl	800164c <Error_Handler>
  }
  /* USER CODE BEGIN USART5_Init 2 */
  HAL_NVIC_SetPriority(USART3_4_5_6_LPUART1_IRQn, 0, 0);
 8000e50:	2200      	movs	r2, #0
 8000e52:	2100      	movs	r1, #0
 8000e54:	201d      	movs	r0, #29
 8000e56:	f001 f817 	bl	8001e88 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART3_4_5_6_LPUART1_IRQn);
 8000e5a:	201d      	movs	r0, #29
 8000e5c:	f001 f829 	bl	8001eb2 <HAL_NVIC_EnableIRQ>



  /* USER CODE END USART5_Init 2 */

}
 8000e60:	46c0      	nop			; (mov r8, r8)
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	46c0      	nop			; (mov r8, r8)
 8000e68:	20000280 	.word	0x20000280
 8000e6c:	40005000 	.word	0x40005000

08000e70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e70:	b590      	push	{r4, r7, lr}
 8000e72:	b08b      	sub	sp, #44	; 0x2c
 8000e74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e76:	2414      	movs	r4, #20
 8000e78:	193b      	adds	r3, r7, r4
 8000e7a:	0018      	movs	r0, r3
 8000e7c:	2314      	movs	r3, #20
 8000e7e:	001a      	movs	r2, r3
 8000e80:	2100      	movs	r1, #0
 8000e82:	f007 f933 	bl	80080ec <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e86:	4b8b      	ldr	r3, [pc, #556]	; (80010b4 <MX_GPIO_Init+0x244>)
 8000e88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e8a:	4b8a      	ldr	r3, [pc, #552]	; (80010b4 <MX_GPIO_Init+0x244>)
 8000e8c:	2104      	movs	r1, #4
 8000e8e:	430a      	orrs	r2, r1
 8000e90:	635a      	str	r2, [r3, #52]	; 0x34
 8000e92:	4b88      	ldr	r3, [pc, #544]	; (80010b4 <MX_GPIO_Init+0x244>)
 8000e94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e96:	2204      	movs	r2, #4
 8000e98:	4013      	ands	r3, r2
 8000e9a:	613b      	str	r3, [r7, #16]
 8000e9c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e9e:	4b85      	ldr	r3, [pc, #532]	; (80010b4 <MX_GPIO_Init+0x244>)
 8000ea0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ea2:	4b84      	ldr	r3, [pc, #528]	; (80010b4 <MX_GPIO_Init+0x244>)
 8000ea4:	2120      	movs	r1, #32
 8000ea6:	430a      	orrs	r2, r1
 8000ea8:	635a      	str	r2, [r3, #52]	; 0x34
 8000eaa:	4b82      	ldr	r3, [pc, #520]	; (80010b4 <MX_GPIO_Init+0x244>)
 8000eac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000eae:	2220      	movs	r2, #32
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	60fb      	str	r3, [r7, #12]
 8000eb4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb6:	4b7f      	ldr	r3, [pc, #508]	; (80010b4 <MX_GPIO_Init+0x244>)
 8000eb8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000eba:	4b7e      	ldr	r3, [pc, #504]	; (80010b4 <MX_GPIO_Init+0x244>)
 8000ebc:	2101      	movs	r1, #1
 8000ebe:	430a      	orrs	r2, r1
 8000ec0:	635a      	str	r2, [r3, #52]	; 0x34
 8000ec2:	4b7c      	ldr	r3, [pc, #496]	; (80010b4 <MX_GPIO_Init+0x244>)
 8000ec4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	4013      	ands	r3, r2
 8000eca:	60bb      	str	r3, [r7, #8]
 8000ecc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ece:	4b79      	ldr	r3, [pc, #484]	; (80010b4 <MX_GPIO_Init+0x244>)
 8000ed0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ed2:	4b78      	ldr	r3, [pc, #480]	; (80010b4 <MX_GPIO_Init+0x244>)
 8000ed4:	2102      	movs	r1, #2
 8000ed6:	430a      	orrs	r2, r1
 8000ed8:	635a      	str	r2, [r3, #52]	; 0x34
 8000eda:	4b76      	ldr	r3, [pc, #472]	; (80010b4 <MX_GPIO_Init+0x244>)
 8000edc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ede:	2202      	movs	r2, #2
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	607b      	str	r3, [r7, #4]
 8000ee4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ee6:	4b73      	ldr	r3, [pc, #460]	; (80010b4 <MX_GPIO_Init+0x244>)
 8000ee8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000eea:	4b72      	ldr	r3, [pc, #456]	; (80010b4 <MX_GPIO_Init+0x244>)
 8000eec:	2108      	movs	r1, #8
 8000eee:	430a      	orrs	r2, r1
 8000ef0:	635a      	str	r2, [r3, #52]	; 0x34
 8000ef2:	4b70      	ldr	r3, [pc, #448]	; (80010b4 <MX_GPIO_Init+0x244>)
 8000ef4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ef6:	2208      	movs	r2, #8
 8000ef8:	4013      	ands	r3, r2
 8000efa:	603b      	str	r3, [r7, #0]
 8000efc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACC_CS_GPIO_Port, ACC_CS_Pin, GPIO_PIN_RESET);
 8000efe:	23a0      	movs	r3, #160	; 0xa0
 8000f00:	05db      	lsls	r3, r3, #23
 8000f02:	2200      	movs	r2, #0
 8000f04:	2110      	movs	r1, #16
 8000f06:	0018      	movs	r0, r3
 8000f08:	f001 fb1d 	bl	8002546 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ASTRO_WKUP_Pin|ASTRO_RST_Pin|GNSS_RST_Pin|GNSS_PWR_SW_Pin, GPIO_PIN_RESET);
 8000f0c:	496a      	ldr	r1, [pc, #424]	; (80010b8 <MX_GPIO_Init+0x248>)
 8000f0e:	4b6b      	ldr	r3, [pc, #428]	; (80010bc <MX_GPIO_Init+0x24c>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	0018      	movs	r0, r3
 8000f14:	f001 fb17 	bl	8002546 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RF_SW_CTL1_Pin|RF_SW_CTL2_Pin, GPIO_PIN_SET);
 8000f18:	23c0      	movs	r3, #192	; 0xc0
 8000f1a:	011b      	lsls	r3, r3, #4
 8000f1c:	4867      	ldr	r0, [pc, #412]	; (80010bc <MX_GPIO_Init+0x24c>)
 8000f1e:	2201      	movs	r2, #1
 8000f20:	0019      	movs	r1, r3
 8000f22:	f001 fb10 	bl	8002546 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_GREEN_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 8000f26:	4b66      	ldr	r3, [pc, #408]	; (80010c0 <MX_GPIO_Init+0x250>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	2103      	movs	r1, #3
 8000f2c:	0018      	movs	r0, r3
 8000f2e:	f001 fb0a 	bl	8002546 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ACC_INT1_Pin ACC_INT2_Pin */
  GPIO_InitStruct.Pin = ACC_INT1_Pin|ACC_INT2_Pin;
 8000f32:	193b      	adds	r3, r7, r4
 8000f34:	2203      	movs	r2, #3
 8000f36:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f38:	193b      	adds	r3, r7, r4
 8000f3a:	2288      	movs	r2, #136	; 0x88
 8000f3c:	0352      	lsls	r2, r2, #13
 8000f3e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f40:	193b      	adds	r3, r7, r4
 8000f42:	2200      	movs	r2, #0
 8000f44:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f46:	193a      	adds	r2, r7, r4
 8000f48:	23a0      	movs	r3, #160	; 0xa0
 8000f4a:	05db      	lsls	r3, r3, #23
 8000f4c:	0011      	movs	r1, r2
 8000f4e:	0018      	movs	r0, r3
 8000f50:	f001 f898 	bl	8002084 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACC_CS_Pin */
  GPIO_InitStruct.Pin = ACC_CS_Pin;
 8000f54:	193b      	adds	r3, r7, r4
 8000f56:	2210      	movs	r2, #16
 8000f58:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f5a:	193b      	adds	r3, r7, r4
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f60:	193b      	adds	r3, r7, r4
 8000f62:	2200      	movs	r2, #0
 8000f64:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f66:	193b      	adds	r3, r7, r4
 8000f68:	2200      	movs	r2, #0
 8000f6a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(ACC_CS_GPIO_Port, &GPIO_InitStruct);
 8000f6c:	193a      	adds	r2, r7, r4
 8000f6e:	23a0      	movs	r3, #160	; 0xa0
 8000f70:	05db      	lsls	r3, r3, #23
 8000f72:	0011      	movs	r1, r2
 8000f74:	0018      	movs	r0, r3
 8000f76:	f001 f885 	bl	8002084 <HAL_GPIO_Init>

  /*Configure GPIO pins : ASTRO_WKUP_Pin ASTRO_RST_Pin RF_SW_CTL1_Pin RF_SW_CTL2_Pin
                           GNSS_PWR_SW_Pin */
  GPIO_InitStruct.Pin = ASTRO_WKUP_Pin|ASTRO_RST_Pin|RF_SW_CTL1_Pin|RF_SW_CTL2_Pin
 8000f7a:	193b      	adds	r3, r7, r4
 8000f7c:	4a51      	ldr	r2, [pc, #324]	; (80010c4 <MX_GPIO_Init+0x254>)
 8000f7e:	601a      	str	r2, [r3, #0]
                          |GNSS_PWR_SW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f80:	193b      	adds	r3, r7, r4
 8000f82:	2201      	movs	r2, #1
 8000f84:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f86:	193b      	adds	r3, r7, r4
 8000f88:	2200      	movs	r2, #0
 8000f8a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f8c:	193b      	adds	r3, r7, r4
 8000f8e:	2200      	movs	r2, #0
 8000f90:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f92:	193b      	adds	r3, r7, r4
 8000f94:	4a49      	ldr	r2, [pc, #292]	; (80010bc <MX_GPIO_Init+0x24c>)
 8000f96:	0019      	movs	r1, r3
 8000f98:	0010      	movs	r0, r2
 8000f9a:	f001 f873 	bl	8002084 <HAL_GPIO_Init>

  /*Configure GPIO pins : ASTRO_EVT_Pin GNSS_3DFIX_Pin GNSS_JAM_Pin */
  GPIO_InitStruct.Pin = ASTRO_EVT_Pin|GNSS_3DFIX_Pin|GNSS_JAM_Pin;
 8000f9e:	0021      	movs	r1, r4
 8000fa0:	187b      	adds	r3, r7, r1
 8000fa2:	2264      	movs	r2, #100	; 0x64
 8000fa4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fa6:	187b      	adds	r3, r7, r1
 8000fa8:	2288      	movs	r2, #136	; 0x88
 8000faa:	0352      	lsls	r2, r2, #13
 8000fac:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fae:	187b      	adds	r3, r7, r1
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fb4:	000c      	movs	r4, r1
 8000fb6:	187b      	adds	r3, r7, r1
 8000fb8:	4a40      	ldr	r2, [pc, #256]	; (80010bc <MX_GPIO_Init+0x24c>)
 8000fba:	0019      	movs	r1, r3
 8000fbc:	0010      	movs	r0, r2
 8000fbe:	f001 f861 	bl	8002084 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000fc2:	0021      	movs	r1, r4
 8000fc4:	187b      	adds	r3, r7, r1
 8000fc6:	2280      	movs	r2, #128	; 0x80
 8000fc8:	0152      	lsls	r2, r2, #5
 8000fca:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fcc:	000c      	movs	r4, r1
 8000fce:	193b      	adds	r3, r7, r4
 8000fd0:	2203      	movs	r2, #3
 8000fd2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd4:	193b      	adds	r3, r7, r4
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fda:	193b      	adds	r3, r7, r4
 8000fdc:	4a37      	ldr	r2, [pc, #220]	; (80010bc <MX_GPIO_Init+0x24c>)
 8000fde:	0019      	movs	r1, r3
 8000fe0:	0010      	movs	r0, r2
 8000fe2:	f001 f84f 	bl	8002084 <HAL_GPIO_Init>

  /*Configure GPIO pin : GNSS_RST_Pin */
  GPIO_InitStruct.Pin = GNSS_RST_Pin;
 8000fe6:	0021      	movs	r1, r4
 8000fe8:	187b      	adds	r3, r7, r1
 8000fea:	2280      	movs	r2, #128	; 0x80
 8000fec:	0192      	lsls	r2, r2, #6
 8000fee:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000ff0:	000c      	movs	r4, r1
 8000ff2:	193b      	adds	r3, r7, r4
 8000ff4:	2211      	movs	r2, #17
 8000ff6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff8:	193b      	adds	r3, r7, r4
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ffe:	193b      	adds	r3, r7, r4
 8001000:	2200      	movs	r2, #0
 8001002:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GNSS_RST_GPIO_Port, &GPIO_InitStruct);
 8001004:	193b      	adds	r3, r7, r4
 8001006:	4a2d      	ldr	r2, [pc, #180]	; (80010bc <MX_GPIO_Init+0x24c>)
 8001008:	0019      	movs	r1, r3
 800100a:	0010      	movs	r0, r2
 800100c:	f001 f83a 	bl	8002084 <HAL_GPIO_Init>

  /*Configure GPIO pins : SATCOM_ANTN_USE_Pin GNSS_GEOF_Pin */
  GPIO_InitStruct.Pin = SATCOM_ANTN_USE_Pin|GNSS_GEOF_Pin;
 8001010:	0021      	movs	r1, r4
 8001012:	187b      	adds	r3, r7, r1
 8001014:	2281      	movs	r2, #129	; 0x81
 8001016:	01d2      	lsls	r2, r2, #7
 8001018:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800101a:	000c      	movs	r4, r1
 800101c:	193b      	adds	r3, r7, r4
 800101e:	2200      	movs	r2, #0
 8001020:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001022:	193b      	adds	r3, r7, r4
 8001024:	2200      	movs	r2, #0
 8001026:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001028:	193b      	adds	r3, r7, r4
 800102a:	4a24      	ldr	r2, [pc, #144]	; (80010bc <MX_GPIO_Init+0x24c>)
 800102c:	0019      	movs	r1, r3
 800102e:	0010      	movs	r0, r2
 8001030:	f001 f828 	bl	8002084 <HAL_GPIO_Init>

  /*Configure GPIO pin : ALS_SENS_Pin */
  GPIO_InitStruct.Pin = ALS_SENS_Pin;
 8001034:	193b      	adds	r3, r7, r4
 8001036:	2280      	movs	r2, #128	; 0x80
 8001038:	0052      	lsls	r2, r2, #1
 800103a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800103c:	193b      	adds	r3, r7, r4
 800103e:	2200      	movs	r2, #0
 8001040:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001042:	193b      	adds	r3, r7, r4
 8001044:	2200      	movs	r2, #0
 8001046:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ALS_SENS_GPIO_Port, &GPIO_InitStruct);
 8001048:	193a      	adds	r2, r7, r4
 800104a:	23a0      	movs	r3, #160	; 0xa0
 800104c:	05db      	lsls	r3, r3, #23
 800104e:	0011      	movs	r1, r2
 8001050:	0018      	movs	r0, r3
 8001052:	f001 f817 	bl	8002084 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_BLUE_Pin;
 8001056:	193b      	adds	r3, r7, r4
 8001058:	2203      	movs	r2, #3
 800105a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800105c:	193b      	adds	r3, r7, r4
 800105e:	2201      	movs	r2, #1
 8001060:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001062:	193b      	adds	r3, r7, r4
 8001064:	2200      	movs	r2, #0
 8001066:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001068:	193b      	adds	r3, r7, r4
 800106a:	2200      	movs	r2, #0
 800106c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800106e:	193b      	adds	r3, r7, r4
 8001070:	4a13      	ldr	r2, [pc, #76]	; (80010c0 <MX_GPIO_Init+0x250>)
 8001072:	0019      	movs	r1, r3
 8001074:	0010      	movs	r0, r2
 8001076:	f001 f805 	bl	8002084 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW1_Pin SW2_Pin */
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin;
 800107a:	0021      	movs	r1, r4
 800107c:	187b      	adds	r3, r7, r1
 800107e:	220c      	movs	r2, #12
 8001080:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001082:	187b      	adds	r3, r7, r1
 8001084:	2200      	movs	r2, #0
 8001086:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001088:	187b      	adds	r3, r7, r1
 800108a:	2201      	movs	r2, #1
 800108c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800108e:	187b      	adds	r3, r7, r1
 8001090:	4a0b      	ldr	r2, [pc, #44]	; (80010c0 <MX_GPIO_Init+0x250>)
 8001092:	0019      	movs	r1, r3
 8001094:	0010      	movs	r0, r2
 8001096:	f000 fff5 	bl	8002084 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 3, 0);
 800109a:	2200      	movs	r2, #0
 800109c:	2103      	movs	r1, #3
 800109e:	2005      	movs	r0, #5
 80010a0:	f000 fef2 	bl	8001e88 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 80010a4:	2005      	movs	r0, #5
 80010a6:	f000 ff04 	bl	8001eb2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010aa:	46c0      	nop			; (mov r8, r8)
 80010ac:	46bd      	mov	sp, r7
 80010ae:	b00b      	add	sp, #44	; 0x2c
 80010b0:	bd90      	pop	{r4, r7, pc}
 80010b2:	46c0      	nop			; (mov r8, r8)
 80010b4:	40021000 	.word	0x40021000
 80010b8:	0000a003 	.word	0x0000a003
 80010bc:	50000400 	.word	0x50000400
 80010c0:	50000c00 	.word	0x50000c00
 80010c4:	00008c03 	.word	0x00008c03

080010c8 <send_debug_logs>:
/* USER CODE BEGIN 4 */


// FUNCTIONS REQUIRED BY astronode-stm32-example-asset library
void send_debug_logs ( char* p_tx_buffer )
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b084      	sub	sp, #16
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
    uint32_t length = strlen ( p_tx_buffer ) ;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	0018      	movs	r0, r3
 80010d4:	f7ff f816 	bl	8000104 <strlen>
 80010d8:	0003      	movs	r3, r0
 80010da:	60fb      	str	r3, [r7, #12]

    if ( length > UART_TX_MAX_BUFF_SIZE )
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	2bfa      	cmp	r3, #250	; 0xfa
 80010e0:	d908      	bls.n	80010f4 <send_debug_logs+0x2c>
    {
        HAL_UART_Transmit ( HUART_DBG , ( uint8_t* ) "[ERROR] UART buffer reached max length.\n" , 42 , UART_TIMEOUT ) ;
 80010e2:	23fa      	movs	r3, #250	; 0xfa
 80010e4:	009b      	lsls	r3, r3, #2
 80010e6:	490d      	ldr	r1, [pc, #52]	; (800111c <send_debug_logs+0x54>)
 80010e8:	480d      	ldr	r0, [pc, #52]	; (8001120 <send_debug_logs+0x58>)
 80010ea:	222a      	movs	r2, #42	; 0x2a
 80010ec:	f003 fe48 	bl	8004d80 <HAL_UART_Transmit>
        length = UART_TX_MAX_BUFF_SIZE;
 80010f0:	23fa      	movs	r3, #250	; 0xfa
 80010f2:	60fb      	str	r3, [r7, #12]
    }

    HAL_UART_Transmit ( HUART_DBG , ( uint8_t* ) p_tx_buffer , length , UART_TIMEOUT ) ;
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	b29a      	uxth	r2, r3
 80010f8:	23fa      	movs	r3, #250	; 0xfa
 80010fa:	009b      	lsls	r3, r3, #2
 80010fc:	6879      	ldr	r1, [r7, #4]
 80010fe:	4808      	ldr	r0, [pc, #32]	; (8001120 <send_debug_logs+0x58>)
 8001100:	f003 fe3e 	bl	8004d80 <HAL_UART_Transmit>
    HAL_UART_Transmit ( HUART_DBG , ( uint8_t* ) "\n" , 1 , UART_TIMEOUT ) ;
 8001104:	23fa      	movs	r3, #250	; 0xfa
 8001106:	009b      	lsls	r3, r3, #2
 8001108:	4906      	ldr	r1, [pc, #24]	; (8001124 <send_debug_logs+0x5c>)
 800110a:	4805      	ldr	r0, [pc, #20]	; (8001120 <send_debug_logs+0x58>)
 800110c:	2201      	movs	r2, #1
 800110e:	f003 fe37 	bl	8004d80 <HAL_UART_Transmit>
}
 8001112:	46c0      	nop			; (mov r8, r8)
 8001114:	46bd      	mov	sp, r7
 8001116:	b004      	add	sp, #16
 8001118:	bd80      	pop	{r7, pc}
 800111a:	46c0      	nop			; (mov r8, r8)
 800111c:	08008cf0 	.word	0x08008cf0
 8001120:	20000158 	.word	0x20000158
 8001124:	08008d1c 	.word	0x08008d1c

08001128 <my_lis2dw12_platform_write>:

// ACC LL Function

int32_t my_lis2dw12_platform_write ( void *handle , uint8_t reg , const uint8_t *bufp , uint16_t len )
{
 8001128:	b5b0      	push	{r4, r5, r7, lr}
 800112a:	b084      	sub	sp, #16
 800112c:	af00      	add	r7, sp, #0
 800112e:	60f8      	str	r0, [r7, #12]
 8001130:	0008      	movs	r0, r1
 8001132:	607a      	str	r2, [r7, #4]
 8001134:	0019      	movs	r1, r3
 8001136:	240b      	movs	r4, #11
 8001138:	193b      	adds	r3, r7, r4
 800113a:	1c02      	adds	r2, r0, #0
 800113c:	701a      	strb	r2, [r3, #0]
 800113e:	2508      	movs	r5, #8
 8001140:	197b      	adds	r3, r7, r5
 8001142:	1c0a      	adds	r2, r1, #0
 8001144:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin	( GPIOA , ACC_CS_Pin , GPIO_PIN_RESET ) ;
 8001146:	23a0      	movs	r3, #160	; 0xa0
 8001148:	05db      	lsls	r3, r3, #23
 800114a:	2200      	movs	r2, #0
 800114c:	2110      	movs	r1, #16
 800114e:	0018      	movs	r0, r3
 8001150:	f001 f9f9 	bl	8002546 <HAL_GPIO_WritePin>
	HAL_Delay ( 20 ) ;
 8001154:	2014      	movs	r0, #20
 8001156:	f000 fd9f 	bl	8001c98 <HAL_Delay>
	HAL_SPI_Transmit	( handle , &reg , 1 , 1000 ) ;
 800115a:	23fa      	movs	r3, #250	; 0xfa
 800115c:	009b      	lsls	r3, r3, #2
 800115e:	1939      	adds	r1, r7, r4
 8001160:	68f8      	ldr	r0, [r7, #12]
 8001162:	2201      	movs	r2, #1
 8001164:	f002 fbd8 	bl	8003918 <HAL_SPI_Transmit>
	HAL_SPI_Transmit	( handle , (uint8_t*) bufp , len , 1000 ) ;
 8001168:	23fa      	movs	r3, #250	; 0xfa
 800116a:	009c      	lsls	r4, r3, #2
 800116c:	197b      	adds	r3, r7, r5
 800116e:	881a      	ldrh	r2, [r3, #0]
 8001170:	6879      	ldr	r1, [r7, #4]
 8001172:	68f8      	ldr	r0, [r7, #12]
 8001174:	0023      	movs	r3, r4
 8001176:	f002 fbcf 	bl	8003918 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin	( GPIOA , ACC_CS_Pin , GPIO_PIN_SET) ;
 800117a:	23a0      	movs	r3, #160	; 0xa0
 800117c:	05db      	lsls	r3, r3, #23
 800117e:	2201      	movs	r2, #1
 8001180:	2110      	movs	r1, #16
 8001182:	0018      	movs	r0, r3
 8001184:	f001 f9df 	bl	8002546 <HAL_GPIO_WritePin>

	return 0;
 8001188:	2300      	movs	r3, #0
}
 800118a:	0018      	movs	r0, r3
 800118c:	46bd      	mov	sp, r7
 800118e:	b004      	add	sp, #16
 8001190:	bdb0      	pop	{r4, r5, r7, pc}

08001192 <my_lis2dw12_platform_read>:

int32_t my_lis2dw12_platform_read ( void *handle , uint8_t reg , uint8_t *bufp , uint16_t len )
{
 8001192:	b5b0      	push	{r4, r5, r7, lr}
 8001194:	b084      	sub	sp, #16
 8001196:	af00      	add	r7, sp, #0
 8001198:	60f8      	str	r0, [r7, #12]
 800119a:	0008      	movs	r0, r1
 800119c:	607a      	str	r2, [r7, #4]
 800119e:	0019      	movs	r1, r3
 80011a0:	240b      	movs	r4, #11
 80011a2:	193b      	adds	r3, r7, r4
 80011a4:	1c02      	adds	r2, r0, #0
 80011a6:	701a      	strb	r2, [r3, #0]
 80011a8:	2508      	movs	r5, #8
 80011aa:	197b      	adds	r3, r7, r5
 80011ac:	1c0a      	adds	r2, r1, #0
 80011ae:	801a      	strh	r2, [r3, #0]
	reg |= 0x80;
 80011b0:	193b      	adds	r3, r7, r4
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	2280      	movs	r2, #128	; 0x80
 80011b6:	4252      	negs	r2, r2
 80011b8:	4313      	orrs	r3, r2
 80011ba:	b2da      	uxtb	r2, r3
 80011bc:	193b      	adds	r3, r7, r4
 80011be:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin ( GPIOA , ACC_CS_Pin , GPIO_PIN_RESET) ;
 80011c0:	23a0      	movs	r3, #160	; 0xa0
 80011c2:	05db      	lsls	r3, r3, #23
 80011c4:	2200      	movs	r2, #0
 80011c6:	2110      	movs	r1, #16
 80011c8:	0018      	movs	r0, r3
 80011ca:	f001 f9bc 	bl	8002546 <HAL_GPIO_WritePin>
	HAL_Delay ( 20 ) ;
 80011ce:	2014      	movs	r0, #20
 80011d0:	f000 fd62 	bl	8001c98 <HAL_Delay>
	HAL_SPI_Transmit ( handle , &reg , 1 , 1000 ) ;
 80011d4:	23fa      	movs	r3, #250	; 0xfa
 80011d6:	009b      	lsls	r3, r3, #2
 80011d8:	1939      	adds	r1, r7, r4
 80011da:	68f8      	ldr	r0, [r7, #12]
 80011dc:	2201      	movs	r2, #1
 80011de:	f002 fb9b 	bl	8003918 <HAL_SPI_Transmit>
	HAL_SPI_Receive ( handle , bufp , len , 1000 ) ;
 80011e2:	23fa      	movs	r3, #250	; 0xfa
 80011e4:	009c      	lsls	r4, r3, #2
 80011e6:	197b      	adds	r3, r7, r5
 80011e8:	881a      	ldrh	r2, [r3, #0]
 80011ea:	6879      	ldr	r1, [r7, #4]
 80011ec:	68f8      	ldr	r0, [r7, #12]
 80011ee:	0023      	movs	r3, r4
 80011f0:	f002 fcf2 	bl	8003bd8 <HAL_SPI_Receive>
	HAL_GPIO_WritePin ( GPIOA , ACC_CS_Pin , GPIO_PIN_SET) ;
 80011f4:	23a0      	movs	r3, #160	; 0xa0
 80011f6:	05db      	lsls	r3, r3, #23
 80011f8:	2201      	movs	r2, #1
 80011fa:	2110      	movs	r1, #16
 80011fc:	0018      	movs	r0, r3
 80011fe:	f001 f9a2 	bl	8002546 <HAL_GPIO_WritePin>

	return 0;
 8001202:	2300      	movs	r3, #0
}
 8001204:	0018      	movs	r0, r3
 8001206:	46bd      	mov	sp, r7
 8001208:	b004      	add	sp, #16
 800120a:	bdb0      	pop	{r4, r5, r7, pc}

0800120c <my_gnss_on>:

// GNSS LL Function
void my_gnss_on ( void )
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin ( GPIOB , GNSS_PWR_SW_Pin , GPIO_PIN_SET ) ;
 8001210:	2380      	movs	r3, #128	; 0x80
 8001212:	021b      	lsls	r3, r3, #8
 8001214:	4808      	ldr	r0, [pc, #32]	; (8001238 <my_gnss_on+0x2c>)
 8001216:	2201      	movs	r2, #1
 8001218:	0019      	movs	r1, r3
 800121a:	f001 f994 	bl	8002546 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( GPIOB , GNSS_RST_Pin , GPIO_PIN_SET ) ;
 800121e:	2380      	movs	r3, #128	; 0x80
 8001220:	019b      	lsls	r3, r3, #6
 8001222:	4805      	ldr	r0, [pc, #20]	; (8001238 <my_gnss_on+0x2c>)
 8001224:	2201      	movs	r2, #1
 8001226:	0019      	movs	r1, r3
 8001228:	f001 f98d 	bl	8002546 <HAL_GPIO_WritePin>
	MX_USART3_UART_Init () ;
 800122c:	f7ff fd96 	bl	8000d5c <MX_USART3_UART_Init>
}
 8001230:	46c0      	nop			; (mov r8, r8)
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	46c0      	nop			; (mov r8, r8)
 8001238:	50000400 	.word	0x50000400

0800123c <my_gnss_off>:
void my_gnss_off ( void )
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin ( GPIOB , GNSS_PWR_SW_Pin , GPIO_PIN_RESET ) ;
 8001240:	2380      	movs	r3, #128	; 0x80
 8001242:	021b      	lsls	r3, r3, #8
 8001244:	4809      	ldr	r0, [pc, #36]	; (800126c <my_gnss_off+0x30>)
 8001246:	2200      	movs	r2, #0
 8001248:	0019      	movs	r1, r3
 800124a:	f001 f97c 	bl	8002546 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( GPIOB , GNSS_RST_Pin , GPIO_PIN_RESET ) ;
 800124e:	2380      	movs	r3, #128	; 0x80
 8001250:	019b      	lsls	r3, r3, #6
 8001252:	4806      	ldr	r0, [pc, #24]	; (800126c <my_gnss_off+0x30>)
 8001254:	2200      	movs	r2, #0
 8001256:	0019      	movs	r1, r3
 8001258:	f001 f975 	bl	8002546 <HAL_GPIO_WritePin>
	HAL_UART_DeInit ( HUART_GNSS ) ;
 800125c:	4b04      	ldr	r3, [pc, #16]	; (8001270 <my_gnss_off+0x34>)
 800125e:	0018      	movs	r0, r3
 8001260:	f003 fd4e 	bl	8004d00 <HAL_UART_DeInit>
}
 8001264:	46c0      	nop			; (mov r8, r8)
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	46c0      	nop			; (mov r8, r8)
 800126c:	50000400 	.word	0x50000400
 8001270:	20000280 	.word	0x20000280

08001274 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef *htim )
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
	if ( htim->Instance == TIM6 )
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a0c      	ldr	r2, [pc, #48]	; (80012b4 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d111      	bne.n	80012aa <HAL_TIM_PeriodElapsedCallback+0x36>
	{
		tim_seconds++ ;
 8001286:	4b0c      	ldr	r3, [pc, #48]	; (80012b8 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001288:	881b      	ldrh	r3, [r3, #0]
 800128a:	3301      	adds	r3, #1
 800128c:	b29a      	uxth	r2, r3
 800128e:	4b0a      	ldr	r3, [pc, #40]	; (80012b8 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001290:	801a      	strh	r2, [r3, #0]
		if ( tim_seconds > TIM_SECONDS_THS_SYSTEM_RESET )
 8001292:	4b09      	ldr	r3, [pc, #36]	; (80012b8 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001294:	881a      	ldrh	r2, [r3, #0]
 8001296:	2396      	movs	r3, #150	; 0x96
 8001298:	009b      	lsls	r3, r3, #2
 800129a:	429a      	cmp	r2, r3
 800129c:	d905      	bls.n	80012aa <HAL_TIM_PeriodElapsedCallback+0x36>
		{
			send_debug_logs ( "Watchdog activated! System restart!" ) ;
 800129e:	4b07      	ldr	r3, [pc, #28]	; (80012bc <HAL_TIM_PeriodElapsedCallback+0x48>)
 80012a0:	0018      	movs	r0, r3
 80012a2:	f7ff ff11 	bl	80010c8 <send_debug_logs>
			HAL_NVIC_SystemReset () ;
 80012a6:	f000 fe14 	bl	8001ed2 <HAL_NVIC_SystemReset>
		}
	}
}
 80012aa:	46c0      	nop			; (mov r8, r8)
 80012ac:	46bd      	mov	sp, r7
 80012ae:	b002      	add	sp, #8
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	46c0      	nop			; (mov r8, r8)
 80012b4:	40001000 	.word	0x40001000
 80012b8:	20000420 	.word	0x20000420
 80012bc:	08008d20 	.word	0x08008d20

080012c0 <my_tim_init>:

void my_tim_init (void )
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
	__HAL_TIM_CLEAR_IT ( HTIM , TIM_IT_UPDATE ) ;
 80012c4:	4b03      	ldr	r3, [pc, #12]	; (80012d4 <my_tim_init+0x14>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	2202      	movs	r2, #2
 80012ca:	4252      	negs	r2, r2
 80012cc:	611a      	str	r2, [r3, #16]
}
 80012ce:	46c0      	nop			; (mov r8, r8)
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	2000010c 	.word	0x2000010c

080012d8 <my_tim_start>:

void my_tim_start (void )
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
	tim_seconds = 0 ;
 80012dc:	4b04      	ldr	r3, [pc, #16]	; (80012f0 <my_tim_start+0x18>)
 80012de:	2200      	movs	r2, #0
 80012e0:	801a      	strh	r2, [r3, #0]
	HAL_TIM_Base_Start_IT ( HTIM ) ;
 80012e2:	4b04      	ldr	r3, [pc, #16]	; (80012f4 <my_tim_start+0x1c>)
 80012e4:	0018      	movs	r0, r3
 80012e6:	f003 f9d7 	bl	8004698 <HAL_TIM_Base_Start_IT>
}
 80012ea:	46c0      	nop			; (mov r8, r8)
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	20000420 	.word	0x20000420
 80012f4:	2000010c 	.word	0x2000010c

080012f8 <my_tim_stop>:

void my_tim_stop (void )
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT ( HTIM ) ;
 80012fc:	4b03      	ldr	r3, [pc, #12]	; (800130c <my_tim_stop+0x14>)
 80012fe:	0018      	movs	r0, r3
 8001300:	f003 fa2c 	bl	800475c <HAL_TIM_Base_Stop_IT>
}
 8001304:	46c0      	nop			; (mov r8, r8)
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	46c0      	nop			; (mov r8, r8)
 800130c:	2000010c 	.word	0x2000010c

08001310 <reset_astronode>:
void reset_astronode ( void )
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin ( ASTRO_RST_GPIO_Port , ASTRO_RST_Pin , GPIO_PIN_SET ) ;
 8001314:	4b0a      	ldr	r3, [pc, #40]	; (8001340 <reset_astronode+0x30>)
 8001316:	2201      	movs	r2, #1
 8001318:	2102      	movs	r1, #2
 800131a:	0018      	movs	r0, r3
 800131c:	f001 f913 	bl	8002546 <HAL_GPIO_WritePin>
    HAL_Delay ( 1 ) ;
 8001320:	2001      	movs	r0, #1
 8001322:	f000 fcb9 	bl	8001c98 <HAL_Delay>
    HAL_GPIO_WritePin ( ASTRO_RST_GPIO_Port , ASTRO_RST_Pin , GPIO_PIN_RESET ) ;
 8001326:	4b06      	ldr	r3, [pc, #24]	; (8001340 <reset_astronode+0x30>)
 8001328:	2200      	movs	r2, #0
 800132a:	2102      	movs	r1, #2
 800132c:	0018      	movs	r0, r3
 800132e:	f001 f90a 	bl	8002546 <HAL_GPIO_WritePin>
    HAL_Delay ( 250 ) ;
 8001332:	20fa      	movs	r0, #250	; 0xfa
 8001334:	f000 fcb0 	bl	8001c98 <HAL_Delay>
}
 8001338:	46c0      	nop			; (mov r8, r8)
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	46c0      	nop			; (mov r8, r8)
 8001340:	50000400 	.word	0x50000400

08001344 <send_astronode_request>:
void send_astronode_request ( uint8_t* p_tx_buffer , uint32_t length )
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	6039      	str	r1, [r7, #0]
    send_debug_logs ( "Message sent to the Astronode --> " ) ;
 800134e:	4b0a      	ldr	r3, [pc, #40]	; (8001378 <send_astronode_request+0x34>)
 8001350:	0018      	movs	r0, r3
 8001352:	f7ff feb9 	bl	80010c8 <send_debug_logs>
    send_debug_logs ( ( char* ) p_tx_buffer ) ;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	0018      	movs	r0, r3
 800135a:	f7ff feb5 	bl	80010c8 <send_debug_logs>
    HAL_UART_Transmit ( HUART_ASTRO , p_tx_buffer , length , 1000 ) ;
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	b29a      	uxth	r2, r3
 8001362:	23fa      	movs	r3, #250	; 0xfa
 8001364:	009b      	lsls	r3, r3, #2
 8001366:	6879      	ldr	r1, [r7, #4]
 8001368:	4804      	ldr	r0, [pc, #16]	; (800137c <send_astronode_request+0x38>)
 800136a:	f003 fd09 	bl	8004d80 <HAL_UART_Transmit>
}
 800136e:	46c0      	nop			; (mov r8, r8)
 8001370:	46bd      	mov	sp, r7
 8001372:	b002      	add	sp, #8
 8001374:	bd80      	pop	{r7, pc}
 8001376:	46c0      	nop			; (mov r8, r8)
 8001378:	08008d44 	.word	0x08008d44
 800137c:	200001ec 	.word	0x200001ec

08001380 <get_systick>:
uint32_t get_systick ( void )
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
    return HAL_GetTick() ;
 8001384:	f000 fc7e 	bl	8001c84 <HAL_GetTick>
 8001388:	0003      	movs	r3, r0
}
 800138a:	0018      	movs	r0, r3
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}

08001390 <is_systick_timeout_over>:
bool is_systick_timeout_over ( uint32_t starting_value , uint16_t duration )
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
 8001398:	000a      	movs	r2, r1
 800139a:	1cbb      	adds	r3, r7, #2
 800139c:	801a      	strh	r2, [r3, #0]
    return ( get_systick () - starting_value > duration ) ? true : false ;
 800139e:	f7ff ffef 	bl	8001380 <get_systick>
 80013a2:	0002      	movs	r2, r0
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	1ad3      	subs	r3, r2, r3
 80013a8:	1cba      	adds	r2, r7, #2
 80013aa:	8812      	ldrh	r2, [r2, #0]
 80013ac:	429a      	cmp	r2, r3
 80013ae:	419b      	sbcs	r3, r3
 80013b0:	425b      	negs	r3, r3
 80013b2:	b2db      	uxtb	r3, r3
}
 80013b4:	0018      	movs	r0, r3
 80013b6:	46bd      	mov	sp, r7
 80013b8:	b002      	add	sp, #8
 80013ba:	bd80      	pop	{r7, pc}

080013bc <is_astronode_character_received>:
bool is_astronode_character_received ( uint8_t* p_rx_char )
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
    return ( HAL_UART_Receive ( HUART_ASTRO , p_rx_char , 1 , 100 ) == HAL_OK ? true : false ) ;
 80013c4:	6879      	ldr	r1, [r7, #4]
 80013c6:	4806      	ldr	r0, [pc, #24]	; (80013e0 <is_astronode_character_received+0x24>)
 80013c8:	2364      	movs	r3, #100	; 0x64
 80013ca:	2201      	movs	r2, #1
 80013cc:	f003 fd7c 	bl	8004ec8 <HAL_UART_Receive>
 80013d0:	0003      	movs	r3, r0
 80013d2:	425a      	negs	r2, r3
 80013d4:	4153      	adcs	r3, r2
 80013d6:	b2db      	uxtb	r3, r3
}
 80013d8:	0018      	movs	r0, r3
 80013da:	46bd      	mov	sp, r7
 80013dc:	b002      	add	sp, #8
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	200001ec 	.word	0x200001ec

080013e4 <fifo_init>:




uint8_t fifo_init(uint8_t* worker_buffer, uint16_t size, volatile fifo_t* fifo)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b086      	sub	sp, #24
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	60f8      	str	r0, [r7, #12]
 80013ec:	607a      	str	r2, [r7, #4]
 80013ee:	230a      	movs	r3, #10
 80013f0:	18fb      	adds	r3, r7, r3
 80013f2:	1c0a      	adds	r2, r1, #0
 80013f4:	801a      	strh	r2, [r3, #0]
    uint8_t retval = 0;
 80013f6:	2117      	movs	r1, #23
 80013f8:	187b      	adds	r3, r7, r1
 80013fa:	2200      	movs	r2, #0
 80013fc:	701a      	strb	r2, [r3, #0]

    if (NULL == worker_buffer) {
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d103      	bne.n	800140c <fifo_init+0x28>
        retval = 1;
 8001404:	187b      	adds	r3, r7, r1
 8001406:	2201      	movs	r2, #1
 8001408:	701a      	strb	r2, [r3, #0]
        goto exit;
 800140a:	e022      	b.n	8001452 <fifo_init+0x6e>
    }

    if (0 == size) {
 800140c:	230a      	movs	r3, #10
 800140e:	18fb      	adds	r3, r7, r3
 8001410:	881b      	ldrh	r3, [r3, #0]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d104      	bne.n	8001420 <fifo_init+0x3c>
        retval = 2;
 8001416:	2317      	movs	r3, #23
 8001418:	18fb      	adds	r3, r7, r3
 800141a:	2202      	movs	r2, #2
 800141c:	701a      	strb	r2, [r3, #0]
        goto exit;
 800141e:	e018      	b.n	8001452 <fifo_init+0x6e>
    }

    if (NULL == fifo) {
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d104      	bne.n	8001430 <fifo_init+0x4c>
        retval = 3;
 8001426:	2317      	movs	r3, #23
 8001428:	18fb      	adds	r3, r7, r3
 800142a:	2203      	movs	r2, #3
 800142c:	701a      	strb	r2, [r3, #0]
        goto exit;
 800142e:	e010      	b.n	8001452 <fifo_init+0x6e>
    }

    fifo->buffer = worker_buffer;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	68fa      	ldr	r2, [r7, #12]
 8001434:	601a      	str	r2, [r3, #0]
    fifo->total_size = size;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	220a      	movs	r2, #10
 800143a:	18ba      	adds	r2, r7, r2
 800143c:	8812      	ldrh	r2, [r2, #0]
 800143e:	809a      	strh	r2, [r3, #4]
    fifo->cur_size = 0;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2200      	movs	r2, #0
 8001444:	80da      	strh	r2, [r3, #6]
    fifo->in_index = 0;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2200      	movs	r2, #0
 800144a:	811a      	strh	r2, [r3, #8]
    fifo->out_index = 0;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2200      	movs	r2, #0
 8001450:	815a      	strh	r2, [r3, #10]

exit:
    return retval;
 8001452:	2317      	movs	r3, #23
 8001454:	18fb      	adds	r3, r7, r3
 8001456:	781b      	ldrb	r3, [r3, #0]
}
 8001458:	0018      	movs	r0, r3
 800145a:	46bd      	mov	sp, r7
 800145c:	b006      	add	sp, #24
 800145e:	bd80      	pop	{r7, pc}

08001460 <fifo_is_empty>:

bool fifo_is_empty(fifo_t* fifo)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b084      	sub	sp, #16
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
    bool is_empty = true;
 8001468:	210f      	movs	r1, #15
 800146a:	187b      	adds	r3, r7, r1
 800146c:	2201      	movs	r2, #1
 800146e:	701a      	strb	r2, [r3, #0]

    if (0 != fifo->cur_size) {
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	88db      	ldrh	r3, [r3, #6]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d002      	beq.n	800147e <fifo_is_empty+0x1e>
        is_empty = false;
 8001478:	187b      	adds	r3, r7, r1
 800147a:	2200      	movs	r2, #0
 800147c:	701a      	strb	r2, [r3, #0]
    }

    return is_empty;
 800147e:	230f      	movs	r3, #15
 8001480:	18fb      	adds	r3, r7, r3
 8001482:	781b      	ldrb	r3, [r3, #0]
}
 8001484:	0018      	movs	r0, r3
 8001486:	46bd      	mov	sp, r7
 8001488:	b004      	add	sp, #16
 800148a:	bd80      	pop	{r7, pc}

0800148c <fifo_put>:

uint8_t fifo_put(fifo_t* fifo, uint8_t byte)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b084      	sub	sp, #16
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
 8001494:	000a      	movs	r2, r1
 8001496:	1cfb      	adds	r3, r7, #3
 8001498:	701a      	strb	r2, [r3, #0]
    uint8_t retval = 0;
 800149a:	210f      	movs	r1, #15
 800149c:	187b      	adds	r3, r7, r1
 800149e:	2200      	movs	r2, #0
 80014a0:	701a      	strb	r2, [r3, #0]

    if (NULL == fifo) {
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d103      	bne.n	80014b0 <fifo_put+0x24>
        retval = 1;
 80014a8:	187b      	adds	r3, r7, r1
 80014aa:	2201      	movs	r2, #1
 80014ac:	701a      	strb	r2, [r3, #0]
        goto exit;
 80014ae:	e029      	b.n	8001504 <fifo_put+0x78>
    }

    /* Check if fifo is not full */
    if (fifo->total_size == fifo->cur_size) {
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	889a      	ldrh	r2, [r3, #4]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	88db      	ldrh	r3, [r3, #6]
 80014b8:	429a      	cmp	r2, r3
 80014ba:	d104      	bne.n	80014c6 <fifo_put+0x3a>
        retval = 2;
 80014bc:	230f      	movs	r3, #15
 80014be:	18fb      	adds	r3, r7, r3
 80014c0:	2202      	movs	r2, #2
 80014c2:	701a      	strb	r2, [r3, #0]
        goto exit;
 80014c4:	e01e      	b.n	8001504 <fifo_put+0x78>
    }

    /* Enqueue the byte */
    fifo->buffer[fifo->in_index] = byte;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	687a      	ldr	r2, [r7, #4]
 80014cc:	8912      	ldrh	r2, [r2, #8]
 80014ce:	189b      	adds	r3, r3, r2
 80014d0:	1cfa      	adds	r2, r7, #3
 80014d2:	7812      	ldrb	r2, [r2, #0]
 80014d4:	701a      	strb	r2, [r3, #0]
    /* Increase the input index */
    fifo->in_index += 1;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	891b      	ldrh	r3, [r3, #8]
 80014da:	3301      	adds	r3, #1
 80014dc:	b29a      	uxth	r2, r3
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	811a      	strh	r2, [r3, #8]
    /* Increase the count of the bytes placed in the fifo */
    fifo->cur_size += 1;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	88db      	ldrh	r3, [r3, #6]
 80014e6:	3301      	adds	r3, #1
 80014e8:	b29a      	uxth	r2, r3
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	80da      	strh	r2, [r3, #6]

    /* Wrap around the buffer */
    if (fifo->in_index == fifo->total_size) {
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	891a      	ldrh	r2, [r3, #8]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	889b      	ldrh	r3, [r3, #4]
 80014f6:	429a      	cmp	r2, r3
 80014f8:	d103      	bne.n	8001502 <fifo_put+0x76>
        fifo->in_index = 0;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2200      	movs	r2, #0
 80014fe:	811a      	strh	r2, [r3, #8]
 8001500:	e000      	b.n	8001504 <fifo_put+0x78>
    }

exit:
 8001502:	46c0      	nop			; (mov r8, r8)
    return retval;
 8001504:	230f      	movs	r3, #15
 8001506:	18fb      	adds	r3, r7, r3
 8001508:	781b      	ldrb	r3, [r3, #0]
}
 800150a:	0018      	movs	r0, r3
 800150c:	46bd      	mov	sp, r7
 800150e:	b004      	add	sp, #16
 8001510:	bd80      	pop	{r7, pc}

08001512 <fifo_get>:

uint8_t fifo_get(fifo_t* fifo, uint8_t* byte)
{
 8001512:	b580      	push	{r7, lr}
 8001514:	b084      	sub	sp, #16
 8001516:	af00      	add	r7, sp, #0
 8001518:	6078      	str	r0, [r7, #4]
 800151a:	6039      	str	r1, [r7, #0]
    uint8_t retval = 0;
 800151c:	210f      	movs	r1, #15
 800151e:	187b      	adds	r3, r7, r1
 8001520:	2200      	movs	r2, #0
 8001522:	701a      	strb	r2, [r3, #0]

    if (NULL == fifo) {
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d103      	bne.n	8001532 <fifo_get+0x20>
        retval = 1;
 800152a:	187b      	adds	r3, r7, r1
 800152c:	2201      	movs	r2, #1
 800152e:	701a      	strb	r2, [r3, #0]
        goto exit;
 8001530:	e02f      	b.n	8001592 <fifo_get+0x80>
    }

    if (NULL == byte) {
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d104      	bne.n	8001542 <fifo_get+0x30>
        retval = 2;
 8001538:	230f      	movs	r3, #15
 800153a:	18fb      	adds	r3, r7, r3
 800153c:	2202      	movs	r2, #2
 800153e:	701a      	strb	r2, [r3, #0]
        goto exit;
 8001540:	e027      	b.n	8001592 <fifo_get+0x80>
    }

    /* Check if fifo is not full */
    if (0 == fifo->cur_size) {
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	88db      	ldrh	r3, [r3, #6]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d104      	bne.n	8001554 <fifo_get+0x42>
        retval = 3;
 800154a:	230f      	movs	r3, #15
 800154c:	18fb      	adds	r3, r7, r3
 800154e:	2203      	movs	r2, #3
 8001550:	701a      	strb	r2, [r3, #0]
        goto exit;
 8001552:	e01e      	b.n	8001592 <fifo_get+0x80>
    }

    /* Dequeue the byte */
    *byte = fifo->buffer[fifo->out_index];
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	687a      	ldr	r2, [r7, #4]
 800155a:	8952      	ldrh	r2, [r2, #10]
 800155c:	189b      	adds	r3, r3, r2
 800155e:	781a      	ldrb	r2, [r3, #0]
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	701a      	strb	r2, [r3, #0]
    /* Increase the output index */
    fifo->out_index += 1;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	895b      	ldrh	r3, [r3, #10]
 8001568:	3301      	adds	r3, #1
 800156a:	b29a      	uxth	r2, r3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	815a      	strh	r2, [r3, #10]
    /* Decrement the count of the bytes placed in the fifo */
    fifo->cur_size -= 1;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	88db      	ldrh	r3, [r3, #6]
 8001574:	3b01      	subs	r3, #1
 8001576:	b29a      	uxth	r2, r3
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	80da      	strh	r2, [r3, #6]

    /* Wrap around the buffer */
    if (fifo->out_index ==fifo->total_size) {
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	895a      	ldrh	r2, [r3, #10]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	889b      	ldrh	r3, [r3, #4]
 8001584:	429a      	cmp	r2, r3
 8001586:	d103      	bne.n	8001590 <fifo_get+0x7e>
        fifo->out_index = 0;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2200      	movs	r2, #0
 800158c:	815a      	strh	r2, [r3, #10]
 800158e:	e000      	b.n	8001592 <fifo_get+0x80>
    }

exit:
 8001590:	46c0      	nop			; (mov r8, r8)
    return retval;
 8001592:	230f      	movs	r3, #15
 8001594:	18fb      	adds	r3, r7, r3
 8001596:	781b      	ldrb	r3, [r3, #0]
}
 8001598:	0018      	movs	r0, r3
 800159a:	46bd      	mov	sp, r7
 800159c:	b004      	add	sp, #16
 800159e:	bd80      	pop	{r7, pc}

080015a0 <EXTI4_15_IRQHandler>:

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void EXTI4_15_IRQHandler (void) {
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler(GNSS_3DFIX_Pin);
 80015a4:	2020      	movs	r0, #32
 80015a6:	f000 ffeb 	bl	8002580 <HAL_GPIO_EXTI_IRQHandler>

}
 80015aa:	46c0      	nop			; (mov r8, r8)
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}

080015b0 <USART3_4_5_6_LPUART1_IRQHandler>:
void USART3_4_5_6_LPUART1_IRQHandler(void) {
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
    HAL_UART_IRQHandler(HUART_GNSS);
 80015b4:	4b03      	ldr	r3, [pc, #12]	; (80015c4 <USART3_4_5_6_LPUART1_IRQHandler+0x14>)
 80015b6:	0018      	movs	r0, r3
 80015b8:	f003 fdd2 	bl	8005160 <HAL_UART_IRQHandler>
}
 80015bc:	46c0      	nop			; (mov r8, r8)
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	46c0      	nop			; (mov r8, r8)
 80015c4:	20000280 	.word	0x20000280

080015c8 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
    if (huart == HUART_GNSS) {
 80015d0:	687a      	ldr	r2, [r7, #4]
 80015d2:	4b0a      	ldr	r3, [pc, #40]	; (80015fc <HAL_UART_RxCpltCallback+0x34>)
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d10c      	bne.n	80015f2 <HAL_UART_RxCpltCallback+0x2a>
        // Move the head of the circular buffer


    	fifo_put(&uart_fifo, gnss_rxd_byte);
 80015d8:	4b09      	ldr	r3, [pc, #36]	; (8001600 <HAL_UART_RxCpltCallback+0x38>)
 80015da:	781a      	ldrb	r2, [r3, #0]
 80015dc:	4b09      	ldr	r3, [pc, #36]	; (8001604 <HAL_UART_RxCpltCallback+0x3c>)
 80015de:	0011      	movs	r1, r2
 80015e0:	0018      	movs	r0, r3
 80015e2:	f7ff ff53 	bl	800148c <fifo_put>
//    	            // Buffer overflow, handle the overflow condition as needed
//    	            uart5_rx_index = 0;
//    	        }
        // Start a new reception

    	        HAL_UART_Receive_IT(&huart5, &gnss_rxd_byte, 1);
 80015e6:	4906      	ldr	r1, [pc, #24]	; (8001600 <HAL_UART_RxCpltCallback+0x38>)
 80015e8:	4b04      	ldr	r3, [pc, #16]	; (80015fc <HAL_UART_RxCpltCallback+0x34>)
 80015ea:	2201      	movs	r2, #1
 80015ec:	0018      	movs	r0, r3
 80015ee:	f003 fd51 	bl	8005094 <HAL_UART_Receive_IT>
//        if(HAL_UART_Transmit(HUART_DBG, &receivedData, 1, UART_TIMEOUT) != HAL_OK)
//        {
//        	while(1);
//        }
}
}
 80015f2:	46c0      	nop			; (mov r8, r8)
 80015f4:	46bd      	mov	sp, r7
 80015f6:	b002      	add	sp, #8
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	46c0      	nop			; (mov r8, r8)
 80015fc:	20000280 	.word	0x20000280
 8001600:	20001430 	.word	0x20001430
 8001604:	20001424 	.word	0x20001424

08001608 <HAL_GPIO_EXTI_Rising_Callback>:

void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	0002      	movs	r2, r0
 8001610:	1dbb      	adds	r3, r7, #6
 8001612:	801a      	strh	r2, [r3, #0]
	if(HAL_GPIO_ReadPin(GNSS_3DFIX_GPIO_Port, GNSS_3DFIX_Pin))
 8001614:	4b0a      	ldr	r3, [pc, #40]	; (8001640 <HAL_GPIO_EXTI_Rising_Callback+0x38>)
 8001616:	2120      	movs	r1, #32
 8001618:	0018      	movs	r0, r3
 800161a:	f000 ff77 	bl	800250c <HAL_GPIO_ReadPin>
 800161e:	1e03      	subs	r3, r0, #0
 8001620:	d005      	beq.n	800162e <HAL_GPIO_EXTI_Rising_Callback+0x26>
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 8001622:	4b08      	ldr	r3, [pc, #32]	; (8001644 <HAL_GPIO_EXTI_Rising_Callback+0x3c>)
 8001624:	2201      	movs	r2, #1
 8001626:	2101      	movs	r1, #1
 8001628:	0018      	movs	r0, r3
 800162a:	f000 ff8c 	bl	8002546 <HAL_GPIO_WritePin>
	send_debug_logs ( "* EXTI5 INT: Succesful 3D position fix.\n" ) ;
 800162e:	4b06      	ldr	r3, [pc, #24]	; (8001648 <HAL_GPIO_EXTI_Rising_Callback+0x40>)
 8001630:	0018      	movs	r0, r3
 8001632:	f7ff fd49 	bl	80010c8 <send_debug_logs>
}
 8001636:	46c0      	nop			; (mov r8, r8)
 8001638:	46bd      	mov	sp, r7
 800163a:	b002      	add	sp, #8
 800163c:	bd80      	pop	{r7, pc}
 800163e:	46c0      	nop			; (mov r8, r8)
 8001640:	50000400 	.word	0x50000400
 8001644:	50000c00 	.word	0x50000c00
 8001648:	08008d68 	.word	0x08008d68

0800164c <Error_Handler>:
void Error_Handler(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001650:	b672      	cpsid	i
}
 8001652:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001654:	e7fe      	b.n	8001654 <Error_Handler+0x8>
	...

08001658 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800165e:	4b11      	ldr	r3, [pc, #68]	; (80016a4 <HAL_MspInit+0x4c>)
 8001660:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001662:	4b10      	ldr	r3, [pc, #64]	; (80016a4 <HAL_MspInit+0x4c>)
 8001664:	2101      	movs	r1, #1
 8001666:	430a      	orrs	r2, r1
 8001668:	641a      	str	r2, [r3, #64]	; 0x40
 800166a:	4b0e      	ldr	r3, [pc, #56]	; (80016a4 <HAL_MspInit+0x4c>)
 800166c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166e:	2201      	movs	r2, #1
 8001670:	4013      	ands	r3, r2
 8001672:	607b      	str	r3, [r7, #4]
 8001674:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001676:	4b0b      	ldr	r3, [pc, #44]	; (80016a4 <HAL_MspInit+0x4c>)
 8001678:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800167a:	4b0a      	ldr	r3, [pc, #40]	; (80016a4 <HAL_MspInit+0x4c>)
 800167c:	2180      	movs	r1, #128	; 0x80
 800167e:	0549      	lsls	r1, r1, #21
 8001680:	430a      	orrs	r2, r1
 8001682:	63da      	str	r2, [r3, #60]	; 0x3c
 8001684:	4b07      	ldr	r3, [pc, #28]	; (80016a4 <HAL_MspInit+0x4c>)
 8001686:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001688:	2380      	movs	r3, #128	; 0x80
 800168a:	055b      	lsls	r3, r3, #21
 800168c:	4013      	ands	r3, r2
 800168e:	603b      	str	r3, [r7, #0]
 8001690:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8001692:	23c0      	movs	r3, #192	; 0xc0
 8001694:	00db      	lsls	r3, r3, #3
 8001696:	0018      	movs	r0, r3
 8001698:	f000 fb22 	bl	8001ce0 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800169c:	46c0      	nop			; (mov r8, r8)
 800169e:	46bd      	mov	sp, r7
 80016a0:	b002      	add	sp, #8
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	40021000 	.word	0x40021000

080016a8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80016a8:	b590      	push	{r4, r7, lr}
 80016aa:	b097      	sub	sp, #92	; 0x5c
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016b0:	240c      	movs	r4, #12
 80016b2:	193b      	adds	r3, r7, r4
 80016b4:	0018      	movs	r0, r3
 80016b6:	234c      	movs	r3, #76	; 0x4c
 80016b8:	001a      	movs	r2, r3
 80016ba:	2100      	movs	r1, #0
 80016bc:	f006 fd16 	bl	80080ec <memset>
  if(hrtc->Instance==RTC)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a15      	ldr	r2, [pc, #84]	; (800171c <HAL_RTC_MspInit+0x74>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d124      	bne.n	8001714 <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80016ca:	193b      	adds	r3, r7, r4
 80016cc:	2280      	movs	r2, #128	; 0x80
 80016ce:	0292      	lsls	r2, r2, #10
 80016d0:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80016d2:	193b      	adds	r3, r7, r4
 80016d4:	2280      	movs	r2, #128	; 0x80
 80016d6:	0092      	lsls	r2, r2, #2
 80016d8:	641a      	str	r2, [r3, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016da:	193b      	adds	r3, r7, r4
 80016dc:	0018      	movs	r0, r3
 80016de:	f001 fcd9 	bl	8003094 <HAL_RCCEx_PeriphCLKConfig>
 80016e2:	1e03      	subs	r3, r0, #0
 80016e4:	d001      	beq.n	80016ea <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80016e6:	f7ff ffb1 	bl	800164c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80016ea:	4b0d      	ldr	r3, [pc, #52]	; (8001720 <HAL_RTC_MspInit+0x78>)
 80016ec:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80016ee:	4b0c      	ldr	r3, [pc, #48]	; (8001720 <HAL_RTC_MspInit+0x78>)
 80016f0:	2180      	movs	r1, #128	; 0x80
 80016f2:	0209      	lsls	r1, r1, #8
 80016f4:	430a      	orrs	r2, r1
 80016f6:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80016f8:	4b09      	ldr	r3, [pc, #36]	; (8001720 <HAL_RTC_MspInit+0x78>)
 80016fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80016fc:	4b08      	ldr	r3, [pc, #32]	; (8001720 <HAL_RTC_MspInit+0x78>)
 80016fe:	2180      	movs	r1, #128	; 0x80
 8001700:	00c9      	lsls	r1, r1, #3
 8001702:	430a      	orrs	r2, r1
 8001704:	63da      	str	r2, [r3, #60]	; 0x3c
 8001706:	4b06      	ldr	r3, [pc, #24]	; (8001720 <HAL_RTC_MspInit+0x78>)
 8001708:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800170a:	2380      	movs	r3, #128	; 0x80
 800170c:	00db      	lsls	r3, r3, #3
 800170e:	4013      	ands	r3, r2
 8001710:	60bb      	str	r3, [r7, #8]
 8001712:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001714:	46c0      	nop			; (mov r8, r8)
 8001716:	46bd      	mov	sp, r7
 8001718:	b017      	add	sp, #92	; 0x5c
 800171a:	bd90      	pop	{r4, r7, pc}
 800171c:	40002800 	.word	0x40002800
 8001720:	40021000 	.word	0x40021000

08001724 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001724:	b590      	push	{r4, r7, lr}
 8001726:	b08b      	sub	sp, #44	; 0x2c
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800172c:	2414      	movs	r4, #20
 800172e:	193b      	adds	r3, r7, r4
 8001730:	0018      	movs	r0, r3
 8001732:	2314      	movs	r3, #20
 8001734:	001a      	movs	r2, r3
 8001736:	2100      	movs	r1, #0
 8001738:	f006 fcd8 	bl	80080ec <memset>
  if(hspi->Instance==SPI1)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a1b      	ldr	r2, [pc, #108]	; (80017b0 <HAL_SPI_MspInit+0x8c>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d130      	bne.n	80017a8 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001746:	4b1b      	ldr	r3, [pc, #108]	; (80017b4 <HAL_SPI_MspInit+0x90>)
 8001748:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800174a:	4b1a      	ldr	r3, [pc, #104]	; (80017b4 <HAL_SPI_MspInit+0x90>)
 800174c:	2180      	movs	r1, #128	; 0x80
 800174e:	0149      	lsls	r1, r1, #5
 8001750:	430a      	orrs	r2, r1
 8001752:	641a      	str	r2, [r3, #64]	; 0x40
 8001754:	4b17      	ldr	r3, [pc, #92]	; (80017b4 <HAL_SPI_MspInit+0x90>)
 8001756:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001758:	2380      	movs	r3, #128	; 0x80
 800175a:	015b      	lsls	r3, r3, #5
 800175c:	4013      	ands	r3, r2
 800175e:	613b      	str	r3, [r7, #16]
 8001760:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001762:	4b14      	ldr	r3, [pc, #80]	; (80017b4 <HAL_SPI_MspInit+0x90>)
 8001764:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001766:	4b13      	ldr	r3, [pc, #76]	; (80017b4 <HAL_SPI_MspInit+0x90>)
 8001768:	2101      	movs	r1, #1
 800176a:	430a      	orrs	r2, r1
 800176c:	635a      	str	r2, [r3, #52]	; 0x34
 800176e:	4b11      	ldr	r3, [pc, #68]	; (80017b4 <HAL_SPI_MspInit+0x90>)
 8001770:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001772:	2201      	movs	r2, #1
 8001774:	4013      	ands	r3, r2
 8001776:	60fb      	str	r3, [r7, #12]
 8001778:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ACC_SCK_Pin|ACC_MISO_Pin|ACC_MOSI_Pin;
 800177a:	0021      	movs	r1, r4
 800177c:	187b      	adds	r3, r7, r1
 800177e:	22e0      	movs	r2, #224	; 0xe0
 8001780:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001782:	187b      	adds	r3, r7, r1
 8001784:	2202      	movs	r2, #2
 8001786:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001788:	187b      	adds	r3, r7, r1
 800178a:	2200      	movs	r2, #0
 800178c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800178e:	187b      	adds	r3, r7, r1
 8001790:	2200      	movs	r2, #0
 8001792:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001794:	187b      	adds	r3, r7, r1
 8001796:	2200      	movs	r2, #0
 8001798:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800179a:	187a      	adds	r2, r7, r1
 800179c:	23a0      	movs	r3, #160	; 0xa0
 800179e:	05db      	lsls	r3, r3, #23
 80017a0:	0011      	movs	r1, r2
 80017a2:	0018      	movs	r0, r3
 80017a4:	f000 fc6e 	bl	8002084 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80017a8:	46c0      	nop			; (mov r8, r8)
 80017aa:	46bd      	mov	sp, r7
 80017ac:	b00b      	add	sp, #44	; 0x2c
 80017ae:	bd90      	pop	{r4, r7, pc}
 80017b0:	40013000 	.word	0x40013000
 80017b4:	40021000 	.word	0x40021000

080017b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b084      	sub	sp, #16
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a0d      	ldr	r2, [pc, #52]	; (80017fc <HAL_TIM_Base_MspInit+0x44>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d113      	bne.n	80017f2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80017ca:	4b0d      	ldr	r3, [pc, #52]	; (8001800 <HAL_TIM_Base_MspInit+0x48>)
 80017cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80017ce:	4b0c      	ldr	r3, [pc, #48]	; (8001800 <HAL_TIM_Base_MspInit+0x48>)
 80017d0:	2110      	movs	r1, #16
 80017d2:	430a      	orrs	r2, r1
 80017d4:	63da      	str	r2, [r3, #60]	; 0x3c
 80017d6:	4b0a      	ldr	r3, [pc, #40]	; (8001800 <HAL_TIM_Base_MspInit+0x48>)
 80017d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017da:	2210      	movs	r2, #16
 80017dc:	4013      	ands	r3, r2
 80017de:	60fb      	str	r3, [r7, #12]
 80017e0:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, 1, 0);
 80017e2:	2200      	movs	r2, #0
 80017e4:	2101      	movs	r1, #1
 80017e6:	2011      	movs	r0, #17
 80017e8:	f000 fb4e 	bl	8001e88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_LPTIM1_IRQn);
 80017ec:	2011      	movs	r0, #17
 80017ee:	f000 fb60 	bl	8001eb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80017f2:	46c0      	nop			; (mov r8, r8)
 80017f4:	46bd      	mov	sp, r7
 80017f6:	b004      	add	sp, #16
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	46c0      	nop			; (mov r8, r8)
 80017fc:	40001000 	.word	0x40001000
 8001800:	40021000 	.word	0x40021000

08001804 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001804:	b590      	push	{r4, r7, lr}
 8001806:	b0a1      	sub	sp, #132	; 0x84
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800180c:	236c      	movs	r3, #108	; 0x6c
 800180e:	18fb      	adds	r3, r7, r3
 8001810:	0018      	movs	r0, r3
 8001812:	2314      	movs	r3, #20
 8001814:	001a      	movs	r2, r3
 8001816:	2100      	movs	r1, #0
 8001818:	f006 fc68 	bl	80080ec <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800181c:	2420      	movs	r4, #32
 800181e:	193b      	adds	r3, r7, r4
 8001820:	0018      	movs	r0, r3
 8001822:	234c      	movs	r3, #76	; 0x4c
 8001824:	001a      	movs	r2, r3
 8001826:	2100      	movs	r1, #0
 8001828:	f006 fc60 	bl	80080ec <memset>
  if(huart->Instance==USART2)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a60      	ldr	r2, [pc, #384]	; (80019b4 <HAL_UART_MspInit+0x1b0>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d13f      	bne.n	80018b6 <HAL_UART_MspInit+0xb2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001836:	193b      	adds	r3, r7, r4
 8001838:	2202      	movs	r2, #2
 800183a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800183c:	193b      	adds	r3, r7, r4
 800183e:	2200      	movs	r2, #0
 8001840:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001842:	193b      	adds	r3, r7, r4
 8001844:	0018      	movs	r0, r3
 8001846:	f001 fc25 	bl	8003094 <HAL_RCCEx_PeriphCLKConfig>
 800184a:	1e03      	subs	r3, r0, #0
 800184c:	d001      	beq.n	8001852 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800184e:	f7ff fefd 	bl	800164c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001852:	4b59      	ldr	r3, [pc, #356]	; (80019b8 <HAL_UART_MspInit+0x1b4>)
 8001854:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001856:	4b58      	ldr	r3, [pc, #352]	; (80019b8 <HAL_UART_MspInit+0x1b4>)
 8001858:	2180      	movs	r1, #128	; 0x80
 800185a:	0289      	lsls	r1, r1, #10
 800185c:	430a      	orrs	r2, r1
 800185e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001860:	4b55      	ldr	r3, [pc, #340]	; (80019b8 <HAL_UART_MspInit+0x1b4>)
 8001862:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001864:	2380      	movs	r3, #128	; 0x80
 8001866:	029b      	lsls	r3, r3, #10
 8001868:	4013      	ands	r3, r2
 800186a:	61fb      	str	r3, [r7, #28]
 800186c:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800186e:	4b52      	ldr	r3, [pc, #328]	; (80019b8 <HAL_UART_MspInit+0x1b4>)
 8001870:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001872:	4b51      	ldr	r3, [pc, #324]	; (80019b8 <HAL_UART_MspInit+0x1b4>)
 8001874:	2101      	movs	r1, #1
 8001876:	430a      	orrs	r2, r1
 8001878:	635a      	str	r2, [r3, #52]	; 0x34
 800187a:	4b4f      	ldr	r3, [pc, #316]	; (80019b8 <HAL_UART_MspInit+0x1b4>)
 800187c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800187e:	2201      	movs	r2, #1
 8001880:	4013      	ands	r3, r2
 8001882:	61bb      	str	r3, [r7, #24]
 8001884:	69bb      	ldr	r3, [r7, #24]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = DBG_TX_Pin|DBG_RX_Pin;
 8001886:	216c      	movs	r1, #108	; 0x6c
 8001888:	187b      	adds	r3, r7, r1
 800188a:	220c      	movs	r2, #12
 800188c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800188e:	187b      	adds	r3, r7, r1
 8001890:	2202      	movs	r2, #2
 8001892:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001894:	187b      	adds	r3, r7, r1
 8001896:	2200      	movs	r2, #0
 8001898:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800189a:	187b      	adds	r3, r7, r1
 800189c:	2200      	movs	r2, #0
 800189e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80018a0:	187b      	adds	r3, r7, r1
 80018a2:	2201      	movs	r2, #1
 80018a4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018a6:	187a      	adds	r2, r7, r1
 80018a8:	23a0      	movs	r3, #160	; 0xa0
 80018aa:	05db      	lsls	r3, r3, #23
 80018ac:	0011      	movs	r1, r2
 80018ae:	0018      	movs	r0, r3
 80018b0:	f000 fbe8 	bl	8002084 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART5_MspInit 1 */

  /* USER CODE END USART5_MspInit 1 */
  }

}
 80018b4:	e07a      	b.n	80019ac <HAL_UART_MspInit+0x1a8>
  else if(huart->Instance==USART3)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a40      	ldr	r2, [pc, #256]	; (80019bc <HAL_UART_MspInit+0x1b8>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d140      	bne.n	8001942 <HAL_UART_MspInit+0x13e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80018c0:	2120      	movs	r1, #32
 80018c2:	187b      	adds	r3, r7, r1
 80018c4:	2204      	movs	r2, #4
 80018c6:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80018c8:	187b      	adds	r3, r7, r1
 80018ca:	2200      	movs	r2, #0
 80018cc:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018ce:	187b      	adds	r3, r7, r1
 80018d0:	0018      	movs	r0, r3
 80018d2:	f001 fbdf 	bl	8003094 <HAL_RCCEx_PeriphCLKConfig>
 80018d6:	1e03      	subs	r3, r0, #0
 80018d8:	d001      	beq.n	80018de <HAL_UART_MspInit+0xda>
      Error_Handler();
 80018da:	f7ff feb7 	bl	800164c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80018de:	4b36      	ldr	r3, [pc, #216]	; (80019b8 <HAL_UART_MspInit+0x1b4>)
 80018e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80018e2:	4b35      	ldr	r3, [pc, #212]	; (80019b8 <HAL_UART_MspInit+0x1b4>)
 80018e4:	2180      	movs	r1, #128	; 0x80
 80018e6:	02c9      	lsls	r1, r1, #11
 80018e8:	430a      	orrs	r2, r1
 80018ea:	63da      	str	r2, [r3, #60]	; 0x3c
 80018ec:	4b32      	ldr	r3, [pc, #200]	; (80019b8 <HAL_UART_MspInit+0x1b4>)
 80018ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80018f0:	2380      	movs	r3, #128	; 0x80
 80018f2:	02db      	lsls	r3, r3, #11
 80018f4:	4013      	ands	r3, r2
 80018f6:	617b      	str	r3, [r7, #20]
 80018f8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018fa:	4b2f      	ldr	r3, [pc, #188]	; (80019b8 <HAL_UART_MspInit+0x1b4>)
 80018fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018fe:	4b2e      	ldr	r3, [pc, #184]	; (80019b8 <HAL_UART_MspInit+0x1b4>)
 8001900:	2102      	movs	r1, #2
 8001902:	430a      	orrs	r2, r1
 8001904:	635a      	str	r2, [r3, #52]	; 0x34
 8001906:	4b2c      	ldr	r3, [pc, #176]	; (80019b8 <HAL_UART_MspInit+0x1b4>)
 8001908:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800190a:	2202      	movs	r2, #2
 800190c:	4013      	ands	r3, r2
 800190e:	613b      	str	r3, [r7, #16]
 8001910:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ASTRO_TX_Pin|ASTRO_RX_Pin;
 8001912:	216c      	movs	r1, #108	; 0x6c
 8001914:	187b      	adds	r3, r7, r1
 8001916:	22c0      	movs	r2, #192	; 0xc0
 8001918:	0092      	lsls	r2, r2, #2
 800191a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800191c:	187b      	adds	r3, r7, r1
 800191e:	2202      	movs	r2, #2
 8001920:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001922:	187b      	adds	r3, r7, r1
 8001924:	2200      	movs	r2, #0
 8001926:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001928:	187b      	adds	r3, r7, r1
 800192a:	2200      	movs	r2, #0
 800192c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 800192e:	187b      	adds	r3, r7, r1
 8001930:	2204      	movs	r2, #4
 8001932:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001934:	187b      	adds	r3, r7, r1
 8001936:	4a22      	ldr	r2, [pc, #136]	; (80019c0 <HAL_UART_MspInit+0x1bc>)
 8001938:	0019      	movs	r1, r3
 800193a:	0010      	movs	r0, r2
 800193c:	f000 fba2 	bl	8002084 <HAL_GPIO_Init>
}
 8001940:	e034      	b.n	80019ac <HAL_UART_MspInit+0x1a8>
  else if(huart->Instance==USART5)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a1f      	ldr	r2, [pc, #124]	; (80019c4 <HAL_UART_MspInit+0x1c0>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d12f      	bne.n	80019ac <HAL_UART_MspInit+0x1a8>
    __HAL_RCC_USART5_CLK_ENABLE();
 800194c:	4b1a      	ldr	r3, [pc, #104]	; (80019b8 <HAL_UART_MspInit+0x1b4>)
 800194e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001950:	4b19      	ldr	r3, [pc, #100]	; (80019b8 <HAL_UART_MspInit+0x1b4>)
 8001952:	2180      	movs	r1, #128	; 0x80
 8001954:	0049      	lsls	r1, r1, #1
 8001956:	430a      	orrs	r2, r1
 8001958:	63da      	str	r2, [r3, #60]	; 0x3c
 800195a:	4b17      	ldr	r3, [pc, #92]	; (80019b8 <HAL_UART_MspInit+0x1b4>)
 800195c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800195e:	2380      	movs	r3, #128	; 0x80
 8001960:	005b      	lsls	r3, r3, #1
 8001962:	4013      	ands	r3, r2
 8001964:	60fb      	str	r3, [r7, #12]
 8001966:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001968:	4b13      	ldr	r3, [pc, #76]	; (80019b8 <HAL_UART_MspInit+0x1b4>)
 800196a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800196c:	4b12      	ldr	r3, [pc, #72]	; (80019b8 <HAL_UART_MspInit+0x1b4>)
 800196e:	2102      	movs	r1, #2
 8001970:	430a      	orrs	r2, r1
 8001972:	635a      	str	r2, [r3, #52]	; 0x34
 8001974:	4b10      	ldr	r3, [pc, #64]	; (80019b8 <HAL_UART_MspInit+0x1b4>)
 8001976:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001978:	2202      	movs	r2, #2
 800197a:	4013      	ands	r3, r2
 800197c:	60bb      	str	r3, [r7, #8]
 800197e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GNSS_TX_Pin|GNSS_RX_Pin;
 8001980:	216c      	movs	r1, #108	; 0x6c
 8001982:	187b      	adds	r3, r7, r1
 8001984:	2218      	movs	r2, #24
 8001986:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001988:	187b      	adds	r3, r7, r1
 800198a:	2202      	movs	r2, #2
 800198c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198e:	187b      	adds	r3, r7, r1
 8001990:	2200      	movs	r2, #0
 8001992:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001994:	187b      	adds	r3, r7, r1
 8001996:	2200      	movs	r2, #0
 8001998:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART5;
 800199a:	187b      	adds	r3, r7, r1
 800199c:	2203      	movs	r2, #3
 800199e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019a0:	187b      	adds	r3, r7, r1
 80019a2:	4a07      	ldr	r2, [pc, #28]	; (80019c0 <HAL_UART_MspInit+0x1bc>)
 80019a4:	0019      	movs	r1, r3
 80019a6:	0010      	movs	r0, r2
 80019a8:	f000 fb6c 	bl	8002084 <HAL_GPIO_Init>
}
 80019ac:	46c0      	nop			; (mov r8, r8)
 80019ae:	46bd      	mov	sp, r7
 80019b0:	b021      	add	sp, #132	; 0x84
 80019b2:	bd90      	pop	{r4, r7, pc}
 80019b4:	40004400 	.word	0x40004400
 80019b8:	40021000 	.word	0x40021000
 80019bc:	40004800 	.word	0x40004800
 80019c0:	50000400 	.word	0x50000400
 80019c4:	40005000 	.word	0x40005000

080019c8 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART2)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a1b      	ldr	r2, [pc, #108]	; (8001a44 <HAL_UART_MspDeInit+0x7c>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d10c      	bne.n	80019f4 <HAL_UART_MspDeInit+0x2c>
  {
  /* USER CODE BEGIN USART2_MspDeInit 0 */

  /* USER CODE END USART2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART2_CLK_DISABLE();
 80019da:	4b1b      	ldr	r3, [pc, #108]	; (8001a48 <HAL_UART_MspDeInit+0x80>)
 80019dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80019de:	4b1a      	ldr	r3, [pc, #104]	; (8001a48 <HAL_UART_MspDeInit+0x80>)
 80019e0:	491a      	ldr	r1, [pc, #104]	; (8001a4c <HAL_UART_MspDeInit+0x84>)
 80019e2:	400a      	ands	r2, r1
 80019e4:	63da      	str	r2, [r3, #60]	; 0x3c

    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    HAL_GPIO_DeInit(GPIOA, DBG_TX_Pin|DBG_RX_Pin);
 80019e6:	23a0      	movs	r3, #160	; 0xa0
 80019e8:	05db      	lsls	r3, r3, #23
 80019ea:	210c      	movs	r1, #12
 80019ec:	0018      	movs	r0, r3
 80019ee:	f000 fcb5 	bl	800235c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN USART5_MspDeInit 1 */

  /* USER CODE END USART5_MspDeInit 1 */
  }

}
 80019f2:	e022      	b.n	8001a3a <HAL_UART_MspDeInit+0x72>
  else if(huart->Instance==USART3)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a15      	ldr	r2, [pc, #84]	; (8001a50 <HAL_UART_MspDeInit+0x88>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d10d      	bne.n	8001a1a <HAL_UART_MspDeInit+0x52>
    __HAL_RCC_USART3_CLK_DISABLE();
 80019fe:	4b12      	ldr	r3, [pc, #72]	; (8001a48 <HAL_UART_MspDeInit+0x80>)
 8001a00:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a02:	4b11      	ldr	r3, [pc, #68]	; (8001a48 <HAL_UART_MspDeInit+0x80>)
 8001a04:	4913      	ldr	r1, [pc, #76]	; (8001a54 <HAL_UART_MspDeInit+0x8c>)
 8001a06:	400a      	ands	r2, r1
 8001a08:	63da      	str	r2, [r3, #60]	; 0x3c
    HAL_GPIO_DeInit(GPIOB, ASTRO_TX_Pin|ASTRO_RX_Pin);
 8001a0a:	23c0      	movs	r3, #192	; 0xc0
 8001a0c:	009b      	lsls	r3, r3, #2
 8001a0e:	4a12      	ldr	r2, [pc, #72]	; (8001a58 <HAL_UART_MspDeInit+0x90>)
 8001a10:	0019      	movs	r1, r3
 8001a12:	0010      	movs	r0, r2
 8001a14:	f000 fca2 	bl	800235c <HAL_GPIO_DeInit>
}
 8001a18:	e00f      	b.n	8001a3a <HAL_UART_MspDeInit+0x72>
  else if(huart->Instance==USART5)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a0f      	ldr	r2, [pc, #60]	; (8001a5c <HAL_UART_MspDeInit+0x94>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d10a      	bne.n	8001a3a <HAL_UART_MspDeInit+0x72>
    __HAL_RCC_USART5_CLK_DISABLE();
 8001a24:	4b08      	ldr	r3, [pc, #32]	; (8001a48 <HAL_UART_MspDeInit+0x80>)
 8001a26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a28:	4b07      	ldr	r3, [pc, #28]	; (8001a48 <HAL_UART_MspDeInit+0x80>)
 8001a2a:	490d      	ldr	r1, [pc, #52]	; (8001a60 <HAL_UART_MspDeInit+0x98>)
 8001a2c:	400a      	ands	r2, r1
 8001a2e:	63da      	str	r2, [r3, #60]	; 0x3c
    HAL_GPIO_DeInit(GPIOB, GNSS_TX_Pin|GNSS_RX_Pin);
 8001a30:	4b09      	ldr	r3, [pc, #36]	; (8001a58 <HAL_UART_MspDeInit+0x90>)
 8001a32:	2118      	movs	r1, #24
 8001a34:	0018      	movs	r0, r3
 8001a36:	f000 fc91 	bl	800235c <HAL_GPIO_DeInit>
}
 8001a3a:	46c0      	nop			; (mov r8, r8)
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	b002      	add	sp, #8
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	46c0      	nop			; (mov r8, r8)
 8001a44:	40004400 	.word	0x40004400
 8001a48:	40021000 	.word	0x40021000
 8001a4c:	fffdffff 	.word	0xfffdffff
 8001a50:	40004800 	.word	0x40004800
 8001a54:	fffbffff 	.word	0xfffbffff
 8001a58:	50000400 	.word	0x50000400
 8001a5c:	40005000 	.word	0x40005000
 8001a60:	fffffeff 	.word	0xfffffeff

08001a64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a68:	e7fe      	b.n	8001a68 <NMI_Handler+0x4>

08001a6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a6a:	b580      	push	{r7, lr}
 8001a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a6e:	e7fe      	b.n	8001a6e <HardFault_Handler+0x4>

08001a70 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001a74:	46c0      	nop			; (mov r8, r8)
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}

08001a7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a7a:	b580      	push	{r7, lr}
 8001a7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a7e:	46c0      	nop			; (mov r8, r8)
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}

08001a84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a88:	f000 f8ea 	bl	8001c60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a8c:	46c0      	nop			; (mov r8, r8)
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8001a92:	b580      	push	{r7, lr}
 8001a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ACC_INT1_Pin);
 8001a96:	2001      	movs	r0, #1
 8001a98:	f000 fd72 	bl	8002580 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ACC_INT2_Pin);
 8001a9c:	2002      	movs	r0, #2
 8001a9e:	f000 fd6f 	bl	8002580 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8001aa2:	46c0      	nop			; (mov r8, r8)
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}

08001aa8 <TIM6_DAC_LPTIM1_IRQHandler>:

/**
  * @brief This function handles TIM6, DAC and LPTIM1 global Interrupts.
  */
void TIM6_DAC_LPTIM1_IRQHandler(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 0 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001aac:	4b03      	ldr	r3, [pc, #12]	; (8001abc <TIM6_DAC_LPTIM1_IRQHandler+0x14>)
 8001aae:	0018      	movs	r0, r3
 8001ab0:	f002 fe82 	bl	80047b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 1 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 1 */
}
 8001ab4:	46c0      	nop			; (mov r8, r8)
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	46c0      	nop			; (mov r8, r8)
 8001abc:	2000010c 	.word	0x2000010c

08001ac0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b086      	sub	sp, #24
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ac8:	4a14      	ldr	r2, [pc, #80]	; (8001b1c <_sbrk+0x5c>)
 8001aca:	4b15      	ldr	r3, [pc, #84]	; (8001b20 <_sbrk+0x60>)
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ad4:	4b13      	ldr	r3, [pc, #76]	; (8001b24 <_sbrk+0x64>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d102      	bne.n	8001ae2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001adc:	4b11      	ldr	r3, [pc, #68]	; (8001b24 <_sbrk+0x64>)
 8001ade:	4a12      	ldr	r2, [pc, #72]	; (8001b28 <_sbrk+0x68>)
 8001ae0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ae2:	4b10      	ldr	r3, [pc, #64]	; (8001b24 <_sbrk+0x64>)
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	18d3      	adds	r3, r2, r3
 8001aea:	693a      	ldr	r2, [r7, #16]
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d207      	bcs.n	8001b00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001af0:	f006 fb16 	bl	8008120 <__errno>
 8001af4:	0003      	movs	r3, r0
 8001af6:	220c      	movs	r2, #12
 8001af8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001afa:	2301      	movs	r3, #1
 8001afc:	425b      	negs	r3, r3
 8001afe:	e009      	b.n	8001b14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b00:	4b08      	ldr	r3, [pc, #32]	; (8001b24 <_sbrk+0x64>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b06:	4b07      	ldr	r3, [pc, #28]	; (8001b24 <_sbrk+0x64>)
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	18d2      	adds	r2, r2, r3
 8001b0e:	4b05      	ldr	r3, [pc, #20]	; (8001b24 <_sbrk+0x64>)
 8001b10:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001b12:	68fb      	ldr	r3, [r7, #12]
}
 8001b14:	0018      	movs	r0, r3
 8001b16:	46bd      	mov	sp, r7
 8001b18:	b006      	add	sp, #24
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	20024000 	.word	0x20024000
 8001b20:	00000400 	.word	0x00000400
 8001b24:	20001434 	.word	0x20001434
 8001b28:	20001588 	.word	0x20001588

08001b2c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b30:	46c0      	nop			; (mov r8, r8)
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
	...

08001b38 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001b38:	480d      	ldr	r0, [pc, #52]	; (8001b70 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001b3a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001b3c:	f7ff fff6 	bl	8001b2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b40:	480c      	ldr	r0, [pc, #48]	; (8001b74 <LoopForever+0x6>)
  ldr r1, =_edata
 8001b42:	490d      	ldr	r1, [pc, #52]	; (8001b78 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b44:	4a0d      	ldr	r2, [pc, #52]	; (8001b7c <LoopForever+0xe>)
  movs r3, #0
 8001b46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b48:	e002      	b.n	8001b50 <LoopCopyDataInit>

08001b4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b4e:	3304      	adds	r3, #4

08001b50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b54:	d3f9      	bcc.n	8001b4a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b56:	4a0a      	ldr	r2, [pc, #40]	; (8001b80 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b58:	4c0a      	ldr	r4, [pc, #40]	; (8001b84 <LoopForever+0x16>)
  movs r3, #0
 8001b5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b5c:	e001      	b.n	8001b62 <LoopFillZerobss>

08001b5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b60:	3204      	adds	r2, #4

08001b62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b64:	d3fb      	bcc.n	8001b5e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001b66:	f006 fae1 	bl	800812c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001b6a:	f7fe fd69 	bl	8000640 <main>

08001b6e <LoopForever>:

LoopForever:
  b LoopForever
 8001b6e:	e7fe      	b.n	8001b6e <LoopForever>
  ldr   r0, =_estack
 8001b70:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8001b74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b78:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001b7c:	0800a51c 	.word	0x0800a51c
  ldr r2, =_sbss
 8001b80:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001b84:	20001584 	.word	0x20001584

08001b88 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b88:	e7fe      	b.n	8001b88 <ADC1_COMP_IRQHandler>
	...

08001b8c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b92:	1dfb      	adds	r3, r7, #7
 8001b94:	2200      	movs	r2, #0
 8001b96:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b98:	4b0b      	ldr	r3, [pc, #44]	; (8001bc8 <HAL_Init+0x3c>)
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	4b0a      	ldr	r3, [pc, #40]	; (8001bc8 <HAL_Init+0x3c>)
 8001b9e:	2180      	movs	r1, #128	; 0x80
 8001ba0:	0049      	lsls	r1, r1, #1
 8001ba2:	430a      	orrs	r2, r1
 8001ba4:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ba6:	2000      	movs	r0, #0
 8001ba8:	f000 f810 	bl	8001bcc <HAL_InitTick>
 8001bac:	1e03      	subs	r3, r0, #0
 8001bae:	d003      	beq.n	8001bb8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001bb0:	1dfb      	adds	r3, r7, #7
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	701a      	strb	r2, [r3, #0]
 8001bb6:	e001      	b.n	8001bbc <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001bb8:	f7ff fd4e 	bl	8001658 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001bbc:	1dfb      	adds	r3, r7, #7
 8001bbe:	781b      	ldrb	r3, [r3, #0]
}
 8001bc0:	0018      	movs	r0, r3
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	b002      	add	sp, #8
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	40022000 	.word	0x40022000

08001bcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bcc:	b590      	push	{r4, r7, lr}
 8001bce:	b085      	sub	sp, #20
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001bd4:	230f      	movs	r3, #15
 8001bd6:	18fb      	adds	r3, r7, r3
 8001bd8:	2200      	movs	r2, #0
 8001bda:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001bdc:	4b1d      	ldr	r3, [pc, #116]	; (8001c54 <HAL_InitTick+0x88>)
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d02b      	beq.n	8001c3c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001be4:	4b1c      	ldr	r3, [pc, #112]	; (8001c58 <HAL_InitTick+0x8c>)
 8001be6:	681c      	ldr	r4, [r3, #0]
 8001be8:	4b1a      	ldr	r3, [pc, #104]	; (8001c54 <HAL_InitTick+0x88>)
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	0019      	movs	r1, r3
 8001bee:	23fa      	movs	r3, #250	; 0xfa
 8001bf0:	0098      	lsls	r0, r3, #2
 8001bf2:	f7fe fa99 	bl	8000128 <__udivsi3>
 8001bf6:	0003      	movs	r3, r0
 8001bf8:	0019      	movs	r1, r3
 8001bfa:	0020      	movs	r0, r4
 8001bfc:	f7fe fa94 	bl	8000128 <__udivsi3>
 8001c00:	0003      	movs	r3, r0
 8001c02:	0018      	movs	r0, r3
 8001c04:	f000 f969 	bl	8001eda <HAL_SYSTICK_Config>
 8001c08:	1e03      	subs	r3, r0, #0
 8001c0a:	d112      	bne.n	8001c32 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2b03      	cmp	r3, #3
 8001c10:	d80a      	bhi.n	8001c28 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c12:	6879      	ldr	r1, [r7, #4]
 8001c14:	2301      	movs	r3, #1
 8001c16:	425b      	negs	r3, r3
 8001c18:	2200      	movs	r2, #0
 8001c1a:	0018      	movs	r0, r3
 8001c1c:	f000 f934 	bl	8001e88 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c20:	4b0e      	ldr	r3, [pc, #56]	; (8001c5c <HAL_InitTick+0x90>)
 8001c22:	687a      	ldr	r2, [r7, #4]
 8001c24:	601a      	str	r2, [r3, #0]
 8001c26:	e00d      	b.n	8001c44 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001c28:	230f      	movs	r3, #15
 8001c2a:	18fb      	adds	r3, r7, r3
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	701a      	strb	r2, [r3, #0]
 8001c30:	e008      	b.n	8001c44 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001c32:	230f      	movs	r3, #15
 8001c34:	18fb      	adds	r3, r7, r3
 8001c36:	2201      	movs	r2, #1
 8001c38:	701a      	strb	r2, [r3, #0]
 8001c3a:	e003      	b.n	8001c44 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001c3c:	230f      	movs	r3, #15
 8001c3e:	18fb      	adds	r3, r7, r3
 8001c40:	2201      	movs	r2, #1
 8001c42:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001c44:	230f      	movs	r3, #15
 8001c46:	18fb      	adds	r3, r7, r3
 8001c48:	781b      	ldrb	r3, [r3, #0]
}
 8001c4a:	0018      	movs	r0, r3
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	b005      	add	sp, #20
 8001c50:	bd90      	pop	{r4, r7, pc}
 8001c52:	46c0      	nop			; (mov r8, r8)
 8001c54:	2000000c 	.word	0x2000000c
 8001c58:	20000004 	.word	0x20000004
 8001c5c:	20000008 	.word	0x20000008

08001c60 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c64:	4b05      	ldr	r3, [pc, #20]	; (8001c7c <HAL_IncTick+0x1c>)
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	001a      	movs	r2, r3
 8001c6a:	4b05      	ldr	r3, [pc, #20]	; (8001c80 <HAL_IncTick+0x20>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	18d2      	adds	r2, r2, r3
 8001c70:	4b03      	ldr	r3, [pc, #12]	; (8001c80 <HAL_IncTick+0x20>)
 8001c72:	601a      	str	r2, [r3, #0]
}
 8001c74:	46c0      	nop			; (mov r8, r8)
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	46c0      	nop			; (mov r8, r8)
 8001c7c:	2000000c 	.word	0x2000000c
 8001c80:	20001438 	.word	0x20001438

08001c84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
  return uwTick;
 8001c88:	4b02      	ldr	r3, [pc, #8]	; (8001c94 <HAL_GetTick+0x10>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
}
 8001c8c:	0018      	movs	r0, r3
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	46c0      	nop			; (mov r8, r8)
 8001c94:	20001438 	.word	0x20001438

08001c98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b084      	sub	sp, #16
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ca0:	f7ff fff0 	bl	8001c84 <HAL_GetTick>
 8001ca4:	0003      	movs	r3, r0
 8001ca6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	3301      	adds	r3, #1
 8001cb0:	d005      	beq.n	8001cbe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cb2:	4b0a      	ldr	r3, [pc, #40]	; (8001cdc <HAL_Delay+0x44>)
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	001a      	movs	r2, r3
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	189b      	adds	r3, r3, r2
 8001cbc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001cbe:	46c0      	nop			; (mov r8, r8)
 8001cc0:	f7ff ffe0 	bl	8001c84 <HAL_GetTick>
 8001cc4:	0002      	movs	r2, r0
 8001cc6:	68bb      	ldr	r3, [r7, #8]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	68fa      	ldr	r2, [r7, #12]
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d8f7      	bhi.n	8001cc0 <HAL_Delay+0x28>
  {
  }
}
 8001cd0:	46c0      	nop			; (mov r8, r8)
 8001cd2:	46c0      	nop			; (mov r8, r8)
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	b004      	add	sp, #16
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	46c0      	nop			; (mov r8, r8)
 8001cdc:	2000000c 	.word	0x2000000c

08001ce0 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8001ce8:	4b06      	ldr	r3, [pc, #24]	; (8001d04 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a06      	ldr	r2, [pc, #24]	; (8001d08 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8001cee:	4013      	ands	r3, r2
 8001cf0:	0019      	movs	r1, r3
 8001cf2:	4b04      	ldr	r3, [pc, #16]	; (8001d04 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8001cf4:	687a      	ldr	r2, [r7, #4]
 8001cf6:	430a      	orrs	r2, r1
 8001cf8:	601a      	str	r2, [r3, #0]
}
 8001cfa:	46c0      	nop			; (mov r8, r8)
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	b002      	add	sp, #8
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	46c0      	nop			; (mov r8, r8)
 8001d04:	40010000 	.word	0x40010000
 8001d08:	fffff9ff 	.word	0xfffff9ff

08001d0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	0002      	movs	r2, r0
 8001d14:	1dfb      	adds	r3, r7, #7
 8001d16:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001d18:	1dfb      	adds	r3, r7, #7
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	2b7f      	cmp	r3, #127	; 0x7f
 8001d1e:	d809      	bhi.n	8001d34 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d20:	1dfb      	adds	r3, r7, #7
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	001a      	movs	r2, r3
 8001d26:	231f      	movs	r3, #31
 8001d28:	401a      	ands	r2, r3
 8001d2a:	4b04      	ldr	r3, [pc, #16]	; (8001d3c <__NVIC_EnableIRQ+0x30>)
 8001d2c:	2101      	movs	r1, #1
 8001d2e:	4091      	lsls	r1, r2
 8001d30:	000a      	movs	r2, r1
 8001d32:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001d34:	46c0      	nop			; (mov r8, r8)
 8001d36:	46bd      	mov	sp, r7
 8001d38:	b002      	add	sp, #8
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	e000e100 	.word	0xe000e100

08001d40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d40:	b590      	push	{r4, r7, lr}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	0002      	movs	r2, r0
 8001d48:	6039      	str	r1, [r7, #0]
 8001d4a:	1dfb      	adds	r3, r7, #7
 8001d4c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001d4e:	1dfb      	adds	r3, r7, #7
 8001d50:	781b      	ldrb	r3, [r3, #0]
 8001d52:	2b7f      	cmp	r3, #127	; 0x7f
 8001d54:	d828      	bhi.n	8001da8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d56:	4a2f      	ldr	r2, [pc, #188]	; (8001e14 <__NVIC_SetPriority+0xd4>)
 8001d58:	1dfb      	adds	r3, r7, #7
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	b25b      	sxtb	r3, r3
 8001d5e:	089b      	lsrs	r3, r3, #2
 8001d60:	33c0      	adds	r3, #192	; 0xc0
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	589b      	ldr	r3, [r3, r2]
 8001d66:	1dfa      	adds	r2, r7, #7
 8001d68:	7812      	ldrb	r2, [r2, #0]
 8001d6a:	0011      	movs	r1, r2
 8001d6c:	2203      	movs	r2, #3
 8001d6e:	400a      	ands	r2, r1
 8001d70:	00d2      	lsls	r2, r2, #3
 8001d72:	21ff      	movs	r1, #255	; 0xff
 8001d74:	4091      	lsls	r1, r2
 8001d76:	000a      	movs	r2, r1
 8001d78:	43d2      	mvns	r2, r2
 8001d7a:	401a      	ands	r2, r3
 8001d7c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	019b      	lsls	r3, r3, #6
 8001d82:	22ff      	movs	r2, #255	; 0xff
 8001d84:	401a      	ands	r2, r3
 8001d86:	1dfb      	adds	r3, r7, #7
 8001d88:	781b      	ldrb	r3, [r3, #0]
 8001d8a:	0018      	movs	r0, r3
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	4003      	ands	r3, r0
 8001d90:	00db      	lsls	r3, r3, #3
 8001d92:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d94:	481f      	ldr	r0, [pc, #124]	; (8001e14 <__NVIC_SetPriority+0xd4>)
 8001d96:	1dfb      	adds	r3, r7, #7
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	b25b      	sxtb	r3, r3
 8001d9c:	089b      	lsrs	r3, r3, #2
 8001d9e:	430a      	orrs	r2, r1
 8001da0:	33c0      	adds	r3, #192	; 0xc0
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001da6:	e031      	b.n	8001e0c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001da8:	4a1b      	ldr	r2, [pc, #108]	; (8001e18 <__NVIC_SetPriority+0xd8>)
 8001daa:	1dfb      	adds	r3, r7, #7
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	0019      	movs	r1, r3
 8001db0:	230f      	movs	r3, #15
 8001db2:	400b      	ands	r3, r1
 8001db4:	3b08      	subs	r3, #8
 8001db6:	089b      	lsrs	r3, r3, #2
 8001db8:	3306      	adds	r3, #6
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	18d3      	adds	r3, r2, r3
 8001dbe:	3304      	adds	r3, #4
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	1dfa      	adds	r2, r7, #7
 8001dc4:	7812      	ldrb	r2, [r2, #0]
 8001dc6:	0011      	movs	r1, r2
 8001dc8:	2203      	movs	r2, #3
 8001dca:	400a      	ands	r2, r1
 8001dcc:	00d2      	lsls	r2, r2, #3
 8001dce:	21ff      	movs	r1, #255	; 0xff
 8001dd0:	4091      	lsls	r1, r2
 8001dd2:	000a      	movs	r2, r1
 8001dd4:	43d2      	mvns	r2, r2
 8001dd6:	401a      	ands	r2, r3
 8001dd8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	019b      	lsls	r3, r3, #6
 8001dde:	22ff      	movs	r2, #255	; 0xff
 8001de0:	401a      	ands	r2, r3
 8001de2:	1dfb      	adds	r3, r7, #7
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	0018      	movs	r0, r3
 8001de8:	2303      	movs	r3, #3
 8001dea:	4003      	ands	r3, r0
 8001dec:	00db      	lsls	r3, r3, #3
 8001dee:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001df0:	4809      	ldr	r0, [pc, #36]	; (8001e18 <__NVIC_SetPriority+0xd8>)
 8001df2:	1dfb      	adds	r3, r7, #7
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	001c      	movs	r4, r3
 8001df8:	230f      	movs	r3, #15
 8001dfa:	4023      	ands	r3, r4
 8001dfc:	3b08      	subs	r3, #8
 8001dfe:	089b      	lsrs	r3, r3, #2
 8001e00:	430a      	orrs	r2, r1
 8001e02:	3306      	adds	r3, #6
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	18c3      	adds	r3, r0, r3
 8001e08:	3304      	adds	r3, #4
 8001e0a:	601a      	str	r2, [r3, #0]
}
 8001e0c:	46c0      	nop			; (mov r8, r8)
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	b003      	add	sp, #12
 8001e12:	bd90      	pop	{r4, r7, pc}
 8001e14:	e000e100 	.word	0xe000e100
 8001e18:	e000ed00 	.word	0xe000ed00

08001e1c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001e20:	f3bf 8f4f 	dsb	sy
}
 8001e24:	46c0      	nop			; (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e26:	4b04      	ldr	r3, [pc, #16]	; (8001e38 <__NVIC_SystemReset+0x1c>)
 8001e28:	4a04      	ldr	r2, [pc, #16]	; (8001e3c <__NVIC_SystemReset+0x20>)
 8001e2a:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001e2c:	f3bf 8f4f 	dsb	sy
}
 8001e30:	46c0      	nop			; (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001e32:	46c0      	nop			; (mov r8, r8)
 8001e34:	e7fd      	b.n	8001e32 <__NVIC_SystemReset+0x16>
 8001e36:	46c0      	nop			; (mov r8, r8)
 8001e38:	e000ed00 	.word	0xe000ed00
 8001e3c:	05fa0004 	.word	0x05fa0004

08001e40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	1e5a      	subs	r2, r3, #1
 8001e4c:	2380      	movs	r3, #128	; 0x80
 8001e4e:	045b      	lsls	r3, r3, #17
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d301      	bcc.n	8001e58 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e54:	2301      	movs	r3, #1
 8001e56:	e010      	b.n	8001e7a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e58:	4b0a      	ldr	r3, [pc, #40]	; (8001e84 <SysTick_Config+0x44>)
 8001e5a:	687a      	ldr	r2, [r7, #4]
 8001e5c:	3a01      	subs	r2, #1
 8001e5e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e60:	2301      	movs	r3, #1
 8001e62:	425b      	negs	r3, r3
 8001e64:	2103      	movs	r1, #3
 8001e66:	0018      	movs	r0, r3
 8001e68:	f7ff ff6a 	bl	8001d40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e6c:	4b05      	ldr	r3, [pc, #20]	; (8001e84 <SysTick_Config+0x44>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e72:	4b04      	ldr	r3, [pc, #16]	; (8001e84 <SysTick_Config+0x44>)
 8001e74:	2207      	movs	r2, #7
 8001e76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e78:	2300      	movs	r3, #0
}
 8001e7a:	0018      	movs	r0, r3
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	b002      	add	sp, #8
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	46c0      	nop			; (mov r8, r8)
 8001e84:	e000e010 	.word	0xe000e010

08001e88 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b084      	sub	sp, #16
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	60b9      	str	r1, [r7, #8]
 8001e90:	607a      	str	r2, [r7, #4]
 8001e92:	210f      	movs	r1, #15
 8001e94:	187b      	adds	r3, r7, r1
 8001e96:	1c02      	adds	r2, r0, #0
 8001e98:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001e9a:	68ba      	ldr	r2, [r7, #8]
 8001e9c:	187b      	adds	r3, r7, r1
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	b25b      	sxtb	r3, r3
 8001ea2:	0011      	movs	r1, r2
 8001ea4:	0018      	movs	r0, r3
 8001ea6:	f7ff ff4b 	bl	8001d40 <__NVIC_SetPriority>
}
 8001eaa:	46c0      	nop			; (mov r8, r8)
 8001eac:	46bd      	mov	sp, r7
 8001eae:	b004      	add	sp, #16
 8001eb0:	bd80      	pop	{r7, pc}

08001eb2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eb2:	b580      	push	{r7, lr}
 8001eb4:	b082      	sub	sp, #8
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	0002      	movs	r2, r0
 8001eba:	1dfb      	adds	r3, r7, #7
 8001ebc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ebe:	1dfb      	adds	r3, r7, #7
 8001ec0:	781b      	ldrb	r3, [r3, #0]
 8001ec2:	b25b      	sxtb	r3, r3
 8001ec4:	0018      	movs	r0, r3
 8001ec6:	f7ff ff21 	bl	8001d0c <__NVIC_EnableIRQ>
}
 8001eca:	46c0      	nop			; (mov r8, r8)
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	b002      	add	sp, #8
 8001ed0:	bd80      	pop	{r7, pc}

08001ed2 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8001ed2:	b580      	push	{r7, lr}
 8001ed4:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8001ed6:	f7ff ffa1 	bl	8001e1c <__NVIC_SystemReset>

08001eda <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eda:	b580      	push	{r7, lr}
 8001edc:	b082      	sub	sp, #8
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	0018      	movs	r0, r3
 8001ee6:	f7ff ffab 	bl	8001e40 <SysTick_Config>
 8001eea:	0003      	movs	r3, r0
}
 8001eec:	0018      	movs	r0, r3
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	b002      	add	sp, #8
 8001ef2:	bd80      	pop	{r7, pc}

08001ef4 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b082      	sub	sp, #8
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d101      	bne.n	8001f06 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e04f      	b.n	8001fa6 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2225      	movs	r2, #37	; 0x25
 8001f0a:	5c9b      	ldrb	r3, [r3, r2]
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	2b02      	cmp	r3, #2
 8001f10:	d008      	beq.n	8001f24 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2204      	movs	r2, #4
 8001f16:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2224      	movs	r2, #36	; 0x24
 8001f1c:	2100      	movs	r1, #0
 8001f1e:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	e040      	b.n	8001fa6 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	210e      	movs	r1, #14
 8001f30:	438a      	bics	r2, r1
 8001f32:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f3e:	491c      	ldr	r1, [pc, #112]	; (8001fb0 <HAL_DMA_Abort+0xbc>)
 8001f40:	400a      	ands	r2, r1
 8001f42:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	2101      	movs	r1, #1
 8001f50:	438a      	bics	r2, r1
 8001f52:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f58:	221c      	movs	r2, #28
 8001f5a:	401a      	ands	r2, r3
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f60:	2101      	movs	r1, #1
 8001f62:	4091      	lsls	r1, r2
 8001f64:	000a      	movs	r2, r1
 8001f66:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f6c:	687a      	ldr	r2, [r7, #4]
 8001f6e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001f70:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d00c      	beq.n	8001f94 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f84:	490a      	ldr	r1, [pc, #40]	; (8001fb0 <HAL_DMA_Abort+0xbc>)
 8001f86:	400a      	ands	r2, r1
 8001f88:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f8e:	687a      	ldr	r2, [r7, #4]
 8001f90:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001f92:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2225      	movs	r2, #37	; 0x25
 8001f98:	2101      	movs	r1, #1
 8001f9a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2224      	movs	r2, #36	; 0x24
 8001fa0:	2100      	movs	r1, #0
 8001fa2:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8001fa4:	2300      	movs	r3, #0
}
 8001fa6:	0018      	movs	r0, r3
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	b002      	add	sp, #8
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	46c0      	nop			; (mov r8, r8)
 8001fb0:	fffffeff 	.word	0xfffffeff

08001fb4 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b084      	sub	sp, #16
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fbc:	210f      	movs	r1, #15
 8001fbe:	187b      	adds	r3, r7, r1
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2225      	movs	r2, #37	; 0x25
 8001fc8:	5c9b      	ldrb	r3, [r3, r2]
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	2b02      	cmp	r3, #2
 8001fce:	d006      	beq.n	8001fde <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2204      	movs	r2, #4
 8001fd4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001fd6:	187b      	adds	r3, r7, r1
 8001fd8:	2201      	movs	r2, #1
 8001fda:	701a      	strb	r2, [r3, #0]
 8001fdc:	e048      	b.n	8002070 <HAL_DMA_Abort_IT+0xbc>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	210e      	movs	r1, #14
 8001fea:	438a      	bics	r2, r1
 8001fec:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	2101      	movs	r1, #1
 8001ffa:	438a      	bics	r2, r1
 8001ffc:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002008:	491d      	ldr	r1, [pc, #116]	; (8002080 <HAL_DMA_Abort_IT+0xcc>)
 800200a:	400a      	ands	r2, r1
 800200c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002012:	221c      	movs	r2, #28
 8002014:	401a      	ands	r2, r3
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201a:	2101      	movs	r1, #1
 800201c:	4091      	lsls	r1, r2
 800201e:	000a      	movs	r2, r1
 8002020:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002026:	687a      	ldr	r2, [r7, #4]
 8002028:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800202a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002030:	2b00      	cmp	r3, #0
 8002032:	d00c      	beq.n	800204e <HAL_DMA_Abort_IT+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800203e:	4910      	ldr	r1, [pc, #64]	; (8002080 <HAL_DMA_Abort_IT+0xcc>)
 8002040:	400a      	ands	r2, r1
 8002042:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002048:	687a      	ldr	r2, [r7, #4]
 800204a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800204c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2225      	movs	r2, #37	; 0x25
 8002052:	2101      	movs	r1, #1
 8002054:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2224      	movs	r2, #36	; 0x24
 800205a:	2100      	movs	r1, #0
 800205c:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002062:	2b00      	cmp	r3, #0
 8002064:	d004      	beq.n	8002070 <HAL_DMA_Abort_IT+0xbc>
    {
      hdma->XferAbortCallback(hdma);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800206a:	687a      	ldr	r2, [r7, #4]
 800206c:	0010      	movs	r0, r2
 800206e:	4798      	blx	r3
    }
  }
  return status;
 8002070:	230f      	movs	r3, #15
 8002072:	18fb      	adds	r3, r7, r3
 8002074:	781b      	ldrb	r3, [r3, #0]
}
 8002076:	0018      	movs	r0, r3
 8002078:	46bd      	mov	sp, r7
 800207a:	b004      	add	sp, #16
 800207c:	bd80      	pop	{r7, pc}
 800207e:	46c0      	nop			; (mov r8, r8)
 8002080:	fffffeff 	.word	0xfffffeff

08002084 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b086      	sub	sp, #24
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
 800208c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800208e:	2300      	movs	r3, #0
 8002090:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002092:	e14d      	b.n	8002330 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	2101      	movs	r1, #1
 800209a:	697a      	ldr	r2, [r7, #20]
 800209c:	4091      	lsls	r1, r2
 800209e:	000a      	movs	r2, r1
 80020a0:	4013      	ands	r3, r2
 80020a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d100      	bne.n	80020ac <HAL_GPIO_Init+0x28>
 80020aa:	e13e      	b.n	800232a <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	2203      	movs	r2, #3
 80020b2:	4013      	ands	r3, r2
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d005      	beq.n	80020c4 <HAL_GPIO_Init+0x40>
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	2203      	movs	r2, #3
 80020be:	4013      	ands	r3, r2
 80020c0:	2b02      	cmp	r3, #2
 80020c2:	d130      	bne.n	8002126 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	005b      	lsls	r3, r3, #1
 80020ce:	2203      	movs	r2, #3
 80020d0:	409a      	lsls	r2, r3
 80020d2:	0013      	movs	r3, r2
 80020d4:	43da      	mvns	r2, r3
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	4013      	ands	r3, r2
 80020da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	68da      	ldr	r2, [r3, #12]
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	005b      	lsls	r3, r3, #1
 80020e4:	409a      	lsls	r2, r3
 80020e6:	0013      	movs	r3, r2
 80020e8:	693a      	ldr	r2, [r7, #16]
 80020ea:	4313      	orrs	r3, r2
 80020ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	693a      	ldr	r2, [r7, #16]
 80020f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80020fa:	2201      	movs	r2, #1
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	409a      	lsls	r2, r3
 8002100:	0013      	movs	r3, r2
 8002102:	43da      	mvns	r2, r3
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	4013      	ands	r3, r2
 8002108:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	091b      	lsrs	r3, r3, #4
 8002110:	2201      	movs	r2, #1
 8002112:	401a      	ands	r2, r3
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	409a      	lsls	r2, r3
 8002118:	0013      	movs	r3, r2
 800211a:	693a      	ldr	r2, [r7, #16]
 800211c:	4313      	orrs	r3, r2
 800211e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	693a      	ldr	r2, [r7, #16]
 8002124:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	2203      	movs	r2, #3
 800212c:	4013      	ands	r3, r2
 800212e:	2b03      	cmp	r3, #3
 8002130:	d017      	beq.n	8002162 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	68db      	ldr	r3, [r3, #12]
 8002136:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	005b      	lsls	r3, r3, #1
 800213c:	2203      	movs	r2, #3
 800213e:	409a      	lsls	r2, r3
 8002140:	0013      	movs	r3, r2
 8002142:	43da      	mvns	r2, r3
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	4013      	ands	r3, r2
 8002148:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	689a      	ldr	r2, [r3, #8]
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	005b      	lsls	r3, r3, #1
 8002152:	409a      	lsls	r2, r3
 8002154:	0013      	movs	r3, r2
 8002156:	693a      	ldr	r2, [r7, #16]
 8002158:	4313      	orrs	r3, r2
 800215a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	693a      	ldr	r2, [r7, #16]
 8002160:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	2203      	movs	r2, #3
 8002168:	4013      	ands	r3, r2
 800216a:	2b02      	cmp	r3, #2
 800216c:	d123      	bne.n	80021b6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	08da      	lsrs	r2, r3, #3
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	3208      	adds	r2, #8
 8002176:	0092      	lsls	r2, r2, #2
 8002178:	58d3      	ldr	r3, [r2, r3]
 800217a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	2207      	movs	r2, #7
 8002180:	4013      	ands	r3, r2
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	220f      	movs	r2, #15
 8002186:	409a      	lsls	r2, r3
 8002188:	0013      	movs	r3, r2
 800218a:	43da      	mvns	r2, r3
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	4013      	ands	r3, r2
 8002190:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	691a      	ldr	r2, [r3, #16]
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	2107      	movs	r1, #7
 800219a:	400b      	ands	r3, r1
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	409a      	lsls	r2, r3
 80021a0:	0013      	movs	r3, r2
 80021a2:	693a      	ldr	r2, [r7, #16]
 80021a4:	4313      	orrs	r3, r2
 80021a6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	08da      	lsrs	r2, r3, #3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	3208      	adds	r2, #8
 80021b0:	0092      	lsls	r2, r2, #2
 80021b2:	6939      	ldr	r1, [r7, #16]
 80021b4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	005b      	lsls	r3, r3, #1
 80021c0:	2203      	movs	r2, #3
 80021c2:	409a      	lsls	r2, r3
 80021c4:	0013      	movs	r3, r2
 80021c6:	43da      	mvns	r2, r3
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	4013      	ands	r3, r2
 80021cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	2203      	movs	r2, #3
 80021d4:	401a      	ands	r2, r3
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	005b      	lsls	r3, r3, #1
 80021da:	409a      	lsls	r2, r3
 80021dc:	0013      	movs	r3, r2
 80021de:	693a      	ldr	r2, [r7, #16]
 80021e0:	4313      	orrs	r3, r2
 80021e2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	693a      	ldr	r2, [r7, #16]
 80021e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	685a      	ldr	r2, [r3, #4]
 80021ee:	23c0      	movs	r3, #192	; 0xc0
 80021f0:	029b      	lsls	r3, r3, #10
 80021f2:	4013      	ands	r3, r2
 80021f4:	d100      	bne.n	80021f8 <HAL_GPIO_Init+0x174>
 80021f6:	e098      	b.n	800232a <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80021f8:	4a53      	ldr	r2, [pc, #332]	; (8002348 <HAL_GPIO_Init+0x2c4>)
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	089b      	lsrs	r3, r3, #2
 80021fe:	3318      	adds	r3, #24
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	589b      	ldr	r3, [r3, r2]
 8002204:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	2203      	movs	r2, #3
 800220a:	4013      	ands	r3, r2
 800220c:	00db      	lsls	r3, r3, #3
 800220e:	220f      	movs	r2, #15
 8002210:	409a      	lsls	r2, r3
 8002212:	0013      	movs	r3, r2
 8002214:	43da      	mvns	r2, r3
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	4013      	ands	r3, r2
 800221a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800221c:	687a      	ldr	r2, [r7, #4]
 800221e:	23a0      	movs	r3, #160	; 0xa0
 8002220:	05db      	lsls	r3, r3, #23
 8002222:	429a      	cmp	r2, r3
 8002224:	d019      	beq.n	800225a <HAL_GPIO_Init+0x1d6>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4a48      	ldr	r2, [pc, #288]	; (800234c <HAL_GPIO_Init+0x2c8>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d013      	beq.n	8002256 <HAL_GPIO_Init+0x1d2>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4a47      	ldr	r2, [pc, #284]	; (8002350 <HAL_GPIO_Init+0x2cc>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d00d      	beq.n	8002252 <HAL_GPIO_Init+0x1ce>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	4a46      	ldr	r2, [pc, #280]	; (8002354 <HAL_GPIO_Init+0x2d0>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d007      	beq.n	800224e <HAL_GPIO_Init+0x1ca>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	4a45      	ldr	r2, [pc, #276]	; (8002358 <HAL_GPIO_Init+0x2d4>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d101      	bne.n	800224a <HAL_GPIO_Init+0x1c6>
 8002246:	2304      	movs	r3, #4
 8002248:	e008      	b.n	800225c <HAL_GPIO_Init+0x1d8>
 800224a:	2305      	movs	r3, #5
 800224c:	e006      	b.n	800225c <HAL_GPIO_Init+0x1d8>
 800224e:	2303      	movs	r3, #3
 8002250:	e004      	b.n	800225c <HAL_GPIO_Init+0x1d8>
 8002252:	2302      	movs	r3, #2
 8002254:	e002      	b.n	800225c <HAL_GPIO_Init+0x1d8>
 8002256:	2301      	movs	r3, #1
 8002258:	e000      	b.n	800225c <HAL_GPIO_Init+0x1d8>
 800225a:	2300      	movs	r3, #0
 800225c:	697a      	ldr	r2, [r7, #20]
 800225e:	2103      	movs	r1, #3
 8002260:	400a      	ands	r2, r1
 8002262:	00d2      	lsls	r2, r2, #3
 8002264:	4093      	lsls	r3, r2
 8002266:	693a      	ldr	r2, [r7, #16]
 8002268:	4313      	orrs	r3, r2
 800226a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800226c:	4936      	ldr	r1, [pc, #216]	; (8002348 <HAL_GPIO_Init+0x2c4>)
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	089b      	lsrs	r3, r3, #2
 8002272:	3318      	adds	r3, #24
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	693a      	ldr	r2, [r7, #16]
 8002278:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800227a:	4b33      	ldr	r3, [pc, #204]	; (8002348 <HAL_GPIO_Init+0x2c4>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	43da      	mvns	r2, r3
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	4013      	ands	r3, r2
 8002288:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	685a      	ldr	r2, [r3, #4]
 800228e:	2380      	movs	r3, #128	; 0x80
 8002290:	035b      	lsls	r3, r3, #13
 8002292:	4013      	ands	r3, r2
 8002294:	d003      	beq.n	800229e <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8002296:	693a      	ldr	r2, [r7, #16]
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	4313      	orrs	r3, r2
 800229c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800229e:	4b2a      	ldr	r3, [pc, #168]	; (8002348 <HAL_GPIO_Init+0x2c4>)
 80022a0:	693a      	ldr	r2, [r7, #16]
 80022a2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80022a4:	4b28      	ldr	r3, [pc, #160]	; (8002348 <HAL_GPIO_Init+0x2c4>)
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	43da      	mvns	r2, r3
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	4013      	ands	r3, r2
 80022b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	685a      	ldr	r2, [r3, #4]
 80022b8:	2380      	movs	r3, #128	; 0x80
 80022ba:	039b      	lsls	r3, r3, #14
 80022bc:	4013      	ands	r3, r2
 80022be:	d003      	beq.n	80022c8 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 80022c0:	693a      	ldr	r2, [r7, #16]
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	4313      	orrs	r3, r2
 80022c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80022c8:	4b1f      	ldr	r3, [pc, #124]	; (8002348 <HAL_GPIO_Init+0x2c4>)
 80022ca:	693a      	ldr	r2, [r7, #16]
 80022cc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80022ce:	4a1e      	ldr	r2, [pc, #120]	; (8002348 <HAL_GPIO_Init+0x2c4>)
 80022d0:	2384      	movs	r3, #132	; 0x84
 80022d2:	58d3      	ldr	r3, [r2, r3]
 80022d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	43da      	mvns	r2, r3
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	4013      	ands	r3, r2
 80022de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	685a      	ldr	r2, [r3, #4]
 80022e4:	2380      	movs	r3, #128	; 0x80
 80022e6:	029b      	lsls	r3, r3, #10
 80022e8:	4013      	ands	r3, r2
 80022ea:	d003      	beq.n	80022f4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80022ec:	693a      	ldr	r2, [r7, #16]
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	4313      	orrs	r3, r2
 80022f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80022f4:	4914      	ldr	r1, [pc, #80]	; (8002348 <HAL_GPIO_Init+0x2c4>)
 80022f6:	2284      	movs	r2, #132	; 0x84
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80022fc:	4a12      	ldr	r2, [pc, #72]	; (8002348 <HAL_GPIO_Init+0x2c4>)
 80022fe:	2380      	movs	r3, #128	; 0x80
 8002300:	58d3      	ldr	r3, [r2, r3]
 8002302:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	43da      	mvns	r2, r3
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	4013      	ands	r3, r2
 800230c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	685a      	ldr	r2, [r3, #4]
 8002312:	2380      	movs	r3, #128	; 0x80
 8002314:	025b      	lsls	r3, r3, #9
 8002316:	4013      	ands	r3, r2
 8002318:	d003      	beq.n	8002322 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800231a:	693a      	ldr	r2, [r7, #16]
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	4313      	orrs	r3, r2
 8002320:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002322:	4909      	ldr	r1, [pc, #36]	; (8002348 <HAL_GPIO_Init+0x2c4>)
 8002324:	2280      	movs	r2, #128	; 0x80
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	3301      	adds	r3, #1
 800232e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	40da      	lsrs	r2, r3
 8002338:	1e13      	subs	r3, r2, #0
 800233a:	d000      	beq.n	800233e <HAL_GPIO_Init+0x2ba>
 800233c:	e6aa      	b.n	8002094 <HAL_GPIO_Init+0x10>
  }
}
 800233e:	46c0      	nop			; (mov r8, r8)
 8002340:	46c0      	nop			; (mov r8, r8)
 8002342:	46bd      	mov	sp, r7
 8002344:	b006      	add	sp, #24
 8002346:	bd80      	pop	{r7, pc}
 8002348:	40021800 	.word	0x40021800
 800234c:	50000400 	.word	0x50000400
 8002350:	50000800 	.word	0x50000800
 8002354:	50000c00 	.word	0x50000c00
 8002358:	50001000 	.word	0x50001000

0800235c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b086      	sub	sp, #24
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
 8002364:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002366:	2300      	movs	r3, #0
 8002368:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800236a:	e0ba      	b.n	80024e2 <HAL_GPIO_DeInit+0x186>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800236c:	2201      	movs	r2, #1
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	409a      	lsls	r2, r3
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	4013      	ands	r3, r2
 8002376:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d100      	bne.n	8002380 <HAL_GPIO_DeInit+0x24>
 800237e:	e0ad      	b.n	80024dc <HAL_GPIO_DeInit+0x180>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = EXTI->EXTICR[position >> 2u];
 8002380:	4a5d      	ldr	r2, [pc, #372]	; (80024f8 <HAL_GPIO_DeInit+0x19c>)
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	089b      	lsrs	r3, r3, #2
 8002386:	3318      	adds	r3, #24
 8002388:	009b      	lsls	r3, r3, #2
 800238a:	589b      	ldr	r3, [r3, r2]
 800238c:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (8u * (position & 0x03u)));
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	2203      	movs	r2, #3
 8002392:	4013      	ands	r3, r2
 8002394:	00db      	lsls	r3, r3, #3
 8002396:	220f      	movs	r2, #15
 8002398:	409a      	lsls	r2, r3
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	4013      	ands	r3, r2
 800239e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u))))
 80023a0:	687a      	ldr	r2, [r7, #4]
 80023a2:	23a0      	movs	r3, #160	; 0xa0
 80023a4:	05db      	lsls	r3, r3, #23
 80023a6:	429a      	cmp	r2, r3
 80023a8:	d019      	beq.n	80023de <HAL_GPIO_DeInit+0x82>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4a53      	ldr	r2, [pc, #332]	; (80024fc <HAL_GPIO_DeInit+0x1a0>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d013      	beq.n	80023da <HAL_GPIO_DeInit+0x7e>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4a52      	ldr	r2, [pc, #328]	; (8002500 <HAL_GPIO_DeInit+0x1a4>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d00d      	beq.n	80023d6 <HAL_GPIO_DeInit+0x7a>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4a51      	ldr	r2, [pc, #324]	; (8002504 <HAL_GPIO_DeInit+0x1a8>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d007      	beq.n	80023d2 <HAL_GPIO_DeInit+0x76>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4a50      	ldr	r2, [pc, #320]	; (8002508 <HAL_GPIO_DeInit+0x1ac>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d101      	bne.n	80023ce <HAL_GPIO_DeInit+0x72>
 80023ca:	2304      	movs	r3, #4
 80023cc:	e008      	b.n	80023e0 <HAL_GPIO_DeInit+0x84>
 80023ce:	2305      	movs	r3, #5
 80023d0:	e006      	b.n	80023e0 <HAL_GPIO_DeInit+0x84>
 80023d2:	2303      	movs	r3, #3
 80023d4:	e004      	b.n	80023e0 <HAL_GPIO_DeInit+0x84>
 80023d6:	2302      	movs	r3, #2
 80023d8:	e002      	b.n	80023e0 <HAL_GPIO_DeInit+0x84>
 80023da:	2301      	movs	r3, #1
 80023dc:	e000      	b.n	80023e0 <HAL_GPIO_DeInit+0x84>
 80023de:	2300      	movs	r3, #0
 80023e0:	697a      	ldr	r2, [r7, #20]
 80023e2:	2103      	movs	r1, #3
 80023e4:	400a      	ands	r2, r1
 80023e6:	00d2      	lsls	r2, r2, #3
 80023e8:	4093      	lsls	r3, r2
 80023ea:	68fa      	ldr	r2, [r7, #12]
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d136      	bne.n	800245e <HAL_GPIO_DeInit+0x102>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80023f0:	4a41      	ldr	r2, [pc, #260]	; (80024f8 <HAL_GPIO_DeInit+0x19c>)
 80023f2:	2380      	movs	r3, #128	; 0x80
 80023f4:	58d3      	ldr	r3, [r2, r3]
 80023f6:	693a      	ldr	r2, [r7, #16]
 80023f8:	43d2      	mvns	r2, r2
 80023fa:	493f      	ldr	r1, [pc, #252]	; (80024f8 <HAL_GPIO_DeInit+0x19c>)
 80023fc:	4013      	ands	r3, r2
 80023fe:	2280      	movs	r2, #128	; 0x80
 8002400:	508b      	str	r3, [r1, r2]
        EXTI->EMR1 &= ~(iocurrent);
 8002402:	4a3d      	ldr	r2, [pc, #244]	; (80024f8 <HAL_GPIO_DeInit+0x19c>)
 8002404:	2384      	movs	r3, #132	; 0x84
 8002406:	58d3      	ldr	r3, [r2, r3]
 8002408:	693a      	ldr	r2, [r7, #16]
 800240a:	43d2      	mvns	r2, r2
 800240c:	493a      	ldr	r1, [pc, #232]	; (80024f8 <HAL_GPIO_DeInit+0x19c>)
 800240e:	4013      	ands	r3, r2
 8002410:	2284      	movs	r2, #132	; 0x84
 8002412:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8002414:	4b38      	ldr	r3, [pc, #224]	; (80024f8 <HAL_GPIO_DeInit+0x19c>)
 8002416:	685a      	ldr	r2, [r3, #4]
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	43d9      	mvns	r1, r3
 800241c:	4b36      	ldr	r3, [pc, #216]	; (80024f8 <HAL_GPIO_DeInit+0x19c>)
 800241e:	400a      	ands	r2, r1
 8002420:	605a      	str	r2, [r3, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8002422:	4b35      	ldr	r3, [pc, #212]	; (80024f8 <HAL_GPIO_DeInit+0x19c>)
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	43d9      	mvns	r1, r3
 800242a:	4b33      	ldr	r3, [pc, #204]	; (80024f8 <HAL_GPIO_DeInit+0x19c>)
 800242c:	400a      	ands	r2, r1
 800242e:	601a      	str	r2, [r3, #0]

        tmp = 0x0FuL << (8u * (position & 0x03u));
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	2203      	movs	r2, #3
 8002434:	4013      	ands	r3, r2
 8002436:	00db      	lsls	r3, r3, #3
 8002438:	220f      	movs	r2, #15
 800243a:	409a      	lsls	r2, r3
 800243c:	0013      	movs	r3, r2
 800243e:	60fb      	str	r3, [r7, #12]
        EXTI->EXTICR[position >> 2u] &= ~tmp;
 8002440:	4a2d      	ldr	r2, [pc, #180]	; (80024f8 <HAL_GPIO_DeInit+0x19c>)
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	089b      	lsrs	r3, r3, #2
 8002446:	3318      	adds	r3, #24
 8002448:	009b      	lsls	r3, r3, #2
 800244a:	589a      	ldr	r2, [r3, r2]
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	43d9      	mvns	r1, r3
 8002450:	4829      	ldr	r0, [pc, #164]	; (80024f8 <HAL_GPIO_DeInit+0x19c>)
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	089b      	lsrs	r3, r3, #2
 8002456:	400a      	ands	r2, r1
 8002458:	3318      	adds	r3, #24
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	005b      	lsls	r3, r3, #1
 8002466:	2103      	movs	r1, #3
 8002468:	4099      	lsls	r1, r3
 800246a:	000b      	movs	r3, r1
 800246c:	431a      	orrs	r2, r3
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	08da      	lsrs	r2, r3, #3
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	3208      	adds	r2, #8
 800247a:	0092      	lsls	r2, r2, #2
 800247c:	58d3      	ldr	r3, [r2, r3]
 800247e:	697a      	ldr	r2, [r7, #20]
 8002480:	2107      	movs	r1, #7
 8002482:	400a      	ands	r2, r1
 8002484:	0092      	lsls	r2, r2, #2
 8002486:	210f      	movs	r1, #15
 8002488:	4091      	lsls	r1, r2
 800248a:	000a      	movs	r2, r1
 800248c:	43d1      	mvns	r1, r2
 800248e:	697a      	ldr	r2, [r7, #20]
 8002490:	08d2      	lsrs	r2, r2, #3
 8002492:	4019      	ands	r1, r3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	3208      	adds	r2, #8
 8002498:	0092      	lsls	r2, r2, #2
 800249a:	50d1      	str	r1, [r2, r3]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	697a      	ldr	r2, [r7, #20]
 80024a2:	0052      	lsls	r2, r2, #1
 80024a4:	2103      	movs	r1, #3
 80024a6:	4091      	lsls	r1, r2
 80024a8:	000a      	movs	r2, r1
 80024aa:	43d2      	mvns	r2, r2
 80024ac:	401a      	ands	r2, r3
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	2101      	movs	r1, #1
 80024b8:	697a      	ldr	r2, [r7, #20]
 80024ba:	4091      	lsls	r1, r2
 80024bc:	000a      	movs	r2, r1
 80024be:	43d2      	mvns	r2, r2
 80024c0:	401a      	ands	r2, r3
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	68db      	ldr	r3, [r3, #12]
 80024ca:	697a      	ldr	r2, [r7, #20]
 80024cc:	0052      	lsls	r2, r2, #1
 80024ce:	2103      	movs	r1, #3
 80024d0:	4091      	lsls	r1, r2
 80024d2:	000a      	movs	r2, r1
 80024d4:	43d2      	mvns	r2, r2
 80024d6:	401a      	ands	r2, r3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	60da      	str	r2, [r3, #12]
    }

    position++;
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	3301      	adds	r3, #1
 80024e0:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80024e2:	683a      	ldr	r2, [r7, #0]
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	40da      	lsrs	r2, r3
 80024e8:	1e13      	subs	r3, r2, #0
 80024ea:	d000      	beq.n	80024ee <HAL_GPIO_DeInit+0x192>
 80024ec:	e73e      	b.n	800236c <HAL_GPIO_DeInit+0x10>
  }
}
 80024ee:	46c0      	nop			; (mov r8, r8)
 80024f0:	46c0      	nop			; (mov r8, r8)
 80024f2:	46bd      	mov	sp, r7
 80024f4:	b006      	add	sp, #24
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	40021800 	.word	0x40021800
 80024fc:	50000400 	.word	0x50000400
 8002500:	50000800 	.word	0x50000800
 8002504:	50000c00 	.word	0x50000c00
 8002508:	50001000 	.word	0x50001000

0800250c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b084      	sub	sp, #16
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	000a      	movs	r2, r1
 8002516:	1cbb      	adds	r3, r7, #2
 8002518:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	691b      	ldr	r3, [r3, #16]
 800251e:	1cba      	adds	r2, r7, #2
 8002520:	8812      	ldrh	r2, [r2, #0]
 8002522:	4013      	ands	r3, r2
 8002524:	d004      	beq.n	8002530 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002526:	230f      	movs	r3, #15
 8002528:	18fb      	adds	r3, r7, r3
 800252a:	2201      	movs	r2, #1
 800252c:	701a      	strb	r2, [r3, #0]
 800252e:	e003      	b.n	8002538 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002530:	230f      	movs	r3, #15
 8002532:	18fb      	adds	r3, r7, r3
 8002534:	2200      	movs	r2, #0
 8002536:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002538:	230f      	movs	r3, #15
 800253a:	18fb      	adds	r3, r7, r3
 800253c:	781b      	ldrb	r3, [r3, #0]
}
 800253e:	0018      	movs	r0, r3
 8002540:	46bd      	mov	sp, r7
 8002542:	b004      	add	sp, #16
 8002544:	bd80      	pop	{r7, pc}

08002546 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002546:	b580      	push	{r7, lr}
 8002548:	b082      	sub	sp, #8
 800254a:	af00      	add	r7, sp, #0
 800254c:	6078      	str	r0, [r7, #4]
 800254e:	0008      	movs	r0, r1
 8002550:	0011      	movs	r1, r2
 8002552:	1cbb      	adds	r3, r7, #2
 8002554:	1c02      	adds	r2, r0, #0
 8002556:	801a      	strh	r2, [r3, #0]
 8002558:	1c7b      	adds	r3, r7, #1
 800255a:	1c0a      	adds	r2, r1, #0
 800255c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800255e:	1c7b      	adds	r3, r7, #1
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d004      	beq.n	8002570 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002566:	1cbb      	adds	r3, r7, #2
 8002568:	881a      	ldrh	r2, [r3, #0]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800256e:	e003      	b.n	8002578 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002570:	1cbb      	adds	r3, r7, #2
 8002572:	881a      	ldrh	r2, [r3, #0]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002578:	46c0      	nop			; (mov r8, r8)
 800257a:	46bd      	mov	sp, r7
 800257c:	b002      	add	sp, #8
 800257e:	bd80      	pop	{r7, pc}

08002580 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b082      	sub	sp, #8
 8002584:	af00      	add	r7, sp, #0
 8002586:	0002      	movs	r2, r0
 8002588:	1dbb      	adds	r3, r7, #6
 800258a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 800258c:	4b10      	ldr	r3, [pc, #64]	; (80025d0 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	1dba      	adds	r2, r7, #6
 8002592:	8812      	ldrh	r2, [r2, #0]
 8002594:	4013      	ands	r3, r2
 8002596:	d008      	beq.n	80025aa <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8002598:	4b0d      	ldr	r3, [pc, #52]	; (80025d0 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800259a:	1dba      	adds	r2, r7, #6
 800259c:	8812      	ldrh	r2, [r2, #0]
 800259e:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80025a0:	1dbb      	adds	r3, r7, #6
 80025a2:	881b      	ldrh	r3, [r3, #0]
 80025a4:	0018      	movs	r0, r3
 80025a6:	f7ff f82f 	bl	8001608 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 80025aa:	4b09      	ldr	r3, [pc, #36]	; (80025d0 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80025ac:	691b      	ldr	r3, [r3, #16]
 80025ae:	1dba      	adds	r2, r7, #6
 80025b0:	8812      	ldrh	r2, [r2, #0]
 80025b2:	4013      	ands	r3, r2
 80025b4:	d008      	beq.n	80025c8 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80025b6:	4b06      	ldr	r3, [pc, #24]	; (80025d0 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80025b8:	1dba      	adds	r2, r7, #6
 80025ba:	8812      	ldrh	r2, [r2, #0]
 80025bc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80025be:	1dbb      	adds	r3, r7, #6
 80025c0:	881b      	ldrh	r3, [r3, #0]
 80025c2:	0018      	movs	r0, r3
 80025c4:	f000 f806 	bl	80025d4 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80025c8:	46c0      	nop			; (mov r8, r8)
 80025ca:	46bd      	mov	sp, r7
 80025cc:	b002      	add	sp, #8
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	40021800 	.word	0x40021800

080025d4 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b082      	sub	sp, #8
 80025d8:	af00      	add	r7, sp, #0
 80025da:	0002      	movs	r2, r0
 80025dc:	1dbb      	adds	r3, r7, #6
 80025de:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 80025e0:	46c0      	nop			; (mov r8, r8)
 80025e2:	46bd      	mov	sp, r7
 80025e4:	b002      	add	sp, #8
 80025e6:	bd80      	pop	{r7, pc}

080025e8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b084      	sub	sp, #16
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80025f0:	4b19      	ldr	r3, [pc, #100]	; (8002658 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a19      	ldr	r2, [pc, #100]	; (800265c <HAL_PWREx_ControlVoltageScaling+0x74>)
 80025f6:	4013      	ands	r3, r2
 80025f8:	0019      	movs	r1, r3
 80025fa:	4b17      	ldr	r3, [pc, #92]	; (8002658 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80025fc:	687a      	ldr	r2, [r7, #4]
 80025fe:	430a      	orrs	r2, r1
 8002600:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	2380      	movs	r3, #128	; 0x80
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	429a      	cmp	r2, r3
 800260a:	d11f      	bne.n	800264c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800260c:	4b14      	ldr	r3, [pc, #80]	; (8002660 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	0013      	movs	r3, r2
 8002612:	005b      	lsls	r3, r3, #1
 8002614:	189b      	adds	r3, r3, r2
 8002616:	005b      	lsls	r3, r3, #1
 8002618:	4912      	ldr	r1, [pc, #72]	; (8002664 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800261a:	0018      	movs	r0, r3
 800261c:	f7fd fd84 	bl	8000128 <__udivsi3>
 8002620:	0003      	movs	r3, r0
 8002622:	3301      	adds	r3, #1
 8002624:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002626:	e008      	b.n	800263a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d003      	beq.n	8002636 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	3b01      	subs	r3, #1
 8002632:	60fb      	str	r3, [r7, #12]
 8002634:	e001      	b.n	800263a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8002636:	2303      	movs	r3, #3
 8002638:	e009      	b.n	800264e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800263a:	4b07      	ldr	r3, [pc, #28]	; (8002658 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800263c:	695a      	ldr	r2, [r3, #20]
 800263e:	2380      	movs	r3, #128	; 0x80
 8002640:	00db      	lsls	r3, r3, #3
 8002642:	401a      	ands	r2, r3
 8002644:	2380      	movs	r3, #128	; 0x80
 8002646:	00db      	lsls	r3, r3, #3
 8002648:	429a      	cmp	r2, r3
 800264a:	d0ed      	beq.n	8002628 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800264c:	2300      	movs	r3, #0
}
 800264e:	0018      	movs	r0, r3
 8002650:	46bd      	mov	sp, r7
 8002652:	b004      	add	sp, #16
 8002654:	bd80      	pop	{r7, pc}
 8002656:	46c0      	nop			; (mov r8, r8)
 8002658:	40007000 	.word	0x40007000
 800265c:	fffff9ff 	.word	0xfffff9ff
 8002660:	20000004 	.word	0x20000004
 8002664:	000f4240 	.word	0x000f4240

08002668 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800266c:	4b03      	ldr	r3, [pc, #12]	; (800267c <LL_RCC_GetAPB1Prescaler+0x14>)
 800266e:	689a      	ldr	r2, [r3, #8]
 8002670:	23e0      	movs	r3, #224	; 0xe0
 8002672:	01db      	lsls	r3, r3, #7
 8002674:	4013      	ands	r3, r2
}
 8002676:	0018      	movs	r0, r3
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}
 800267c:	40021000 	.word	0x40021000

08002680 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b088      	sub	sp, #32
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d102      	bne.n	8002694 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	f000 fb50 	bl	8002d34 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	2201      	movs	r2, #1
 800269a:	4013      	ands	r3, r2
 800269c:	d100      	bne.n	80026a0 <HAL_RCC_OscConfig+0x20>
 800269e:	e07c      	b.n	800279a <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026a0:	4bc3      	ldr	r3, [pc, #780]	; (80029b0 <HAL_RCC_OscConfig+0x330>)
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	2238      	movs	r2, #56	; 0x38
 80026a6:	4013      	ands	r3, r2
 80026a8:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80026aa:	4bc1      	ldr	r3, [pc, #772]	; (80029b0 <HAL_RCC_OscConfig+0x330>)
 80026ac:	68db      	ldr	r3, [r3, #12]
 80026ae:	2203      	movs	r2, #3
 80026b0:	4013      	ands	r3, r2
 80026b2:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80026b4:	69bb      	ldr	r3, [r7, #24]
 80026b6:	2b10      	cmp	r3, #16
 80026b8:	d102      	bne.n	80026c0 <HAL_RCC_OscConfig+0x40>
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	2b03      	cmp	r3, #3
 80026be:	d002      	beq.n	80026c6 <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80026c0:	69bb      	ldr	r3, [r7, #24]
 80026c2:	2b08      	cmp	r3, #8
 80026c4:	d10b      	bne.n	80026de <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026c6:	4bba      	ldr	r3, [pc, #744]	; (80029b0 <HAL_RCC_OscConfig+0x330>)
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	2380      	movs	r3, #128	; 0x80
 80026cc:	029b      	lsls	r3, r3, #10
 80026ce:	4013      	ands	r3, r2
 80026d0:	d062      	beq.n	8002798 <HAL_RCC_OscConfig+0x118>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d15e      	bne.n	8002798 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	e32a      	b.n	8002d34 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	685a      	ldr	r2, [r3, #4]
 80026e2:	2380      	movs	r3, #128	; 0x80
 80026e4:	025b      	lsls	r3, r3, #9
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d107      	bne.n	80026fa <HAL_RCC_OscConfig+0x7a>
 80026ea:	4bb1      	ldr	r3, [pc, #708]	; (80029b0 <HAL_RCC_OscConfig+0x330>)
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	4bb0      	ldr	r3, [pc, #704]	; (80029b0 <HAL_RCC_OscConfig+0x330>)
 80026f0:	2180      	movs	r1, #128	; 0x80
 80026f2:	0249      	lsls	r1, r1, #9
 80026f4:	430a      	orrs	r2, r1
 80026f6:	601a      	str	r2, [r3, #0]
 80026f8:	e020      	b.n	800273c <HAL_RCC_OscConfig+0xbc>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	685a      	ldr	r2, [r3, #4]
 80026fe:	23a0      	movs	r3, #160	; 0xa0
 8002700:	02db      	lsls	r3, r3, #11
 8002702:	429a      	cmp	r2, r3
 8002704:	d10e      	bne.n	8002724 <HAL_RCC_OscConfig+0xa4>
 8002706:	4baa      	ldr	r3, [pc, #680]	; (80029b0 <HAL_RCC_OscConfig+0x330>)
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	4ba9      	ldr	r3, [pc, #676]	; (80029b0 <HAL_RCC_OscConfig+0x330>)
 800270c:	2180      	movs	r1, #128	; 0x80
 800270e:	02c9      	lsls	r1, r1, #11
 8002710:	430a      	orrs	r2, r1
 8002712:	601a      	str	r2, [r3, #0]
 8002714:	4ba6      	ldr	r3, [pc, #664]	; (80029b0 <HAL_RCC_OscConfig+0x330>)
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	4ba5      	ldr	r3, [pc, #660]	; (80029b0 <HAL_RCC_OscConfig+0x330>)
 800271a:	2180      	movs	r1, #128	; 0x80
 800271c:	0249      	lsls	r1, r1, #9
 800271e:	430a      	orrs	r2, r1
 8002720:	601a      	str	r2, [r3, #0]
 8002722:	e00b      	b.n	800273c <HAL_RCC_OscConfig+0xbc>
 8002724:	4ba2      	ldr	r3, [pc, #648]	; (80029b0 <HAL_RCC_OscConfig+0x330>)
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	4ba1      	ldr	r3, [pc, #644]	; (80029b0 <HAL_RCC_OscConfig+0x330>)
 800272a:	49a2      	ldr	r1, [pc, #648]	; (80029b4 <HAL_RCC_OscConfig+0x334>)
 800272c:	400a      	ands	r2, r1
 800272e:	601a      	str	r2, [r3, #0]
 8002730:	4b9f      	ldr	r3, [pc, #636]	; (80029b0 <HAL_RCC_OscConfig+0x330>)
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	4b9e      	ldr	r3, [pc, #632]	; (80029b0 <HAL_RCC_OscConfig+0x330>)
 8002736:	49a0      	ldr	r1, [pc, #640]	; (80029b8 <HAL_RCC_OscConfig+0x338>)
 8002738:	400a      	ands	r2, r1
 800273a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d014      	beq.n	800276e <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002744:	f7ff fa9e 	bl	8001c84 <HAL_GetTick>
 8002748:	0003      	movs	r3, r0
 800274a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800274c:	e008      	b.n	8002760 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800274e:	f7ff fa99 	bl	8001c84 <HAL_GetTick>
 8002752:	0002      	movs	r2, r0
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	1ad3      	subs	r3, r2, r3
 8002758:	2b64      	cmp	r3, #100	; 0x64
 800275a:	d901      	bls.n	8002760 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 800275c:	2303      	movs	r3, #3
 800275e:	e2e9      	b.n	8002d34 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002760:	4b93      	ldr	r3, [pc, #588]	; (80029b0 <HAL_RCC_OscConfig+0x330>)
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	2380      	movs	r3, #128	; 0x80
 8002766:	029b      	lsls	r3, r3, #10
 8002768:	4013      	ands	r3, r2
 800276a:	d0f0      	beq.n	800274e <HAL_RCC_OscConfig+0xce>
 800276c:	e015      	b.n	800279a <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800276e:	f7ff fa89 	bl	8001c84 <HAL_GetTick>
 8002772:	0003      	movs	r3, r0
 8002774:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002776:	e008      	b.n	800278a <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002778:	f7ff fa84 	bl	8001c84 <HAL_GetTick>
 800277c:	0002      	movs	r2, r0
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	2b64      	cmp	r3, #100	; 0x64
 8002784:	d901      	bls.n	800278a <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8002786:	2303      	movs	r3, #3
 8002788:	e2d4      	b.n	8002d34 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800278a:	4b89      	ldr	r3, [pc, #548]	; (80029b0 <HAL_RCC_OscConfig+0x330>)
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	2380      	movs	r3, #128	; 0x80
 8002790:	029b      	lsls	r3, r3, #10
 8002792:	4013      	ands	r3, r2
 8002794:	d1f0      	bne.n	8002778 <HAL_RCC_OscConfig+0xf8>
 8002796:	e000      	b.n	800279a <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002798:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	2202      	movs	r2, #2
 80027a0:	4013      	ands	r3, r2
 80027a2:	d100      	bne.n	80027a6 <HAL_RCC_OscConfig+0x126>
 80027a4:	e099      	b.n	80028da <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027a6:	4b82      	ldr	r3, [pc, #520]	; (80029b0 <HAL_RCC_OscConfig+0x330>)
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	2238      	movs	r2, #56	; 0x38
 80027ac:	4013      	ands	r3, r2
 80027ae:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80027b0:	4b7f      	ldr	r3, [pc, #508]	; (80029b0 <HAL_RCC_OscConfig+0x330>)
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	2203      	movs	r2, #3
 80027b6:	4013      	ands	r3, r2
 80027b8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80027ba:	69bb      	ldr	r3, [r7, #24]
 80027bc:	2b10      	cmp	r3, #16
 80027be:	d102      	bne.n	80027c6 <HAL_RCC_OscConfig+0x146>
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d002      	beq.n	80027cc <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80027c6:	69bb      	ldr	r3, [r7, #24]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d135      	bne.n	8002838 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027cc:	4b78      	ldr	r3, [pc, #480]	; (80029b0 <HAL_RCC_OscConfig+0x330>)
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	2380      	movs	r3, #128	; 0x80
 80027d2:	00db      	lsls	r3, r3, #3
 80027d4:	4013      	ands	r3, r2
 80027d6:	d005      	beq.n	80027e4 <HAL_RCC_OscConfig+0x164>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d101      	bne.n	80027e4 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	e2a7      	b.n	8002d34 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027e4:	4b72      	ldr	r3, [pc, #456]	; (80029b0 <HAL_RCC_OscConfig+0x330>)
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	4a74      	ldr	r2, [pc, #464]	; (80029bc <HAL_RCC_OscConfig+0x33c>)
 80027ea:	4013      	ands	r3, r2
 80027ec:	0019      	movs	r1, r3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	695b      	ldr	r3, [r3, #20]
 80027f2:	021a      	lsls	r2, r3, #8
 80027f4:	4b6e      	ldr	r3, [pc, #440]	; (80029b0 <HAL_RCC_OscConfig+0x330>)
 80027f6:	430a      	orrs	r2, r1
 80027f8:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80027fa:	69bb      	ldr	r3, [r7, #24]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d112      	bne.n	8002826 <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002800:	4b6b      	ldr	r3, [pc, #428]	; (80029b0 <HAL_RCC_OscConfig+0x330>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a6e      	ldr	r2, [pc, #440]	; (80029c0 <HAL_RCC_OscConfig+0x340>)
 8002806:	4013      	ands	r3, r2
 8002808:	0019      	movs	r1, r3
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	691a      	ldr	r2, [r3, #16]
 800280e:	4b68      	ldr	r3, [pc, #416]	; (80029b0 <HAL_RCC_OscConfig+0x330>)
 8002810:	430a      	orrs	r2, r1
 8002812:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002814:	4b66      	ldr	r3, [pc, #408]	; (80029b0 <HAL_RCC_OscConfig+0x330>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	0adb      	lsrs	r3, r3, #11
 800281a:	2207      	movs	r2, #7
 800281c:	4013      	ands	r3, r2
 800281e:	4a69      	ldr	r2, [pc, #420]	; (80029c4 <HAL_RCC_OscConfig+0x344>)
 8002820:	40da      	lsrs	r2, r3
 8002822:	4b69      	ldr	r3, [pc, #420]	; (80029c8 <HAL_RCC_OscConfig+0x348>)
 8002824:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002826:	4b69      	ldr	r3, [pc, #420]	; (80029cc <HAL_RCC_OscConfig+0x34c>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	0018      	movs	r0, r3
 800282c:	f7ff f9ce 	bl	8001bcc <HAL_InitTick>
 8002830:	1e03      	subs	r3, r0, #0
 8002832:	d051      	beq.n	80028d8 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	e27d      	b.n	8002d34 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d030      	beq.n	80028a2 <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002840:	4b5b      	ldr	r3, [pc, #364]	; (80029b0 <HAL_RCC_OscConfig+0x330>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a5e      	ldr	r2, [pc, #376]	; (80029c0 <HAL_RCC_OscConfig+0x340>)
 8002846:	4013      	ands	r3, r2
 8002848:	0019      	movs	r1, r3
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	691a      	ldr	r2, [r3, #16]
 800284e:	4b58      	ldr	r3, [pc, #352]	; (80029b0 <HAL_RCC_OscConfig+0x330>)
 8002850:	430a      	orrs	r2, r1
 8002852:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8002854:	4b56      	ldr	r3, [pc, #344]	; (80029b0 <HAL_RCC_OscConfig+0x330>)
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	4b55      	ldr	r3, [pc, #340]	; (80029b0 <HAL_RCC_OscConfig+0x330>)
 800285a:	2180      	movs	r1, #128	; 0x80
 800285c:	0049      	lsls	r1, r1, #1
 800285e:	430a      	orrs	r2, r1
 8002860:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002862:	f7ff fa0f 	bl	8001c84 <HAL_GetTick>
 8002866:	0003      	movs	r3, r0
 8002868:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800286a:	e008      	b.n	800287e <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800286c:	f7ff fa0a 	bl	8001c84 <HAL_GetTick>
 8002870:	0002      	movs	r2, r0
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	2b02      	cmp	r3, #2
 8002878:	d901      	bls.n	800287e <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	e25a      	b.n	8002d34 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800287e:	4b4c      	ldr	r3, [pc, #304]	; (80029b0 <HAL_RCC_OscConfig+0x330>)
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	2380      	movs	r3, #128	; 0x80
 8002884:	00db      	lsls	r3, r3, #3
 8002886:	4013      	ands	r3, r2
 8002888:	d0f0      	beq.n	800286c <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800288a:	4b49      	ldr	r3, [pc, #292]	; (80029b0 <HAL_RCC_OscConfig+0x330>)
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	4a4b      	ldr	r2, [pc, #300]	; (80029bc <HAL_RCC_OscConfig+0x33c>)
 8002890:	4013      	ands	r3, r2
 8002892:	0019      	movs	r1, r3
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	695b      	ldr	r3, [r3, #20]
 8002898:	021a      	lsls	r2, r3, #8
 800289a:	4b45      	ldr	r3, [pc, #276]	; (80029b0 <HAL_RCC_OscConfig+0x330>)
 800289c:	430a      	orrs	r2, r1
 800289e:	605a      	str	r2, [r3, #4]
 80028a0:	e01b      	b.n	80028da <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80028a2:	4b43      	ldr	r3, [pc, #268]	; (80029b0 <HAL_RCC_OscConfig+0x330>)
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	4b42      	ldr	r3, [pc, #264]	; (80029b0 <HAL_RCC_OscConfig+0x330>)
 80028a8:	4949      	ldr	r1, [pc, #292]	; (80029d0 <HAL_RCC_OscConfig+0x350>)
 80028aa:	400a      	ands	r2, r1
 80028ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ae:	f7ff f9e9 	bl	8001c84 <HAL_GetTick>
 80028b2:	0003      	movs	r3, r0
 80028b4:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80028b6:	e008      	b.n	80028ca <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028b8:	f7ff f9e4 	bl	8001c84 <HAL_GetTick>
 80028bc:	0002      	movs	r2, r0
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	2b02      	cmp	r3, #2
 80028c4:	d901      	bls.n	80028ca <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 80028c6:	2303      	movs	r3, #3
 80028c8:	e234      	b.n	8002d34 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80028ca:	4b39      	ldr	r3, [pc, #228]	; (80029b0 <HAL_RCC_OscConfig+0x330>)
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	2380      	movs	r3, #128	; 0x80
 80028d0:	00db      	lsls	r3, r3, #3
 80028d2:	4013      	ands	r3, r2
 80028d4:	d1f0      	bne.n	80028b8 <HAL_RCC_OscConfig+0x238>
 80028d6:	e000      	b.n	80028da <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028d8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	2208      	movs	r2, #8
 80028e0:	4013      	ands	r3, r2
 80028e2:	d047      	beq.n	8002974 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80028e4:	4b32      	ldr	r3, [pc, #200]	; (80029b0 <HAL_RCC_OscConfig+0x330>)
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	2238      	movs	r2, #56	; 0x38
 80028ea:	4013      	ands	r3, r2
 80028ec:	2b18      	cmp	r3, #24
 80028ee:	d10a      	bne.n	8002906 <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80028f0:	4b2f      	ldr	r3, [pc, #188]	; (80029b0 <HAL_RCC_OscConfig+0x330>)
 80028f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028f4:	2202      	movs	r2, #2
 80028f6:	4013      	ands	r3, r2
 80028f8:	d03c      	beq.n	8002974 <HAL_RCC_OscConfig+0x2f4>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	699b      	ldr	r3, [r3, #24]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d138      	bne.n	8002974 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e216      	b.n	8002d34 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	699b      	ldr	r3, [r3, #24]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d019      	beq.n	8002942 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800290e:	4b28      	ldr	r3, [pc, #160]	; (80029b0 <HAL_RCC_OscConfig+0x330>)
 8002910:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002912:	4b27      	ldr	r3, [pc, #156]	; (80029b0 <HAL_RCC_OscConfig+0x330>)
 8002914:	2101      	movs	r1, #1
 8002916:	430a      	orrs	r2, r1
 8002918:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800291a:	f7ff f9b3 	bl	8001c84 <HAL_GetTick>
 800291e:	0003      	movs	r3, r0
 8002920:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002922:	e008      	b.n	8002936 <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002924:	f7ff f9ae 	bl	8001c84 <HAL_GetTick>
 8002928:	0002      	movs	r2, r0
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	2b02      	cmp	r3, #2
 8002930:	d901      	bls.n	8002936 <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 8002932:	2303      	movs	r3, #3
 8002934:	e1fe      	b.n	8002d34 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002936:	4b1e      	ldr	r3, [pc, #120]	; (80029b0 <HAL_RCC_OscConfig+0x330>)
 8002938:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800293a:	2202      	movs	r2, #2
 800293c:	4013      	ands	r3, r2
 800293e:	d0f1      	beq.n	8002924 <HAL_RCC_OscConfig+0x2a4>
 8002940:	e018      	b.n	8002974 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002942:	4b1b      	ldr	r3, [pc, #108]	; (80029b0 <HAL_RCC_OscConfig+0x330>)
 8002944:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002946:	4b1a      	ldr	r3, [pc, #104]	; (80029b0 <HAL_RCC_OscConfig+0x330>)
 8002948:	2101      	movs	r1, #1
 800294a:	438a      	bics	r2, r1
 800294c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800294e:	f7ff f999 	bl	8001c84 <HAL_GetTick>
 8002952:	0003      	movs	r3, r0
 8002954:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002956:	e008      	b.n	800296a <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002958:	f7ff f994 	bl	8001c84 <HAL_GetTick>
 800295c:	0002      	movs	r2, r0
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	2b02      	cmp	r3, #2
 8002964:	d901      	bls.n	800296a <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 8002966:	2303      	movs	r3, #3
 8002968:	e1e4      	b.n	8002d34 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800296a:	4b11      	ldr	r3, [pc, #68]	; (80029b0 <HAL_RCC_OscConfig+0x330>)
 800296c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800296e:	2202      	movs	r2, #2
 8002970:	4013      	ands	r3, r2
 8002972:	d1f1      	bne.n	8002958 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	2204      	movs	r2, #4
 800297a:	4013      	ands	r3, r2
 800297c:	d100      	bne.n	8002980 <HAL_RCC_OscConfig+0x300>
 800297e:	e0c7      	b.n	8002b10 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002980:	231f      	movs	r3, #31
 8002982:	18fb      	adds	r3, r7, r3
 8002984:	2200      	movs	r2, #0
 8002986:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002988:	4b09      	ldr	r3, [pc, #36]	; (80029b0 <HAL_RCC_OscConfig+0x330>)
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	2238      	movs	r2, #56	; 0x38
 800298e:	4013      	ands	r3, r2
 8002990:	2b20      	cmp	r3, #32
 8002992:	d11f      	bne.n	80029d4 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002994:	4b06      	ldr	r3, [pc, #24]	; (80029b0 <HAL_RCC_OscConfig+0x330>)
 8002996:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002998:	2202      	movs	r2, #2
 800299a:	4013      	ands	r3, r2
 800299c:	d100      	bne.n	80029a0 <HAL_RCC_OscConfig+0x320>
 800299e:	e0b7      	b.n	8002b10 <HAL_RCC_OscConfig+0x490>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d000      	beq.n	80029aa <HAL_RCC_OscConfig+0x32a>
 80029a8:	e0b2      	b.n	8002b10 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e1c2      	b.n	8002d34 <HAL_RCC_OscConfig+0x6b4>
 80029ae:	46c0      	nop			; (mov r8, r8)
 80029b0:	40021000 	.word	0x40021000
 80029b4:	fffeffff 	.word	0xfffeffff
 80029b8:	fffbffff 	.word	0xfffbffff
 80029bc:	ffff80ff 	.word	0xffff80ff
 80029c0:	ffffc7ff 	.word	0xffffc7ff
 80029c4:	00f42400 	.word	0x00f42400
 80029c8:	20000004 	.word	0x20000004
 80029cc:	20000008 	.word	0x20000008
 80029d0:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80029d4:	4bb5      	ldr	r3, [pc, #724]	; (8002cac <HAL_RCC_OscConfig+0x62c>)
 80029d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80029d8:	2380      	movs	r3, #128	; 0x80
 80029da:	055b      	lsls	r3, r3, #21
 80029dc:	4013      	ands	r3, r2
 80029de:	d101      	bne.n	80029e4 <HAL_RCC_OscConfig+0x364>
 80029e0:	2301      	movs	r3, #1
 80029e2:	e000      	b.n	80029e6 <HAL_RCC_OscConfig+0x366>
 80029e4:	2300      	movs	r3, #0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d011      	beq.n	8002a0e <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80029ea:	4bb0      	ldr	r3, [pc, #704]	; (8002cac <HAL_RCC_OscConfig+0x62c>)
 80029ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80029ee:	4baf      	ldr	r3, [pc, #700]	; (8002cac <HAL_RCC_OscConfig+0x62c>)
 80029f0:	2180      	movs	r1, #128	; 0x80
 80029f2:	0549      	lsls	r1, r1, #21
 80029f4:	430a      	orrs	r2, r1
 80029f6:	63da      	str	r2, [r3, #60]	; 0x3c
 80029f8:	4bac      	ldr	r3, [pc, #688]	; (8002cac <HAL_RCC_OscConfig+0x62c>)
 80029fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80029fc:	2380      	movs	r3, #128	; 0x80
 80029fe:	055b      	lsls	r3, r3, #21
 8002a00:	4013      	ands	r3, r2
 8002a02:	60fb      	str	r3, [r7, #12]
 8002a04:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002a06:	231f      	movs	r3, #31
 8002a08:	18fb      	adds	r3, r7, r3
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a0e:	4ba8      	ldr	r3, [pc, #672]	; (8002cb0 <HAL_RCC_OscConfig+0x630>)
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	2380      	movs	r3, #128	; 0x80
 8002a14:	005b      	lsls	r3, r3, #1
 8002a16:	4013      	ands	r3, r2
 8002a18:	d11a      	bne.n	8002a50 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a1a:	4ba5      	ldr	r3, [pc, #660]	; (8002cb0 <HAL_RCC_OscConfig+0x630>)
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	4ba4      	ldr	r3, [pc, #656]	; (8002cb0 <HAL_RCC_OscConfig+0x630>)
 8002a20:	2180      	movs	r1, #128	; 0x80
 8002a22:	0049      	lsls	r1, r1, #1
 8002a24:	430a      	orrs	r2, r1
 8002a26:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002a28:	f7ff f92c 	bl	8001c84 <HAL_GetTick>
 8002a2c:	0003      	movs	r3, r0
 8002a2e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a30:	e008      	b.n	8002a44 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a32:	f7ff f927 	bl	8001c84 <HAL_GetTick>
 8002a36:	0002      	movs	r2, r0
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	1ad3      	subs	r3, r2, r3
 8002a3c:	2b02      	cmp	r3, #2
 8002a3e:	d901      	bls.n	8002a44 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8002a40:	2303      	movs	r3, #3
 8002a42:	e177      	b.n	8002d34 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a44:	4b9a      	ldr	r3, [pc, #616]	; (8002cb0 <HAL_RCC_OscConfig+0x630>)
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	2380      	movs	r3, #128	; 0x80
 8002a4a:	005b      	lsls	r3, r3, #1
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	d0f0      	beq.n	8002a32 <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	d106      	bne.n	8002a66 <HAL_RCC_OscConfig+0x3e6>
 8002a58:	4b94      	ldr	r3, [pc, #592]	; (8002cac <HAL_RCC_OscConfig+0x62c>)
 8002a5a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002a5c:	4b93      	ldr	r3, [pc, #588]	; (8002cac <HAL_RCC_OscConfig+0x62c>)
 8002a5e:	2101      	movs	r1, #1
 8002a60:	430a      	orrs	r2, r1
 8002a62:	65da      	str	r2, [r3, #92]	; 0x5c
 8002a64:	e01c      	b.n	8002aa0 <HAL_RCC_OscConfig+0x420>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	2b05      	cmp	r3, #5
 8002a6c:	d10c      	bne.n	8002a88 <HAL_RCC_OscConfig+0x408>
 8002a6e:	4b8f      	ldr	r3, [pc, #572]	; (8002cac <HAL_RCC_OscConfig+0x62c>)
 8002a70:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002a72:	4b8e      	ldr	r3, [pc, #568]	; (8002cac <HAL_RCC_OscConfig+0x62c>)
 8002a74:	2104      	movs	r1, #4
 8002a76:	430a      	orrs	r2, r1
 8002a78:	65da      	str	r2, [r3, #92]	; 0x5c
 8002a7a:	4b8c      	ldr	r3, [pc, #560]	; (8002cac <HAL_RCC_OscConfig+0x62c>)
 8002a7c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002a7e:	4b8b      	ldr	r3, [pc, #556]	; (8002cac <HAL_RCC_OscConfig+0x62c>)
 8002a80:	2101      	movs	r1, #1
 8002a82:	430a      	orrs	r2, r1
 8002a84:	65da      	str	r2, [r3, #92]	; 0x5c
 8002a86:	e00b      	b.n	8002aa0 <HAL_RCC_OscConfig+0x420>
 8002a88:	4b88      	ldr	r3, [pc, #544]	; (8002cac <HAL_RCC_OscConfig+0x62c>)
 8002a8a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002a8c:	4b87      	ldr	r3, [pc, #540]	; (8002cac <HAL_RCC_OscConfig+0x62c>)
 8002a8e:	2101      	movs	r1, #1
 8002a90:	438a      	bics	r2, r1
 8002a92:	65da      	str	r2, [r3, #92]	; 0x5c
 8002a94:	4b85      	ldr	r3, [pc, #532]	; (8002cac <HAL_RCC_OscConfig+0x62c>)
 8002a96:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002a98:	4b84      	ldr	r3, [pc, #528]	; (8002cac <HAL_RCC_OscConfig+0x62c>)
 8002a9a:	2104      	movs	r1, #4
 8002a9c:	438a      	bics	r2, r1
 8002a9e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d014      	beq.n	8002ad2 <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aa8:	f7ff f8ec 	bl	8001c84 <HAL_GetTick>
 8002aac:	0003      	movs	r3, r0
 8002aae:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ab0:	e009      	b.n	8002ac6 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ab2:	f7ff f8e7 	bl	8001c84 <HAL_GetTick>
 8002ab6:	0002      	movs	r2, r0
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	1ad3      	subs	r3, r2, r3
 8002abc:	4a7d      	ldr	r2, [pc, #500]	; (8002cb4 <HAL_RCC_OscConfig+0x634>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d901      	bls.n	8002ac6 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	e136      	b.n	8002d34 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ac6:	4b79      	ldr	r3, [pc, #484]	; (8002cac <HAL_RCC_OscConfig+0x62c>)
 8002ac8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aca:	2202      	movs	r2, #2
 8002acc:	4013      	ands	r3, r2
 8002ace:	d0f0      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x432>
 8002ad0:	e013      	b.n	8002afa <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ad2:	f7ff f8d7 	bl	8001c84 <HAL_GetTick>
 8002ad6:	0003      	movs	r3, r0
 8002ad8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ada:	e009      	b.n	8002af0 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002adc:	f7ff f8d2 	bl	8001c84 <HAL_GetTick>
 8002ae0:	0002      	movs	r2, r0
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	4a73      	ldr	r2, [pc, #460]	; (8002cb4 <HAL_RCC_OscConfig+0x634>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d901      	bls.n	8002af0 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8002aec:	2303      	movs	r3, #3
 8002aee:	e121      	b.n	8002d34 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002af0:	4b6e      	ldr	r3, [pc, #440]	; (8002cac <HAL_RCC_OscConfig+0x62c>)
 8002af2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002af4:	2202      	movs	r2, #2
 8002af6:	4013      	ands	r3, r2
 8002af8:	d1f0      	bne.n	8002adc <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002afa:	231f      	movs	r3, #31
 8002afc:	18fb      	adds	r3, r7, r3
 8002afe:	781b      	ldrb	r3, [r3, #0]
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d105      	bne.n	8002b10 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002b04:	4b69      	ldr	r3, [pc, #420]	; (8002cac <HAL_RCC_OscConfig+0x62c>)
 8002b06:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b08:	4b68      	ldr	r3, [pc, #416]	; (8002cac <HAL_RCC_OscConfig+0x62c>)
 8002b0a:	496b      	ldr	r1, [pc, #428]	; (8002cb8 <HAL_RCC_OscConfig+0x638>)
 8002b0c:	400a      	ands	r2, r1
 8002b0e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	2220      	movs	r2, #32
 8002b16:	4013      	ands	r3, r2
 8002b18:	d039      	beq.n	8002b8e <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	69db      	ldr	r3, [r3, #28]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d01b      	beq.n	8002b5a <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002b22:	4b62      	ldr	r3, [pc, #392]	; (8002cac <HAL_RCC_OscConfig+0x62c>)
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	4b61      	ldr	r3, [pc, #388]	; (8002cac <HAL_RCC_OscConfig+0x62c>)
 8002b28:	2180      	movs	r1, #128	; 0x80
 8002b2a:	03c9      	lsls	r1, r1, #15
 8002b2c:	430a      	orrs	r2, r1
 8002b2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b30:	f7ff f8a8 	bl	8001c84 <HAL_GetTick>
 8002b34:	0003      	movs	r3, r0
 8002b36:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002b38:	e008      	b.n	8002b4c <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b3a:	f7ff f8a3 	bl	8001c84 <HAL_GetTick>
 8002b3e:	0002      	movs	r2, r0
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	1ad3      	subs	r3, r2, r3
 8002b44:	2b02      	cmp	r3, #2
 8002b46:	d901      	bls.n	8002b4c <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8002b48:	2303      	movs	r3, #3
 8002b4a:	e0f3      	b.n	8002d34 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002b4c:	4b57      	ldr	r3, [pc, #348]	; (8002cac <HAL_RCC_OscConfig+0x62c>)
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	2380      	movs	r3, #128	; 0x80
 8002b52:	041b      	lsls	r3, r3, #16
 8002b54:	4013      	ands	r3, r2
 8002b56:	d0f0      	beq.n	8002b3a <HAL_RCC_OscConfig+0x4ba>
 8002b58:	e019      	b.n	8002b8e <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002b5a:	4b54      	ldr	r3, [pc, #336]	; (8002cac <HAL_RCC_OscConfig+0x62c>)
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	4b53      	ldr	r3, [pc, #332]	; (8002cac <HAL_RCC_OscConfig+0x62c>)
 8002b60:	4956      	ldr	r1, [pc, #344]	; (8002cbc <HAL_RCC_OscConfig+0x63c>)
 8002b62:	400a      	ands	r2, r1
 8002b64:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b66:	f7ff f88d 	bl	8001c84 <HAL_GetTick>
 8002b6a:	0003      	movs	r3, r0
 8002b6c:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002b6e:	e008      	b.n	8002b82 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b70:	f7ff f888 	bl	8001c84 <HAL_GetTick>
 8002b74:	0002      	movs	r2, r0
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	2b02      	cmp	r3, #2
 8002b7c:	d901      	bls.n	8002b82 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	e0d8      	b.n	8002d34 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002b82:	4b4a      	ldr	r3, [pc, #296]	; (8002cac <HAL_RCC_OscConfig+0x62c>)
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	2380      	movs	r3, #128	; 0x80
 8002b88:	041b      	lsls	r3, r3, #16
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	d1f0      	bne.n	8002b70 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6a1b      	ldr	r3, [r3, #32]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d100      	bne.n	8002b98 <HAL_RCC_OscConfig+0x518>
 8002b96:	e0cc      	b.n	8002d32 <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b98:	4b44      	ldr	r3, [pc, #272]	; (8002cac <HAL_RCC_OscConfig+0x62c>)
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	2238      	movs	r2, #56	; 0x38
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	2b10      	cmp	r3, #16
 8002ba2:	d100      	bne.n	8002ba6 <HAL_RCC_OscConfig+0x526>
 8002ba4:	e07b      	b.n	8002c9e <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6a1b      	ldr	r3, [r3, #32]
 8002baa:	2b02      	cmp	r3, #2
 8002bac:	d156      	bne.n	8002c5c <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bae:	4b3f      	ldr	r3, [pc, #252]	; (8002cac <HAL_RCC_OscConfig+0x62c>)
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	4b3e      	ldr	r3, [pc, #248]	; (8002cac <HAL_RCC_OscConfig+0x62c>)
 8002bb4:	4942      	ldr	r1, [pc, #264]	; (8002cc0 <HAL_RCC_OscConfig+0x640>)
 8002bb6:	400a      	ands	r2, r1
 8002bb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bba:	f7ff f863 	bl	8001c84 <HAL_GetTick>
 8002bbe:	0003      	movs	r3, r0
 8002bc0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bc2:	e008      	b.n	8002bd6 <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bc4:	f7ff f85e 	bl	8001c84 <HAL_GetTick>
 8002bc8:	0002      	movs	r2, r0
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	2b02      	cmp	r3, #2
 8002bd0:	d901      	bls.n	8002bd6 <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	e0ae      	b.n	8002d34 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bd6:	4b35      	ldr	r3, [pc, #212]	; (8002cac <HAL_RCC_OscConfig+0x62c>)
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	2380      	movs	r3, #128	; 0x80
 8002bdc:	049b      	lsls	r3, r3, #18
 8002bde:	4013      	ands	r3, r2
 8002be0:	d1f0      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002be2:	4b32      	ldr	r3, [pc, #200]	; (8002cac <HAL_RCC_OscConfig+0x62c>)
 8002be4:	68db      	ldr	r3, [r3, #12]
 8002be6:	4a37      	ldr	r2, [pc, #220]	; (8002cc4 <HAL_RCC_OscConfig+0x644>)
 8002be8:	4013      	ands	r3, r2
 8002bea:	0019      	movs	r1, r3
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bf4:	431a      	orrs	r2, r3
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bfa:	021b      	lsls	r3, r3, #8
 8002bfc:	431a      	orrs	r2, r3
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c02:	431a      	orrs	r2, r3
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c08:	431a      	orrs	r2, r3
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c0e:	431a      	orrs	r2, r3
 8002c10:	4b26      	ldr	r3, [pc, #152]	; (8002cac <HAL_RCC_OscConfig+0x62c>)
 8002c12:	430a      	orrs	r2, r1
 8002c14:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c16:	4b25      	ldr	r3, [pc, #148]	; (8002cac <HAL_RCC_OscConfig+0x62c>)
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	4b24      	ldr	r3, [pc, #144]	; (8002cac <HAL_RCC_OscConfig+0x62c>)
 8002c1c:	2180      	movs	r1, #128	; 0x80
 8002c1e:	0449      	lsls	r1, r1, #17
 8002c20:	430a      	orrs	r2, r1
 8002c22:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002c24:	4b21      	ldr	r3, [pc, #132]	; (8002cac <HAL_RCC_OscConfig+0x62c>)
 8002c26:	68da      	ldr	r2, [r3, #12]
 8002c28:	4b20      	ldr	r3, [pc, #128]	; (8002cac <HAL_RCC_OscConfig+0x62c>)
 8002c2a:	2180      	movs	r1, #128	; 0x80
 8002c2c:	0549      	lsls	r1, r1, #21
 8002c2e:	430a      	orrs	r2, r1
 8002c30:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c32:	f7ff f827 	bl	8001c84 <HAL_GetTick>
 8002c36:	0003      	movs	r3, r0
 8002c38:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c3a:	e008      	b.n	8002c4e <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c3c:	f7ff f822 	bl	8001c84 <HAL_GetTick>
 8002c40:	0002      	movs	r2, r0
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	d901      	bls.n	8002c4e <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e072      	b.n	8002d34 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c4e:	4b17      	ldr	r3, [pc, #92]	; (8002cac <HAL_RCC_OscConfig+0x62c>)
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	2380      	movs	r3, #128	; 0x80
 8002c54:	049b      	lsls	r3, r3, #18
 8002c56:	4013      	ands	r3, r2
 8002c58:	d0f0      	beq.n	8002c3c <HAL_RCC_OscConfig+0x5bc>
 8002c5a:	e06a      	b.n	8002d32 <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c5c:	4b13      	ldr	r3, [pc, #76]	; (8002cac <HAL_RCC_OscConfig+0x62c>)
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	4b12      	ldr	r3, [pc, #72]	; (8002cac <HAL_RCC_OscConfig+0x62c>)
 8002c62:	4917      	ldr	r1, [pc, #92]	; (8002cc0 <HAL_RCC_OscConfig+0x640>)
 8002c64:	400a      	ands	r2, r1
 8002c66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c68:	f7ff f80c 	bl	8001c84 <HAL_GetTick>
 8002c6c:	0003      	movs	r3, r0
 8002c6e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c70:	e008      	b.n	8002c84 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c72:	f7ff f807 	bl	8001c84 <HAL_GetTick>
 8002c76:	0002      	movs	r2, r0
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	1ad3      	subs	r3, r2, r3
 8002c7c:	2b02      	cmp	r3, #2
 8002c7e:	d901      	bls.n	8002c84 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8002c80:	2303      	movs	r3, #3
 8002c82:	e057      	b.n	8002d34 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c84:	4b09      	ldr	r3, [pc, #36]	; (8002cac <HAL_RCC_OscConfig+0x62c>)
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	2380      	movs	r3, #128	; 0x80
 8002c8a:	049b      	lsls	r3, r3, #18
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	d1f0      	bne.n	8002c72 <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8002c90:	4b06      	ldr	r3, [pc, #24]	; (8002cac <HAL_RCC_OscConfig+0x62c>)
 8002c92:	68da      	ldr	r2, [r3, #12]
 8002c94:	4b05      	ldr	r3, [pc, #20]	; (8002cac <HAL_RCC_OscConfig+0x62c>)
 8002c96:	490c      	ldr	r1, [pc, #48]	; (8002cc8 <HAL_RCC_OscConfig+0x648>)
 8002c98:	400a      	ands	r2, r1
 8002c9a:	60da      	str	r2, [r3, #12]
 8002c9c:	e049      	b.n	8002d32 <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6a1b      	ldr	r3, [r3, #32]
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	d112      	bne.n	8002ccc <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e044      	b.n	8002d34 <HAL_RCC_OscConfig+0x6b4>
 8002caa:	46c0      	nop			; (mov r8, r8)
 8002cac:	40021000 	.word	0x40021000
 8002cb0:	40007000 	.word	0x40007000
 8002cb4:	00001388 	.word	0x00001388
 8002cb8:	efffffff 	.word	0xefffffff
 8002cbc:	ffbfffff 	.word	0xffbfffff
 8002cc0:	feffffff 	.word	0xfeffffff
 8002cc4:	11c1808c 	.word	0x11c1808c
 8002cc8:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002ccc:	4b1b      	ldr	r3, [pc, #108]	; (8002d3c <HAL_RCC_OscConfig+0x6bc>)
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	2203      	movs	r2, #3
 8002cd6:	401a      	ands	r2, r3
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d126      	bne.n	8002d2e <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	2270      	movs	r2, #112	; 0x70
 8002ce4:	401a      	ands	r2, r3
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cea:	429a      	cmp	r2, r3
 8002cec:	d11f      	bne.n	8002d2e <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002cee:	697a      	ldr	r2, [r7, #20]
 8002cf0:	23fe      	movs	r3, #254	; 0xfe
 8002cf2:	01db      	lsls	r3, r3, #7
 8002cf4:	401a      	ands	r2, r3
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cfa:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d116      	bne.n	8002d2e <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002d00:	697a      	ldr	r2, [r7, #20]
 8002d02:	23f8      	movs	r3, #248	; 0xf8
 8002d04:	039b      	lsls	r3, r3, #14
 8002d06:	401a      	ands	r2, r3
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d10e      	bne.n	8002d2e <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002d10:	697a      	ldr	r2, [r7, #20]
 8002d12:	23e0      	movs	r3, #224	; 0xe0
 8002d14:	051b      	lsls	r3, r3, #20
 8002d16:	401a      	ands	r2, r3
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d106      	bne.n	8002d2e <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	0f5b      	lsrs	r3, r3, #29
 8002d24:	075a      	lsls	r2, r3, #29
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002d2a:	429a      	cmp	r2, r3
 8002d2c:	d001      	beq.n	8002d32 <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e000      	b.n	8002d34 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 8002d32:	2300      	movs	r3, #0
}
 8002d34:	0018      	movs	r0, r3
 8002d36:	46bd      	mov	sp, r7
 8002d38:	b008      	add	sp, #32
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	40021000 	.word	0x40021000

08002d40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b084      	sub	sp, #16
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
 8002d48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d101      	bne.n	8002d54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e0e9      	b.n	8002f28 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d54:	4b76      	ldr	r3, [pc, #472]	; (8002f30 <HAL_RCC_ClockConfig+0x1f0>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	2207      	movs	r2, #7
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	683a      	ldr	r2, [r7, #0]
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	d91e      	bls.n	8002da0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d62:	4b73      	ldr	r3, [pc, #460]	; (8002f30 <HAL_RCC_ClockConfig+0x1f0>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	2207      	movs	r2, #7
 8002d68:	4393      	bics	r3, r2
 8002d6a:	0019      	movs	r1, r3
 8002d6c:	4b70      	ldr	r3, [pc, #448]	; (8002f30 <HAL_RCC_ClockConfig+0x1f0>)
 8002d6e:	683a      	ldr	r2, [r7, #0]
 8002d70:	430a      	orrs	r2, r1
 8002d72:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002d74:	f7fe ff86 	bl	8001c84 <HAL_GetTick>
 8002d78:	0003      	movs	r3, r0
 8002d7a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002d7c:	e009      	b.n	8002d92 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d7e:	f7fe ff81 	bl	8001c84 <HAL_GetTick>
 8002d82:	0002      	movs	r2, r0
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	1ad3      	subs	r3, r2, r3
 8002d88:	4a6a      	ldr	r2, [pc, #424]	; (8002f34 <HAL_RCC_ClockConfig+0x1f4>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d901      	bls.n	8002d92 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002d8e:	2303      	movs	r3, #3
 8002d90:	e0ca      	b.n	8002f28 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002d92:	4b67      	ldr	r3, [pc, #412]	; (8002f30 <HAL_RCC_ClockConfig+0x1f0>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	2207      	movs	r2, #7
 8002d98:	4013      	ands	r3, r2
 8002d9a:	683a      	ldr	r2, [r7, #0]
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d1ee      	bne.n	8002d7e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	2202      	movs	r2, #2
 8002da6:	4013      	ands	r3, r2
 8002da8:	d015      	beq.n	8002dd6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	2204      	movs	r2, #4
 8002db0:	4013      	ands	r3, r2
 8002db2:	d006      	beq.n	8002dc2 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002db4:	4b60      	ldr	r3, [pc, #384]	; (8002f38 <HAL_RCC_ClockConfig+0x1f8>)
 8002db6:	689a      	ldr	r2, [r3, #8]
 8002db8:	4b5f      	ldr	r3, [pc, #380]	; (8002f38 <HAL_RCC_ClockConfig+0x1f8>)
 8002dba:	21e0      	movs	r1, #224	; 0xe0
 8002dbc:	01c9      	lsls	r1, r1, #7
 8002dbe:	430a      	orrs	r2, r1
 8002dc0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dc2:	4b5d      	ldr	r3, [pc, #372]	; (8002f38 <HAL_RCC_ClockConfig+0x1f8>)
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	4a5d      	ldr	r2, [pc, #372]	; (8002f3c <HAL_RCC_ClockConfig+0x1fc>)
 8002dc8:	4013      	ands	r3, r2
 8002dca:	0019      	movs	r1, r3
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	689a      	ldr	r2, [r3, #8]
 8002dd0:	4b59      	ldr	r3, [pc, #356]	; (8002f38 <HAL_RCC_ClockConfig+0x1f8>)
 8002dd2:	430a      	orrs	r2, r1
 8002dd4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	2201      	movs	r2, #1
 8002ddc:	4013      	ands	r3, r2
 8002dde:	d057      	beq.n	8002e90 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d107      	bne.n	8002df8 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002de8:	4b53      	ldr	r3, [pc, #332]	; (8002f38 <HAL_RCC_ClockConfig+0x1f8>)
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	2380      	movs	r3, #128	; 0x80
 8002dee:	029b      	lsls	r3, r3, #10
 8002df0:	4013      	ands	r3, r2
 8002df2:	d12b      	bne.n	8002e4c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	e097      	b.n	8002f28 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	2b02      	cmp	r3, #2
 8002dfe:	d107      	bne.n	8002e10 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e00:	4b4d      	ldr	r3, [pc, #308]	; (8002f38 <HAL_RCC_ClockConfig+0x1f8>)
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	2380      	movs	r3, #128	; 0x80
 8002e06:	049b      	lsls	r3, r3, #18
 8002e08:	4013      	ands	r3, r2
 8002e0a:	d11f      	bne.n	8002e4c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e08b      	b.n	8002f28 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d107      	bne.n	8002e28 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e18:	4b47      	ldr	r3, [pc, #284]	; (8002f38 <HAL_RCC_ClockConfig+0x1f8>)
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	2380      	movs	r3, #128	; 0x80
 8002e1e:	00db      	lsls	r3, r3, #3
 8002e20:	4013      	ands	r3, r2
 8002e22:	d113      	bne.n	8002e4c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	e07f      	b.n	8002f28 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	2b03      	cmp	r3, #3
 8002e2e:	d106      	bne.n	8002e3e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e30:	4b41      	ldr	r3, [pc, #260]	; (8002f38 <HAL_RCC_ClockConfig+0x1f8>)
 8002e32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e34:	2202      	movs	r2, #2
 8002e36:	4013      	ands	r3, r2
 8002e38:	d108      	bne.n	8002e4c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e074      	b.n	8002f28 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e3e:	4b3e      	ldr	r3, [pc, #248]	; (8002f38 <HAL_RCC_ClockConfig+0x1f8>)
 8002e40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e42:	2202      	movs	r2, #2
 8002e44:	4013      	ands	r3, r2
 8002e46:	d101      	bne.n	8002e4c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e06d      	b.n	8002f28 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002e4c:	4b3a      	ldr	r3, [pc, #232]	; (8002f38 <HAL_RCC_ClockConfig+0x1f8>)
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	2207      	movs	r2, #7
 8002e52:	4393      	bics	r3, r2
 8002e54:	0019      	movs	r1, r3
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	685a      	ldr	r2, [r3, #4]
 8002e5a:	4b37      	ldr	r3, [pc, #220]	; (8002f38 <HAL_RCC_ClockConfig+0x1f8>)
 8002e5c:	430a      	orrs	r2, r1
 8002e5e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e60:	f7fe ff10 	bl	8001c84 <HAL_GetTick>
 8002e64:	0003      	movs	r3, r0
 8002e66:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e68:	e009      	b.n	8002e7e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e6a:	f7fe ff0b 	bl	8001c84 <HAL_GetTick>
 8002e6e:	0002      	movs	r2, r0
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	1ad3      	subs	r3, r2, r3
 8002e74:	4a2f      	ldr	r2, [pc, #188]	; (8002f34 <HAL_RCC_ClockConfig+0x1f4>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d901      	bls.n	8002e7e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e054      	b.n	8002f28 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e7e:	4b2e      	ldr	r3, [pc, #184]	; (8002f38 <HAL_RCC_ClockConfig+0x1f8>)
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	2238      	movs	r2, #56	; 0x38
 8002e84:	401a      	ands	r2, r3
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	00db      	lsls	r3, r3, #3
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d1ec      	bne.n	8002e6a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e90:	4b27      	ldr	r3, [pc, #156]	; (8002f30 <HAL_RCC_ClockConfig+0x1f0>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	2207      	movs	r2, #7
 8002e96:	4013      	ands	r3, r2
 8002e98:	683a      	ldr	r2, [r7, #0]
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d21e      	bcs.n	8002edc <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e9e:	4b24      	ldr	r3, [pc, #144]	; (8002f30 <HAL_RCC_ClockConfig+0x1f0>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	2207      	movs	r2, #7
 8002ea4:	4393      	bics	r3, r2
 8002ea6:	0019      	movs	r1, r3
 8002ea8:	4b21      	ldr	r3, [pc, #132]	; (8002f30 <HAL_RCC_ClockConfig+0x1f0>)
 8002eaa:	683a      	ldr	r2, [r7, #0]
 8002eac:	430a      	orrs	r2, r1
 8002eae:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002eb0:	f7fe fee8 	bl	8001c84 <HAL_GetTick>
 8002eb4:	0003      	movs	r3, r0
 8002eb6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002eb8:	e009      	b.n	8002ece <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002eba:	f7fe fee3 	bl	8001c84 <HAL_GetTick>
 8002ebe:	0002      	movs	r2, r0
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	1ad3      	subs	r3, r2, r3
 8002ec4:	4a1b      	ldr	r2, [pc, #108]	; (8002f34 <HAL_RCC_ClockConfig+0x1f4>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d901      	bls.n	8002ece <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002eca:	2303      	movs	r3, #3
 8002ecc:	e02c      	b.n	8002f28 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002ece:	4b18      	ldr	r3, [pc, #96]	; (8002f30 <HAL_RCC_ClockConfig+0x1f0>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	2207      	movs	r2, #7
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	683a      	ldr	r2, [r7, #0]
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d1ee      	bne.n	8002eba <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	2204      	movs	r2, #4
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	d009      	beq.n	8002efa <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002ee6:	4b14      	ldr	r3, [pc, #80]	; (8002f38 <HAL_RCC_ClockConfig+0x1f8>)
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	4a15      	ldr	r2, [pc, #84]	; (8002f40 <HAL_RCC_ClockConfig+0x200>)
 8002eec:	4013      	ands	r3, r2
 8002eee:	0019      	movs	r1, r3
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	68da      	ldr	r2, [r3, #12]
 8002ef4:	4b10      	ldr	r3, [pc, #64]	; (8002f38 <HAL_RCC_ClockConfig+0x1f8>)
 8002ef6:	430a      	orrs	r2, r1
 8002ef8:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002efa:	f000 f829 	bl	8002f50 <HAL_RCC_GetSysClockFreq>
 8002efe:	0001      	movs	r1, r0
 8002f00:	4b0d      	ldr	r3, [pc, #52]	; (8002f38 <HAL_RCC_ClockConfig+0x1f8>)
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	0a1b      	lsrs	r3, r3, #8
 8002f06:	220f      	movs	r2, #15
 8002f08:	401a      	ands	r2, r3
 8002f0a:	4b0e      	ldr	r3, [pc, #56]	; (8002f44 <HAL_RCC_ClockConfig+0x204>)
 8002f0c:	0092      	lsls	r2, r2, #2
 8002f0e:	58d3      	ldr	r3, [r2, r3]
 8002f10:	221f      	movs	r2, #31
 8002f12:	4013      	ands	r3, r2
 8002f14:	000a      	movs	r2, r1
 8002f16:	40da      	lsrs	r2, r3
 8002f18:	4b0b      	ldr	r3, [pc, #44]	; (8002f48 <HAL_RCC_ClockConfig+0x208>)
 8002f1a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002f1c:	4b0b      	ldr	r3, [pc, #44]	; (8002f4c <HAL_RCC_ClockConfig+0x20c>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	0018      	movs	r0, r3
 8002f22:	f7fe fe53 	bl	8001bcc <HAL_InitTick>
 8002f26:	0003      	movs	r3, r0
}
 8002f28:	0018      	movs	r0, r3
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	b004      	add	sp, #16
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	40022000 	.word	0x40022000
 8002f34:	00001388 	.word	0x00001388
 8002f38:	40021000 	.word	0x40021000
 8002f3c:	fffff0ff 	.word	0xfffff0ff
 8002f40:	ffff8fff 	.word	0xffff8fff
 8002f44:	0800a440 	.word	0x0800a440
 8002f48:	20000004 	.word	0x20000004
 8002f4c:	20000008 	.word	0x20000008

08002f50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b086      	sub	sp, #24
 8002f54:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f56:	4b3c      	ldr	r3, [pc, #240]	; (8003048 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	2238      	movs	r2, #56	; 0x38
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	d10f      	bne.n	8002f80 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002f60:	4b39      	ldr	r3, [pc, #228]	; (8003048 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	0adb      	lsrs	r3, r3, #11
 8002f66:	2207      	movs	r2, #7
 8002f68:	4013      	ands	r3, r2
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	409a      	lsls	r2, r3
 8002f6e:	0013      	movs	r3, r2
 8002f70:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002f72:	6839      	ldr	r1, [r7, #0]
 8002f74:	4835      	ldr	r0, [pc, #212]	; (800304c <HAL_RCC_GetSysClockFreq+0xfc>)
 8002f76:	f7fd f8d7 	bl	8000128 <__udivsi3>
 8002f7a:	0003      	movs	r3, r0
 8002f7c:	613b      	str	r3, [r7, #16]
 8002f7e:	e05d      	b.n	800303c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f80:	4b31      	ldr	r3, [pc, #196]	; (8003048 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	2238      	movs	r2, #56	; 0x38
 8002f86:	4013      	ands	r3, r2
 8002f88:	2b08      	cmp	r3, #8
 8002f8a:	d102      	bne.n	8002f92 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002f8c:	4b30      	ldr	r3, [pc, #192]	; (8003050 <HAL_RCC_GetSysClockFreq+0x100>)
 8002f8e:	613b      	str	r3, [r7, #16]
 8002f90:	e054      	b.n	800303c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f92:	4b2d      	ldr	r3, [pc, #180]	; (8003048 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	2238      	movs	r2, #56	; 0x38
 8002f98:	4013      	ands	r3, r2
 8002f9a:	2b10      	cmp	r3, #16
 8002f9c:	d138      	bne.n	8003010 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002f9e:	4b2a      	ldr	r3, [pc, #168]	; (8003048 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002fa0:	68db      	ldr	r3, [r3, #12]
 8002fa2:	2203      	movs	r2, #3
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002fa8:	4b27      	ldr	r3, [pc, #156]	; (8003048 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002faa:	68db      	ldr	r3, [r3, #12]
 8002fac:	091b      	lsrs	r3, r3, #4
 8002fae:	2207      	movs	r2, #7
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	3301      	adds	r3, #1
 8002fb4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2b03      	cmp	r3, #3
 8002fba:	d10d      	bne.n	8002fd8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002fbc:	68b9      	ldr	r1, [r7, #8]
 8002fbe:	4824      	ldr	r0, [pc, #144]	; (8003050 <HAL_RCC_GetSysClockFreq+0x100>)
 8002fc0:	f7fd f8b2 	bl	8000128 <__udivsi3>
 8002fc4:	0003      	movs	r3, r0
 8002fc6:	0019      	movs	r1, r3
 8002fc8:	4b1f      	ldr	r3, [pc, #124]	; (8003048 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	0a1b      	lsrs	r3, r3, #8
 8002fce:	227f      	movs	r2, #127	; 0x7f
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	434b      	muls	r3, r1
 8002fd4:	617b      	str	r3, [r7, #20]
        break;
 8002fd6:	e00d      	b.n	8002ff4 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002fd8:	68b9      	ldr	r1, [r7, #8]
 8002fda:	481c      	ldr	r0, [pc, #112]	; (800304c <HAL_RCC_GetSysClockFreq+0xfc>)
 8002fdc:	f7fd f8a4 	bl	8000128 <__udivsi3>
 8002fe0:	0003      	movs	r3, r0
 8002fe2:	0019      	movs	r1, r3
 8002fe4:	4b18      	ldr	r3, [pc, #96]	; (8003048 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	0a1b      	lsrs	r3, r3, #8
 8002fea:	227f      	movs	r2, #127	; 0x7f
 8002fec:	4013      	ands	r3, r2
 8002fee:	434b      	muls	r3, r1
 8002ff0:	617b      	str	r3, [r7, #20]
        break;
 8002ff2:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002ff4:	4b14      	ldr	r3, [pc, #80]	; (8003048 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	0f5b      	lsrs	r3, r3, #29
 8002ffa:	2207      	movs	r2, #7
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	3301      	adds	r3, #1
 8003000:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8003002:	6879      	ldr	r1, [r7, #4]
 8003004:	6978      	ldr	r0, [r7, #20]
 8003006:	f7fd f88f 	bl	8000128 <__udivsi3>
 800300a:	0003      	movs	r3, r0
 800300c:	613b      	str	r3, [r7, #16]
 800300e:	e015      	b.n	800303c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003010:	4b0d      	ldr	r3, [pc, #52]	; (8003048 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	2238      	movs	r2, #56	; 0x38
 8003016:	4013      	ands	r3, r2
 8003018:	2b20      	cmp	r3, #32
 800301a:	d103      	bne.n	8003024 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800301c:	2380      	movs	r3, #128	; 0x80
 800301e:	021b      	lsls	r3, r3, #8
 8003020:	613b      	str	r3, [r7, #16]
 8003022:	e00b      	b.n	800303c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003024:	4b08      	ldr	r3, [pc, #32]	; (8003048 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	2238      	movs	r2, #56	; 0x38
 800302a:	4013      	ands	r3, r2
 800302c:	2b18      	cmp	r3, #24
 800302e:	d103      	bne.n	8003038 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003030:	23fa      	movs	r3, #250	; 0xfa
 8003032:	01db      	lsls	r3, r3, #7
 8003034:	613b      	str	r3, [r7, #16]
 8003036:	e001      	b.n	800303c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8003038:	2300      	movs	r3, #0
 800303a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800303c:	693b      	ldr	r3, [r7, #16]
}
 800303e:	0018      	movs	r0, r3
 8003040:	46bd      	mov	sp, r7
 8003042:	b006      	add	sp, #24
 8003044:	bd80      	pop	{r7, pc}
 8003046:	46c0      	nop			; (mov r8, r8)
 8003048:	40021000 	.word	0x40021000
 800304c:	00f42400 	.word	0x00f42400
 8003050:	007a1200 	.word	0x007a1200

08003054 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003058:	4b02      	ldr	r3, [pc, #8]	; (8003064 <HAL_RCC_GetHCLKFreq+0x10>)
 800305a:	681b      	ldr	r3, [r3, #0]
}
 800305c:	0018      	movs	r0, r3
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
 8003062:	46c0      	nop			; (mov r8, r8)
 8003064:	20000004 	.word	0x20000004

08003068 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003068:	b5b0      	push	{r4, r5, r7, lr}
 800306a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800306c:	f7ff fff2 	bl	8003054 <HAL_RCC_GetHCLKFreq>
 8003070:	0004      	movs	r4, r0
 8003072:	f7ff faf9 	bl	8002668 <LL_RCC_GetAPB1Prescaler>
 8003076:	0003      	movs	r3, r0
 8003078:	0b1a      	lsrs	r2, r3, #12
 800307a:	4b05      	ldr	r3, [pc, #20]	; (8003090 <HAL_RCC_GetPCLK1Freq+0x28>)
 800307c:	0092      	lsls	r2, r2, #2
 800307e:	58d3      	ldr	r3, [r2, r3]
 8003080:	221f      	movs	r2, #31
 8003082:	4013      	ands	r3, r2
 8003084:	40dc      	lsrs	r4, r3
 8003086:	0023      	movs	r3, r4
}
 8003088:	0018      	movs	r0, r3
 800308a:	46bd      	mov	sp, r7
 800308c:	bdb0      	pop	{r4, r5, r7, pc}
 800308e:	46c0      	nop			; (mov r8, r8)
 8003090:	0800a480 	.word	0x0800a480

08003094 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b086      	sub	sp, #24
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800309c:	2313      	movs	r3, #19
 800309e:	18fb      	adds	r3, r7, r3
 80030a0:	2200      	movs	r2, #0
 80030a2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80030a4:	2312      	movs	r3, #18
 80030a6:	18fb      	adds	r3, r7, r3
 80030a8:	2200      	movs	r2, #0
 80030aa:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	2380      	movs	r3, #128	; 0x80
 80030b2:	029b      	lsls	r3, r3, #10
 80030b4:	4013      	ands	r3, r2
 80030b6:	d100      	bne.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x26>
 80030b8:	e0ad      	b.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030ba:	2011      	movs	r0, #17
 80030bc:	183b      	adds	r3, r7, r0
 80030be:	2200      	movs	r2, #0
 80030c0:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030c2:	4b47      	ldr	r3, [pc, #284]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80030c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80030c6:	2380      	movs	r3, #128	; 0x80
 80030c8:	055b      	lsls	r3, r3, #21
 80030ca:	4013      	ands	r3, r2
 80030cc:	d110      	bne.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030ce:	4b44      	ldr	r3, [pc, #272]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80030d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80030d2:	4b43      	ldr	r3, [pc, #268]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80030d4:	2180      	movs	r1, #128	; 0x80
 80030d6:	0549      	lsls	r1, r1, #21
 80030d8:	430a      	orrs	r2, r1
 80030da:	63da      	str	r2, [r3, #60]	; 0x3c
 80030dc:	4b40      	ldr	r3, [pc, #256]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80030de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80030e0:	2380      	movs	r3, #128	; 0x80
 80030e2:	055b      	lsls	r3, r3, #21
 80030e4:	4013      	ands	r3, r2
 80030e6:	60bb      	str	r3, [r7, #8]
 80030e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030ea:	183b      	adds	r3, r7, r0
 80030ec:	2201      	movs	r2, #1
 80030ee:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80030f0:	4b3c      	ldr	r3, [pc, #240]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	4b3b      	ldr	r3, [pc, #236]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80030f6:	2180      	movs	r1, #128	; 0x80
 80030f8:	0049      	lsls	r1, r1, #1
 80030fa:	430a      	orrs	r2, r1
 80030fc:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80030fe:	f7fe fdc1 	bl	8001c84 <HAL_GetTick>
 8003102:	0003      	movs	r3, r0
 8003104:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003106:	e00b      	b.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003108:	f7fe fdbc 	bl	8001c84 <HAL_GetTick>
 800310c:	0002      	movs	r2, r0
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	1ad3      	subs	r3, r2, r3
 8003112:	2b02      	cmp	r3, #2
 8003114:	d904      	bls.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8003116:	2313      	movs	r3, #19
 8003118:	18fb      	adds	r3, r7, r3
 800311a:	2203      	movs	r2, #3
 800311c:	701a      	strb	r2, [r3, #0]
        break;
 800311e:	e005      	b.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003120:	4b30      	ldr	r3, [pc, #192]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	2380      	movs	r3, #128	; 0x80
 8003126:	005b      	lsls	r3, r3, #1
 8003128:	4013      	ands	r3, r2
 800312a:	d0ed      	beq.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800312c:	2313      	movs	r3, #19
 800312e:	18fb      	adds	r3, r7, r3
 8003130:	781b      	ldrb	r3, [r3, #0]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d15e      	bne.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003136:	4b2a      	ldr	r3, [pc, #168]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003138:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800313a:	23c0      	movs	r3, #192	; 0xc0
 800313c:	009b      	lsls	r3, r3, #2
 800313e:	4013      	ands	r3, r2
 8003140:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d019      	beq.n	800317c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314c:	697a      	ldr	r2, [r7, #20]
 800314e:	429a      	cmp	r2, r3
 8003150:	d014      	beq.n	800317c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003152:	4b23      	ldr	r3, [pc, #140]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003154:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003156:	4a24      	ldr	r2, [pc, #144]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8003158:	4013      	ands	r3, r2
 800315a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800315c:	4b20      	ldr	r3, [pc, #128]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800315e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003160:	4b1f      	ldr	r3, [pc, #124]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003162:	2180      	movs	r1, #128	; 0x80
 8003164:	0249      	lsls	r1, r1, #9
 8003166:	430a      	orrs	r2, r1
 8003168:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800316a:	4b1d      	ldr	r3, [pc, #116]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800316c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800316e:	4b1c      	ldr	r3, [pc, #112]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003170:	491e      	ldr	r1, [pc, #120]	; (80031ec <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8003172:	400a      	ands	r2, r1
 8003174:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003176:	4b1a      	ldr	r3, [pc, #104]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003178:	697a      	ldr	r2, [r7, #20]
 800317a:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	2201      	movs	r2, #1
 8003180:	4013      	ands	r3, r2
 8003182:	d016      	beq.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003184:	f7fe fd7e 	bl	8001c84 <HAL_GetTick>
 8003188:	0003      	movs	r3, r0
 800318a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800318c:	e00c      	b.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800318e:	f7fe fd79 	bl	8001c84 <HAL_GetTick>
 8003192:	0002      	movs	r2, r0
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	1ad3      	subs	r3, r2, r3
 8003198:	4a15      	ldr	r2, [pc, #84]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d904      	bls.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800319e:	2313      	movs	r3, #19
 80031a0:	18fb      	adds	r3, r7, r3
 80031a2:	2203      	movs	r2, #3
 80031a4:	701a      	strb	r2, [r3, #0]
            break;
 80031a6:	e004      	b.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031a8:	4b0d      	ldr	r3, [pc, #52]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80031aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031ac:	2202      	movs	r2, #2
 80031ae:	4013      	ands	r3, r2
 80031b0:	d0ed      	beq.n	800318e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80031b2:	2313      	movs	r3, #19
 80031b4:	18fb      	adds	r3, r7, r3
 80031b6:	781b      	ldrb	r3, [r3, #0]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d10a      	bne.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80031bc:	4b08      	ldr	r3, [pc, #32]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80031be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031c0:	4a09      	ldr	r2, [pc, #36]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 80031c2:	4013      	ands	r3, r2
 80031c4:	0019      	movs	r1, r3
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031ca:	4b05      	ldr	r3, [pc, #20]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80031cc:	430a      	orrs	r2, r1
 80031ce:	65da      	str	r2, [r3, #92]	; 0x5c
 80031d0:	e016      	b.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80031d2:	2312      	movs	r3, #18
 80031d4:	18fb      	adds	r3, r7, r3
 80031d6:	2213      	movs	r2, #19
 80031d8:	18ba      	adds	r2, r7, r2
 80031da:	7812      	ldrb	r2, [r2, #0]
 80031dc:	701a      	strb	r2, [r3, #0]
 80031de:	e00f      	b.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80031e0:	40021000 	.word	0x40021000
 80031e4:	40007000 	.word	0x40007000
 80031e8:	fffffcff 	.word	0xfffffcff
 80031ec:	fffeffff 	.word	0xfffeffff
 80031f0:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031f4:	2312      	movs	r3, #18
 80031f6:	18fb      	adds	r3, r7, r3
 80031f8:	2213      	movs	r2, #19
 80031fa:	18ba      	adds	r2, r7, r2
 80031fc:	7812      	ldrb	r2, [r2, #0]
 80031fe:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003200:	2311      	movs	r3, #17
 8003202:	18fb      	adds	r3, r7, r3
 8003204:	781b      	ldrb	r3, [r3, #0]
 8003206:	2b01      	cmp	r3, #1
 8003208:	d105      	bne.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800320a:	4bb6      	ldr	r3, [pc, #728]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800320c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800320e:	4bb5      	ldr	r3, [pc, #724]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003210:	49b5      	ldr	r1, [pc, #724]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8003212:	400a      	ands	r2, r1
 8003214:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	2201      	movs	r2, #1
 800321c:	4013      	ands	r3, r2
 800321e:	d009      	beq.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003220:	4bb0      	ldr	r3, [pc, #704]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003222:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003224:	2203      	movs	r2, #3
 8003226:	4393      	bics	r3, r2
 8003228:	0019      	movs	r1, r3
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	685a      	ldr	r2, [r3, #4]
 800322e:	4bad      	ldr	r3, [pc, #692]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003230:	430a      	orrs	r2, r1
 8003232:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	2202      	movs	r2, #2
 800323a:	4013      	ands	r3, r2
 800323c:	d009      	beq.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800323e:	4ba9      	ldr	r3, [pc, #676]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003240:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003242:	220c      	movs	r2, #12
 8003244:	4393      	bics	r3, r2
 8003246:	0019      	movs	r1, r3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	689a      	ldr	r2, [r3, #8]
 800324c:	4ba5      	ldr	r3, [pc, #660]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800324e:	430a      	orrs	r2, r1
 8003250:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	2204      	movs	r2, #4
 8003258:	4013      	ands	r3, r2
 800325a:	d009      	beq.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800325c:	4ba1      	ldr	r3, [pc, #644]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800325e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003260:	2230      	movs	r2, #48	; 0x30
 8003262:	4393      	bics	r3, r2
 8003264:	0019      	movs	r1, r3
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	68da      	ldr	r2, [r3, #12]
 800326a:	4b9e      	ldr	r3, [pc, #632]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800326c:	430a      	orrs	r2, r1
 800326e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	2210      	movs	r2, #16
 8003276:	4013      	ands	r3, r2
 8003278:	d009      	beq.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800327a:	4b9a      	ldr	r3, [pc, #616]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800327c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800327e:	4a9b      	ldr	r2, [pc, #620]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003280:	4013      	ands	r3, r2
 8003282:	0019      	movs	r1, r3
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	691a      	ldr	r2, [r3, #16]
 8003288:	4b96      	ldr	r3, [pc, #600]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800328a:	430a      	orrs	r2, r1
 800328c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	2380      	movs	r3, #128	; 0x80
 8003294:	015b      	lsls	r3, r3, #5
 8003296:	4013      	ands	r3, r2
 8003298:	d009      	beq.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 800329a:	4b92      	ldr	r3, [pc, #584]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800329c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800329e:	4a94      	ldr	r2, [pc, #592]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80032a0:	4013      	ands	r3, r2
 80032a2:	0019      	movs	r1, r3
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	695a      	ldr	r2, [r3, #20]
 80032a8:	4b8e      	ldr	r3, [pc, #568]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80032aa:	430a      	orrs	r2, r1
 80032ac:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	2380      	movs	r3, #128	; 0x80
 80032b4:	009b      	lsls	r3, r3, #2
 80032b6:	4013      	ands	r3, r2
 80032b8:	d009      	beq.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80032ba:	4b8a      	ldr	r3, [pc, #552]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80032bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032be:	4a8d      	ldr	r2, [pc, #564]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 80032c0:	4013      	ands	r3, r2
 80032c2:	0019      	movs	r1, r3
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80032c8:	4b86      	ldr	r3, [pc, #536]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80032ca:	430a      	orrs	r2, r1
 80032cc:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	2380      	movs	r3, #128	; 0x80
 80032d4:	00db      	lsls	r3, r3, #3
 80032d6:	4013      	ands	r3, r2
 80032d8:	d009      	beq.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80032da:	4b82      	ldr	r3, [pc, #520]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80032dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032de:	4a86      	ldr	r2, [pc, #536]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 80032e0:	4013      	ands	r3, r2
 80032e2:	0019      	movs	r1, r3
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032e8:	4b7e      	ldr	r3, [pc, #504]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80032ea:	430a      	orrs	r2, r1
 80032ec:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	2220      	movs	r2, #32
 80032f4:	4013      	ands	r3, r2
 80032f6:	d009      	beq.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80032f8:	4b7a      	ldr	r3, [pc, #488]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80032fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032fc:	4a7f      	ldr	r2, [pc, #508]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80032fe:	4013      	ands	r3, r2
 8003300:	0019      	movs	r1, r3
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	699a      	ldr	r2, [r3, #24]
 8003306:	4b77      	ldr	r3, [pc, #476]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003308:	430a      	orrs	r2, r1
 800330a:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	2240      	movs	r2, #64	; 0x40
 8003312:	4013      	ands	r3, r2
 8003314:	d009      	beq.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003316:	4b73      	ldr	r3, [pc, #460]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003318:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800331a:	4a79      	ldr	r2, [pc, #484]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800331c:	4013      	ands	r3, r2
 800331e:	0019      	movs	r1, r3
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	69da      	ldr	r2, [r3, #28]
 8003324:	4b6f      	ldr	r3, [pc, #444]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003326:	430a      	orrs	r2, r1
 8003328:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	2380      	movs	r3, #128	; 0x80
 8003330:	01db      	lsls	r3, r3, #7
 8003332:	4013      	ands	r3, r2
 8003334:	d015      	beq.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003336:	4b6b      	ldr	r3, [pc, #428]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003338:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	0899      	lsrs	r1, r3, #2
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003342:	4b68      	ldr	r3, [pc, #416]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003344:	430a      	orrs	r2, r1
 8003346:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800334c:	2380      	movs	r3, #128	; 0x80
 800334e:	05db      	lsls	r3, r3, #23
 8003350:	429a      	cmp	r2, r3
 8003352:	d106      	bne.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003354:	4b63      	ldr	r3, [pc, #396]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003356:	68da      	ldr	r2, [r3, #12]
 8003358:	4b62      	ldr	r3, [pc, #392]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800335a:	2180      	movs	r1, #128	; 0x80
 800335c:	0249      	lsls	r1, r1, #9
 800335e:	430a      	orrs	r2, r1
 8003360:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	2380      	movs	r3, #128	; 0x80
 8003368:	031b      	lsls	r3, r3, #12
 800336a:	4013      	ands	r3, r2
 800336c:	d009      	beq.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800336e:	4b5d      	ldr	r3, [pc, #372]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003370:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003372:	2240      	movs	r2, #64	; 0x40
 8003374:	4393      	bics	r3, r2
 8003376:	0019      	movs	r1, r3
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800337c:	4b59      	ldr	r3, [pc, #356]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800337e:	430a      	orrs	r2, r1
 8003380:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	2380      	movs	r3, #128	; 0x80
 8003388:	039b      	lsls	r3, r3, #14
 800338a:	4013      	ands	r3, r2
 800338c:	d016      	beq.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800338e:	4b55      	ldr	r3, [pc, #340]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003390:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003392:	4a5c      	ldr	r2, [pc, #368]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8003394:	4013      	ands	r3, r2
 8003396:	0019      	movs	r1, r3
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800339c:	4b51      	ldr	r3, [pc, #324]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800339e:	430a      	orrs	r2, r1
 80033a0:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033a6:	2380      	movs	r3, #128	; 0x80
 80033a8:	03db      	lsls	r3, r3, #15
 80033aa:	429a      	cmp	r2, r3
 80033ac:	d106      	bne.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80033ae:	4b4d      	ldr	r3, [pc, #308]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80033b0:	68da      	ldr	r2, [r3, #12]
 80033b2:	4b4c      	ldr	r3, [pc, #304]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80033b4:	2180      	movs	r1, #128	; 0x80
 80033b6:	0449      	lsls	r1, r1, #17
 80033b8:	430a      	orrs	r2, r1
 80033ba:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	2380      	movs	r3, #128	; 0x80
 80033c2:	03db      	lsls	r3, r3, #15
 80033c4:	4013      	ands	r3, r2
 80033c6:	d016      	beq.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80033c8:	4b46      	ldr	r3, [pc, #280]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80033ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033cc:	4a4e      	ldr	r2, [pc, #312]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80033ce:	4013      	ands	r3, r2
 80033d0:	0019      	movs	r1, r3
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033d6:	4b43      	ldr	r3, [pc, #268]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80033d8:	430a      	orrs	r2, r1
 80033da:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033e0:	2380      	movs	r3, #128	; 0x80
 80033e2:	045b      	lsls	r3, r3, #17
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d106      	bne.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80033e8:	4b3e      	ldr	r3, [pc, #248]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80033ea:	68da      	ldr	r2, [r3, #12]
 80033ec:	4b3d      	ldr	r3, [pc, #244]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80033ee:	2180      	movs	r1, #128	; 0x80
 80033f0:	0449      	lsls	r1, r1, #17
 80033f2:	430a      	orrs	r2, r1
 80033f4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	2380      	movs	r3, #128	; 0x80
 80033fc:	011b      	lsls	r3, r3, #4
 80033fe:	4013      	ands	r3, r2
 8003400:	d014      	beq.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003402:	4b38      	ldr	r3, [pc, #224]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003404:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003406:	2203      	movs	r2, #3
 8003408:	4393      	bics	r3, r2
 800340a:	0019      	movs	r1, r3
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6a1a      	ldr	r2, [r3, #32]
 8003410:	4b34      	ldr	r3, [pc, #208]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003412:	430a      	orrs	r2, r1
 8003414:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6a1b      	ldr	r3, [r3, #32]
 800341a:	2b01      	cmp	r3, #1
 800341c:	d106      	bne.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800341e:	4b31      	ldr	r3, [pc, #196]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003420:	68da      	ldr	r2, [r3, #12]
 8003422:	4b30      	ldr	r3, [pc, #192]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003424:	2180      	movs	r1, #128	; 0x80
 8003426:	0249      	lsls	r1, r1, #9
 8003428:	430a      	orrs	r2, r1
 800342a:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681a      	ldr	r2, [r3, #0]
 8003430:	2380      	movs	r3, #128	; 0x80
 8003432:	019b      	lsls	r3, r3, #6
 8003434:	4013      	ands	r3, r2
 8003436:	d014      	beq.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8003438:	4b2a      	ldr	r3, [pc, #168]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800343a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800343c:	220c      	movs	r2, #12
 800343e:	4393      	bics	r3, r2
 8003440:	0019      	movs	r1, r3
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003446:	4b27      	ldr	r3, [pc, #156]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003448:	430a      	orrs	r2, r1
 800344a:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003450:	2b04      	cmp	r3, #4
 8003452:	d106      	bne.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003454:	4b23      	ldr	r3, [pc, #140]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003456:	68da      	ldr	r2, [r3, #12]
 8003458:	4b22      	ldr	r3, [pc, #136]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800345a:	2180      	movs	r1, #128	; 0x80
 800345c:	0249      	lsls	r1, r1, #9
 800345e:	430a      	orrs	r2, r1
 8003460:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	2380      	movs	r3, #128	; 0x80
 8003468:	045b      	lsls	r3, r3, #17
 800346a:	4013      	ands	r3, r2
 800346c:	d016      	beq.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800346e:	4b1d      	ldr	r3, [pc, #116]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003470:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003472:	4a22      	ldr	r2, [pc, #136]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003474:	4013      	ands	r3, r2
 8003476:	0019      	movs	r1, r3
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800347c:	4b19      	ldr	r3, [pc, #100]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800347e:	430a      	orrs	r2, r1
 8003480:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003486:	2380      	movs	r3, #128	; 0x80
 8003488:	019b      	lsls	r3, r3, #6
 800348a:	429a      	cmp	r2, r3
 800348c:	d106      	bne.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800348e:	4b15      	ldr	r3, [pc, #84]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003490:	68da      	ldr	r2, [r3, #12]
 8003492:	4b14      	ldr	r3, [pc, #80]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003494:	2180      	movs	r1, #128	; 0x80
 8003496:	0449      	lsls	r1, r1, #17
 8003498:	430a      	orrs	r2, r1
 800349a:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	2380      	movs	r3, #128	; 0x80
 80034a2:	049b      	lsls	r3, r3, #18
 80034a4:	4013      	ands	r3, r2
 80034a6:	d016      	beq.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80034a8:	4b0e      	ldr	r3, [pc, #56]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80034aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034ac:	4a10      	ldr	r2, [pc, #64]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80034ae:	4013      	ands	r3, r2
 80034b0:	0019      	movs	r1, r3
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80034b6:	4b0b      	ldr	r3, [pc, #44]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80034b8:	430a      	orrs	r2, r1
 80034ba:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80034c0:	2380      	movs	r3, #128	; 0x80
 80034c2:	005b      	lsls	r3, r3, #1
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d106      	bne.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80034c8:	4b06      	ldr	r3, [pc, #24]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80034ca:	68da      	ldr	r2, [r3, #12]
 80034cc:	4b05      	ldr	r3, [pc, #20]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80034ce:	2180      	movs	r1, #128	; 0x80
 80034d0:	0449      	lsls	r1, r1, #17
 80034d2:	430a      	orrs	r2, r1
 80034d4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80034d6:	2312      	movs	r3, #18
 80034d8:	18fb      	adds	r3, r7, r3
 80034da:	781b      	ldrb	r3, [r3, #0]
}
 80034dc:	0018      	movs	r0, r3
 80034de:	46bd      	mov	sp, r7
 80034e0:	b006      	add	sp, #24
 80034e2:	bd80      	pop	{r7, pc}
 80034e4:	40021000 	.word	0x40021000
 80034e8:	efffffff 	.word	0xefffffff
 80034ec:	fffff3ff 	.word	0xfffff3ff
 80034f0:	fffffcff 	.word	0xfffffcff
 80034f4:	fff3ffff 	.word	0xfff3ffff
 80034f8:	ffcfffff 	.word	0xffcfffff
 80034fc:	ffffcfff 	.word	0xffffcfff
 8003500:	ffff3fff 	.word	0xffff3fff
 8003504:	ffbfffff 	.word	0xffbfffff
 8003508:	feffffff 	.word	0xfeffffff

0800350c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800350c:	b5b0      	push	{r4, r5, r7, lr}
 800350e:	b084      	sub	sp, #16
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003514:	230f      	movs	r3, #15
 8003516:	18fb      	adds	r3, r7, r3
 8003518:	2201      	movs	r2, #1
 800351a:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d100      	bne.n	8003524 <HAL_RTC_Init+0x18>
 8003522:	e08c      	b.n	800363e <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2229      	movs	r2, #41	; 0x29
 8003528:	5c9b      	ldrb	r3, [r3, r2]
 800352a:	b2db      	uxtb	r3, r3
 800352c:	2b00      	cmp	r3, #0
 800352e:	d10b      	bne.n	8003548 <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2228      	movs	r2, #40	; 0x28
 8003534:	2100      	movs	r1, #0
 8003536:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2288      	movs	r2, #136	; 0x88
 800353c:	0212      	lsls	r2, r2, #8
 800353e:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	0018      	movs	r0, r3
 8003544:	f7fe f8b0 	bl	80016a8 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2229      	movs	r2, #41	; 0x29
 800354c:	2102      	movs	r1, #2
 800354e:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	68db      	ldr	r3, [r3, #12]
 8003556:	2210      	movs	r2, #16
 8003558:	4013      	ands	r3, r2
 800355a:	2b10      	cmp	r3, #16
 800355c:	d062      	beq.n	8003624 <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	22ca      	movs	r2, #202	; 0xca
 8003564:	625a      	str	r2, [r3, #36]	; 0x24
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	2253      	movs	r2, #83	; 0x53
 800356c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800356e:	250f      	movs	r5, #15
 8003570:	197c      	adds	r4, r7, r5
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	0018      	movs	r0, r3
 8003576:	f000 f891 	bl	800369c <RTC_EnterInitMode>
 800357a:	0003      	movs	r3, r0
 800357c:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 800357e:	0028      	movs	r0, r5
 8003580:	183b      	adds	r3, r7, r0
 8003582:	781b      	ldrb	r3, [r3, #0]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d12c      	bne.n	80035e2 <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	699a      	ldr	r2, [r3, #24]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	492e      	ldr	r1, [pc, #184]	; (800364c <HAL_RTC_Init+0x140>)
 8003594:	400a      	ands	r2, r1
 8003596:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	6999      	ldr	r1, [r3, #24]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	689a      	ldr	r2, [r3, #8]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	695b      	ldr	r3, [r3, #20]
 80035a6:	431a      	orrs	r2, r3
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	69db      	ldr	r3, [r3, #28]
 80035ac:	431a      	orrs	r2, r3
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	430a      	orrs	r2, r1
 80035b4:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	6912      	ldr	r2, [r2, #16]
 80035be:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	6919      	ldr	r1, [r3, #16]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	68db      	ldr	r3, [r3, #12]
 80035ca:	041a      	lsls	r2, r3, #16
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	430a      	orrs	r2, r1
 80035d2:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 80035d4:	183c      	adds	r4, r7, r0
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	0018      	movs	r0, r3
 80035da:	f000 f8a1 	bl	8003720 <RTC_ExitInitMode>
 80035de:	0003      	movs	r3, r0
 80035e0:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 80035e2:	230f      	movs	r3, #15
 80035e4:	18fb      	adds	r3, r7, r3
 80035e6:	781b      	ldrb	r3, [r3, #0]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d116      	bne.n	800361a <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	699a      	ldr	r2, [r3, #24]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	00d2      	lsls	r2, r2, #3
 80035f8:	08d2      	lsrs	r2, r2, #3
 80035fa:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	6999      	ldr	r1, [r3, #24]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6a1b      	ldr	r3, [r3, #32]
 800360a:	431a      	orrs	r2, r3
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	699b      	ldr	r3, [r3, #24]
 8003610:	431a      	orrs	r2, r3
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	430a      	orrs	r2, r1
 8003618:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	22ff      	movs	r2, #255	; 0xff
 8003620:	625a      	str	r2, [r3, #36]	; 0x24
 8003622:	e003      	b.n	800362c <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8003624:	230f      	movs	r3, #15
 8003626:	18fb      	adds	r3, r7, r3
 8003628:	2200      	movs	r2, #0
 800362a:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 800362c:	230f      	movs	r3, #15
 800362e:	18fb      	adds	r3, r7, r3
 8003630:	781b      	ldrb	r3, [r3, #0]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d103      	bne.n	800363e <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2229      	movs	r2, #41	; 0x29
 800363a:	2101      	movs	r1, #1
 800363c:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 800363e:	230f      	movs	r3, #15
 8003640:	18fb      	adds	r3, r7, r3
 8003642:	781b      	ldrb	r3, [r3, #0]
}
 8003644:	0018      	movs	r0, r3
 8003646:	46bd      	mov	sp, r7
 8003648:	b004      	add	sp, #16
 800364a:	bdb0      	pop	{r4, r5, r7, pc}
 800364c:	fb8fffbf 	.word	0xfb8fffbf

08003650 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b084      	sub	sp, #16
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a0e      	ldr	r2, [pc, #56]	; (8003698 <HAL_RTC_WaitForSynchro+0x48>)
 800365e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8003660:	f7fe fb10 	bl	8001c84 <HAL_GetTick>
 8003664:	0003      	movs	r3, r0
 8003666:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8003668:	e00a      	b.n	8003680 <HAL_RTC_WaitForSynchro+0x30>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800366a:	f7fe fb0b 	bl	8001c84 <HAL_GetTick>
 800366e:	0002      	movs	r2, r0
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	1ad2      	subs	r2, r2, r3
 8003674:	23fa      	movs	r3, #250	; 0xfa
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	429a      	cmp	r2, r3
 800367a:	d901      	bls.n	8003680 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800367c:	2303      	movs	r3, #3
 800367e:	e006      	b.n	800368e <HAL_RTC_WaitForSynchro+0x3e>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	68db      	ldr	r3, [r3, #12]
 8003686:	2220      	movs	r2, #32
 8003688:	4013      	ands	r3, r2
 800368a:	d0ee      	beq.n	800366a <HAL_RTC_WaitForSynchro+0x1a>
    }
  }

  return HAL_OK;
 800368c:	2300      	movs	r3, #0
}
 800368e:	0018      	movs	r0, r3
 8003690:	46bd      	mov	sp, r7
 8003692:	b004      	add	sp, #16
 8003694:	bd80      	pop	{r7, pc}
 8003696:	46c0      	nop			; (mov r8, r8)
 8003698:	0001005f 	.word	0x0001005f

0800369c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b084      	sub	sp, #16
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 80036a4:	230f      	movs	r3, #15
 80036a6:	18fb      	adds	r3, r7, r3
 80036a8:	2200      	movs	r2, #0
 80036aa:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	68db      	ldr	r3, [r3, #12]
 80036b2:	2240      	movs	r2, #64	; 0x40
 80036b4:	4013      	ands	r3, r2
 80036b6:	d12c      	bne.n	8003712 <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	68da      	ldr	r2, [r3, #12]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	2180      	movs	r1, #128	; 0x80
 80036c4:	430a      	orrs	r2, r1
 80036c6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80036c8:	f7fe fadc 	bl	8001c84 <HAL_GetTick>
 80036cc:	0003      	movs	r3, r0
 80036ce:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80036d0:	e014      	b.n	80036fc <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 80036d2:	f7fe fad7 	bl	8001c84 <HAL_GetTick>
 80036d6:	0002      	movs	r2, r0
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	1ad2      	subs	r2, r2, r3
 80036dc:	200f      	movs	r0, #15
 80036de:	183b      	adds	r3, r7, r0
 80036e0:	1839      	adds	r1, r7, r0
 80036e2:	7809      	ldrb	r1, [r1, #0]
 80036e4:	7019      	strb	r1, [r3, #0]
 80036e6:	23fa      	movs	r3, #250	; 0xfa
 80036e8:	009b      	lsls	r3, r3, #2
 80036ea:	429a      	cmp	r2, r3
 80036ec:	d906      	bls.n	80036fc <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 80036ee:	183b      	adds	r3, r7, r0
 80036f0:	2203      	movs	r2, #3
 80036f2:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2229      	movs	r2, #41	; 0x29
 80036f8:	2103      	movs	r1, #3
 80036fa:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	68db      	ldr	r3, [r3, #12]
 8003702:	2240      	movs	r2, #64	; 0x40
 8003704:	4013      	ands	r3, r2
 8003706:	d104      	bne.n	8003712 <RTC_EnterInitMode+0x76>
 8003708:	230f      	movs	r3, #15
 800370a:	18fb      	adds	r3, r7, r3
 800370c:	781b      	ldrb	r3, [r3, #0]
 800370e:	2b03      	cmp	r3, #3
 8003710:	d1df      	bne.n	80036d2 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8003712:	230f      	movs	r3, #15
 8003714:	18fb      	adds	r3, r7, r3
 8003716:	781b      	ldrb	r3, [r3, #0]
}
 8003718:	0018      	movs	r0, r3
 800371a:	46bd      	mov	sp, r7
 800371c:	b004      	add	sp, #16
 800371e:	bd80      	pop	{r7, pc}

08003720 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003720:	b590      	push	{r4, r7, lr}
 8003722:	b085      	sub	sp, #20
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003728:	240f      	movs	r4, #15
 800372a:	193b      	adds	r3, r7, r4
 800372c:	2200      	movs	r2, #0
 800372e:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8003730:	4b1c      	ldr	r3, [pc, #112]	; (80037a4 <RTC_ExitInitMode+0x84>)
 8003732:	68da      	ldr	r2, [r3, #12]
 8003734:	4b1b      	ldr	r3, [pc, #108]	; (80037a4 <RTC_ExitInitMode+0x84>)
 8003736:	2180      	movs	r1, #128	; 0x80
 8003738:	438a      	bics	r2, r1
 800373a:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800373c:	4b19      	ldr	r3, [pc, #100]	; (80037a4 <RTC_ExitInitMode+0x84>)
 800373e:	699b      	ldr	r3, [r3, #24]
 8003740:	2220      	movs	r2, #32
 8003742:	4013      	ands	r3, r2
 8003744:	d10d      	bne.n	8003762 <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	0018      	movs	r0, r3
 800374a:	f7ff ff81 	bl	8003650 <HAL_RTC_WaitForSynchro>
 800374e:	1e03      	subs	r3, r0, #0
 8003750:	d021      	beq.n	8003796 <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2229      	movs	r2, #41	; 0x29
 8003756:	2103      	movs	r1, #3
 8003758:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 800375a:	193b      	adds	r3, r7, r4
 800375c:	2203      	movs	r2, #3
 800375e:	701a      	strb	r2, [r3, #0]
 8003760:	e019      	b.n	8003796 <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003762:	4b10      	ldr	r3, [pc, #64]	; (80037a4 <RTC_ExitInitMode+0x84>)
 8003764:	699a      	ldr	r2, [r3, #24]
 8003766:	4b0f      	ldr	r3, [pc, #60]	; (80037a4 <RTC_ExitInitMode+0x84>)
 8003768:	2120      	movs	r1, #32
 800376a:	438a      	bics	r2, r1
 800376c:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	0018      	movs	r0, r3
 8003772:	f7ff ff6d 	bl	8003650 <HAL_RTC_WaitForSynchro>
 8003776:	1e03      	subs	r3, r0, #0
 8003778:	d007      	beq.n	800378a <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2229      	movs	r2, #41	; 0x29
 800377e:	2103      	movs	r1, #3
 8003780:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8003782:	230f      	movs	r3, #15
 8003784:	18fb      	adds	r3, r7, r3
 8003786:	2203      	movs	r2, #3
 8003788:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800378a:	4b06      	ldr	r3, [pc, #24]	; (80037a4 <RTC_ExitInitMode+0x84>)
 800378c:	699a      	ldr	r2, [r3, #24]
 800378e:	4b05      	ldr	r3, [pc, #20]	; (80037a4 <RTC_ExitInitMode+0x84>)
 8003790:	2120      	movs	r1, #32
 8003792:	430a      	orrs	r2, r1
 8003794:	619a      	str	r2, [r3, #24]
  }

  return status;
 8003796:	230f      	movs	r3, #15
 8003798:	18fb      	adds	r3, r7, r3
 800379a:	781b      	ldrb	r3, [r3, #0]
}
 800379c:	0018      	movs	r0, r3
 800379e:	46bd      	mov	sp, r7
 80037a0:	b005      	add	sp, #20
 80037a2:	bd90      	pop	{r4, r7, pc}
 80037a4:	40002800 	.word	0x40002800

080037a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b084      	sub	sp, #16
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d101      	bne.n	80037ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e0a8      	b.n	800390c <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d109      	bne.n	80037d6 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	685a      	ldr	r2, [r3, #4]
 80037c6:	2382      	movs	r3, #130	; 0x82
 80037c8:	005b      	lsls	r3, r3, #1
 80037ca:	429a      	cmp	r2, r3
 80037cc:	d009      	beq.n	80037e2 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2200      	movs	r2, #0
 80037d2:	61da      	str	r2, [r3, #28]
 80037d4:	e005      	b.n	80037e2 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2200      	movs	r2, #0
 80037da:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2200      	movs	r2, #0
 80037e6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	225d      	movs	r2, #93	; 0x5d
 80037ec:	5c9b      	ldrb	r3, [r3, r2]
 80037ee:	b2db      	uxtb	r3, r3
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d107      	bne.n	8003804 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	225c      	movs	r2, #92	; 0x5c
 80037f8:	2100      	movs	r1, #0
 80037fa:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	0018      	movs	r0, r3
 8003800:	f7fd ff90 	bl	8001724 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	225d      	movs	r2, #93	; 0x5d
 8003808:	2102      	movs	r1, #2
 800380a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	2140      	movs	r1, #64	; 0x40
 8003818:	438a      	bics	r2, r1
 800381a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	68da      	ldr	r2, [r3, #12]
 8003820:	23e0      	movs	r3, #224	; 0xe0
 8003822:	00db      	lsls	r3, r3, #3
 8003824:	429a      	cmp	r2, r3
 8003826:	d902      	bls.n	800382e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003828:	2300      	movs	r3, #0
 800382a:	60fb      	str	r3, [r7, #12]
 800382c:	e002      	b.n	8003834 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800382e:	2380      	movs	r3, #128	; 0x80
 8003830:	015b      	lsls	r3, r3, #5
 8003832:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	68da      	ldr	r2, [r3, #12]
 8003838:	23f0      	movs	r3, #240	; 0xf0
 800383a:	011b      	lsls	r3, r3, #4
 800383c:	429a      	cmp	r2, r3
 800383e:	d008      	beq.n	8003852 <HAL_SPI_Init+0xaa>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	68da      	ldr	r2, [r3, #12]
 8003844:	23e0      	movs	r3, #224	; 0xe0
 8003846:	00db      	lsls	r3, r3, #3
 8003848:	429a      	cmp	r2, r3
 800384a:	d002      	beq.n	8003852 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2200      	movs	r2, #0
 8003850:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	685a      	ldr	r2, [r3, #4]
 8003856:	2382      	movs	r3, #130	; 0x82
 8003858:	005b      	lsls	r3, r3, #1
 800385a:	401a      	ands	r2, r3
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6899      	ldr	r1, [r3, #8]
 8003860:	2384      	movs	r3, #132	; 0x84
 8003862:	021b      	lsls	r3, r3, #8
 8003864:	400b      	ands	r3, r1
 8003866:	431a      	orrs	r2, r3
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	691b      	ldr	r3, [r3, #16]
 800386c:	2102      	movs	r1, #2
 800386e:	400b      	ands	r3, r1
 8003870:	431a      	orrs	r2, r3
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	695b      	ldr	r3, [r3, #20]
 8003876:	2101      	movs	r1, #1
 8003878:	400b      	ands	r3, r1
 800387a:	431a      	orrs	r2, r3
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6999      	ldr	r1, [r3, #24]
 8003880:	2380      	movs	r3, #128	; 0x80
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	400b      	ands	r3, r1
 8003886:	431a      	orrs	r2, r3
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	69db      	ldr	r3, [r3, #28]
 800388c:	2138      	movs	r1, #56	; 0x38
 800388e:	400b      	ands	r3, r1
 8003890:	431a      	orrs	r2, r3
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6a1b      	ldr	r3, [r3, #32]
 8003896:	2180      	movs	r1, #128	; 0x80
 8003898:	400b      	ands	r3, r1
 800389a:	431a      	orrs	r2, r3
 800389c:	0011      	movs	r1, r2
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80038a2:	2380      	movs	r3, #128	; 0x80
 80038a4:	019b      	lsls	r3, r3, #6
 80038a6:	401a      	ands	r2, r3
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	430a      	orrs	r2, r1
 80038ae:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	699b      	ldr	r3, [r3, #24]
 80038b4:	0c1b      	lsrs	r3, r3, #16
 80038b6:	2204      	movs	r2, #4
 80038b8:	401a      	ands	r2, r3
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038be:	2110      	movs	r1, #16
 80038c0:	400b      	ands	r3, r1
 80038c2:	431a      	orrs	r2, r3
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038c8:	2108      	movs	r1, #8
 80038ca:	400b      	ands	r3, r1
 80038cc:	431a      	orrs	r2, r3
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	68d9      	ldr	r1, [r3, #12]
 80038d2:	23f0      	movs	r3, #240	; 0xf0
 80038d4:	011b      	lsls	r3, r3, #4
 80038d6:	400b      	ands	r3, r1
 80038d8:	431a      	orrs	r2, r3
 80038da:	0011      	movs	r1, r2
 80038dc:	68fa      	ldr	r2, [r7, #12]
 80038de:	2380      	movs	r3, #128	; 0x80
 80038e0:	015b      	lsls	r3, r3, #5
 80038e2:	401a      	ands	r2, r3
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	430a      	orrs	r2, r1
 80038ea:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	69da      	ldr	r2, [r3, #28]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4907      	ldr	r1, [pc, #28]	; (8003914 <HAL_SPI_Init+0x16c>)
 80038f8:	400a      	ands	r2, r1
 80038fa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2200      	movs	r2, #0
 8003900:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	225d      	movs	r2, #93	; 0x5d
 8003906:	2101      	movs	r1, #1
 8003908:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800390a:	2300      	movs	r3, #0
}
 800390c:	0018      	movs	r0, r3
 800390e:	46bd      	mov	sp, r7
 8003910:	b004      	add	sp, #16
 8003912:	bd80      	pop	{r7, pc}
 8003914:	fffff7ff 	.word	0xfffff7ff

08003918 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b088      	sub	sp, #32
 800391c:	af00      	add	r7, sp, #0
 800391e:	60f8      	str	r0, [r7, #12]
 8003920:	60b9      	str	r1, [r7, #8]
 8003922:	603b      	str	r3, [r7, #0]
 8003924:	1dbb      	adds	r3, r7, #6
 8003926:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003928:	231f      	movs	r3, #31
 800392a:	18fb      	adds	r3, r7, r3
 800392c:	2200      	movs	r2, #0
 800392e:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	225c      	movs	r2, #92	; 0x5c
 8003934:	5c9b      	ldrb	r3, [r3, r2]
 8003936:	2b01      	cmp	r3, #1
 8003938:	d101      	bne.n	800393e <HAL_SPI_Transmit+0x26>
 800393a:	2302      	movs	r3, #2
 800393c:	e147      	b.n	8003bce <HAL_SPI_Transmit+0x2b6>
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	225c      	movs	r2, #92	; 0x5c
 8003942:	2101      	movs	r1, #1
 8003944:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003946:	f7fe f99d 	bl	8001c84 <HAL_GetTick>
 800394a:	0003      	movs	r3, r0
 800394c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800394e:	2316      	movs	r3, #22
 8003950:	18fb      	adds	r3, r7, r3
 8003952:	1dba      	adds	r2, r7, #6
 8003954:	8812      	ldrh	r2, [r2, #0]
 8003956:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	225d      	movs	r2, #93	; 0x5d
 800395c:	5c9b      	ldrb	r3, [r3, r2]
 800395e:	b2db      	uxtb	r3, r3
 8003960:	2b01      	cmp	r3, #1
 8003962:	d004      	beq.n	800396e <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8003964:	231f      	movs	r3, #31
 8003966:	18fb      	adds	r3, r7, r3
 8003968:	2202      	movs	r2, #2
 800396a:	701a      	strb	r2, [r3, #0]
    goto error;
 800396c:	e128      	b.n	8003bc0 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d003      	beq.n	800397c <HAL_SPI_Transmit+0x64>
 8003974:	1dbb      	adds	r3, r7, #6
 8003976:	881b      	ldrh	r3, [r3, #0]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d104      	bne.n	8003986 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 800397c:	231f      	movs	r3, #31
 800397e:	18fb      	adds	r3, r7, r3
 8003980:	2201      	movs	r2, #1
 8003982:	701a      	strb	r2, [r3, #0]
    goto error;
 8003984:	e11c      	b.n	8003bc0 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	225d      	movs	r2, #93	; 0x5d
 800398a:	2103      	movs	r1, #3
 800398c:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2200      	movs	r2, #0
 8003992:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	68ba      	ldr	r2, [r7, #8]
 8003998:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	1dba      	adds	r2, r7, #6
 800399e:	8812      	ldrh	r2, [r2, #0]
 80039a0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	1dba      	adds	r2, r7, #6
 80039a6:	8812      	ldrh	r2, [r2, #0]
 80039a8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2200      	movs	r2, #0
 80039ae:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2244      	movs	r2, #68	; 0x44
 80039b4:	2100      	movs	r1, #0
 80039b6:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2246      	movs	r2, #70	; 0x46
 80039bc:	2100      	movs	r1, #0
 80039be:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2200      	movs	r2, #0
 80039c4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2200      	movs	r2, #0
 80039ca:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	689a      	ldr	r2, [r3, #8]
 80039d0:	2380      	movs	r3, #128	; 0x80
 80039d2:	021b      	lsls	r3, r3, #8
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d110      	bne.n	80039fa <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	2140      	movs	r1, #64	; 0x40
 80039e4:	438a      	bics	r2, r1
 80039e6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	2180      	movs	r1, #128	; 0x80
 80039f4:	01c9      	lsls	r1, r1, #7
 80039f6:	430a      	orrs	r2, r1
 80039f8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	2240      	movs	r2, #64	; 0x40
 8003a02:	4013      	ands	r3, r2
 8003a04:	2b40      	cmp	r3, #64	; 0x40
 8003a06:	d007      	beq.n	8003a18 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	2140      	movs	r1, #64	; 0x40
 8003a14:	430a      	orrs	r2, r1
 8003a16:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	68da      	ldr	r2, [r3, #12]
 8003a1c:	23e0      	movs	r3, #224	; 0xe0
 8003a1e:	00db      	lsls	r3, r3, #3
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d952      	bls.n	8003aca <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d004      	beq.n	8003a36 <HAL_SPI_Transmit+0x11e>
 8003a2c:	2316      	movs	r3, #22
 8003a2e:	18fb      	adds	r3, r7, r3
 8003a30:	881b      	ldrh	r3, [r3, #0]
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d143      	bne.n	8003abe <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a3a:	881a      	ldrh	r2, [r3, #0]
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a46:	1c9a      	adds	r2, r3, #2
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a50:	b29b      	uxth	r3, r3
 8003a52:	3b01      	subs	r3, #1
 8003a54:	b29a      	uxth	r2, r3
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003a5a:	e030      	b.n	8003abe <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	2202      	movs	r2, #2
 8003a64:	4013      	ands	r3, r2
 8003a66:	2b02      	cmp	r3, #2
 8003a68:	d112      	bne.n	8003a90 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a6e:	881a      	ldrh	r2, [r3, #0]
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a7a:	1c9a      	adds	r2, r3, #2
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a84:	b29b      	uxth	r3, r3
 8003a86:	3b01      	subs	r3, #1
 8003a88:	b29a      	uxth	r2, r3
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003a8e:	e016      	b.n	8003abe <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a90:	f7fe f8f8 	bl	8001c84 <HAL_GetTick>
 8003a94:	0002      	movs	r2, r0
 8003a96:	69bb      	ldr	r3, [r7, #24]
 8003a98:	1ad3      	subs	r3, r2, r3
 8003a9a:	683a      	ldr	r2, [r7, #0]
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d802      	bhi.n	8003aa6 <HAL_SPI_Transmit+0x18e>
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	3301      	adds	r3, #1
 8003aa4:	d102      	bne.n	8003aac <HAL_SPI_Transmit+0x194>
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d108      	bne.n	8003abe <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8003aac:	231f      	movs	r3, #31
 8003aae:	18fb      	adds	r3, r7, r3
 8003ab0:	2203      	movs	r2, #3
 8003ab2:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	225d      	movs	r2, #93	; 0x5d
 8003ab8:	2101      	movs	r1, #1
 8003aba:	5499      	strb	r1, [r3, r2]
          goto error;
 8003abc:	e080      	b.n	8003bc0 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ac2:	b29b      	uxth	r3, r3
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d1c9      	bne.n	8003a5c <HAL_SPI_Transmit+0x144>
 8003ac8:	e053      	b.n	8003b72 <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d004      	beq.n	8003adc <HAL_SPI_Transmit+0x1c4>
 8003ad2:	2316      	movs	r3, #22
 8003ad4:	18fb      	adds	r3, r7, r3
 8003ad6:	881b      	ldrh	r3, [r3, #0]
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	d145      	bne.n	8003b68 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	330c      	adds	r3, #12
 8003ae6:	7812      	ldrb	r2, [r2, #0]
 8003ae8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aee:	1c5a      	adds	r2, r3, #1
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003af8:	b29b      	uxth	r3, r3
 8003afa:	3b01      	subs	r3, #1
 8003afc:	b29a      	uxth	r2, r3
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8003b02:	e031      	b.n	8003b68 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	2202      	movs	r2, #2
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	2b02      	cmp	r3, #2
 8003b10:	d113      	bne.n	8003b3a <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	330c      	adds	r3, #12
 8003b1c:	7812      	ldrb	r2, [r2, #0]
 8003b1e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b24:	1c5a      	adds	r2, r3, #1
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b2e:	b29b      	uxth	r3, r3
 8003b30:	3b01      	subs	r3, #1
 8003b32:	b29a      	uxth	r2, r3
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003b38:	e016      	b.n	8003b68 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b3a:	f7fe f8a3 	bl	8001c84 <HAL_GetTick>
 8003b3e:	0002      	movs	r2, r0
 8003b40:	69bb      	ldr	r3, [r7, #24]
 8003b42:	1ad3      	subs	r3, r2, r3
 8003b44:	683a      	ldr	r2, [r7, #0]
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d802      	bhi.n	8003b50 <HAL_SPI_Transmit+0x238>
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	3301      	adds	r3, #1
 8003b4e:	d102      	bne.n	8003b56 <HAL_SPI_Transmit+0x23e>
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d108      	bne.n	8003b68 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 8003b56:	231f      	movs	r3, #31
 8003b58:	18fb      	adds	r3, r7, r3
 8003b5a:	2203      	movs	r2, #3
 8003b5c:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	225d      	movs	r2, #93	; 0x5d
 8003b62:	2101      	movs	r1, #1
 8003b64:	5499      	strb	r1, [r3, r2]
          goto error;
 8003b66:	e02b      	b.n	8003bc0 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b6c:	b29b      	uxth	r3, r3
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d1c8      	bne.n	8003b04 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003b72:	69ba      	ldr	r2, [r7, #24]
 8003b74:	6839      	ldr	r1, [r7, #0]
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	0018      	movs	r0, r3
 8003b7a:	f000 fcef 	bl	800455c <SPI_EndRxTxTransaction>
 8003b7e:	1e03      	subs	r3, r0, #0
 8003b80:	d002      	beq.n	8003b88 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2220      	movs	r2, #32
 8003b86:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d10a      	bne.n	8003ba6 <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003b90:	2300      	movs	r3, #0
 8003b92:	613b      	str	r3, [r7, #16]
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	68db      	ldr	r3, [r3, #12]
 8003b9a:	613b      	str	r3, [r7, #16]
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	613b      	str	r3, [r7, #16]
 8003ba4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d004      	beq.n	8003bb8 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 8003bae:	231f      	movs	r3, #31
 8003bb0:	18fb      	adds	r3, r7, r3
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	701a      	strb	r2, [r3, #0]
 8003bb6:	e003      	b.n	8003bc0 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	225d      	movs	r2, #93	; 0x5d
 8003bbc:	2101      	movs	r1, #1
 8003bbe:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	225c      	movs	r2, #92	; 0x5c
 8003bc4:	2100      	movs	r1, #0
 8003bc6:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003bc8:	231f      	movs	r3, #31
 8003bca:	18fb      	adds	r3, r7, r3
 8003bcc:	781b      	ldrb	r3, [r3, #0]
}
 8003bce:	0018      	movs	r0, r3
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	b008      	add	sp, #32
 8003bd4:	bd80      	pop	{r7, pc}
	...

08003bd8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bd8:	b590      	push	{r4, r7, lr}
 8003bda:	b089      	sub	sp, #36	; 0x24
 8003bdc:	af02      	add	r7, sp, #8
 8003bde:	60f8      	str	r0, [r7, #12]
 8003be0:	60b9      	str	r1, [r7, #8]
 8003be2:	603b      	str	r3, [r7, #0]
 8003be4:	1dbb      	adds	r3, r7, #6
 8003be6:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003be8:	2117      	movs	r1, #23
 8003bea:	187b      	adds	r3, r7, r1
 8003bec:	2200      	movs	r2, #0
 8003bee:	701a      	strb	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	225d      	movs	r2, #93	; 0x5d
 8003bf4:	5c9b      	ldrb	r3, [r3, r2]
 8003bf6:	b2db      	uxtb	r3, r3
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d003      	beq.n	8003c04 <HAL_SPI_Receive+0x2c>
  {
    errorcode = HAL_BUSY;
 8003bfc:	187b      	adds	r3, r7, r1
 8003bfe:	2202      	movs	r2, #2
 8003c00:	701a      	strb	r2, [r3, #0]
    goto error;
 8003c02:	e12b      	b.n	8003e5c <HAL_SPI_Receive+0x284>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	685a      	ldr	r2, [r3, #4]
 8003c08:	2382      	movs	r3, #130	; 0x82
 8003c0a:	005b      	lsls	r3, r3, #1
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	d113      	bne.n	8003c38 <HAL_SPI_Receive+0x60>
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d10f      	bne.n	8003c38 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	225d      	movs	r2, #93	; 0x5d
 8003c1c:	2104      	movs	r1, #4
 8003c1e:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003c20:	1dbb      	adds	r3, r7, #6
 8003c22:	881c      	ldrh	r4, [r3, #0]
 8003c24:	68ba      	ldr	r2, [r7, #8]
 8003c26:	68b9      	ldr	r1, [r7, #8]
 8003c28:	68f8      	ldr	r0, [r7, #12]
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	9300      	str	r3, [sp, #0]
 8003c2e:	0023      	movs	r3, r4
 8003c30:	f000 f924 	bl	8003e7c <HAL_SPI_TransmitReceive>
 8003c34:	0003      	movs	r3, r0
 8003c36:	e118      	b.n	8003e6a <HAL_SPI_Receive+0x292>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	225c      	movs	r2, #92	; 0x5c
 8003c3c:	5c9b      	ldrb	r3, [r3, r2]
 8003c3e:	2b01      	cmp	r3, #1
 8003c40:	d101      	bne.n	8003c46 <HAL_SPI_Receive+0x6e>
 8003c42:	2302      	movs	r3, #2
 8003c44:	e111      	b.n	8003e6a <HAL_SPI_Receive+0x292>
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	225c      	movs	r2, #92	; 0x5c
 8003c4a:	2101      	movs	r1, #1
 8003c4c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c4e:	f7fe f819 	bl	8001c84 <HAL_GetTick>
 8003c52:	0003      	movs	r3, r0
 8003c54:	613b      	str	r3, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d003      	beq.n	8003c64 <HAL_SPI_Receive+0x8c>
 8003c5c:	1dbb      	adds	r3, r7, #6
 8003c5e:	881b      	ldrh	r3, [r3, #0]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d104      	bne.n	8003c6e <HAL_SPI_Receive+0x96>
  {
    errorcode = HAL_ERROR;
 8003c64:	2317      	movs	r3, #23
 8003c66:	18fb      	adds	r3, r7, r3
 8003c68:	2201      	movs	r2, #1
 8003c6a:	701a      	strb	r2, [r3, #0]
    goto error;
 8003c6c:	e0f6      	b.n	8003e5c <HAL_SPI_Receive+0x284>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	225d      	movs	r2, #93	; 0x5d
 8003c72:	2104      	movs	r1, #4
 8003c74:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	68ba      	ldr	r2, [r7, #8]
 8003c80:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	1dba      	adds	r2, r7, #6
 8003c86:	2144      	movs	r1, #68	; 0x44
 8003c88:	8812      	ldrh	r2, [r2, #0]
 8003c8a:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	1dba      	adds	r2, r7, #6
 8003c90:	2146      	movs	r1, #70	; 0x46
 8003c92:	8812      	ldrh	r2, [r2, #0]
 8003c94:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2200      	movs	r2, #0
 8003cac:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	68da      	ldr	r2, [r3, #12]
 8003cb8:	23e0      	movs	r3, #224	; 0xe0
 8003cba:	00db      	lsls	r3, r3, #3
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	d908      	bls.n	8003cd2 <HAL_SPI_Receive+0xfa>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	685a      	ldr	r2, [r3, #4]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	496a      	ldr	r1, [pc, #424]	; (8003e74 <HAL_SPI_Receive+0x29c>)
 8003ccc:	400a      	ands	r2, r1
 8003cce:	605a      	str	r2, [r3, #4]
 8003cd0:	e008      	b.n	8003ce4 <HAL_SPI_Receive+0x10c>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	685a      	ldr	r2, [r3, #4]
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	2180      	movs	r1, #128	; 0x80
 8003cde:	0149      	lsls	r1, r1, #5
 8003ce0:	430a      	orrs	r2, r1
 8003ce2:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	689a      	ldr	r2, [r3, #8]
 8003ce8:	2380      	movs	r3, #128	; 0x80
 8003cea:	021b      	lsls	r3, r3, #8
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d10f      	bne.n	8003d10 <HAL_SPI_Receive+0x138>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	2140      	movs	r1, #64	; 0x40
 8003cfc:	438a      	bics	r2, r1
 8003cfe:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	495b      	ldr	r1, [pc, #364]	; (8003e78 <HAL_SPI_Receive+0x2a0>)
 8003d0c:	400a      	ands	r2, r1
 8003d0e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	2240      	movs	r2, #64	; 0x40
 8003d18:	4013      	ands	r3, r2
 8003d1a:	2b40      	cmp	r3, #64	; 0x40
 8003d1c:	d007      	beq.n	8003d2e <HAL_SPI_Receive+0x156>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	2140      	movs	r1, #64	; 0x40
 8003d2a:	430a      	orrs	r2, r1
 8003d2c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	68da      	ldr	r2, [r3, #12]
 8003d32:	23e0      	movs	r3, #224	; 0xe0
 8003d34:	00db      	lsls	r3, r3, #3
 8003d36:	429a      	cmp	r2, r3
 8003d38:	d900      	bls.n	8003d3c <HAL_SPI_Receive+0x164>
 8003d3a:	e071      	b.n	8003e20 <HAL_SPI_Receive+0x248>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003d3c:	e035      	b.n	8003daa <HAL_SPI_Receive+0x1d2>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	2201      	movs	r2, #1
 8003d46:	4013      	ands	r3, r2
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d117      	bne.n	8003d7c <HAL_SPI_Receive+0x1a4>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	330c      	adds	r3, #12
 8003d52:	001a      	movs	r2, r3
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d58:	7812      	ldrb	r2, [r2, #0]
 8003d5a:	b2d2      	uxtb	r2, r2
 8003d5c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d62:	1c5a      	adds	r2, r3, #1
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	2246      	movs	r2, #70	; 0x46
 8003d6c:	5a9b      	ldrh	r3, [r3, r2]
 8003d6e:	b29b      	uxth	r3, r3
 8003d70:	3b01      	subs	r3, #1
 8003d72:	b299      	uxth	r1, r3
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2246      	movs	r2, #70	; 0x46
 8003d78:	5299      	strh	r1, [r3, r2]
 8003d7a:	e016      	b.n	8003daa <HAL_SPI_Receive+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d7c:	f7fd ff82 	bl	8001c84 <HAL_GetTick>
 8003d80:	0002      	movs	r2, r0
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	1ad3      	subs	r3, r2, r3
 8003d86:	683a      	ldr	r2, [r7, #0]
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d802      	bhi.n	8003d92 <HAL_SPI_Receive+0x1ba>
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	3301      	adds	r3, #1
 8003d90:	d102      	bne.n	8003d98 <HAL_SPI_Receive+0x1c0>
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d108      	bne.n	8003daa <HAL_SPI_Receive+0x1d2>
        {
          errorcode = HAL_TIMEOUT;
 8003d98:	2317      	movs	r3, #23
 8003d9a:	18fb      	adds	r3, r7, r3
 8003d9c:	2203      	movs	r2, #3
 8003d9e:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	225d      	movs	r2, #93	; 0x5d
 8003da4:	2101      	movs	r1, #1
 8003da6:	5499      	strb	r1, [r3, r2]
          goto error;
 8003da8:	e058      	b.n	8003e5c <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2246      	movs	r2, #70	; 0x46
 8003dae:	5a9b      	ldrh	r3, [r3, r2]
 8003db0:	b29b      	uxth	r3, r3
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d1c3      	bne.n	8003d3e <HAL_SPI_Receive+0x166>
 8003db6:	e039      	b.n	8003e2c <HAL_SPI_Receive+0x254>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d115      	bne.n	8003df2 <HAL_SPI_Receive+0x21a>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	68da      	ldr	r2, [r3, #12]
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd0:	b292      	uxth	r2, r2
 8003dd2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd8:	1c9a      	adds	r2, r3, #2
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2246      	movs	r2, #70	; 0x46
 8003de2:	5a9b      	ldrh	r3, [r3, r2]
 8003de4:	b29b      	uxth	r3, r3
 8003de6:	3b01      	subs	r3, #1
 8003de8:	b299      	uxth	r1, r3
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2246      	movs	r2, #70	; 0x46
 8003dee:	5299      	strh	r1, [r3, r2]
 8003df0:	e016      	b.n	8003e20 <HAL_SPI_Receive+0x248>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003df2:	f7fd ff47 	bl	8001c84 <HAL_GetTick>
 8003df6:	0002      	movs	r2, r0
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	1ad3      	subs	r3, r2, r3
 8003dfc:	683a      	ldr	r2, [r7, #0]
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d802      	bhi.n	8003e08 <HAL_SPI_Receive+0x230>
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	3301      	adds	r3, #1
 8003e06:	d102      	bne.n	8003e0e <HAL_SPI_Receive+0x236>
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d108      	bne.n	8003e20 <HAL_SPI_Receive+0x248>
        {
          errorcode = HAL_TIMEOUT;
 8003e0e:	2317      	movs	r3, #23
 8003e10:	18fb      	adds	r3, r7, r3
 8003e12:	2203      	movs	r2, #3
 8003e14:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	225d      	movs	r2, #93	; 0x5d
 8003e1a:	2101      	movs	r1, #1
 8003e1c:	5499      	strb	r1, [r3, r2]
          goto error;
 8003e1e:	e01d      	b.n	8003e5c <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2246      	movs	r2, #70	; 0x46
 8003e24:	5a9b      	ldrh	r3, [r3, r2]
 8003e26:	b29b      	uxth	r3, r3
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d1c5      	bne.n	8003db8 <HAL_SPI_Receive+0x1e0>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003e2c:	693a      	ldr	r2, [r7, #16]
 8003e2e:	6839      	ldr	r1, [r7, #0]
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	0018      	movs	r0, r3
 8003e34:	f000 fb34 	bl	80044a0 <SPI_EndRxTransaction>
 8003e38:	1e03      	subs	r3, r0, #0
 8003e3a:	d002      	beq.n	8003e42 <HAL_SPI_Receive+0x26a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2220      	movs	r2, #32
 8003e40:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d004      	beq.n	8003e54 <HAL_SPI_Receive+0x27c>
  {
    errorcode = HAL_ERROR;
 8003e4a:	2317      	movs	r3, #23
 8003e4c:	18fb      	adds	r3, r7, r3
 8003e4e:	2201      	movs	r2, #1
 8003e50:	701a      	strb	r2, [r3, #0]
 8003e52:	e003      	b.n	8003e5c <HAL_SPI_Receive+0x284>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	225d      	movs	r2, #93	; 0x5d
 8003e58:	2101      	movs	r1, #1
 8003e5a:	5499      	strb	r1, [r3, r2]
  }

error :
  __HAL_UNLOCK(hspi);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	225c      	movs	r2, #92	; 0x5c
 8003e60:	2100      	movs	r1, #0
 8003e62:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003e64:	2317      	movs	r3, #23
 8003e66:	18fb      	adds	r3, r7, r3
 8003e68:	781b      	ldrb	r3, [r3, #0]
}
 8003e6a:	0018      	movs	r0, r3
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	b007      	add	sp, #28
 8003e70:	bd90      	pop	{r4, r7, pc}
 8003e72:	46c0      	nop			; (mov r8, r8)
 8003e74:	ffffefff 	.word	0xffffefff
 8003e78:	ffffbfff 	.word	0xffffbfff

08003e7c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b08a      	sub	sp, #40	; 0x28
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	60f8      	str	r0, [r7, #12]
 8003e84:	60b9      	str	r1, [r7, #8]
 8003e86:	607a      	str	r2, [r7, #4]
 8003e88:	001a      	movs	r2, r3
 8003e8a:	1cbb      	adds	r3, r7, #2
 8003e8c:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003e92:	2323      	movs	r3, #35	; 0x23
 8003e94:	18fb      	adds	r3, r7, r3
 8003e96:	2200      	movs	r2, #0
 8003e98:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	225c      	movs	r2, #92	; 0x5c
 8003e9e:	5c9b      	ldrb	r3, [r3, r2]
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d101      	bne.n	8003ea8 <HAL_SPI_TransmitReceive+0x2c>
 8003ea4:	2302      	movs	r3, #2
 8003ea6:	e1c4      	b.n	8004232 <HAL_SPI_TransmitReceive+0x3b6>
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	225c      	movs	r2, #92	; 0x5c
 8003eac:	2101      	movs	r1, #1
 8003eae:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003eb0:	f7fd fee8 	bl	8001c84 <HAL_GetTick>
 8003eb4:	0003      	movs	r3, r0
 8003eb6:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003eb8:	201b      	movs	r0, #27
 8003eba:	183b      	adds	r3, r7, r0
 8003ebc:	68fa      	ldr	r2, [r7, #12]
 8003ebe:	215d      	movs	r1, #93	; 0x5d
 8003ec0:	5c52      	ldrb	r2, [r2, r1]
 8003ec2:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003eca:	2312      	movs	r3, #18
 8003ecc:	18fb      	adds	r3, r7, r3
 8003ece:	1cba      	adds	r2, r7, #2
 8003ed0:	8812      	ldrh	r2, [r2, #0]
 8003ed2:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003ed4:	183b      	adds	r3, r7, r0
 8003ed6:	781b      	ldrb	r3, [r3, #0]
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d011      	beq.n	8003f00 <HAL_SPI_TransmitReceive+0x84>
 8003edc:	697a      	ldr	r2, [r7, #20]
 8003ede:	2382      	movs	r3, #130	; 0x82
 8003ee0:	005b      	lsls	r3, r3, #1
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	d107      	bne.n	8003ef6 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d103      	bne.n	8003ef6 <HAL_SPI_TransmitReceive+0x7a>
 8003eee:	183b      	adds	r3, r7, r0
 8003ef0:	781b      	ldrb	r3, [r3, #0]
 8003ef2:	2b04      	cmp	r3, #4
 8003ef4:	d004      	beq.n	8003f00 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8003ef6:	2323      	movs	r3, #35	; 0x23
 8003ef8:	18fb      	adds	r3, r7, r3
 8003efa:	2202      	movs	r2, #2
 8003efc:	701a      	strb	r2, [r3, #0]
    goto error;
 8003efe:	e191      	b.n	8004224 <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d006      	beq.n	8003f14 <HAL_SPI_TransmitReceive+0x98>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d003      	beq.n	8003f14 <HAL_SPI_TransmitReceive+0x98>
 8003f0c:	1cbb      	adds	r3, r7, #2
 8003f0e:	881b      	ldrh	r3, [r3, #0]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d104      	bne.n	8003f1e <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8003f14:	2323      	movs	r3, #35	; 0x23
 8003f16:	18fb      	adds	r3, r7, r3
 8003f18:	2201      	movs	r2, #1
 8003f1a:	701a      	strb	r2, [r3, #0]
    goto error;
 8003f1c:	e182      	b.n	8004224 <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	225d      	movs	r2, #93	; 0x5d
 8003f22:	5c9b      	ldrb	r3, [r3, r2]
 8003f24:	b2db      	uxtb	r3, r3
 8003f26:	2b04      	cmp	r3, #4
 8003f28:	d003      	beq.n	8003f32 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	225d      	movs	r2, #93	; 0x5d
 8003f2e:	2105      	movs	r1, #5
 8003f30:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2200      	movs	r2, #0
 8003f36:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	687a      	ldr	r2, [r7, #4]
 8003f3c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	1cba      	adds	r2, r7, #2
 8003f42:	2146      	movs	r1, #70	; 0x46
 8003f44:	8812      	ldrh	r2, [r2, #0]
 8003f46:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	1cba      	adds	r2, r7, #2
 8003f4c:	2144      	movs	r1, #68	; 0x44
 8003f4e:	8812      	ldrh	r2, [r2, #0]
 8003f50:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	68ba      	ldr	r2, [r7, #8]
 8003f56:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	1cba      	adds	r2, r7, #2
 8003f5c:	8812      	ldrh	r2, [r2, #0]
 8003f5e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	1cba      	adds	r2, r7, #2
 8003f64:	8812      	ldrh	r2, [r2, #0]
 8003f66:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	2200      	movs	r2, #0
 8003f72:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	68da      	ldr	r2, [r3, #12]
 8003f78:	23e0      	movs	r3, #224	; 0xe0
 8003f7a:	00db      	lsls	r3, r3, #3
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d908      	bls.n	8003f92 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	685a      	ldr	r2, [r3, #4]
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	49ac      	ldr	r1, [pc, #688]	; (800423c <HAL_SPI_TransmitReceive+0x3c0>)
 8003f8c:	400a      	ands	r2, r1
 8003f8e:	605a      	str	r2, [r3, #4]
 8003f90:	e008      	b.n	8003fa4 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	685a      	ldr	r2, [r3, #4]
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	2180      	movs	r1, #128	; 0x80
 8003f9e:	0149      	lsls	r1, r1, #5
 8003fa0:	430a      	orrs	r2, r1
 8003fa2:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	2240      	movs	r2, #64	; 0x40
 8003fac:	4013      	ands	r3, r2
 8003fae:	2b40      	cmp	r3, #64	; 0x40
 8003fb0:	d007      	beq.n	8003fc2 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	2140      	movs	r1, #64	; 0x40
 8003fbe:	430a      	orrs	r2, r1
 8003fc0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	68da      	ldr	r2, [r3, #12]
 8003fc6:	23e0      	movs	r3, #224	; 0xe0
 8003fc8:	00db      	lsls	r3, r3, #3
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	d800      	bhi.n	8003fd0 <HAL_SPI_TransmitReceive+0x154>
 8003fce:	e083      	b.n	80040d8 <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d005      	beq.n	8003fe4 <HAL_SPI_TransmitReceive+0x168>
 8003fd8:	2312      	movs	r3, #18
 8003fda:	18fb      	adds	r3, r7, r3
 8003fdc:	881b      	ldrh	r3, [r3, #0]
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d000      	beq.n	8003fe4 <HAL_SPI_TransmitReceive+0x168>
 8003fe2:	e06d      	b.n	80040c0 <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fe8:	881a      	ldrh	r2, [r3, #0]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ff4:	1c9a      	adds	r2, r3, #2
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ffe:	b29b      	uxth	r3, r3
 8004000:	3b01      	subs	r3, #1
 8004002:	b29a      	uxth	r2, r3
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004008:	e05a      	b.n	80040c0 <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	2202      	movs	r2, #2
 8004012:	4013      	ands	r3, r2
 8004014:	2b02      	cmp	r3, #2
 8004016:	d11b      	bne.n	8004050 <HAL_SPI_TransmitReceive+0x1d4>
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800401c:	b29b      	uxth	r3, r3
 800401e:	2b00      	cmp	r3, #0
 8004020:	d016      	beq.n	8004050 <HAL_SPI_TransmitReceive+0x1d4>
 8004022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004024:	2b01      	cmp	r3, #1
 8004026:	d113      	bne.n	8004050 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800402c:	881a      	ldrh	r2, [r3, #0]
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004038:	1c9a      	adds	r2, r3, #2
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004042:	b29b      	uxth	r3, r3
 8004044:	3b01      	subs	r3, #1
 8004046:	b29a      	uxth	r2, r3
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800404c:	2300      	movs	r3, #0
 800404e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	2201      	movs	r2, #1
 8004058:	4013      	ands	r3, r2
 800405a:	2b01      	cmp	r3, #1
 800405c:	d11c      	bne.n	8004098 <HAL_SPI_TransmitReceive+0x21c>
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2246      	movs	r2, #70	; 0x46
 8004062:	5a9b      	ldrh	r3, [r3, r2]
 8004064:	b29b      	uxth	r3, r3
 8004066:	2b00      	cmp	r3, #0
 8004068:	d016      	beq.n	8004098 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	68da      	ldr	r2, [r3, #12]
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004074:	b292      	uxth	r2, r2
 8004076:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800407c:	1c9a      	adds	r2, r3, #2
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2246      	movs	r2, #70	; 0x46
 8004086:	5a9b      	ldrh	r3, [r3, r2]
 8004088:	b29b      	uxth	r3, r3
 800408a:	3b01      	subs	r3, #1
 800408c:	b299      	uxth	r1, r3
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2246      	movs	r2, #70	; 0x46
 8004092:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004094:	2301      	movs	r3, #1
 8004096:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004098:	f7fd fdf4 	bl	8001c84 <HAL_GetTick>
 800409c:	0002      	movs	r2, r0
 800409e:	69fb      	ldr	r3, [r7, #28]
 80040a0:	1ad3      	subs	r3, r2, r3
 80040a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040a4:	429a      	cmp	r2, r3
 80040a6:	d80b      	bhi.n	80040c0 <HAL_SPI_TransmitReceive+0x244>
 80040a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040aa:	3301      	adds	r3, #1
 80040ac:	d008      	beq.n	80040c0 <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 80040ae:	2323      	movs	r3, #35	; 0x23
 80040b0:	18fb      	adds	r3, r7, r3
 80040b2:	2203      	movs	r2, #3
 80040b4:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	225d      	movs	r2, #93	; 0x5d
 80040ba:	2101      	movs	r1, #1
 80040bc:	5499      	strb	r1, [r3, r2]
        goto error;
 80040be:	e0b1      	b.n	8004224 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040c4:	b29b      	uxth	r3, r3
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d19f      	bne.n	800400a <HAL_SPI_TransmitReceive+0x18e>
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2246      	movs	r2, #70	; 0x46
 80040ce:	5a9b      	ldrh	r3, [r3, r2]
 80040d0:	b29b      	uxth	r3, r3
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d199      	bne.n	800400a <HAL_SPI_TransmitReceive+0x18e>
 80040d6:	e089      	b.n	80041ec <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d005      	beq.n	80040ec <HAL_SPI_TransmitReceive+0x270>
 80040e0:	2312      	movs	r3, #18
 80040e2:	18fb      	adds	r3, r7, r3
 80040e4:	881b      	ldrh	r3, [r3, #0]
 80040e6:	2b01      	cmp	r3, #1
 80040e8:	d000      	beq.n	80040ec <HAL_SPI_TransmitReceive+0x270>
 80040ea:	e074      	b.n	80041d6 <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	330c      	adds	r3, #12
 80040f6:	7812      	ldrb	r2, [r2, #0]
 80040f8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040fe:	1c5a      	adds	r2, r3, #1
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004108:	b29b      	uxth	r3, r3
 800410a:	3b01      	subs	r3, #1
 800410c:	b29a      	uxth	r2, r3
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004112:	e060      	b.n	80041d6 <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	2202      	movs	r2, #2
 800411c:	4013      	ands	r3, r2
 800411e:	2b02      	cmp	r3, #2
 8004120:	d11c      	bne.n	800415c <HAL_SPI_TransmitReceive+0x2e0>
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004126:	b29b      	uxth	r3, r3
 8004128:	2b00      	cmp	r3, #0
 800412a:	d017      	beq.n	800415c <HAL_SPI_TransmitReceive+0x2e0>
 800412c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800412e:	2b01      	cmp	r3, #1
 8004130:	d114      	bne.n	800415c <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	330c      	adds	r3, #12
 800413c:	7812      	ldrb	r2, [r2, #0]
 800413e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004144:	1c5a      	adds	r2, r3, #1
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800414e:	b29b      	uxth	r3, r3
 8004150:	3b01      	subs	r3, #1
 8004152:	b29a      	uxth	r2, r3
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004158:	2300      	movs	r3, #0
 800415a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	2201      	movs	r2, #1
 8004164:	4013      	ands	r3, r2
 8004166:	2b01      	cmp	r3, #1
 8004168:	d11e      	bne.n	80041a8 <HAL_SPI_TransmitReceive+0x32c>
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2246      	movs	r2, #70	; 0x46
 800416e:	5a9b      	ldrh	r3, [r3, r2]
 8004170:	b29b      	uxth	r3, r3
 8004172:	2b00      	cmp	r3, #0
 8004174:	d018      	beq.n	80041a8 <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	330c      	adds	r3, #12
 800417c:	001a      	movs	r2, r3
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004182:	7812      	ldrb	r2, [r2, #0]
 8004184:	b2d2      	uxtb	r2, r2
 8004186:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800418c:	1c5a      	adds	r2, r3, #1
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2246      	movs	r2, #70	; 0x46
 8004196:	5a9b      	ldrh	r3, [r3, r2]
 8004198:	b29b      	uxth	r3, r3
 800419a:	3b01      	subs	r3, #1
 800419c:	b299      	uxth	r1, r3
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2246      	movs	r2, #70	; 0x46
 80041a2:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80041a4:	2301      	movs	r3, #1
 80041a6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80041a8:	f7fd fd6c 	bl	8001c84 <HAL_GetTick>
 80041ac:	0002      	movs	r2, r0
 80041ae:	69fb      	ldr	r3, [r7, #28]
 80041b0:	1ad3      	subs	r3, r2, r3
 80041b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d802      	bhi.n	80041be <HAL_SPI_TransmitReceive+0x342>
 80041b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ba:	3301      	adds	r3, #1
 80041bc:	d102      	bne.n	80041c4 <HAL_SPI_TransmitReceive+0x348>
 80041be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d108      	bne.n	80041d6 <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 80041c4:	2323      	movs	r3, #35	; 0x23
 80041c6:	18fb      	adds	r3, r7, r3
 80041c8:	2203      	movs	r2, #3
 80041ca:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	225d      	movs	r2, #93	; 0x5d
 80041d0:	2101      	movs	r1, #1
 80041d2:	5499      	strb	r1, [r3, r2]
        goto error;
 80041d4:	e026      	b.n	8004224 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041da:	b29b      	uxth	r3, r3
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d199      	bne.n	8004114 <HAL_SPI_TransmitReceive+0x298>
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2246      	movs	r2, #70	; 0x46
 80041e4:	5a9b      	ldrh	r3, [r3, r2]
 80041e6:	b29b      	uxth	r3, r3
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d193      	bne.n	8004114 <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80041ec:	69fa      	ldr	r2, [r7, #28]
 80041ee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	0018      	movs	r0, r3
 80041f4:	f000 f9b2 	bl	800455c <SPI_EndRxTxTransaction>
 80041f8:	1e03      	subs	r3, r0, #0
 80041fa:	d006      	beq.n	800420a <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 80041fc:	2323      	movs	r3, #35	; 0x23
 80041fe:	18fb      	adds	r3, r7, r3
 8004200:	2201      	movs	r2, #1
 8004202:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2220      	movs	r2, #32
 8004208:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800420e:	2b00      	cmp	r3, #0
 8004210:	d004      	beq.n	800421c <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 8004212:	2323      	movs	r3, #35	; 0x23
 8004214:	18fb      	adds	r3, r7, r3
 8004216:	2201      	movs	r2, #1
 8004218:	701a      	strb	r2, [r3, #0]
 800421a:	e003      	b.n	8004224 <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	225d      	movs	r2, #93	; 0x5d
 8004220:	2101      	movs	r1, #1
 8004222:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	225c      	movs	r2, #92	; 0x5c
 8004228:	2100      	movs	r1, #0
 800422a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800422c:	2323      	movs	r3, #35	; 0x23
 800422e:	18fb      	adds	r3, r7, r3
 8004230:	781b      	ldrb	r3, [r3, #0]
}
 8004232:	0018      	movs	r0, r3
 8004234:	46bd      	mov	sp, r7
 8004236:	b00a      	add	sp, #40	; 0x28
 8004238:	bd80      	pop	{r7, pc}
 800423a:	46c0      	nop			; (mov r8, r8)
 800423c:	ffffefff 	.word	0xffffefff

08004240 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b088      	sub	sp, #32
 8004244:	af00      	add	r7, sp, #0
 8004246:	60f8      	str	r0, [r7, #12]
 8004248:	60b9      	str	r1, [r7, #8]
 800424a:	603b      	str	r3, [r7, #0]
 800424c:	1dfb      	adds	r3, r7, #7
 800424e:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004250:	f7fd fd18 	bl	8001c84 <HAL_GetTick>
 8004254:	0002      	movs	r2, r0
 8004256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004258:	1a9b      	subs	r3, r3, r2
 800425a:	683a      	ldr	r2, [r7, #0]
 800425c:	18d3      	adds	r3, r2, r3
 800425e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004260:	f7fd fd10 	bl	8001c84 <HAL_GetTick>
 8004264:	0003      	movs	r3, r0
 8004266:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004268:	4b3a      	ldr	r3, [pc, #232]	; (8004354 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	015b      	lsls	r3, r3, #5
 800426e:	0d1b      	lsrs	r3, r3, #20
 8004270:	69fa      	ldr	r2, [r7, #28]
 8004272:	4353      	muls	r3, r2
 8004274:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004276:	e058      	b.n	800432a <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	3301      	adds	r3, #1
 800427c:	d055      	beq.n	800432a <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800427e:	f7fd fd01 	bl	8001c84 <HAL_GetTick>
 8004282:	0002      	movs	r2, r0
 8004284:	69bb      	ldr	r3, [r7, #24]
 8004286:	1ad3      	subs	r3, r2, r3
 8004288:	69fa      	ldr	r2, [r7, #28]
 800428a:	429a      	cmp	r2, r3
 800428c:	d902      	bls.n	8004294 <SPI_WaitFlagStateUntilTimeout+0x54>
 800428e:	69fb      	ldr	r3, [r7, #28]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d142      	bne.n	800431a <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	685a      	ldr	r2, [r3, #4]
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	21e0      	movs	r1, #224	; 0xe0
 80042a0:	438a      	bics	r2, r1
 80042a2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	685a      	ldr	r2, [r3, #4]
 80042a8:	2382      	movs	r3, #130	; 0x82
 80042aa:	005b      	lsls	r3, r3, #1
 80042ac:	429a      	cmp	r2, r3
 80042ae:	d113      	bne.n	80042d8 <SPI_WaitFlagStateUntilTimeout+0x98>
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	689a      	ldr	r2, [r3, #8]
 80042b4:	2380      	movs	r3, #128	; 0x80
 80042b6:	021b      	lsls	r3, r3, #8
 80042b8:	429a      	cmp	r2, r3
 80042ba:	d005      	beq.n	80042c8 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	689a      	ldr	r2, [r3, #8]
 80042c0:	2380      	movs	r3, #128	; 0x80
 80042c2:	00db      	lsls	r3, r3, #3
 80042c4:	429a      	cmp	r2, r3
 80042c6:	d107      	bne.n	80042d8 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	681a      	ldr	r2, [r3, #0]
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	2140      	movs	r1, #64	; 0x40
 80042d4:	438a      	bics	r2, r1
 80042d6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80042dc:	2380      	movs	r3, #128	; 0x80
 80042de:	019b      	lsls	r3, r3, #6
 80042e0:	429a      	cmp	r2, r3
 80042e2:	d110      	bne.n	8004306 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	681a      	ldr	r2, [r3, #0]
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	491a      	ldr	r1, [pc, #104]	; (8004358 <SPI_WaitFlagStateUntilTimeout+0x118>)
 80042f0:	400a      	ands	r2, r1
 80042f2:	601a      	str	r2, [r3, #0]
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	681a      	ldr	r2, [r3, #0]
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	2180      	movs	r1, #128	; 0x80
 8004300:	0189      	lsls	r1, r1, #6
 8004302:	430a      	orrs	r2, r1
 8004304:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	225d      	movs	r2, #93	; 0x5d
 800430a:	2101      	movs	r1, #1
 800430c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	225c      	movs	r2, #92	; 0x5c
 8004312:	2100      	movs	r1, #0
 8004314:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004316:	2303      	movs	r3, #3
 8004318:	e017      	b.n	800434a <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d101      	bne.n	8004324 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8004320:	2300      	movs	r3, #0
 8004322:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	3b01      	subs	r3, #1
 8004328:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	68ba      	ldr	r2, [r7, #8]
 8004332:	4013      	ands	r3, r2
 8004334:	68ba      	ldr	r2, [r7, #8]
 8004336:	1ad3      	subs	r3, r2, r3
 8004338:	425a      	negs	r2, r3
 800433a:	4153      	adcs	r3, r2
 800433c:	b2db      	uxtb	r3, r3
 800433e:	001a      	movs	r2, r3
 8004340:	1dfb      	adds	r3, r7, #7
 8004342:	781b      	ldrb	r3, [r3, #0]
 8004344:	429a      	cmp	r2, r3
 8004346:	d197      	bne.n	8004278 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004348:	2300      	movs	r3, #0
}
 800434a:	0018      	movs	r0, r3
 800434c:	46bd      	mov	sp, r7
 800434e:	b008      	add	sp, #32
 8004350:	bd80      	pop	{r7, pc}
 8004352:	46c0      	nop			; (mov r8, r8)
 8004354:	20000004 	.word	0x20000004
 8004358:	ffffdfff 	.word	0xffffdfff

0800435c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b08a      	sub	sp, #40	; 0x28
 8004360:	af00      	add	r7, sp, #0
 8004362:	60f8      	str	r0, [r7, #12]
 8004364:	60b9      	str	r1, [r7, #8]
 8004366:	607a      	str	r2, [r7, #4]
 8004368:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800436a:	2317      	movs	r3, #23
 800436c:	18fb      	adds	r3, r7, r3
 800436e:	2200      	movs	r2, #0
 8004370:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004372:	f7fd fc87 	bl	8001c84 <HAL_GetTick>
 8004376:	0002      	movs	r2, r0
 8004378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800437a:	1a9b      	subs	r3, r3, r2
 800437c:	683a      	ldr	r2, [r7, #0]
 800437e:	18d3      	adds	r3, r2, r3
 8004380:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004382:	f7fd fc7f 	bl	8001c84 <HAL_GetTick>
 8004386:	0003      	movs	r3, r0
 8004388:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	330c      	adds	r3, #12
 8004390:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004392:	4b41      	ldr	r3, [pc, #260]	; (8004498 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8004394:	681a      	ldr	r2, [r3, #0]
 8004396:	0013      	movs	r3, r2
 8004398:	009b      	lsls	r3, r3, #2
 800439a:	189b      	adds	r3, r3, r2
 800439c:	00da      	lsls	r2, r3, #3
 800439e:	1ad3      	subs	r3, r2, r3
 80043a0:	0d1b      	lsrs	r3, r3, #20
 80043a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043a4:	4353      	muls	r3, r2
 80043a6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80043a8:	e068      	b.n	800447c <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80043aa:	68ba      	ldr	r2, [r7, #8]
 80043ac:	23c0      	movs	r3, #192	; 0xc0
 80043ae:	00db      	lsls	r3, r3, #3
 80043b0:	429a      	cmp	r2, r3
 80043b2:	d10a      	bne.n	80043ca <SPI_WaitFifoStateUntilTimeout+0x6e>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d107      	bne.n	80043ca <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80043ba:	69fb      	ldr	r3, [r7, #28]
 80043bc:	781b      	ldrb	r3, [r3, #0]
 80043be:	b2da      	uxtb	r2, r3
 80043c0:	2117      	movs	r1, #23
 80043c2:	187b      	adds	r3, r7, r1
 80043c4:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80043c6:	187b      	adds	r3, r7, r1
 80043c8:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	3301      	adds	r3, #1
 80043ce:	d055      	beq.n	800447c <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80043d0:	f7fd fc58 	bl	8001c84 <HAL_GetTick>
 80043d4:	0002      	movs	r2, r0
 80043d6:	6a3b      	ldr	r3, [r7, #32]
 80043d8:	1ad3      	subs	r3, r2, r3
 80043da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043dc:	429a      	cmp	r2, r3
 80043de:	d902      	bls.n	80043e6 <SPI_WaitFifoStateUntilTimeout+0x8a>
 80043e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d142      	bne.n	800446c <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	685a      	ldr	r2, [r3, #4]
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	21e0      	movs	r1, #224	; 0xe0
 80043f2:	438a      	bics	r2, r1
 80043f4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	685a      	ldr	r2, [r3, #4]
 80043fa:	2382      	movs	r3, #130	; 0x82
 80043fc:	005b      	lsls	r3, r3, #1
 80043fe:	429a      	cmp	r2, r3
 8004400:	d113      	bne.n	800442a <SPI_WaitFifoStateUntilTimeout+0xce>
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	689a      	ldr	r2, [r3, #8]
 8004406:	2380      	movs	r3, #128	; 0x80
 8004408:	021b      	lsls	r3, r3, #8
 800440a:	429a      	cmp	r2, r3
 800440c:	d005      	beq.n	800441a <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	689a      	ldr	r2, [r3, #8]
 8004412:	2380      	movs	r3, #128	; 0x80
 8004414:	00db      	lsls	r3, r3, #3
 8004416:	429a      	cmp	r2, r3
 8004418:	d107      	bne.n	800442a <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	2140      	movs	r1, #64	; 0x40
 8004426:	438a      	bics	r2, r1
 8004428:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800442e:	2380      	movs	r3, #128	; 0x80
 8004430:	019b      	lsls	r3, r3, #6
 8004432:	429a      	cmp	r2, r3
 8004434:	d110      	bne.n	8004458 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4916      	ldr	r1, [pc, #88]	; (800449c <SPI_WaitFifoStateUntilTimeout+0x140>)
 8004442:	400a      	ands	r2, r1
 8004444:	601a      	str	r2, [r3, #0]
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	2180      	movs	r1, #128	; 0x80
 8004452:	0189      	lsls	r1, r1, #6
 8004454:	430a      	orrs	r2, r1
 8004456:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	225d      	movs	r2, #93	; 0x5d
 800445c:	2101      	movs	r1, #1
 800445e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	225c      	movs	r2, #92	; 0x5c
 8004464:	2100      	movs	r1, #0
 8004466:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004468:	2303      	movs	r3, #3
 800446a:	e010      	b.n	800448e <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800446c:	69bb      	ldr	r3, [r7, #24]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d101      	bne.n	8004476 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8004472:	2300      	movs	r3, #0
 8004474:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004476:	69bb      	ldr	r3, [r7, #24]
 8004478:	3b01      	subs	r3, #1
 800447a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	68ba      	ldr	r2, [r7, #8]
 8004484:	4013      	ands	r3, r2
 8004486:	687a      	ldr	r2, [r7, #4]
 8004488:	429a      	cmp	r2, r3
 800448a:	d18e      	bne.n	80043aa <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 800448c:	2300      	movs	r3, #0
}
 800448e:	0018      	movs	r0, r3
 8004490:	46bd      	mov	sp, r7
 8004492:	b00a      	add	sp, #40	; 0x28
 8004494:	bd80      	pop	{r7, pc}
 8004496:	46c0      	nop			; (mov r8, r8)
 8004498:	20000004 	.word	0x20000004
 800449c:	ffffdfff 	.word	0xffffdfff

080044a0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b086      	sub	sp, #24
 80044a4:	af02      	add	r7, sp, #8
 80044a6:	60f8      	str	r0, [r7, #12]
 80044a8:	60b9      	str	r1, [r7, #8]
 80044aa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	685a      	ldr	r2, [r3, #4]
 80044b0:	2382      	movs	r3, #130	; 0x82
 80044b2:	005b      	lsls	r3, r3, #1
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d113      	bne.n	80044e0 <SPI_EndRxTransaction+0x40>
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	689a      	ldr	r2, [r3, #8]
 80044bc:	2380      	movs	r3, #128	; 0x80
 80044be:	021b      	lsls	r3, r3, #8
 80044c0:	429a      	cmp	r2, r3
 80044c2:	d005      	beq.n	80044d0 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	689a      	ldr	r2, [r3, #8]
 80044c8:	2380      	movs	r3, #128	; 0x80
 80044ca:	00db      	lsls	r3, r3, #3
 80044cc:	429a      	cmp	r2, r3
 80044ce:	d107      	bne.n	80044e0 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	681a      	ldr	r2, [r3, #0]
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	2140      	movs	r1, #64	; 0x40
 80044dc:	438a      	bics	r2, r1
 80044de:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80044e0:	68ba      	ldr	r2, [r7, #8]
 80044e2:	68f8      	ldr	r0, [r7, #12]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	9300      	str	r3, [sp, #0]
 80044e8:	0013      	movs	r3, r2
 80044ea:	2200      	movs	r2, #0
 80044ec:	2180      	movs	r1, #128	; 0x80
 80044ee:	f7ff fea7 	bl	8004240 <SPI_WaitFlagStateUntilTimeout>
 80044f2:	1e03      	subs	r3, r0, #0
 80044f4:	d007      	beq.n	8004506 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044fa:	2220      	movs	r2, #32
 80044fc:	431a      	orrs	r2, r3
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004502:	2303      	movs	r3, #3
 8004504:	e026      	b.n	8004554 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	685a      	ldr	r2, [r3, #4]
 800450a:	2382      	movs	r3, #130	; 0x82
 800450c:	005b      	lsls	r3, r3, #1
 800450e:	429a      	cmp	r2, r3
 8004510:	d11f      	bne.n	8004552 <SPI_EndRxTransaction+0xb2>
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	689a      	ldr	r2, [r3, #8]
 8004516:	2380      	movs	r3, #128	; 0x80
 8004518:	021b      	lsls	r3, r3, #8
 800451a:	429a      	cmp	r2, r3
 800451c:	d005      	beq.n	800452a <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	689a      	ldr	r2, [r3, #8]
 8004522:	2380      	movs	r3, #128	; 0x80
 8004524:	00db      	lsls	r3, r3, #3
 8004526:	429a      	cmp	r2, r3
 8004528:	d113      	bne.n	8004552 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800452a:	68ba      	ldr	r2, [r7, #8]
 800452c:	23c0      	movs	r3, #192	; 0xc0
 800452e:	00d9      	lsls	r1, r3, #3
 8004530:	68f8      	ldr	r0, [r7, #12]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	9300      	str	r3, [sp, #0]
 8004536:	0013      	movs	r3, r2
 8004538:	2200      	movs	r2, #0
 800453a:	f7ff ff0f 	bl	800435c <SPI_WaitFifoStateUntilTimeout>
 800453e:	1e03      	subs	r3, r0, #0
 8004540:	d007      	beq.n	8004552 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004546:	2220      	movs	r2, #32
 8004548:	431a      	orrs	r2, r3
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800454e:	2303      	movs	r3, #3
 8004550:	e000      	b.n	8004554 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8004552:	2300      	movs	r3, #0
}
 8004554:	0018      	movs	r0, r3
 8004556:	46bd      	mov	sp, r7
 8004558:	b004      	add	sp, #16
 800455a:	bd80      	pop	{r7, pc}

0800455c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b086      	sub	sp, #24
 8004560:	af02      	add	r7, sp, #8
 8004562:	60f8      	str	r0, [r7, #12]
 8004564:	60b9      	str	r1, [r7, #8]
 8004566:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004568:	68ba      	ldr	r2, [r7, #8]
 800456a:	23c0      	movs	r3, #192	; 0xc0
 800456c:	0159      	lsls	r1, r3, #5
 800456e:	68f8      	ldr	r0, [r7, #12]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	9300      	str	r3, [sp, #0]
 8004574:	0013      	movs	r3, r2
 8004576:	2200      	movs	r2, #0
 8004578:	f7ff fef0 	bl	800435c <SPI_WaitFifoStateUntilTimeout>
 800457c:	1e03      	subs	r3, r0, #0
 800457e:	d007      	beq.n	8004590 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004584:	2220      	movs	r2, #32
 8004586:	431a      	orrs	r2, r3
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800458c:	2303      	movs	r3, #3
 800458e:	e027      	b.n	80045e0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004590:	68ba      	ldr	r2, [r7, #8]
 8004592:	68f8      	ldr	r0, [r7, #12]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	9300      	str	r3, [sp, #0]
 8004598:	0013      	movs	r3, r2
 800459a:	2200      	movs	r2, #0
 800459c:	2180      	movs	r1, #128	; 0x80
 800459e:	f7ff fe4f 	bl	8004240 <SPI_WaitFlagStateUntilTimeout>
 80045a2:	1e03      	subs	r3, r0, #0
 80045a4:	d007      	beq.n	80045b6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045aa:	2220      	movs	r2, #32
 80045ac:	431a      	orrs	r2, r3
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80045b2:	2303      	movs	r3, #3
 80045b4:	e014      	b.n	80045e0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80045b6:	68ba      	ldr	r2, [r7, #8]
 80045b8:	23c0      	movs	r3, #192	; 0xc0
 80045ba:	00d9      	lsls	r1, r3, #3
 80045bc:	68f8      	ldr	r0, [r7, #12]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	9300      	str	r3, [sp, #0]
 80045c2:	0013      	movs	r3, r2
 80045c4:	2200      	movs	r2, #0
 80045c6:	f7ff fec9 	bl	800435c <SPI_WaitFifoStateUntilTimeout>
 80045ca:	1e03      	subs	r3, r0, #0
 80045cc:	d007      	beq.n	80045de <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045d2:	2220      	movs	r2, #32
 80045d4:	431a      	orrs	r2, r3
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80045da:	2303      	movs	r3, #3
 80045dc:	e000      	b.n	80045e0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80045de:	2300      	movs	r3, #0
}
 80045e0:	0018      	movs	r0, r3
 80045e2:	46bd      	mov	sp, r7
 80045e4:	b004      	add	sp, #16
 80045e6:	bd80      	pop	{r7, pc}

080045e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b082      	sub	sp, #8
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d101      	bne.n	80045fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	e04a      	b.n	8004690 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	223d      	movs	r2, #61	; 0x3d
 80045fe:	5c9b      	ldrb	r3, [r3, r2]
 8004600:	b2db      	uxtb	r3, r3
 8004602:	2b00      	cmp	r3, #0
 8004604:	d107      	bne.n	8004616 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	223c      	movs	r2, #60	; 0x3c
 800460a:	2100      	movs	r1, #0
 800460c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	0018      	movs	r0, r3
 8004612:	f7fd f8d1 	bl	80017b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	223d      	movs	r2, #61	; 0x3d
 800461a:	2102      	movs	r1, #2
 800461c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	3304      	adds	r3, #4
 8004626:	0019      	movs	r1, r3
 8004628:	0010      	movs	r0, r2
 800462a:	f000 f9ed 	bl	8004a08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2248      	movs	r2, #72	; 0x48
 8004632:	2101      	movs	r1, #1
 8004634:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	223e      	movs	r2, #62	; 0x3e
 800463a:	2101      	movs	r1, #1
 800463c:	5499      	strb	r1, [r3, r2]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	223f      	movs	r2, #63	; 0x3f
 8004642:	2101      	movs	r1, #1
 8004644:	5499      	strb	r1, [r3, r2]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2240      	movs	r2, #64	; 0x40
 800464a:	2101      	movs	r1, #1
 800464c:	5499      	strb	r1, [r3, r2]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2241      	movs	r2, #65	; 0x41
 8004652:	2101      	movs	r1, #1
 8004654:	5499      	strb	r1, [r3, r2]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2242      	movs	r2, #66	; 0x42
 800465a:	2101      	movs	r1, #1
 800465c:	5499      	strb	r1, [r3, r2]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2243      	movs	r2, #67	; 0x43
 8004662:	2101      	movs	r1, #1
 8004664:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2244      	movs	r2, #68	; 0x44
 800466a:	2101      	movs	r1, #1
 800466c:	5499      	strb	r1, [r3, r2]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2245      	movs	r2, #69	; 0x45
 8004672:	2101      	movs	r1, #1
 8004674:	5499      	strb	r1, [r3, r2]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2246      	movs	r2, #70	; 0x46
 800467a:	2101      	movs	r1, #1
 800467c:	5499      	strb	r1, [r3, r2]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2247      	movs	r2, #71	; 0x47
 8004682:	2101      	movs	r1, #1
 8004684:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	223d      	movs	r2, #61	; 0x3d
 800468a:	2101      	movs	r1, #1
 800468c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800468e:	2300      	movs	r3, #0
}
 8004690:	0018      	movs	r0, r3
 8004692:	46bd      	mov	sp, r7
 8004694:	b002      	add	sp, #8
 8004696:	bd80      	pop	{r7, pc}

08004698 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b084      	sub	sp, #16
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	223d      	movs	r2, #61	; 0x3d
 80046a4:	5c9b      	ldrb	r3, [r3, r2]
 80046a6:	b2db      	uxtb	r3, r3
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	d001      	beq.n	80046b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80046ac:	2301      	movs	r3, #1
 80046ae:	e047      	b.n	8004740 <HAL_TIM_Base_Start_IT+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	223d      	movs	r2, #61	; 0x3d
 80046b4:	2102      	movs	r1, #2
 80046b6:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	68da      	ldr	r2, [r3, #12]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	2101      	movs	r1, #1
 80046c4:	430a      	orrs	r2, r1
 80046c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a1e      	ldr	r2, [pc, #120]	; (8004748 <HAL_TIM_Base_Start_IT+0xb0>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d014      	beq.n	80046fc <HAL_TIM_Base_Start_IT+0x64>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681a      	ldr	r2, [r3, #0]
 80046d6:	2380      	movs	r3, #128	; 0x80
 80046d8:	05db      	lsls	r3, r3, #23
 80046da:	429a      	cmp	r2, r3
 80046dc:	d00e      	beq.n	80046fc <HAL_TIM_Base_Start_IT+0x64>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a1a      	ldr	r2, [pc, #104]	; (800474c <HAL_TIM_Base_Start_IT+0xb4>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d009      	beq.n	80046fc <HAL_TIM_Base_Start_IT+0x64>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a18      	ldr	r2, [pc, #96]	; (8004750 <HAL_TIM_Base_Start_IT+0xb8>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d004      	beq.n	80046fc <HAL_TIM_Base_Start_IT+0x64>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a17      	ldr	r2, [pc, #92]	; (8004754 <HAL_TIM_Base_Start_IT+0xbc>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d116      	bne.n	800472a <HAL_TIM_Base_Start_IT+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	4a15      	ldr	r2, [pc, #84]	; (8004758 <HAL_TIM_Base_Start_IT+0xc0>)
 8004704:	4013      	ands	r3, r2
 8004706:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	2b06      	cmp	r3, #6
 800470c:	d016      	beq.n	800473c <HAL_TIM_Base_Start_IT+0xa4>
 800470e:	68fa      	ldr	r2, [r7, #12]
 8004710:	2380      	movs	r3, #128	; 0x80
 8004712:	025b      	lsls	r3, r3, #9
 8004714:	429a      	cmp	r2, r3
 8004716:	d011      	beq.n	800473c <HAL_TIM_Base_Start_IT+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	681a      	ldr	r2, [r3, #0]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	2101      	movs	r1, #1
 8004724:	430a      	orrs	r2, r1
 8004726:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004728:	e008      	b.n	800473c <HAL_TIM_Base_Start_IT+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	2101      	movs	r1, #1
 8004736:	430a      	orrs	r2, r1
 8004738:	601a      	str	r2, [r3, #0]
 800473a:	e000      	b.n	800473e <HAL_TIM_Base_Start_IT+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800473c:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800473e:	2300      	movs	r3, #0
}
 8004740:	0018      	movs	r0, r3
 8004742:	46bd      	mov	sp, r7
 8004744:	b004      	add	sp, #16
 8004746:	bd80      	pop	{r7, pc}
 8004748:	40012c00 	.word	0x40012c00
 800474c:	40000400 	.word	0x40000400
 8004750:	40000800 	.word	0x40000800
 8004754:	40014000 	.word	0x40014000
 8004758:	00010007 	.word	0x00010007

0800475c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b082      	sub	sp, #8
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	68da      	ldr	r2, [r3, #12]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	2101      	movs	r1, #1
 8004770:	438a      	bics	r2, r1
 8004772:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	6a1b      	ldr	r3, [r3, #32]
 800477a:	4a0d      	ldr	r2, [pc, #52]	; (80047b0 <HAL_TIM_Base_Stop_IT+0x54>)
 800477c:	4013      	ands	r3, r2
 800477e:	d10d      	bne.n	800479c <HAL_TIM_Base_Stop_IT+0x40>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	6a1b      	ldr	r3, [r3, #32]
 8004786:	4a0b      	ldr	r2, [pc, #44]	; (80047b4 <HAL_TIM_Base_Stop_IT+0x58>)
 8004788:	4013      	ands	r3, r2
 800478a:	d107      	bne.n	800479c <HAL_TIM_Base_Stop_IT+0x40>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	681a      	ldr	r2, [r3, #0]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	2101      	movs	r1, #1
 8004798:	438a      	bics	r2, r1
 800479a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	223d      	movs	r2, #61	; 0x3d
 80047a0:	2101      	movs	r1, #1
 80047a2:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80047a4:	2300      	movs	r3, #0
}
 80047a6:	0018      	movs	r0, r3
 80047a8:	46bd      	mov	sp, r7
 80047aa:	b002      	add	sp, #8
 80047ac:	bd80      	pop	{r7, pc}
 80047ae:	46c0      	nop			; (mov r8, r8)
 80047b0:	00001111 	.word	0x00001111
 80047b4:	00000444 	.word	0x00000444

080047b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b084      	sub	sp, #16
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	68db      	ldr	r3, [r3, #12]
 80047c6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	691b      	ldr	r3, [r3, #16]
 80047ce:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	2202      	movs	r2, #2
 80047d4:	4013      	ands	r3, r2
 80047d6:	d021      	beq.n	800481c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2202      	movs	r2, #2
 80047dc:	4013      	ands	r3, r2
 80047de:	d01d      	beq.n	800481c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	2203      	movs	r2, #3
 80047e6:	4252      	negs	r2, r2
 80047e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2201      	movs	r2, #1
 80047ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	699b      	ldr	r3, [r3, #24]
 80047f6:	2203      	movs	r2, #3
 80047f8:	4013      	ands	r3, r2
 80047fa:	d004      	beq.n	8004806 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	0018      	movs	r0, r3
 8004800:	f000 f8ea 	bl	80049d8 <HAL_TIM_IC_CaptureCallback>
 8004804:	e007      	b.n	8004816 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	0018      	movs	r0, r3
 800480a:	f000 f8dd 	bl	80049c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	0018      	movs	r0, r3
 8004812:	f000 f8e9 	bl	80049e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2200      	movs	r2, #0
 800481a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	2204      	movs	r2, #4
 8004820:	4013      	ands	r3, r2
 8004822:	d022      	beq.n	800486a <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2204      	movs	r2, #4
 8004828:	4013      	ands	r3, r2
 800482a:	d01e      	beq.n	800486a <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	2205      	movs	r2, #5
 8004832:	4252      	negs	r2, r2
 8004834:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2202      	movs	r2, #2
 800483a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	699a      	ldr	r2, [r3, #24]
 8004842:	23c0      	movs	r3, #192	; 0xc0
 8004844:	009b      	lsls	r3, r3, #2
 8004846:	4013      	ands	r3, r2
 8004848:	d004      	beq.n	8004854 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	0018      	movs	r0, r3
 800484e:	f000 f8c3 	bl	80049d8 <HAL_TIM_IC_CaptureCallback>
 8004852:	e007      	b.n	8004864 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	0018      	movs	r0, r3
 8004858:	f000 f8b6 	bl	80049c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	0018      	movs	r0, r3
 8004860:	f000 f8c2 	bl	80049e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2200      	movs	r2, #0
 8004868:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	2208      	movs	r2, #8
 800486e:	4013      	ands	r3, r2
 8004870:	d021      	beq.n	80048b6 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2208      	movs	r2, #8
 8004876:	4013      	ands	r3, r2
 8004878:	d01d      	beq.n	80048b6 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	2209      	movs	r2, #9
 8004880:	4252      	negs	r2, r2
 8004882:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2204      	movs	r2, #4
 8004888:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	69db      	ldr	r3, [r3, #28]
 8004890:	2203      	movs	r2, #3
 8004892:	4013      	ands	r3, r2
 8004894:	d004      	beq.n	80048a0 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	0018      	movs	r0, r3
 800489a:	f000 f89d 	bl	80049d8 <HAL_TIM_IC_CaptureCallback>
 800489e:	e007      	b.n	80048b0 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	0018      	movs	r0, r3
 80048a4:	f000 f890 	bl	80049c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	0018      	movs	r0, r3
 80048ac:	f000 f89c 	bl	80049e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2200      	movs	r2, #0
 80048b4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	2210      	movs	r2, #16
 80048ba:	4013      	ands	r3, r2
 80048bc:	d022      	beq.n	8004904 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2210      	movs	r2, #16
 80048c2:	4013      	ands	r3, r2
 80048c4:	d01e      	beq.n	8004904 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	2211      	movs	r2, #17
 80048cc:	4252      	negs	r2, r2
 80048ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2208      	movs	r2, #8
 80048d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	69da      	ldr	r2, [r3, #28]
 80048dc:	23c0      	movs	r3, #192	; 0xc0
 80048de:	009b      	lsls	r3, r3, #2
 80048e0:	4013      	ands	r3, r2
 80048e2:	d004      	beq.n	80048ee <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	0018      	movs	r0, r3
 80048e8:	f000 f876 	bl	80049d8 <HAL_TIM_IC_CaptureCallback>
 80048ec:	e007      	b.n	80048fe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	0018      	movs	r0, r3
 80048f2:	f000 f869 	bl	80049c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	0018      	movs	r0, r3
 80048fa:	f000 f875 	bl	80049e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2200      	movs	r2, #0
 8004902:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	2201      	movs	r2, #1
 8004908:	4013      	ands	r3, r2
 800490a:	d00c      	beq.n	8004926 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2201      	movs	r2, #1
 8004910:	4013      	ands	r3, r2
 8004912:	d008      	beq.n	8004926 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	2202      	movs	r2, #2
 800491a:	4252      	negs	r2, r2
 800491c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	0018      	movs	r0, r3
 8004922:	f7fc fca7 	bl	8001274 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	2280      	movs	r2, #128	; 0x80
 800492a:	4013      	ands	r3, r2
 800492c:	d104      	bne.n	8004938 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800492e:	68ba      	ldr	r2, [r7, #8]
 8004930:	2380      	movs	r3, #128	; 0x80
 8004932:	019b      	lsls	r3, r3, #6
 8004934:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004936:	d00b      	beq.n	8004950 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2280      	movs	r2, #128	; 0x80
 800493c:	4013      	ands	r3, r2
 800493e:	d007      	beq.n	8004950 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a1e      	ldr	r2, [pc, #120]	; (80049c0 <HAL_TIM_IRQHandler+0x208>)
 8004946:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	0018      	movs	r0, r3
 800494c:	f000 f972 	bl	8004c34 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004950:	68ba      	ldr	r2, [r7, #8]
 8004952:	2380      	movs	r3, #128	; 0x80
 8004954:	005b      	lsls	r3, r3, #1
 8004956:	4013      	ands	r3, r2
 8004958:	d00b      	beq.n	8004972 <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2280      	movs	r2, #128	; 0x80
 800495e:	4013      	ands	r3, r2
 8004960:	d007      	beq.n	8004972 <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a17      	ldr	r2, [pc, #92]	; (80049c4 <HAL_TIM_IRQHandler+0x20c>)
 8004968:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	0018      	movs	r0, r3
 800496e:	f000 f969 	bl	8004c44 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	2240      	movs	r2, #64	; 0x40
 8004976:	4013      	ands	r3, r2
 8004978:	d00c      	beq.n	8004994 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2240      	movs	r2, #64	; 0x40
 800497e:	4013      	ands	r3, r2
 8004980:	d008      	beq.n	8004994 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	2241      	movs	r2, #65	; 0x41
 8004988:	4252      	negs	r2, r2
 800498a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	0018      	movs	r0, r3
 8004990:	f000 f832 	bl	80049f8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	2220      	movs	r2, #32
 8004998:	4013      	ands	r3, r2
 800499a:	d00c      	beq.n	80049b6 <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2220      	movs	r2, #32
 80049a0:	4013      	ands	r3, r2
 80049a2:	d008      	beq.n	80049b6 <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	2221      	movs	r2, #33	; 0x21
 80049aa:	4252      	negs	r2, r2
 80049ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	0018      	movs	r0, r3
 80049b2:	f000 f937 	bl	8004c24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80049b6:	46c0      	nop			; (mov r8, r8)
 80049b8:	46bd      	mov	sp, r7
 80049ba:	b004      	add	sp, #16
 80049bc:	bd80      	pop	{r7, pc}
 80049be:	46c0      	nop			; (mov r8, r8)
 80049c0:	ffffdf7f 	.word	0xffffdf7f
 80049c4:	fffffeff 	.word	0xfffffeff

080049c8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b082      	sub	sp, #8
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80049d0:	46c0      	nop			; (mov r8, r8)
 80049d2:	46bd      	mov	sp, r7
 80049d4:	b002      	add	sp, #8
 80049d6:	bd80      	pop	{r7, pc}

080049d8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b082      	sub	sp, #8
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80049e0:	46c0      	nop			; (mov r8, r8)
 80049e2:	46bd      	mov	sp, r7
 80049e4:	b002      	add	sp, #8
 80049e6:	bd80      	pop	{r7, pc}

080049e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b082      	sub	sp, #8
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80049f0:	46c0      	nop			; (mov r8, r8)
 80049f2:	46bd      	mov	sp, r7
 80049f4:	b002      	add	sp, #8
 80049f6:	bd80      	pop	{r7, pc}

080049f8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b082      	sub	sp, #8
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004a00:	46c0      	nop			; (mov r8, r8)
 8004a02:	46bd      	mov	sp, r7
 8004a04:	b002      	add	sp, #8
 8004a06:	bd80      	pop	{r7, pc}

08004a08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b084      	sub	sp, #16
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
 8004a10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	4a3f      	ldr	r2, [pc, #252]	; (8004b18 <TIM_Base_SetConfig+0x110>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d00c      	beq.n	8004a3a <TIM_Base_SetConfig+0x32>
 8004a20:	687a      	ldr	r2, [r7, #4]
 8004a22:	2380      	movs	r3, #128	; 0x80
 8004a24:	05db      	lsls	r3, r3, #23
 8004a26:	429a      	cmp	r2, r3
 8004a28:	d007      	beq.n	8004a3a <TIM_Base_SetConfig+0x32>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	4a3b      	ldr	r2, [pc, #236]	; (8004b1c <TIM_Base_SetConfig+0x114>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d003      	beq.n	8004a3a <TIM_Base_SetConfig+0x32>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	4a3a      	ldr	r2, [pc, #232]	; (8004b20 <TIM_Base_SetConfig+0x118>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d108      	bne.n	8004a4c <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2270      	movs	r2, #112	; 0x70
 8004a3e:	4393      	bics	r3, r2
 8004a40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	68fa      	ldr	r2, [r7, #12]
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	4a32      	ldr	r2, [pc, #200]	; (8004b18 <TIM_Base_SetConfig+0x110>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d01c      	beq.n	8004a8e <TIM_Base_SetConfig+0x86>
 8004a54:	687a      	ldr	r2, [r7, #4]
 8004a56:	2380      	movs	r3, #128	; 0x80
 8004a58:	05db      	lsls	r3, r3, #23
 8004a5a:	429a      	cmp	r2, r3
 8004a5c:	d017      	beq.n	8004a8e <TIM_Base_SetConfig+0x86>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	4a2e      	ldr	r2, [pc, #184]	; (8004b1c <TIM_Base_SetConfig+0x114>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d013      	beq.n	8004a8e <TIM_Base_SetConfig+0x86>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	4a2d      	ldr	r2, [pc, #180]	; (8004b20 <TIM_Base_SetConfig+0x118>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d00f      	beq.n	8004a8e <TIM_Base_SetConfig+0x86>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	4a2c      	ldr	r2, [pc, #176]	; (8004b24 <TIM_Base_SetConfig+0x11c>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d00b      	beq.n	8004a8e <TIM_Base_SetConfig+0x86>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	4a2b      	ldr	r2, [pc, #172]	; (8004b28 <TIM_Base_SetConfig+0x120>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d007      	beq.n	8004a8e <TIM_Base_SetConfig+0x86>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	4a2a      	ldr	r2, [pc, #168]	; (8004b2c <TIM_Base_SetConfig+0x124>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d003      	beq.n	8004a8e <TIM_Base_SetConfig+0x86>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	4a29      	ldr	r2, [pc, #164]	; (8004b30 <TIM_Base_SetConfig+0x128>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d108      	bne.n	8004aa0 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	4a28      	ldr	r2, [pc, #160]	; (8004b34 <TIM_Base_SetConfig+0x12c>)
 8004a92:	4013      	ands	r3, r2
 8004a94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	68db      	ldr	r3, [r3, #12]
 8004a9a:	68fa      	ldr	r2, [r7, #12]
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	2280      	movs	r2, #128	; 0x80
 8004aa4:	4393      	bics	r3, r2
 8004aa6:	001a      	movs	r2, r3
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	695b      	ldr	r3, [r3, #20]
 8004aac:	4313      	orrs	r3, r2
 8004aae:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	68fa      	ldr	r2, [r7, #12]
 8004ab4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	689a      	ldr	r2, [r3, #8]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	681a      	ldr	r2, [r3, #0]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	4a13      	ldr	r2, [pc, #76]	; (8004b18 <TIM_Base_SetConfig+0x110>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d00b      	beq.n	8004ae6 <TIM_Base_SetConfig+0xde>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	4a15      	ldr	r2, [pc, #84]	; (8004b28 <TIM_Base_SetConfig+0x120>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d007      	beq.n	8004ae6 <TIM_Base_SetConfig+0xde>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	4a14      	ldr	r2, [pc, #80]	; (8004b2c <TIM_Base_SetConfig+0x124>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d003      	beq.n	8004ae6 <TIM_Base_SetConfig+0xde>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	4a13      	ldr	r2, [pc, #76]	; (8004b30 <TIM_Base_SetConfig+0x128>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d103      	bne.n	8004aee <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	691a      	ldr	r2, [r3, #16]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2201      	movs	r2, #1
 8004af2:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	691b      	ldr	r3, [r3, #16]
 8004af8:	2201      	movs	r2, #1
 8004afa:	4013      	ands	r3, r2
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d106      	bne.n	8004b0e <TIM_Base_SetConfig+0x106>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	691b      	ldr	r3, [r3, #16]
 8004b04:	2201      	movs	r2, #1
 8004b06:	4393      	bics	r3, r2
 8004b08:	001a      	movs	r2, r3
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	611a      	str	r2, [r3, #16]
  }
}
 8004b0e:	46c0      	nop			; (mov r8, r8)
 8004b10:	46bd      	mov	sp, r7
 8004b12:	b004      	add	sp, #16
 8004b14:	bd80      	pop	{r7, pc}
 8004b16:	46c0      	nop			; (mov r8, r8)
 8004b18:	40012c00 	.word	0x40012c00
 8004b1c:	40000400 	.word	0x40000400
 8004b20:	40000800 	.word	0x40000800
 8004b24:	40002000 	.word	0x40002000
 8004b28:	40014000 	.word	0x40014000
 8004b2c:	40014400 	.word	0x40014400
 8004b30:	40014800 	.word	0x40014800
 8004b34:	fffffcff 	.word	0xfffffcff

08004b38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b084      	sub	sp, #16
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
 8004b40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	223c      	movs	r2, #60	; 0x3c
 8004b46:	5c9b      	ldrb	r3, [r3, r2]
 8004b48:	2b01      	cmp	r3, #1
 8004b4a:	d101      	bne.n	8004b50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b4c:	2302      	movs	r3, #2
 8004b4e:	e05a      	b.n	8004c06 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	223c      	movs	r2, #60	; 0x3c
 8004b54:	2101      	movs	r1, #1
 8004b56:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	223d      	movs	r2, #61	; 0x3d
 8004b5c:	2102      	movs	r1, #2
 8004b5e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	689b      	ldr	r3, [r3, #8]
 8004b6e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a26      	ldr	r2, [pc, #152]	; (8004c10 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d108      	bne.n	8004b8c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	4a25      	ldr	r2, [pc, #148]	; (8004c14 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004b7e:	4013      	ands	r3, r2
 8004b80:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	68fa      	ldr	r2, [r7, #12]
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	2270      	movs	r2, #112	; 0x70
 8004b90:	4393      	bics	r3, r2
 8004b92:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	68fa      	ldr	r2, [r7, #12]
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	68fa      	ldr	r2, [r7, #12]
 8004ba4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a19      	ldr	r2, [pc, #100]	; (8004c10 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d014      	beq.n	8004bda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681a      	ldr	r2, [r3, #0]
 8004bb4:	2380      	movs	r3, #128	; 0x80
 8004bb6:	05db      	lsls	r3, r3, #23
 8004bb8:	429a      	cmp	r2, r3
 8004bba:	d00e      	beq.n	8004bda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a15      	ldr	r2, [pc, #84]	; (8004c18 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d009      	beq.n	8004bda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a14      	ldr	r2, [pc, #80]	; (8004c1c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d004      	beq.n	8004bda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a12      	ldr	r2, [pc, #72]	; (8004c20 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d10c      	bne.n	8004bf4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	2280      	movs	r2, #128	; 0x80
 8004bde:	4393      	bics	r3, r2
 8004be0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	689b      	ldr	r3, [r3, #8]
 8004be6:	68ba      	ldr	r2, [r7, #8]
 8004be8:	4313      	orrs	r3, r2
 8004bea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	68ba      	ldr	r2, [r7, #8]
 8004bf2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	223d      	movs	r2, #61	; 0x3d
 8004bf8:	2101      	movs	r1, #1
 8004bfa:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	223c      	movs	r2, #60	; 0x3c
 8004c00:	2100      	movs	r1, #0
 8004c02:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004c04:	2300      	movs	r3, #0
}
 8004c06:	0018      	movs	r0, r3
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	b004      	add	sp, #16
 8004c0c:	bd80      	pop	{r7, pc}
 8004c0e:	46c0      	nop			; (mov r8, r8)
 8004c10:	40012c00 	.word	0x40012c00
 8004c14:	ff0fffff 	.word	0xff0fffff
 8004c18:	40000400 	.word	0x40000400
 8004c1c:	40000800 	.word	0x40000800
 8004c20:	40014000 	.word	0x40014000

08004c24 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b082      	sub	sp, #8
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c2c:	46c0      	nop			; (mov r8, r8)
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	b002      	add	sp, #8
 8004c32:	bd80      	pop	{r7, pc}

08004c34 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b082      	sub	sp, #8
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c3c:	46c0      	nop			; (mov r8, r8)
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	b002      	add	sp, #8
 8004c42:	bd80      	pop	{r7, pc}

08004c44 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b082      	sub	sp, #8
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004c4c:	46c0      	nop			; (mov r8, r8)
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	b002      	add	sp, #8
 8004c52:	bd80      	pop	{r7, pc}

08004c54 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b082      	sub	sp, #8
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d101      	bne.n	8004c66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
 8004c64:	e046      	b.n	8004cf4 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2288      	movs	r2, #136	; 0x88
 8004c6a:	589b      	ldr	r3, [r3, r2]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d107      	bne.n	8004c80 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2284      	movs	r2, #132	; 0x84
 8004c74:	2100      	movs	r1, #0
 8004c76:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	0018      	movs	r0, r3
 8004c7c:	f7fc fdc2 	bl	8001804 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2288      	movs	r2, #136	; 0x88
 8004c84:	2124      	movs	r1, #36	; 0x24
 8004c86:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	681a      	ldr	r2, [r3, #0]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	2101      	movs	r1, #1
 8004c94:	438a      	bics	r2, r1
 8004c96:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d003      	beq.n	8004ca8 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	0018      	movs	r0, r3
 8004ca4:	f001 f8f4 	bl	8005e90 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	0018      	movs	r0, r3
 8004cac:	f000 fd9a 	bl	80057e4 <UART_SetConfig>
 8004cb0:	0003      	movs	r3, r0
 8004cb2:	2b01      	cmp	r3, #1
 8004cb4:	d101      	bne.n	8004cba <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e01c      	b.n	8004cf4 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	685a      	ldr	r2, [r3, #4]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	490d      	ldr	r1, [pc, #52]	; (8004cfc <HAL_UART_Init+0xa8>)
 8004cc6:	400a      	ands	r2, r1
 8004cc8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	689a      	ldr	r2, [r3, #8]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	212a      	movs	r1, #42	; 0x2a
 8004cd6:	438a      	bics	r2, r1
 8004cd8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	681a      	ldr	r2, [r3, #0]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	2101      	movs	r1, #1
 8004ce6:	430a      	orrs	r2, r1
 8004ce8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	0018      	movs	r0, r3
 8004cee:	f001 f983 	bl	8005ff8 <UART_CheckIdleState>
 8004cf2:	0003      	movs	r3, r0
}
 8004cf4:	0018      	movs	r0, r3
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	b002      	add	sp, #8
 8004cfa:	bd80      	pop	{r7, pc}
 8004cfc:	ffffb7ff 	.word	0xffffb7ff

08004d00 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b082      	sub	sp, #8
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d101      	bne.n	8004d12 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	e032      	b.n	8004d78 <HAL_UART_DeInit+0x78>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2288      	movs	r2, #136	; 0x88
 8004d16:	2124      	movs	r1, #36	; 0x24
 8004d18:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	681a      	ldr	r2, [r3, #0]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	2101      	movs	r1, #1
 8004d26:	438a      	bics	r2, r1
 8004d28:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	2200      	movs	r2, #0
 8004d38:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	0018      	movs	r0, r3
 8004d46:	f7fc fe3f 	bl	80019c8 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2290      	movs	r2, #144	; 0x90
 8004d4e:	2100      	movs	r1, #0
 8004d50:	5099      	str	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_RESET;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2288      	movs	r2, #136	; 0x88
 8004d56:	2100      	movs	r1, #0
 8004d58:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_RESET;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	228c      	movs	r2, #140	; 0x8c
 8004d5e:	2100      	movs	r1, #0
 8004d60:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2200      	movs	r2, #0
 8004d66:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2284      	movs	r2, #132	; 0x84
 8004d72:	2100      	movs	r1, #0
 8004d74:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004d76:	2300      	movs	r3, #0
}
 8004d78:	0018      	movs	r0, r3
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	b002      	add	sp, #8
 8004d7e:	bd80      	pop	{r7, pc}

08004d80 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b08a      	sub	sp, #40	; 0x28
 8004d84:	af02      	add	r7, sp, #8
 8004d86:	60f8      	str	r0, [r7, #12]
 8004d88:	60b9      	str	r1, [r7, #8]
 8004d8a:	603b      	str	r3, [r7, #0]
 8004d8c:	1dbb      	adds	r3, r7, #6
 8004d8e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2288      	movs	r2, #136	; 0x88
 8004d94:	589b      	ldr	r3, [r3, r2]
 8004d96:	2b20      	cmp	r3, #32
 8004d98:	d000      	beq.n	8004d9c <HAL_UART_Transmit+0x1c>
 8004d9a:	e090      	b.n	8004ebe <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d003      	beq.n	8004daa <HAL_UART_Transmit+0x2a>
 8004da2:	1dbb      	adds	r3, r7, #6
 8004da4:	881b      	ldrh	r3, [r3, #0]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d101      	bne.n	8004dae <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	e088      	b.n	8004ec0 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	689a      	ldr	r2, [r3, #8]
 8004db2:	2380      	movs	r3, #128	; 0x80
 8004db4:	015b      	lsls	r3, r3, #5
 8004db6:	429a      	cmp	r2, r3
 8004db8:	d109      	bne.n	8004dce <HAL_UART_Transmit+0x4e>
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	691b      	ldr	r3, [r3, #16]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d105      	bne.n	8004dce <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	2201      	movs	r2, #1
 8004dc6:	4013      	ands	r3, r2
 8004dc8:	d001      	beq.n	8004dce <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	e078      	b.n	8004ec0 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2290      	movs	r2, #144	; 0x90
 8004dd2:	2100      	movs	r1, #0
 8004dd4:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2288      	movs	r2, #136	; 0x88
 8004dda:	2121      	movs	r1, #33	; 0x21
 8004ddc:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004dde:	f7fc ff51 	bl	8001c84 <HAL_GetTick>
 8004de2:	0003      	movs	r3, r0
 8004de4:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	1dba      	adds	r2, r7, #6
 8004dea:	2154      	movs	r1, #84	; 0x54
 8004dec:	8812      	ldrh	r2, [r2, #0]
 8004dee:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	1dba      	adds	r2, r7, #6
 8004df4:	2156      	movs	r1, #86	; 0x56
 8004df6:	8812      	ldrh	r2, [r2, #0]
 8004df8:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	689a      	ldr	r2, [r3, #8]
 8004dfe:	2380      	movs	r3, #128	; 0x80
 8004e00:	015b      	lsls	r3, r3, #5
 8004e02:	429a      	cmp	r2, r3
 8004e04:	d108      	bne.n	8004e18 <HAL_UART_Transmit+0x98>
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	691b      	ldr	r3, [r3, #16]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d104      	bne.n	8004e18 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	61bb      	str	r3, [r7, #24]
 8004e16:	e003      	b.n	8004e20 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004e20:	e030      	b.n	8004e84 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004e22:	697a      	ldr	r2, [r7, #20]
 8004e24:	68f8      	ldr	r0, [r7, #12]
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	9300      	str	r3, [sp, #0]
 8004e2a:	0013      	movs	r3, r2
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	2180      	movs	r1, #128	; 0x80
 8004e30:	f001 f98c 	bl	800614c <UART_WaitOnFlagUntilTimeout>
 8004e34:	1e03      	subs	r3, r0, #0
 8004e36:	d005      	beq.n	8004e44 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	2288      	movs	r2, #136	; 0x88
 8004e3c:	2120      	movs	r1, #32
 8004e3e:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004e40:	2303      	movs	r3, #3
 8004e42:	e03d      	b.n	8004ec0 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8004e44:	69fb      	ldr	r3, [r7, #28]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d10b      	bne.n	8004e62 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004e4a:	69bb      	ldr	r3, [r7, #24]
 8004e4c:	881b      	ldrh	r3, [r3, #0]
 8004e4e:	001a      	movs	r2, r3
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	05d2      	lsls	r2, r2, #23
 8004e56:	0dd2      	lsrs	r2, r2, #23
 8004e58:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004e5a:	69bb      	ldr	r3, [r7, #24]
 8004e5c:	3302      	adds	r3, #2
 8004e5e:	61bb      	str	r3, [r7, #24]
 8004e60:	e007      	b.n	8004e72 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004e62:	69fb      	ldr	r3, [r7, #28]
 8004e64:	781a      	ldrb	r2, [r3, #0]
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004e6c:	69fb      	ldr	r3, [r7, #28]
 8004e6e:	3301      	adds	r3, #1
 8004e70:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2256      	movs	r2, #86	; 0x56
 8004e76:	5a9b      	ldrh	r3, [r3, r2]
 8004e78:	b29b      	uxth	r3, r3
 8004e7a:	3b01      	subs	r3, #1
 8004e7c:	b299      	uxth	r1, r3
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	2256      	movs	r2, #86	; 0x56
 8004e82:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	2256      	movs	r2, #86	; 0x56
 8004e88:	5a9b      	ldrh	r3, [r3, r2]
 8004e8a:	b29b      	uxth	r3, r3
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d1c8      	bne.n	8004e22 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e90:	697a      	ldr	r2, [r7, #20]
 8004e92:	68f8      	ldr	r0, [r7, #12]
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	9300      	str	r3, [sp, #0]
 8004e98:	0013      	movs	r3, r2
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	2140      	movs	r1, #64	; 0x40
 8004e9e:	f001 f955 	bl	800614c <UART_WaitOnFlagUntilTimeout>
 8004ea2:	1e03      	subs	r3, r0, #0
 8004ea4:	d005      	beq.n	8004eb2 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2288      	movs	r2, #136	; 0x88
 8004eaa:	2120      	movs	r1, #32
 8004eac:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8004eae:	2303      	movs	r3, #3
 8004eb0:	e006      	b.n	8004ec0 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	2288      	movs	r2, #136	; 0x88
 8004eb6:	2120      	movs	r1, #32
 8004eb8:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	e000      	b.n	8004ec0 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8004ebe:	2302      	movs	r3, #2
  }
}
 8004ec0:	0018      	movs	r0, r3
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	b008      	add	sp, #32
 8004ec6:	bd80      	pop	{r7, pc}

08004ec8 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b08a      	sub	sp, #40	; 0x28
 8004ecc:	af02      	add	r7, sp, #8
 8004ece:	60f8      	str	r0, [r7, #12]
 8004ed0:	60b9      	str	r1, [r7, #8]
 8004ed2:	603b      	str	r3, [r7, #0]
 8004ed4:	1dbb      	adds	r3, r7, #6
 8004ed6:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	228c      	movs	r2, #140	; 0x8c
 8004edc:	589b      	ldr	r3, [r3, r2]
 8004ede:	2b20      	cmp	r3, #32
 8004ee0:	d000      	beq.n	8004ee4 <HAL_UART_Receive+0x1c>
 8004ee2:	e0d0      	b.n	8005086 <HAL_UART_Receive+0x1be>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d003      	beq.n	8004ef2 <HAL_UART_Receive+0x2a>
 8004eea:	1dbb      	adds	r3, r7, #6
 8004eec:	881b      	ldrh	r3, [r3, #0]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d101      	bne.n	8004ef6 <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	e0c8      	b.n	8005088 <HAL_UART_Receive+0x1c0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	689a      	ldr	r2, [r3, #8]
 8004efa:	2380      	movs	r3, #128	; 0x80
 8004efc:	015b      	lsls	r3, r3, #5
 8004efe:	429a      	cmp	r2, r3
 8004f00:	d109      	bne.n	8004f16 <HAL_UART_Receive+0x4e>
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	691b      	ldr	r3, [r3, #16]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d105      	bne.n	8004f16 <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	4013      	ands	r3, r2
 8004f10:	d001      	beq.n	8004f16 <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 8004f12:	2301      	movs	r3, #1
 8004f14:	e0b8      	b.n	8005088 <HAL_UART_Receive+0x1c0>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	2290      	movs	r2, #144	; 0x90
 8004f1a:	2100      	movs	r1, #0
 8004f1c:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	228c      	movs	r2, #140	; 0x8c
 8004f22:	2122      	movs	r1, #34	; 0x22
 8004f24:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004f2c:	f7fc feaa 	bl	8001c84 <HAL_GetTick>
 8004f30:	0003      	movs	r3, r0
 8004f32:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	1dba      	adds	r2, r7, #6
 8004f38:	215c      	movs	r1, #92	; 0x5c
 8004f3a:	8812      	ldrh	r2, [r2, #0]
 8004f3c:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	1dba      	adds	r2, r7, #6
 8004f42:	215e      	movs	r1, #94	; 0x5e
 8004f44:	8812      	ldrh	r2, [r2, #0]
 8004f46:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	689a      	ldr	r2, [r3, #8]
 8004f4c:	2380      	movs	r3, #128	; 0x80
 8004f4e:	015b      	lsls	r3, r3, #5
 8004f50:	429a      	cmp	r2, r3
 8004f52:	d10d      	bne.n	8004f70 <HAL_UART_Receive+0xa8>
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	691b      	ldr	r3, [r3, #16]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d104      	bne.n	8004f66 <HAL_UART_Receive+0x9e>
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2260      	movs	r2, #96	; 0x60
 8004f60:	494b      	ldr	r1, [pc, #300]	; (8005090 <HAL_UART_Receive+0x1c8>)
 8004f62:	5299      	strh	r1, [r3, r2]
 8004f64:	e02e      	b.n	8004fc4 <HAL_UART_Receive+0xfc>
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2260      	movs	r2, #96	; 0x60
 8004f6a:	21ff      	movs	r1, #255	; 0xff
 8004f6c:	5299      	strh	r1, [r3, r2]
 8004f6e:	e029      	b.n	8004fc4 <HAL_UART_Receive+0xfc>
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d10d      	bne.n	8004f94 <HAL_UART_Receive+0xcc>
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	691b      	ldr	r3, [r3, #16]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d104      	bne.n	8004f8a <HAL_UART_Receive+0xc2>
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	2260      	movs	r2, #96	; 0x60
 8004f84:	21ff      	movs	r1, #255	; 0xff
 8004f86:	5299      	strh	r1, [r3, r2]
 8004f88:	e01c      	b.n	8004fc4 <HAL_UART_Receive+0xfc>
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2260      	movs	r2, #96	; 0x60
 8004f8e:	217f      	movs	r1, #127	; 0x7f
 8004f90:	5299      	strh	r1, [r3, r2]
 8004f92:	e017      	b.n	8004fc4 <HAL_UART_Receive+0xfc>
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	689a      	ldr	r2, [r3, #8]
 8004f98:	2380      	movs	r3, #128	; 0x80
 8004f9a:	055b      	lsls	r3, r3, #21
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d10d      	bne.n	8004fbc <HAL_UART_Receive+0xf4>
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	691b      	ldr	r3, [r3, #16]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d104      	bne.n	8004fb2 <HAL_UART_Receive+0xea>
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	2260      	movs	r2, #96	; 0x60
 8004fac:	217f      	movs	r1, #127	; 0x7f
 8004fae:	5299      	strh	r1, [r3, r2]
 8004fb0:	e008      	b.n	8004fc4 <HAL_UART_Receive+0xfc>
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	2260      	movs	r2, #96	; 0x60
 8004fb6:	213f      	movs	r1, #63	; 0x3f
 8004fb8:	5299      	strh	r1, [r3, r2]
 8004fba:	e003      	b.n	8004fc4 <HAL_UART_Receive+0xfc>
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	2260      	movs	r2, #96	; 0x60
 8004fc0:	2100      	movs	r1, #0
 8004fc2:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8004fc4:	2312      	movs	r3, #18
 8004fc6:	18fb      	adds	r3, r7, r3
 8004fc8:	68fa      	ldr	r2, [r7, #12]
 8004fca:	2160      	movs	r1, #96	; 0x60
 8004fcc:	5a52      	ldrh	r2, [r2, r1]
 8004fce:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	689a      	ldr	r2, [r3, #8]
 8004fd4:	2380      	movs	r3, #128	; 0x80
 8004fd6:	015b      	lsls	r3, r3, #5
 8004fd8:	429a      	cmp	r2, r3
 8004fda:	d108      	bne.n	8004fee <HAL_UART_Receive+0x126>
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	691b      	ldr	r3, [r3, #16]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d104      	bne.n	8004fee <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	61bb      	str	r3, [r7, #24]
 8004fec:	e003      	b.n	8004ff6 <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004ff6:	e03a      	b.n	800506e <HAL_UART_Receive+0x1a6>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004ff8:	697a      	ldr	r2, [r7, #20]
 8004ffa:	68f8      	ldr	r0, [r7, #12]
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	9300      	str	r3, [sp, #0]
 8005000:	0013      	movs	r3, r2
 8005002:	2200      	movs	r2, #0
 8005004:	2120      	movs	r1, #32
 8005006:	f001 f8a1 	bl	800614c <UART_WaitOnFlagUntilTimeout>
 800500a:	1e03      	subs	r3, r0, #0
 800500c:	d005      	beq.n	800501a <HAL_UART_Receive+0x152>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	228c      	movs	r2, #140	; 0x8c
 8005012:	2120      	movs	r1, #32
 8005014:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005016:	2303      	movs	r3, #3
 8005018:	e036      	b.n	8005088 <HAL_UART_Receive+0x1c0>
      }
      if (pdata8bits == NULL)
 800501a:	69fb      	ldr	r3, [r7, #28]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d10e      	bne.n	800503e <HAL_UART_Receive+0x176>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005026:	b29b      	uxth	r3, r3
 8005028:	2212      	movs	r2, #18
 800502a:	18ba      	adds	r2, r7, r2
 800502c:	8812      	ldrh	r2, [r2, #0]
 800502e:	4013      	ands	r3, r2
 8005030:	b29a      	uxth	r2, r3
 8005032:	69bb      	ldr	r3, [r7, #24]
 8005034:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005036:	69bb      	ldr	r3, [r7, #24]
 8005038:	3302      	adds	r3, #2
 800503a:	61bb      	str	r3, [r7, #24]
 800503c:	e00e      	b.n	800505c <HAL_UART_Receive+0x194>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005044:	b2db      	uxtb	r3, r3
 8005046:	2212      	movs	r2, #18
 8005048:	18ba      	adds	r2, r7, r2
 800504a:	8812      	ldrh	r2, [r2, #0]
 800504c:	b2d2      	uxtb	r2, r2
 800504e:	4013      	ands	r3, r2
 8005050:	b2da      	uxtb	r2, r3
 8005052:	69fb      	ldr	r3, [r7, #28]
 8005054:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005056:	69fb      	ldr	r3, [r7, #28]
 8005058:	3301      	adds	r3, #1
 800505a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	225e      	movs	r2, #94	; 0x5e
 8005060:	5a9b      	ldrh	r3, [r3, r2]
 8005062:	b29b      	uxth	r3, r3
 8005064:	3b01      	subs	r3, #1
 8005066:	b299      	uxth	r1, r3
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	225e      	movs	r2, #94	; 0x5e
 800506c:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	225e      	movs	r2, #94	; 0x5e
 8005072:	5a9b      	ldrh	r3, [r3, r2]
 8005074:	b29b      	uxth	r3, r3
 8005076:	2b00      	cmp	r3, #0
 8005078:	d1be      	bne.n	8004ff8 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	228c      	movs	r2, #140	; 0x8c
 800507e:	2120      	movs	r1, #32
 8005080:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8005082:	2300      	movs	r3, #0
 8005084:	e000      	b.n	8005088 <HAL_UART_Receive+0x1c0>
  }
  else
  {
    return HAL_BUSY;
 8005086:	2302      	movs	r3, #2
  }
}
 8005088:	0018      	movs	r0, r3
 800508a:	46bd      	mov	sp, r7
 800508c:	b008      	add	sp, #32
 800508e:	bd80      	pop	{r7, pc}
 8005090:	000001ff 	.word	0x000001ff

08005094 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b088      	sub	sp, #32
 8005098:	af00      	add	r7, sp, #0
 800509a:	60f8      	str	r0, [r7, #12]
 800509c:	60b9      	str	r1, [r7, #8]
 800509e:	1dbb      	adds	r3, r7, #6
 80050a0:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	228c      	movs	r2, #140	; 0x8c
 80050a6:	589b      	ldr	r3, [r3, r2]
 80050a8:	2b20      	cmp	r3, #32
 80050aa:	d14f      	bne.n	800514c <HAL_UART_Receive_IT+0xb8>
  {
    if ((pData == NULL) || (Size == 0U))
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d003      	beq.n	80050ba <HAL_UART_Receive_IT+0x26>
 80050b2:	1dbb      	adds	r3, r7, #6
 80050b4:	881b      	ldrh	r3, [r3, #0]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d101      	bne.n	80050be <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80050ba:	2301      	movs	r3, #1
 80050bc:	e047      	b.n	800514e <HAL_UART_Receive_IT+0xba>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	689a      	ldr	r2, [r3, #8]
 80050c2:	2380      	movs	r3, #128	; 0x80
 80050c4:	015b      	lsls	r3, r3, #5
 80050c6:	429a      	cmp	r2, r3
 80050c8:	d109      	bne.n	80050de <HAL_UART_Receive_IT+0x4a>
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	691b      	ldr	r3, [r3, #16]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d105      	bne.n	80050de <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	2201      	movs	r2, #1
 80050d6:	4013      	ands	r3, r2
 80050d8:	d001      	beq.n	80050de <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	e037      	b.n	800514e <HAL_UART_Receive_IT+0xba>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2200      	movs	r2, #0
 80050e2:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a1b      	ldr	r2, [pc, #108]	; (8005158 <HAL_UART_Receive_IT+0xc4>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d025      	beq.n	800513a <HAL_UART_Receive_IT+0xa6>
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a1a      	ldr	r2, [pc, #104]	; (800515c <HAL_UART_Receive_IT+0xc8>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d020      	beq.n	800513a <HAL_UART_Receive_IT+0xa6>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	685a      	ldr	r2, [r3, #4]
 80050fe:	2380      	movs	r3, #128	; 0x80
 8005100:	041b      	lsls	r3, r3, #16
 8005102:	4013      	ands	r3, r2
 8005104:	d019      	beq.n	800513a <HAL_UART_Receive_IT+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005106:	f3ef 8310 	mrs	r3, PRIMASK
 800510a:	613b      	str	r3, [r7, #16]
  return(result);
 800510c:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800510e:	61fb      	str	r3, [r7, #28]
 8005110:	2301      	movs	r3, #1
 8005112:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	f383 8810 	msr	PRIMASK, r3
}
 800511a:	46c0      	nop			; (mov r8, r8)
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	681a      	ldr	r2, [r3, #0]
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	2180      	movs	r1, #128	; 0x80
 8005128:	04c9      	lsls	r1, r1, #19
 800512a:	430a      	orrs	r2, r1
 800512c:	601a      	str	r2, [r3, #0]
 800512e:	69fb      	ldr	r3, [r7, #28]
 8005130:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005132:	69bb      	ldr	r3, [r7, #24]
 8005134:	f383 8810 	msr	PRIMASK, r3
}
 8005138:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800513a:	1dbb      	adds	r3, r7, #6
 800513c:	881a      	ldrh	r2, [r3, #0]
 800513e:	68b9      	ldr	r1, [r7, #8]
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	0018      	movs	r0, r3
 8005144:	f001 f872 	bl	800622c <UART_Start_Receive_IT>
 8005148:	0003      	movs	r3, r0
 800514a:	e000      	b.n	800514e <HAL_UART_Receive_IT+0xba>
  }
  else
  {
    return HAL_BUSY;
 800514c:	2302      	movs	r3, #2
  }
}
 800514e:	0018      	movs	r0, r3
 8005150:	46bd      	mov	sp, r7
 8005152:	b008      	add	sp, #32
 8005154:	bd80      	pop	{r7, pc}
 8005156:	46c0      	nop			; (mov r8, r8)
 8005158:	40008000 	.word	0x40008000
 800515c:	40008400 	.word	0x40008400

08005160 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005160:	b5b0      	push	{r4, r5, r7, lr}
 8005162:	b0aa      	sub	sp, #168	; 0xa8
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	69db      	ldr	r3, [r3, #28]
 800516e:	22a4      	movs	r2, #164	; 0xa4
 8005170:	18b9      	adds	r1, r7, r2
 8005172:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	20a0      	movs	r0, #160	; 0xa0
 800517c:	1839      	adds	r1, r7, r0
 800517e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	249c      	movs	r4, #156	; 0x9c
 8005188:	1939      	adds	r1, r7, r4
 800518a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800518c:	0011      	movs	r1, r2
 800518e:	18bb      	adds	r3, r7, r2
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4aa2      	ldr	r2, [pc, #648]	; (800541c <HAL_UART_IRQHandler+0x2bc>)
 8005194:	4013      	ands	r3, r2
 8005196:	2298      	movs	r2, #152	; 0x98
 8005198:	18bd      	adds	r5, r7, r2
 800519a:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 800519c:	18bb      	adds	r3, r7, r2
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d11a      	bne.n	80051da <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80051a4:	187b      	adds	r3, r7, r1
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	2220      	movs	r2, #32
 80051aa:	4013      	ands	r3, r2
 80051ac:	d015      	beq.n	80051da <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80051ae:	183b      	adds	r3, r7, r0
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	2220      	movs	r2, #32
 80051b4:	4013      	ands	r3, r2
 80051b6:	d105      	bne.n	80051c4 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80051b8:	193b      	adds	r3, r7, r4
 80051ba:	681a      	ldr	r2, [r3, #0]
 80051bc:	2380      	movs	r3, #128	; 0x80
 80051be:	055b      	lsls	r3, r3, #21
 80051c0:	4013      	ands	r3, r2
 80051c2:	d00a      	beq.n	80051da <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d100      	bne.n	80051ce <HAL_UART_IRQHandler+0x6e>
 80051cc:	e2dc      	b.n	8005788 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051d2:	687a      	ldr	r2, [r7, #4]
 80051d4:	0010      	movs	r0, r2
 80051d6:	4798      	blx	r3
      }
      return;
 80051d8:	e2d6      	b.n	8005788 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80051da:	2398      	movs	r3, #152	; 0x98
 80051dc:	18fb      	adds	r3, r7, r3
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d100      	bne.n	80051e6 <HAL_UART_IRQHandler+0x86>
 80051e4:	e122      	b.n	800542c <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80051e6:	239c      	movs	r3, #156	; 0x9c
 80051e8:	18fb      	adds	r3, r7, r3
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a8c      	ldr	r2, [pc, #560]	; (8005420 <HAL_UART_IRQHandler+0x2c0>)
 80051ee:	4013      	ands	r3, r2
 80051f0:	d106      	bne.n	8005200 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80051f2:	23a0      	movs	r3, #160	; 0xa0
 80051f4:	18fb      	adds	r3, r7, r3
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a8a      	ldr	r2, [pc, #552]	; (8005424 <HAL_UART_IRQHandler+0x2c4>)
 80051fa:	4013      	ands	r3, r2
 80051fc:	d100      	bne.n	8005200 <HAL_UART_IRQHandler+0xa0>
 80051fe:	e115      	b.n	800542c <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005200:	23a4      	movs	r3, #164	; 0xa4
 8005202:	18fb      	adds	r3, r7, r3
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	2201      	movs	r2, #1
 8005208:	4013      	ands	r3, r2
 800520a:	d012      	beq.n	8005232 <HAL_UART_IRQHandler+0xd2>
 800520c:	23a0      	movs	r3, #160	; 0xa0
 800520e:	18fb      	adds	r3, r7, r3
 8005210:	681a      	ldr	r2, [r3, #0]
 8005212:	2380      	movs	r3, #128	; 0x80
 8005214:	005b      	lsls	r3, r3, #1
 8005216:	4013      	ands	r3, r2
 8005218:	d00b      	beq.n	8005232 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	2201      	movs	r2, #1
 8005220:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2290      	movs	r2, #144	; 0x90
 8005226:	589b      	ldr	r3, [r3, r2]
 8005228:	2201      	movs	r2, #1
 800522a:	431a      	orrs	r2, r3
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2190      	movs	r1, #144	; 0x90
 8005230:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005232:	23a4      	movs	r3, #164	; 0xa4
 8005234:	18fb      	adds	r3, r7, r3
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	2202      	movs	r2, #2
 800523a:	4013      	ands	r3, r2
 800523c:	d011      	beq.n	8005262 <HAL_UART_IRQHandler+0x102>
 800523e:	239c      	movs	r3, #156	; 0x9c
 8005240:	18fb      	adds	r3, r7, r3
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	2201      	movs	r2, #1
 8005246:	4013      	ands	r3, r2
 8005248:	d00b      	beq.n	8005262 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	2202      	movs	r2, #2
 8005250:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2290      	movs	r2, #144	; 0x90
 8005256:	589b      	ldr	r3, [r3, r2]
 8005258:	2204      	movs	r2, #4
 800525a:	431a      	orrs	r2, r3
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2190      	movs	r1, #144	; 0x90
 8005260:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005262:	23a4      	movs	r3, #164	; 0xa4
 8005264:	18fb      	adds	r3, r7, r3
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	2204      	movs	r2, #4
 800526a:	4013      	ands	r3, r2
 800526c:	d011      	beq.n	8005292 <HAL_UART_IRQHandler+0x132>
 800526e:	239c      	movs	r3, #156	; 0x9c
 8005270:	18fb      	adds	r3, r7, r3
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	2201      	movs	r2, #1
 8005276:	4013      	ands	r3, r2
 8005278:	d00b      	beq.n	8005292 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	2204      	movs	r2, #4
 8005280:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2290      	movs	r2, #144	; 0x90
 8005286:	589b      	ldr	r3, [r3, r2]
 8005288:	2202      	movs	r2, #2
 800528a:	431a      	orrs	r2, r3
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2190      	movs	r1, #144	; 0x90
 8005290:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005292:	23a4      	movs	r3, #164	; 0xa4
 8005294:	18fb      	adds	r3, r7, r3
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	2208      	movs	r2, #8
 800529a:	4013      	ands	r3, r2
 800529c:	d017      	beq.n	80052ce <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800529e:	23a0      	movs	r3, #160	; 0xa0
 80052a0:	18fb      	adds	r3, r7, r3
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	2220      	movs	r2, #32
 80052a6:	4013      	ands	r3, r2
 80052a8:	d105      	bne.n	80052b6 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80052aa:	239c      	movs	r3, #156	; 0x9c
 80052ac:	18fb      	adds	r3, r7, r3
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a5b      	ldr	r2, [pc, #364]	; (8005420 <HAL_UART_IRQHandler+0x2c0>)
 80052b2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80052b4:	d00b      	beq.n	80052ce <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	2208      	movs	r2, #8
 80052bc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2290      	movs	r2, #144	; 0x90
 80052c2:	589b      	ldr	r3, [r3, r2]
 80052c4:	2208      	movs	r2, #8
 80052c6:	431a      	orrs	r2, r3
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2190      	movs	r1, #144	; 0x90
 80052cc:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80052ce:	23a4      	movs	r3, #164	; 0xa4
 80052d0:	18fb      	adds	r3, r7, r3
 80052d2:	681a      	ldr	r2, [r3, #0]
 80052d4:	2380      	movs	r3, #128	; 0x80
 80052d6:	011b      	lsls	r3, r3, #4
 80052d8:	4013      	ands	r3, r2
 80052da:	d013      	beq.n	8005304 <HAL_UART_IRQHandler+0x1a4>
 80052dc:	23a0      	movs	r3, #160	; 0xa0
 80052de:	18fb      	adds	r3, r7, r3
 80052e0:	681a      	ldr	r2, [r3, #0]
 80052e2:	2380      	movs	r3, #128	; 0x80
 80052e4:	04db      	lsls	r3, r3, #19
 80052e6:	4013      	ands	r3, r2
 80052e8:	d00c      	beq.n	8005304 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	2280      	movs	r2, #128	; 0x80
 80052f0:	0112      	lsls	r2, r2, #4
 80052f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2290      	movs	r2, #144	; 0x90
 80052f8:	589b      	ldr	r3, [r3, r2]
 80052fa:	2220      	movs	r2, #32
 80052fc:	431a      	orrs	r2, r3
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2190      	movs	r1, #144	; 0x90
 8005302:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2290      	movs	r2, #144	; 0x90
 8005308:	589b      	ldr	r3, [r3, r2]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d100      	bne.n	8005310 <HAL_UART_IRQHandler+0x1b0>
 800530e:	e23d      	b.n	800578c <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005310:	23a4      	movs	r3, #164	; 0xa4
 8005312:	18fb      	adds	r3, r7, r3
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	2220      	movs	r2, #32
 8005318:	4013      	ands	r3, r2
 800531a:	d015      	beq.n	8005348 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800531c:	23a0      	movs	r3, #160	; 0xa0
 800531e:	18fb      	adds	r3, r7, r3
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	2220      	movs	r2, #32
 8005324:	4013      	ands	r3, r2
 8005326:	d106      	bne.n	8005336 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005328:	239c      	movs	r3, #156	; 0x9c
 800532a:	18fb      	adds	r3, r7, r3
 800532c:	681a      	ldr	r2, [r3, #0]
 800532e:	2380      	movs	r3, #128	; 0x80
 8005330:	055b      	lsls	r3, r3, #21
 8005332:	4013      	ands	r3, r2
 8005334:	d008      	beq.n	8005348 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800533a:	2b00      	cmp	r3, #0
 800533c:	d004      	beq.n	8005348 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005342:	687a      	ldr	r2, [r7, #4]
 8005344:	0010      	movs	r0, r2
 8005346:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2290      	movs	r2, #144	; 0x90
 800534c:	589b      	ldr	r3, [r3, r2]
 800534e:	2194      	movs	r1, #148	; 0x94
 8005350:	187a      	adds	r2, r7, r1
 8005352:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	689b      	ldr	r3, [r3, #8]
 800535a:	2240      	movs	r2, #64	; 0x40
 800535c:	4013      	ands	r3, r2
 800535e:	2b40      	cmp	r3, #64	; 0x40
 8005360:	d004      	beq.n	800536c <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005362:	187b      	adds	r3, r7, r1
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	2228      	movs	r2, #40	; 0x28
 8005368:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800536a:	d04c      	beq.n	8005406 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	0018      	movs	r0, r3
 8005370:	f001 f880 	bl	8006474 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	2240      	movs	r2, #64	; 0x40
 800537c:	4013      	ands	r3, r2
 800537e:	2b40      	cmp	r3, #64	; 0x40
 8005380:	d13c      	bne.n	80053fc <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005382:	f3ef 8310 	mrs	r3, PRIMASK
 8005386:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8005388:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800538a:	2090      	movs	r0, #144	; 0x90
 800538c:	183a      	adds	r2, r7, r0
 800538e:	6013      	str	r3, [r2, #0]
 8005390:	2301      	movs	r3, #1
 8005392:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005394:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005396:	f383 8810 	msr	PRIMASK, r3
}
 800539a:	46c0      	nop			; (mov r8, r8)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	689a      	ldr	r2, [r3, #8]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	2140      	movs	r1, #64	; 0x40
 80053a8:	438a      	bics	r2, r1
 80053aa:	609a      	str	r2, [r3, #8]
 80053ac:	183b      	adds	r3, r7, r0
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80053b4:	f383 8810 	msr	PRIMASK, r3
}
 80053b8:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2280      	movs	r2, #128	; 0x80
 80053be:	589b      	ldr	r3, [r3, r2]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d016      	beq.n	80053f2 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2280      	movs	r2, #128	; 0x80
 80053c8:	589b      	ldr	r3, [r3, r2]
 80053ca:	4a17      	ldr	r2, [pc, #92]	; (8005428 <HAL_UART_IRQHandler+0x2c8>)
 80053cc:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2280      	movs	r2, #128	; 0x80
 80053d2:	589b      	ldr	r3, [r3, r2]
 80053d4:	0018      	movs	r0, r3
 80053d6:	f7fc fded 	bl	8001fb4 <HAL_DMA_Abort_IT>
 80053da:	1e03      	subs	r3, r0, #0
 80053dc:	d01c      	beq.n	8005418 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2280      	movs	r2, #128	; 0x80
 80053e2:	589b      	ldr	r3, [r3, r2]
 80053e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053e6:	687a      	ldr	r2, [r7, #4]
 80053e8:	2180      	movs	r1, #128	; 0x80
 80053ea:	5852      	ldr	r2, [r2, r1]
 80053ec:	0010      	movs	r0, r2
 80053ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053f0:	e012      	b.n	8005418 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	0018      	movs	r0, r3
 80053f6:	f000 f9e1 	bl	80057bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053fa:	e00d      	b.n	8005418 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	0018      	movs	r0, r3
 8005400:	f000 f9dc 	bl	80057bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005404:	e008      	b.n	8005418 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	0018      	movs	r0, r3
 800540a:	f000 f9d7 	bl	80057bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2290      	movs	r2, #144	; 0x90
 8005412:	2100      	movs	r1, #0
 8005414:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8005416:	e1b9      	b.n	800578c <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005418:	46c0      	nop			; (mov r8, r8)
    return;
 800541a:	e1b7      	b.n	800578c <HAL_UART_IRQHandler+0x62c>
 800541c:	0000080f 	.word	0x0000080f
 8005420:	10000001 	.word	0x10000001
 8005424:	04000120 	.word	0x04000120
 8005428:	08006541 	.word	0x08006541

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005430:	2b01      	cmp	r3, #1
 8005432:	d000      	beq.n	8005436 <HAL_UART_IRQHandler+0x2d6>
 8005434:	e13e      	b.n	80056b4 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005436:	23a4      	movs	r3, #164	; 0xa4
 8005438:	18fb      	adds	r3, r7, r3
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	2210      	movs	r2, #16
 800543e:	4013      	ands	r3, r2
 8005440:	d100      	bne.n	8005444 <HAL_UART_IRQHandler+0x2e4>
 8005442:	e137      	b.n	80056b4 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005444:	23a0      	movs	r3, #160	; 0xa0
 8005446:	18fb      	adds	r3, r7, r3
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	2210      	movs	r2, #16
 800544c:	4013      	ands	r3, r2
 800544e:	d100      	bne.n	8005452 <HAL_UART_IRQHandler+0x2f2>
 8005450:	e130      	b.n	80056b4 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	2210      	movs	r2, #16
 8005458:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	689b      	ldr	r3, [r3, #8]
 8005460:	2240      	movs	r2, #64	; 0x40
 8005462:	4013      	ands	r3, r2
 8005464:	2b40      	cmp	r3, #64	; 0x40
 8005466:	d000      	beq.n	800546a <HAL_UART_IRQHandler+0x30a>
 8005468:	e0a4      	b.n	80055b4 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2280      	movs	r2, #128	; 0x80
 800546e:	589b      	ldr	r3, [r3, r2]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	685a      	ldr	r2, [r3, #4]
 8005474:	217e      	movs	r1, #126	; 0x7e
 8005476:	187b      	adds	r3, r7, r1
 8005478:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800547a:	187b      	adds	r3, r7, r1
 800547c:	881b      	ldrh	r3, [r3, #0]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d100      	bne.n	8005484 <HAL_UART_IRQHandler+0x324>
 8005482:	e185      	b.n	8005790 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	225c      	movs	r2, #92	; 0x5c
 8005488:	5a9b      	ldrh	r3, [r3, r2]
 800548a:	187a      	adds	r2, r7, r1
 800548c:	8812      	ldrh	r2, [r2, #0]
 800548e:	429a      	cmp	r2, r3
 8005490:	d300      	bcc.n	8005494 <HAL_UART_IRQHandler+0x334>
 8005492:	e17d      	b.n	8005790 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	187a      	adds	r2, r7, r1
 8005498:	215e      	movs	r1, #94	; 0x5e
 800549a:	8812      	ldrh	r2, [r2, #0]
 800549c:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2280      	movs	r2, #128	; 0x80
 80054a2:	589b      	ldr	r3, [r3, r2]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	2220      	movs	r2, #32
 80054aa:	4013      	ands	r3, r2
 80054ac:	d170      	bne.n	8005590 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054ae:	f3ef 8310 	mrs	r3, PRIMASK
 80054b2:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80054b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80054b6:	67bb      	str	r3, [r7, #120]	; 0x78
 80054b8:	2301      	movs	r3, #1
 80054ba:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054be:	f383 8810 	msr	PRIMASK, r3
}
 80054c2:	46c0      	nop			; (mov r8, r8)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	681a      	ldr	r2, [r3, #0]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	49b4      	ldr	r1, [pc, #720]	; (80057a0 <HAL_UART_IRQHandler+0x640>)
 80054d0:	400a      	ands	r2, r1
 80054d2:	601a      	str	r2, [r3, #0]
 80054d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80054d6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054da:	f383 8810 	msr	PRIMASK, r3
}
 80054de:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054e0:	f3ef 8310 	mrs	r3, PRIMASK
 80054e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80054e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054e8:	677b      	str	r3, [r7, #116]	; 0x74
 80054ea:	2301      	movs	r3, #1
 80054ec:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054f0:	f383 8810 	msr	PRIMASK, r3
}
 80054f4:	46c0      	nop			; (mov r8, r8)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	689a      	ldr	r2, [r3, #8]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	2101      	movs	r1, #1
 8005502:	438a      	bics	r2, r1
 8005504:	609a      	str	r2, [r3, #8]
 8005506:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005508:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800550a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800550c:	f383 8810 	msr	PRIMASK, r3
}
 8005510:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005512:	f3ef 8310 	mrs	r3, PRIMASK
 8005516:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8005518:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800551a:	673b      	str	r3, [r7, #112]	; 0x70
 800551c:	2301      	movs	r3, #1
 800551e:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005520:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005522:	f383 8810 	msr	PRIMASK, r3
}
 8005526:	46c0      	nop			; (mov r8, r8)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	689a      	ldr	r2, [r3, #8]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	2140      	movs	r1, #64	; 0x40
 8005534:	438a      	bics	r2, r1
 8005536:	609a      	str	r2, [r3, #8]
 8005538:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800553a:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800553c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800553e:	f383 8810 	msr	PRIMASK, r3
}
 8005542:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	228c      	movs	r2, #140	; 0x8c
 8005548:	2120      	movs	r1, #32
 800554a:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2200      	movs	r2, #0
 8005550:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005552:	f3ef 8310 	mrs	r3, PRIMASK
 8005556:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8005558:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800555a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800555c:	2301      	movs	r3, #1
 800555e:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005560:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005562:	f383 8810 	msr	PRIMASK, r3
}
 8005566:	46c0      	nop			; (mov r8, r8)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	681a      	ldr	r2, [r3, #0]
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	2110      	movs	r1, #16
 8005574:	438a      	bics	r2, r1
 8005576:	601a      	str	r2, [r3, #0]
 8005578:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800557a:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800557c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800557e:	f383 8810 	msr	PRIMASK, r3
}
 8005582:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2280      	movs	r2, #128	; 0x80
 8005588:	589b      	ldr	r3, [r3, r2]
 800558a:	0018      	movs	r0, r3
 800558c:	f7fc fcb2 	bl	8001ef4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2202      	movs	r2, #2
 8005594:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	225c      	movs	r2, #92	; 0x5c
 800559a:	5a9a      	ldrh	r2, [r3, r2]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	215e      	movs	r1, #94	; 0x5e
 80055a0:	5a5b      	ldrh	r3, [r3, r1]
 80055a2:	b29b      	uxth	r3, r3
 80055a4:	1ad3      	subs	r3, r2, r3
 80055a6:	b29a      	uxth	r2, r3
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	0011      	movs	r1, r2
 80055ac:	0018      	movs	r0, r3
 80055ae:	f000 f90d 	bl	80057cc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80055b2:	e0ed      	b.n	8005790 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	225c      	movs	r2, #92	; 0x5c
 80055b8:	5a99      	ldrh	r1, [r3, r2]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	225e      	movs	r2, #94	; 0x5e
 80055be:	5a9b      	ldrh	r3, [r3, r2]
 80055c0:	b29a      	uxth	r2, r3
 80055c2:	208e      	movs	r0, #142	; 0x8e
 80055c4:	183b      	adds	r3, r7, r0
 80055c6:	1a8a      	subs	r2, r1, r2
 80055c8:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	225e      	movs	r2, #94	; 0x5e
 80055ce:	5a9b      	ldrh	r3, [r3, r2]
 80055d0:	b29b      	uxth	r3, r3
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d100      	bne.n	80055d8 <HAL_UART_IRQHandler+0x478>
 80055d6:	e0dd      	b.n	8005794 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 80055d8:	183b      	adds	r3, r7, r0
 80055da:	881b      	ldrh	r3, [r3, #0]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d100      	bne.n	80055e2 <HAL_UART_IRQHandler+0x482>
 80055e0:	e0d8      	b.n	8005794 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055e2:	f3ef 8310 	mrs	r3, PRIMASK
 80055e6:	60fb      	str	r3, [r7, #12]
  return(result);
 80055e8:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80055ea:	2488      	movs	r4, #136	; 0x88
 80055ec:	193a      	adds	r2, r7, r4
 80055ee:	6013      	str	r3, [r2, #0]
 80055f0:	2301      	movs	r3, #1
 80055f2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055f4:	693b      	ldr	r3, [r7, #16]
 80055f6:	f383 8810 	msr	PRIMASK, r3
}
 80055fa:	46c0      	nop			; (mov r8, r8)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	681a      	ldr	r2, [r3, #0]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4967      	ldr	r1, [pc, #412]	; (80057a4 <HAL_UART_IRQHandler+0x644>)
 8005608:	400a      	ands	r2, r1
 800560a:	601a      	str	r2, [r3, #0]
 800560c:	193b      	adds	r3, r7, r4
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	f383 8810 	msr	PRIMASK, r3
}
 8005618:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800561a:	f3ef 8310 	mrs	r3, PRIMASK
 800561e:	61bb      	str	r3, [r7, #24]
  return(result);
 8005620:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005622:	2484      	movs	r4, #132	; 0x84
 8005624:	193a      	adds	r2, r7, r4
 8005626:	6013      	str	r3, [r2, #0]
 8005628:	2301      	movs	r3, #1
 800562a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800562c:	69fb      	ldr	r3, [r7, #28]
 800562e:	f383 8810 	msr	PRIMASK, r3
}
 8005632:	46c0      	nop			; (mov r8, r8)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	689a      	ldr	r2, [r3, #8]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	495a      	ldr	r1, [pc, #360]	; (80057a8 <HAL_UART_IRQHandler+0x648>)
 8005640:	400a      	ands	r2, r1
 8005642:	609a      	str	r2, [r3, #8]
 8005644:	193b      	adds	r3, r7, r4
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800564a:	6a3b      	ldr	r3, [r7, #32]
 800564c:	f383 8810 	msr	PRIMASK, r3
}
 8005650:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	228c      	movs	r2, #140	; 0x8c
 8005656:	2120      	movs	r1, #32
 8005658:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2200      	movs	r2, #0
 800565e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2200      	movs	r2, #0
 8005664:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005666:	f3ef 8310 	mrs	r3, PRIMASK
 800566a:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800566c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800566e:	2480      	movs	r4, #128	; 0x80
 8005670:	193a      	adds	r2, r7, r4
 8005672:	6013      	str	r3, [r2, #0]
 8005674:	2301      	movs	r3, #1
 8005676:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800567a:	f383 8810 	msr	PRIMASK, r3
}
 800567e:	46c0      	nop			; (mov r8, r8)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	681a      	ldr	r2, [r3, #0]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	2110      	movs	r1, #16
 800568c:	438a      	bics	r2, r1
 800568e:	601a      	str	r2, [r3, #0]
 8005690:	193b      	adds	r3, r7, r4
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005698:	f383 8810 	msr	PRIMASK, r3
}
 800569c:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2202      	movs	r2, #2
 80056a2:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80056a4:	183b      	adds	r3, r7, r0
 80056a6:	881a      	ldrh	r2, [r3, #0]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	0011      	movs	r1, r2
 80056ac:	0018      	movs	r0, r3
 80056ae:	f000 f88d 	bl	80057cc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80056b2:	e06f      	b.n	8005794 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80056b4:	23a4      	movs	r3, #164	; 0xa4
 80056b6:	18fb      	adds	r3, r7, r3
 80056b8:	681a      	ldr	r2, [r3, #0]
 80056ba:	2380      	movs	r3, #128	; 0x80
 80056bc:	035b      	lsls	r3, r3, #13
 80056be:	4013      	ands	r3, r2
 80056c0:	d010      	beq.n	80056e4 <HAL_UART_IRQHandler+0x584>
 80056c2:	239c      	movs	r3, #156	; 0x9c
 80056c4:	18fb      	adds	r3, r7, r3
 80056c6:	681a      	ldr	r2, [r3, #0]
 80056c8:	2380      	movs	r3, #128	; 0x80
 80056ca:	03db      	lsls	r3, r3, #15
 80056cc:	4013      	ands	r3, r2
 80056ce:	d009      	beq.n	80056e4 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	2280      	movs	r2, #128	; 0x80
 80056d6:	0352      	lsls	r2, r2, #13
 80056d8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	0018      	movs	r0, r3
 80056de:	f001 fc9f 	bl	8007020 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80056e2:	e05a      	b.n	800579a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80056e4:	23a4      	movs	r3, #164	; 0xa4
 80056e6:	18fb      	adds	r3, r7, r3
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	2280      	movs	r2, #128	; 0x80
 80056ec:	4013      	ands	r3, r2
 80056ee:	d016      	beq.n	800571e <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80056f0:	23a0      	movs	r3, #160	; 0xa0
 80056f2:	18fb      	adds	r3, r7, r3
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	2280      	movs	r2, #128	; 0x80
 80056f8:	4013      	ands	r3, r2
 80056fa:	d106      	bne.n	800570a <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80056fc:	239c      	movs	r3, #156	; 0x9c
 80056fe:	18fb      	adds	r3, r7, r3
 8005700:	681a      	ldr	r2, [r3, #0]
 8005702:	2380      	movs	r3, #128	; 0x80
 8005704:	041b      	lsls	r3, r3, #16
 8005706:	4013      	ands	r3, r2
 8005708:	d009      	beq.n	800571e <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800570e:	2b00      	cmp	r3, #0
 8005710:	d042      	beq.n	8005798 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005716:	687a      	ldr	r2, [r7, #4]
 8005718:	0010      	movs	r0, r2
 800571a:	4798      	blx	r3
    }
    return;
 800571c:	e03c      	b.n	8005798 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800571e:	23a4      	movs	r3, #164	; 0xa4
 8005720:	18fb      	adds	r3, r7, r3
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	2240      	movs	r2, #64	; 0x40
 8005726:	4013      	ands	r3, r2
 8005728:	d00a      	beq.n	8005740 <HAL_UART_IRQHandler+0x5e0>
 800572a:	23a0      	movs	r3, #160	; 0xa0
 800572c:	18fb      	adds	r3, r7, r3
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	2240      	movs	r2, #64	; 0x40
 8005732:	4013      	ands	r3, r2
 8005734:	d004      	beq.n	8005740 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	0018      	movs	r0, r3
 800573a:	f000 ff18 	bl	800656e <UART_EndTransmit_IT>
    return;
 800573e:	e02c      	b.n	800579a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005740:	23a4      	movs	r3, #164	; 0xa4
 8005742:	18fb      	adds	r3, r7, r3
 8005744:	681a      	ldr	r2, [r3, #0]
 8005746:	2380      	movs	r3, #128	; 0x80
 8005748:	041b      	lsls	r3, r3, #16
 800574a:	4013      	ands	r3, r2
 800574c:	d00b      	beq.n	8005766 <HAL_UART_IRQHandler+0x606>
 800574e:	23a0      	movs	r3, #160	; 0xa0
 8005750:	18fb      	adds	r3, r7, r3
 8005752:	681a      	ldr	r2, [r3, #0]
 8005754:	2380      	movs	r3, #128	; 0x80
 8005756:	05db      	lsls	r3, r3, #23
 8005758:	4013      	ands	r3, r2
 800575a:	d004      	beq.n	8005766 <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	0018      	movs	r0, r3
 8005760:	f001 fc6e 	bl	8007040 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005764:	e019      	b.n	800579a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005766:	23a4      	movs	r3, #164	; 0xa4
 8005768:	18fb      	adds	r3, r7, r3
 800576a:	681a      	ldr	r2, [r3, #0]
 800576c:	2380      	movs	r3, #128	; 0x80
 800576e:	045b      	lsls	r3, r3, #17
 8005770:	4013      	ands	r3, r2
 8005772:	d012      	beq.n	800579a <HAL_UART_IRQHandler+0x63a>
 8005774:	23a0      	movs	r3, #160	; 0xa0
 8005776:	18fb      	adds	r3, r7, r3
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	2b00      	cmp	r3, #0
 800577c:	da0d      	bge.n	800579a <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	0018      	movs	r0, r3
 8005782:	f001 fc55 	bl	8007030 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005786:	e008      	b.n	800579a <HAL_UART_IRQHandler+0x63a>
      return;
 8005788:	46c0      	nop			; (mov r8, r8)
 800578a:	e006      	b.n	800579a <HAL_UART_IRQHandler+0x63a>
    return;
 800578c:	46c0      	nop			; (mov r8, r8)
 800578e:	e004      	b.n	800579a <HAL_UART_IRQHandler+0x63a>
      return;
 8005790:	46c0      	nop			; (mov r8, r8)
 8005792:	e002      	b.n	800579a <HAL_UART_IRQHandler+0x63a>
      return;
 8005794:	46c0      	nop			; (mov r8, r8)
 8005796:	e000      	b.n	800579a <HAL_UART_IRQHandler+0x63a>
    return;
 8005798:	46c0      	nop			; (mov r8, r8)
  }
}
 800579a:	46bd      	mov	sp, r7
 800579c:	b02a      	add	sp, #168	; 0xa8
 800579e:	bdb0      	pop	{r4, r5, r7, pc}
 80057a0:	fffffeff 	.word	0xfffffeff
 80057a4:	fffffedf 	.word	0xfffffedf
 80057a8:	effffffe 	.word	0xeffffffe

080057ac <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b082      	sub	sp, #8
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80057b4:	46c0      	nop			; (mov r8, r8)
 80057b6:	46bd      	mov	sp, r7
 80057b8:	b002      	add	sp, #8
 80057ba:	bd80      	pop	{r7, pc}

080057bc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b082      	sub	sp, #8
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80057c4:	46c0      	nop			; (mov r8, r8)
 80057c6:	46bd      	mov	sp, r7
 80057c8:	b002      	add	sp, #8
 80057ca:	bd80      	pop	{r7, pc}

080057cc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b082      	sub	sp, #8
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
 80057d4:	000a      	movs	r2, r1
 80057d6:	1cbb      	adds	r3, r7, #2
 80057d8:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80057da:	46c0      	nop			; (mov r8, r8)
 80057dc:	46bd      	mov	sp, r7
 80057de:	b002      	add	sp, #8
 80057e0:	bd80      	pop	{r7, pc}
	...

080057e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80057e4:	b5b0      	push	{r4, r5, r7, lr}
 80057e6:	b090      	sub	sp, #64	; 0x40
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80057ec:	231a      	movs	r3, #26
 80057ee:	2220      	movs	r2, #32
 80057f0:	189b      	adds	r3, r3, r2
 80057f2:	19db      	adds	r3, r3, r7
 80057f4:	2200      	movs	r2, #0
 80057f6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80057f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057fa:	689a      	ldr	r2, [r3, #8]
 80057fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057fe:	691b      	ldr	r3, [r3, #16]
 8005800:	431a      	orrs	r2, r3
 8005802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005804:	695b      	ldr	r3, [r3, #20]
 8005806:	431a      	orrs	r2, r3
 8005808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800580a:	69db      	ldr	r3, [r3, #28]
 800580c:	4313      	orrs	r3, r2
 800580e:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4ac1      	ldr	r2, [pc, #772]	; (8005b1c <UART_SetConfig+0x338>)
 8005818:	4013      	ands	r3, r2
 800581a:	0019      	movs	r1, r3
 800581c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800581e:	681a      	ldr	r2, [r3, #0]
 8005820:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005822:	430b      	orrs	r3, r1
 8005824:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	685b      	ldr	r3, [r3, #4]
 800582c:	4abc      	ldr	r2, [pc, #752]	; (8005b20 <UART_SetConfig+0x33c>)
 800582e:	4013      	ands	r3, r2
 8005830:	0018      	movs	r0, r3
 8005832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005834:	68d9      	ldr	r1, [r3, #12]
 8005836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005838:	681a      	ldr	r2, [r3, #0]
 800583a:	0003      	movs	r3, r0
 800583c:	430b      	orrs	r3, r1
 800583e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005842:	699b      	ldr	r3, [r3, #24]
 8005844:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4ab6      	ldr	r2, [pc, #728]	; (8005b24 <UART_SetConfig+0x340>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d009      	beq.n	8005864 <UART_SetConfig+0x80>
 8005850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4ab4      	ldr	r2, [pc, #720]	; (8005b28 <UART_SetConfig+0x344>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d004      	beq.n	8005864 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800585a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800585c:	6a1b      	ldr	r3, [r3, #32]
 800585e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005860:	4313      	orrs	r3, r2
 8005862:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	689b      	ldr	r3, [r3, #8]
 800586a:	4ab0      	ldr	r2, [pc, #704]	; (8005b2c <UART_SetConfig+0x348>)
 800586c:	4013      	ands	r3, r2
 800586e:	0019      	movs	r1, r3
 8005870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005872:	681a      	ldr	r2, [r3, #0]
 8005874:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005876:	430b      	orrs	r3, r1
 8005878:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800587a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005880:	220f      	movs	r2, #15
 8005882:	4393      	bics	r3, r2
 8005884:	0018      	movs	r0, r3
 8005886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005888:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800588a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800588c:	681a      	ldr	r2, [r3, #0]
 800588e:	0003      	movs	r3, r0
 8005890:	430b      	orrs	r3, r1
 8005892:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4aa5      	ldr	r2, [pc, #660]	; (8005b30 <UART_SetConfig+0x34c>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d131      	bne.n	8005902 <UART_SetConfig+0x11e>
 800589e:	4ba5      	ldr	r3, [pc, #660]	; (8005b34 <UART_SetConfig+0x350>)
 80058a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058a2:	2203      	movs	r2, #3
 80058a4:	4013      	ands	r3, r2
 80058a6:	2b03      	cmp	r3, #3
 80058a8:	d01d      	beq.n	80058e6 <UART_SetConfig+0x102>
 80058aa:	d823      	bhi.n	80058f4 <UART_SetConfig+0x110>
 80058ac:	2b02      	cmp	r3, #2
 80058ae:	d00c      	beq.n	80058ca <UART_SetConfig+0xe6>
 80058b0:	d820      	bhi.n	80058f4 <UART_SetConfig+0x110>
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d002      	beq.n	80058bc <UART_SetConfig+0xd8>
 80058b6:	2b01      	cmp	r3, #1
 80058b8:	d00e      	beq.n	80058d8 <UART_SetConfig+0xf4>
 80058ba:	e01b      	b.n	80058f4 <UART_SetConfig+0x110>
 80058bc:	231b      	movs	r3, #27
 80058be:	2220      	movs	r2, #32
 80058c0:	189b      	adds	r3, r3, r2
 80058c2:	19db      	adds	r3, r3, r7
 80058c4:	2200      	movs	r2, #0
 80058c6:	701a      	strb	r2, [r3, #0]
 80058c8:	e154      	b.n	8005b74 <UART_SetConfig+0x390>
 80058ca:	231b      	movs	r3, #27
 80058cc:	2220      	movs	r2, #32
 80058ce:	189b      	adds	r3, r3, r2
 80058d0:	19db      	adds	r3, r3, r7
 80058d2:	2202      	movs	r2, #2
 80058d4:	701a      	strb	r2, [r3, #0]
 80058d6:	e14d      	b.n	8005b74 <UART_SetConfig+0x390>
 80058d8:	231b      	movs	r3, #27
 80058da:	2220      	movs	r2, #32
 80058dc:	189b      	adds	r3, r3, r2
 80058de:	19db      	adds	r3, r3, r7
 80058e0:	2204      	movs	r2, #4
 80058e2:	701a      	strb	r2, [r3, #0]
 80058e4:	e146      	b.n	8005b74 <UART_SetConfig+0x390>
 80058e6:	231b      	movs	r3, #27
 80058e8:	2220      	movs	r2, #32
 80058ea:	189b      	adds	r3, r3, r2
 80058ec:	19db      	adds	r3, r3, r7
 80058ee:	2208      	movs	r2, #8
 80058f0:	701a      	strb	r2, [r3, #0]
 80058f2:	e13f      	b.n	8005b74 <UART_SetConfig+0x390>
 80058f4:	231b      	movs	r3, #27
 80058f6:	2220      	movs	r2, #32
 80058f8:	189b      	adds	r3, r3, r2
 80058fa:	19db      	adds	r3, r3, r7
 80058fc:	2210      	movs	r2, #16
 80058fe:	701a      	strb	r2, [r3, #0]
 8005900:	e138      	b.n	8005b74 <UART_SetConfig+0x390>
 8005902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a8c      	ldr	r2, [pc, #560]	; (8005b38 <UART_SetConfig+0x354>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d131      	bne.n	8005970 <UART_SetConfig+0x18c>
 800590c:	4b89      	ldr	r3, [pc, #548]	; (8005b34 <UART_SetConfig+0x350>)
 800590e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005910:	220c      	movs	r2, #12
 8005912:	4013      	ands	r3, r2
 8005914:	2b0c      	cmp	r3, #12
 8005916:	d01d      	beq.n	8005954 <UART_SetConfig+0x170>
 8005918:	d823      	bhi.n	8005962 <UART_SetConfig+0x17e>
 800591a:	2b08      	cmp	r3, #8
 800591c:	d00c      	beq.n	8005938 <UART_SetConfig+0x154>
 800591e:	d820      	bhi.n	8005962 <UART_SetConfig+0x17e>
 8005920:	2b00      	cmp	r3, #0
 8005922:	d002      	beq.n	800592a <UART_SetConfig+0x146>
 8005924:	2b04      	cmp	r3, #4
 8005926:	d00e      	beq.n	8005946 <UART_SetConfig+0x162>
 8005928:	e01b      	b.n	8005962 <UART_SetConfig+0x17e>
 800592a:	231b      	movs	r3, #27
 800592c:	2220      	movs	r2, #32
 800592e:	189b      	adds	r3, r3, r2
 8005930:	19db      	adds	r3, r3, r7
 8005932:	2200      	movs	r2, #0
 8005934:	701a      	strb	r2, [r3, #0]
 8005936:	e11d      	b.n	8005b74 <UART_SetConfig+0x390>
 8005938:	231b      	movs	r3, #27
 800593a:	2220      	movs	r2, #32
 800593c:	189b      	adds	r3, r3, r2
 800593e:	19db      	adds	r3, r3, r7
 8005940:	2202      	movs	r2, #2
 8005942:	701a      	strb	r2, [r3, #0]
 8005944:	e116      	b.n	8005b74 <UART_SetConfig+0x390>
 8005946:	231b      	movs	r3, #27
 8005948:	2220      	movs	r2, #32
 800594a:	189b      	adds	r3, r3, r2
 800594c:	19db      	adds	r3, r3, r7
 800594e:	2204      	movs	r2, #4
 8005950:	701a      	strb	r2, [r3, #0]
 8005952:	e10f      	b.n	8005b74 <UART_SetConfig+0x390>
 8005954:	231b      	movs	r3, #27
 8005956:	2220      	movs	r2, #32
 8005958:	189b      	adds	r3, r3, r2
 800595a:	19db      	adds	r3, r3, r7
 800595c:	2208      	movs	r2, #8
 800595e:	701a      	strb	r2, [r3, #0]
 8005960:	e108      	b.n	8005b74 <UART_SetConfig+0x390>
 8005962:	231b      	movs	r3, #27
 8005964:	2220      	movs	r2, #32
 8005966:	189b      	adds	r3, r3, r2
 8005968:	19db      	adds	r3, r3, r7
 800596a:	2210      	movs	r2, #16
 800596c:	701a      	strb	r2, [r3, #0]
 800596e:	e101      	b.n	8005b74 <UART_SetConfig+0x390>
 8005970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a71      	ldr	r2, [pc, #452]	; (8005b3c <UART_SetConfig+0x358>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d131      	bne.n	80059de <UART_SetConfig+0x1fa>
 800597a:	4b6e      	ldr	r3, [pc, #440]	; (8005b34 <UART_SetConfig+0x350>)
 800597c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800597e:	2230      	movs	r2, #48	; 0x30
 8005980:	4013      	ands	r3, r2
 8005982:	2b30      	cmp	r3, #48	; 0x30
 8005984:	d01d      	beq.n	80059c2 <UART_SetConfig+0x1de>
 8005986:	d823      	bhi.n	80059d0 <UART_SetConfig+0x1ec>
 8005988:	2b20      	cmp	r3, #32
 800598a:	d00c      	beq.n	80059a6 <UART_SetConfig+0x1c2>
 800598c:	d820      	bhi.n	80059d0 <UART_SetConfig+0x1ec>
 800598e:	2b00      	cmp	r3, #0
 8005990:	d002      	beq.n	8005998 <UART_SetConfig+0x1b4>
 8005992:	2b10      	cmp	r3, #16
 8005994:	d00e      	beq.n	80059b4 <UART_SetConfig+0x1d0>
 8005996:	e01b      	b.n	80059d0 <UART_SetConfig+0x1ec>
 8005998:	231b      	movs	r3, #27
 800599a:	2220      	movs	r2, #32
 800599c:	189b      	adds	r3, r3, r2
 800599e:	19db      	adds	r3, r3, r7
 80059a0:	2200      	movs	r2, #0
 80059a2:	701a      	strb	r2, [r3, #0]
 80059a4:	e0e6      	b.n	8005b74 <UART_SetConfig+0x390>
 80059a6:	231b      	movs	r3, #27
 80059a8:	2220      	movs	r2, #32
 80059aa:	189b      	adds	r3, r3, r2
 80059ac:	19db      	adds	r3, r3, r7
 80059ae:	2202      	movs	r2, #2
 80059b0:	701a      	strb	r2, [r3, #0]
 80059b2:	e0df      	b.n	8005b74 <UART_SetConfig+0x390>
 80059b4:	231b      	movs	r3, #27
 80059b6:	2220      	movs	r2, #32
 80059b8:	189b      	adds	r3, r3, r2
 80059ba:	19db      	adds	r3, r3, r7
 80059bc:	2204      	movs	r2, #4
 80059be:	701a      	strb	r2, [r3, #0]
 80059c0:	e0d8      	b.n	8005b74 <UART_SetConfig+0x390>
 80059c2:	231b      	movs	r3, #27
 80059c4:	2220      	movs	r2, #32
 80059c6:	189b      	adds	r3, r3, r2
 80059c8:	19db      	adds	r3, r3, r7
 80059ca:	2208      	movs	r2, #8
 80059cc:	701a      	strb	r2, [r3, #0]
 80059ce:	e0d1      	b.n	8005b74 <UART_SetConfig+0x390>
 80059d0:	231b      	movs	r3, #27
 80059d2:	2220      	movs	r2, #32
 80059d4:	189b      	adds	r3, r3, r2
 80059d6:	19db      	adds	r3, r3, r7
 80059d8:	2210      	movs	r2, #16
 80059da:	701a      	strb	r2, [r3, #0]
 80059dc:	e0ca      	b.n	8005b74 <UART_SetConfig+0x390>
 80059de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a57      	ldr	r2, [pc, #348]	; (8005b40 <UART_SetConfig+0x35c>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d106      	bne.n	80059f6 <UART_SetConfig+0x212>
 80059e8:	231b      	movs	r3, #27
 80059ea:	2220      	movs	r2, #32
 80059ec:	189b      	adds	r3, r3, r2
 80059ee:	19db      	adds	r3, r3, r7
 80059f0:	2200      	movs	r2, #0
 80059f2:	701a      	strb	r2, [r3, #0]
 80059f4:	e0be      	b.n	8005b74 <UART_SetConfig+0x390>
 80059f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a52      	ldr	r2, [pc, #328]	; (8005b44 <UART_SetConfig+0x360>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d106      	bne.n	8005a0e <UART_SetConfig+0x22a>
 8005a00:	231b      	movs	r3, #27
 8005a02:	2220      	movs	r2, #32
 8005a04:	189b      	adds	r3, r3, r2
 8005a06:	19db      	adds	r3, r3, r7
 8005a08:	2200      	movs	r2, #0
 8005a0a:	701a      	strb	r2, [r3, #0]
 8005a0c:	e0b2      	b.n	8005b74 <UART_SetConfig+0x390>
 8005a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4a4d      	ldr	r2, [pc, #308]	; (8005b48 <UART_SetConfig+0x364>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d106      	bne.n	8005a26 <UART_SetConfig+0x242>
 8005a18:	231b      	movs	r3, #27
 8005a1a:	2220      	movs	r2, #32
 8005a1c:	189b      	adds	r3, r3, r2
 8005a1e:	19db      	adds	r3, r3, r7
 8005a20:	2200      	movs	r2, #0
 8005a22:	701a      	strb	r2, [r3, #0]
 8005a24:	e0a6      	b.n	8005b74 <UART_SetConfig+0x390>
 8005a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a3e      	ldr	r2, [pc, #248]	; (8005b24 <UART_SetConfig+0x340>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d13e      	bne.n	8005aae <UART_SetConfig+0x2ca>
 8005a30:	4b40      	ldr	r3, [pc, #256]	; (8005b34 <UART_SetConfig+0x350>)
 8005a32:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005a34:	23c0      	movs	r3, #192	; 0xc0
 8005a36:	011b      	lsls	r3, r3, #4
 8005a38:	4013      	ands	r3, r2
 8005a3a:	22c0      	movs	r2, #192	; 0xc0
 8005a3c:	0112      	lsls	r2, r2, #4
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d027      	beq.n	8005a92 <UART_SetConfig+0x2ae>
 8005a42:	22c0      	movs	r2, #192	; 0xc0
 8005a44:	0112      	lsls	r2, r2, #4
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d82a      	bhi.n	8005aa0 <UART_SetConfig+0x2bc>
 8005a4a:	2280      	movs	r2, #128	; 0x80
 8005a4c:	0112      	lsls	r2, r2, #4
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d011      	beq.n	8005a76 <UART_SetConfig+0x292>
 8005a52:	2280      	movs	r2, #128	; 0x80
 8005a54:	0112      	lsls	r2, r2, #4
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d822      	bhi.n	8005aa0 <UART_SetConfig+0x2bc>
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d004      	beq.n	8005a68 <UART_SetConfig+0x284>
 8005a5e:	2280      	movs	r2, #128	; 0x80
 8005a60:	00d2      	lsls	r2, r2, #3
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d00e      	beq.n	8005a84 <UART_SetConfig+0x2a0>
 8005a66:	e01b      	b.n	8005aa0 <UART_SetConfig+0x2bc>
 8005a68:	231b      	movs	r3, #27
 8005a6a:	2220      	movs	r2, #32
 8005a6c:	189b      	adds	r3, r3, r2
 8005a6e:	19db      	adds	r3, r3, r7
 8005a70:	2200      	movs	r2, #0
 8005a72:	701a      	strb	r2, [r3, #0]
 8005a74:	e07e      	b.n	8005b74 <UART_SetConfig+0x390>
 8005a76:	231b      	movs	r3, #27
 8005a78:	2220      	movs	r2, #32
 8005a7a:	189b      	adds	r3, r3, r2
 8005a7c:	19db      	adds	r3, r3, r7
 8005a7e:	2202      	movs	r2, #2
 8005a80:	701a      	strb	r2, [r3, #0]
 8005a82:	e077      	b.n	8005b74 <UART_SetConfig+0x390>
 8005a84:	231b      	movs	r3, #27
 8005a86:	2220      	movs	r2, #32
 8005a88:	189b      	adds	r3, r3, r2
 8005a8a:	19db      	adds	r3, r3, r7
 8005a8c:	2204      	movs	r2, #4
 8005a8e:	701a      	strb	r2, [r3, #0]
 8005a90:	e070      	b.n	8005b74 <UART_SetConfig+0x390>
 8005a92:	231b      	movs	r3, #27
 8005a94:	2220      	movs	r2, #32
 8005a96:	189b      	adds	r3, r3, r2
 8005a98:	19db      	adds	r3, r3, r7
 8005a9a:	2208      	movs	r2, #8
 8005a9c:	701a      	strb	r2, [r3, #0]
 8005a9e:	e069      	b.n	8005b74 <UART_SetConfig+0x390>
 8005aa0:	231b      	movs	r3, #27
 8005aa2:	2220      	movs	r2, #32
 8005aa4:	189b      	adds	r3, r3, r2
 8005aa6:	19db      	adds	r3, r3, r7
 8005aa8:	2210      	movs	r2, #16
 8005aaa:	701a      	strb	r2, [r3, #0]
 8005aac:	e062      	b.n	8005b74 <UART_SetConfig+0x390>
 8005aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4a1d      	ldr	r2, [pc, #116]	; (8005b28 <UART_SetConfig+0x344>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d157      	bne.n	8005b68 <UART_SetConfig+0x384>
 8005ab8:	4b1e      	ldr	r3, [pc, #120]	; (8005b34 <UART_SetConfig+0x350>)
 8005aba:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005abc:	23c0      	movs	r3, #192	; 0xc0
 8005abe:	009b      	lsls	r3, r3, #2
 8005ac0:	4013      	ands	r3, r2
 8005ac2:	22c0      	movs	r2, #192	; 0xc0
 8005ac4:	0092      	lsls	r2, r2, #2
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d040      	beq.n	8005b4c <UART_SetConfig+0x368>
 8005aca:	22c0      	movs	r2, #192	; 0xc0
 8005acc:	0092      	lsls	r2, r2, #2
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d843      	bhi.n	8005b5a <UART_SetConfig+0x376>
 8005ad2:	2280      	movs	r2, #128	; 0x80
 8005ad4:	0092      	lsls	r2, r2, #2
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d011      	beq.n	8005afe <UART_SetConfig+0x31a>
 8005ada:	2280      	movs	r2, #128	; 0x80
 8005adc:	0092      	lsls	r2, r2, #2
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d83b      	bhi.n	8005b5a <UART_SetConfig+0x376>
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d004      	beq.n	8005af0 <UART_SetConfig+0x30c>
 8005ae6:	2280      	movs	r2, #128	; 0x80
 8005ae8:	0052      	lsls	r2, r2, #1
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d00e      	beq.n	8005b0c <UART_SetConfig+0x328>
 8005aee:	e034      	b.n	8005b5a <UART_SetConfig+0x376>
 8005af0:	231b      	movs	r3, #27
 8005af2:	2220      	movs	r2, #32
 8005af4:	189b      	adds	r3, r3, r2
 8005af6:	19db      	adds	r3, r3, r7
 8005af8:	2200      	movs	r2, #0
 8005afa:	701a      	strb	r2, [r3, #0]
 8005afc:	e03a      	b.n	8005b74 <UART_SetConfig+0x390>
 8005afe:	231b      	movs	r3, #27
 8005b00:	2220      	movs	r2, #32
 8005b02:	189b      	adds	r3, r3, r2
 8005b04:	19db      	adds	r3, r3, r7
 8005b06:	2202      	movs	r2, #2
 8005b08:	701a      	strb	r2, [r3, #0]
 8005b0a:	e033      	b.n	8005b74 <UART_SetConfig+0x390>
 8005b0c:	231b      	movs	r3, #27
 8005b0e:	2220      	movs	r2, #32
 8005b10:	189b      	adds	r3, r3, r2
 8005b12:	19db      	adds	r3, r3, r7
 8005b14:	2204      	movs	r2, #4
 8005b16:	701a      	strb	r2, [r3, #0]
 8005b18:	e02c      	b.n	8005b74 <UART_SetConfig+0x390>
 8005b1a:	46c0      	nop			; (mov r8, r8)
 8005b1c:	cfff69f3 	.word	0xcfff69f3
 8005b20:	ffffcfff 	.word	0xffffcfff
 8005b24:	40008000 	.word	0x40008000
 8005b28:	40008400 	.word	0x40008400
 8005b2c:	11fff4ff 	.word	0x11fff4ff
 8005b30:	40013800 	.word	0x40013800
 8005b34:	40021000 	.word	0x40021000
 8005b38:	40004400 	.word	0x40004400
 8005b3c:	40004800 	.word	0x40004800
 8005b40:	40004c00 	.word	0x40004c00
 8005b44:	40005000 	.word	0x40005000
 8005b48:	40013c00 	.word	0x40013c00
 8005b4c:	231b      	movs	r3, #27
 8005b4e:	2220      	movs	r2, #32
 8005b50:	189b      	adds	r3, r3, r2
 8005b52:	19db      	adds	r3, r3, r7
 8005b54:	2208      	movs	r2, #8
 8005b56:	701a      	strb	r2, [r3, #0]
 8005b58:	e00c      	b.n	8005b74 <UART_SetConfig+0x390>
 8005b5a:	231b      	movs	r3, #27
 8005b5c:	2220      	movs	r2, #32
 8005b5e:	189b      	adds	r3, r3, r2
 8005b60:	19db      	adds	r3, r3, r7
 8005b62:	2210      	movs	r2, #16
 8005b64:	701a      	strb	r2, [r3, #0]
 8005b66:	e005      	b.n	8005b74 <UART_SetConfig+0x390>
 8005b68:	231b      	movs	r3, #27
 8005b6a:	2220      	movs	r2, #32
 8005b6c:	189b      	adds	r3, r3, r2
 8005b6e:	19db      	adds	r3, r3, r7
 8005b70:	2210      	movs	r2, #16
 8005b72:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4ac1      	ldr	r2, [pc, #772]	; (8005e80 <UART_SetConfig+0x69c>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d005      	beq.n	8005b8a <UART_SetConfig+0x3a6>
 8005b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4ac0      	ldr	r2, [pc, #768]	; (8005e84 <UART_SetConfig+0x6a0>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d000      	beq.n	8005b8a <UART_SetConfig+0x3a6>
 8005b88:	e093      	b.n	8005cb2 <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005b8a:	231b      	movs	r3, #27
 8005b8c:	2220      	movs	r2, #32
 8005b8e:	189b      	adds	r3, r3, r2
 8005b90:	19db      	adds	r3, r3, r7
 8005b92:	781b      	ldrb	r3, [r3, #0]
 8005b94:	2b08      	cmp	r3, #8
 8005b96:	d015      	beq.n	8005bc4 <UART_SetConfig+0x3e0>
 8005b98:	dc18      	bgt.n	8005bcc <UART_SetConfig+0x3e8>
 8005b9a:	2b04      	cmp	r3, #4
 8005b9c:	d00d      	beq.n	8005bba <UART_SetConfig+0x3d6>
 8005b9e:	dc15      	bgt.n	8005bcc <UART_SetConfig+0x3e8>
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d002      	beq.n	8005baa <UART_SetConfig+0x3c6>
 8005ba4:	2b02      	cmp	r3, #2
 8005ba6:	d005      	beq.n	8005bb4 <UART_SetConfig+0x3d0>
 8005ba8:	e010      	b.n	8005bcc <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005baa:	f7fd fa5d 	bl	8003068 <HAL_RCC_GetPCLK1Freq>
 8005bae:	0003      	movs	r3, r0
 8005bb0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005bb2:	e014      	b.n	8005bde <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005bb4:	4bb4      	ldr	r3, [pc, #720]	; (8005e88 <UART_SetConfig+0x6a4>)
 8005bb6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005bb8:	e011      	b.n	8005bde <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005bba:	f7fd f9c9 	bl	8002f50 <HAL_RCC_GetSysClockFreq>
 8005bbe:	0003      	movs	r3, r0
 8005bc0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005bc2:	e00c      	b.n	8005bde <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005bc4:	2380      	movs	r3, #128	; 0x80
 8005bc6:	021b      	lsls	r3, r3, #8
 8005bc8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005bca:	e008      	b.n	8005bde <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 8005bcc:	2300      	movs	r3, #0
 8005bce:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8005bd0:	231a      	movs	r3, #26
 8005bd2:	2220      	movs	r2, #32
 8005bd4:	189b      	adds	r3, r3, r2
 8005bd6:	19db      	adds	r3, r3, r7
 8005bd8:	2201      	movs	r2, #1
 8005bda:	701a      	strb	r2, [r3, #0]
        break;
 8005bdc:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005bde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d100      	bne.n	8005be6 <UART_SetConfig+0x402>
 8005be4:	e135      	b.n	8005e52 <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005bea:	4ba8      	ldr	r3, [pc, #672]	; (8005e8c <UART_SetConfig+0x6a8>)
 8005bec:	0052      	lsls	r2, r2, #1
 8005bee:	5ad3      	ldrh	r3, [r2, r3]
 8005bf0:	0019      	movs	r1, r3
 8005bf2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005bf4:	f7fa fa98 	bl	8000128 <__udivsi3>
 8005bf8:	0003      	movs	r3, r0
 8005bfa:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bfe:	685a      	ldr	r2, [r3, #4]
 8005c00:	0013      	movs	r3, r2
 8005c02:	005b      	lsls	r3, r3, #1
 8005c04:	189b      	adds	r3, r3, r2
 8005c06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c08:	429a      	cmp	r2, r3
 8005c0a:	d305      	bcc.n	8005c18 <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c0e:	685b      	ldr	r3, [r3, #4]
 8005c10:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005c12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c14:	429a      	cmp	r2, r3
 8005c16:	d906      	bls.n	8005c26 <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 8005c18:	231a      	movs	r3, #26
 8005c1a:	2220      	movs	r2, #32
 8005c1c:	189b      	adds	r3, r3, r2
 8005c1e:	19db      	adds	r3, r3, r7
 8005c20:	2201      	movs	r2, #1
 8005c22:	701a      	strb	r2, [r3, #0]
 8005c24:	e044      	b.n	8005cb0 <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c28:	61bb      	str	r3, [r7, #24]
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	61fb      	str	r3, [r7, #28]
 8005c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005c32:	4b96      	ldr	r3, [pc, #600]	; (8005e8c <UART_SetConfig+0x6a8>)
 8005c34:	0052      	lsls	r2, r2, #1
 8005c36:	5ad3      	ldrh	r3, [r2, r3]
 8005c38:	613b      	str	r3, [r7, #16]
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	617b      	str	r3, [r7, #20]
 8005c3e:	693a      	ldr	r2, [r7, #16]
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	69b8      	ldr	r0, [r7, #24]
 8005c44:	69f9      	ldr	r1, [r7, #28]
 8005c46:	f7fa fbe5 	bl	8000414 <__aeabi_uldivmod>
 8005c4a:	0002      	movs	r2, r0
 8005c4c:	000b      	movs	r3, r1
 8005c4e:	0e11      	lsrs	r1, r2, #24
 8005c50:	021d      	lsls	r5, r3, #8
 8005c52:	430d      	orrs	r5, r1
 8005c54:	0214      	lsls	r4, r2, #8
 8005c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c58:	685b      	ldr	r3, [r3, #4]
 8005c5a:	085b      	lsrs	r3, r3, #1
 8005c5c:	60bb      	str	r3, [r7, #8]
 8005c5e:	2300      	movs	r3, #0
 8005c60:	60fb      	str	r3, [r7, #12]
 8005c62:	68b8      	ldr	r0, [r7, #8]
 8005c64:	68f9      	ldr	r1, [r7, #12]
 8005c66:	1900      	adds	r0, r0, r4
 8005c68:	4169      	adcs	r1, r5
 8005c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	603b      	str	r3, [r7, #0]
 8005c70:	2300      	movs	r3, #0
 8005c72:	607b      	str	r3, [r7, #4]
 8005c74:	683a      	ldr	r2, [r7, #0]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	f7fa fbcc 	bl	8000414 <__aeabi_uldivmod>
 8005c7c:	0002      	movs	r2, r0
 8005c7e:	000b      	movs	r3, r1
 8005c80:	0013      	movs	r3, r2
 8005c82:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005c84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c86:	23c0      	movs	r3, #192	; 0xc0
 8005c88:	009b      	lsls	r3, r3, #2
 8005c8a:	429a      	cmp	r2, r3
 8005c8c:	d309      	bcc.n	8005ca2 <UART_SetConfig+0x4be>
 8005c8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c90:	2380      	movs	r3, #128	; 0x80
 8005c92:	035b      	lsls	r3, r3, #13
 8005c94:	429a      	cmp	r2, r3
 8005c96:	d204      	bcs.n	8005ca2 <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 8005c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c9e:	60da      	str	r2, [r3, #12]
 8005ca0:	e006      	b.n	8005cb0 <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 8005ca2:	231a      	movs	r3, #26
 8005ca4:	2220      	movs	r2, #32
 8005ca6:	189b      	adds	r3, r3, r2
 8005ca8:	19db      	adds	r3, r3, r7
 8005caa:	2201      	movs	r2, #1
 8005cac:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 8005cae:	e0d0      	b.n	8005e52 <UART_SetConfig+0x66e>
 8005cb0:	e0cf      	b.n	8005e52 <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb4:	69da      	ldr	r2, [r3, #28]
 8005cb6:	2380      	movs	r3, #128	; 0x80
 8005cb8:	021b      	lsls	r3, r3, #8
 8005cba:	429a      	cmp	r2, r3
 8005cbc:	d000      	beq.n	8005cc0 <UART_SetConfig+0x4dc>
 8005cbe:	e070      	b.n	8005da2 <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 8005cc0:	231b      	movs	r3, #27
 8005cc2:	2220      	movs	r2, #32
 8005cc4:	189b      	adds	r3, r3, r2
 8005cc6:	19db      	adds	r3, r3, r7
 8005cc8:	781b      	ldrb	r3, [r3, #0]
 8005cca:	2b08      	cmp	r3, #8
 8005ccc:	d015      	beq.n	8005cfa <UART_SetConfig+0x516>
 8005cce:	dc18      	bgt.n	8005d02 <UART_SetConfig+0x51e>
 8005cd0:	2b04      	cmp	r3, #4
 8005cd2:	d00d      	beq.n	8005cf0 <UART_SetConfig+0x50c>
 8005cd4:	dc15      	bgt.n	8005d02 <UART_SetConfig+0x51e>
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d002      	beq.n	8005ce0 <UART_SetConfig+0x4fc>
 8005cda:	2b02      	cmp	r3, #2
 8005cdc:	d005      	beq.n	8005cea <UART_SetConfig+0x506>
 8005cde:	e010      	b.n	8005d02 <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ce0:	f7fd f9c2 	bl	8003068 <HAL_RCC_GetPCLK1Freq>
 8005ce4:	0003      	movs	r3, r0
 8005ce6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005ce8:	e014      	b.n	8005d14 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005cea:	4b67      	ldr	r3, [pc, #412]	; (8005e88 <UART_SetConfig+0x6a4>)
 8005cec:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005cee:	e011      	b.n	8005d14 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005cf0:	f7fd f92e 	bl	8002f50 <HAL_RCC_GetSysClockFreq>
 8005cf4:	0003      	movs	r3, r0
 8005cf6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005cf8:	e00c      	b.n	8005d14 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005cfa:	2380      	movs	r3, #128	; 0x80
 8005cfc:	021b      	lsls	r3, r3, #8
 8005cfe:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005d00:	e008      	b.n	8005d14 <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 8005d02:	2300      	movs	r3, #0
 8005d04:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8005d06:	231a      	movs	r3, #26
 8005d08:	2220      	movs	r2, #32
 8005d0a:	189b      	adds	r3, r3, r2
 8005d0c:	19db      	adds	r3, r3, r7
 8005d0e:	2201      	movs	r2, #1
 8005d10:	701a      	strb	r2, [r3, #0]
        break;
 8005d12:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005d14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d100      	bne.n	8005d1c <UART_SetConfig+0x538>
 8005d1a:	e09a      	b.n	8005e52 <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005d20:	4b5a      	ldr	r3, [pc, #360]	; (8005e8c <UART_SetConfig+0x6a8>)
 8005d22:	0052      	lsls	r2, r2, #1
 8005d24:	5ad3      	ldrh	r3, [r2, r3]
 8005d26:	0019      	movs	r1, r3
 8005d28:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005d2a:	f7fa f9fd 	bl	8000128 <__udivsi3>
 8005d2e:	0003      	movs	r3, r0
 8005d30:	005a      	lsls	r2, r3, #1
 8005d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	085b      	lsrs	r3, r3, #1
 8005d38:	18d2      	adds	r2, r2, r3
 8005d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	0019      	movs	r1, r3
 8005d40:	0010      	movs	r0, r2
 8005d42:	f7fa f9f1 	bl	8000128 <__udivsi3>
 8005d46:	0003      	movs	r3, r0
 8005d48:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d4c:	2b0f      	cmp	r3, #15
 8005d4e:	d921      	bls.n	8005d94 <UART_SetConfig+0x5b0>
 8005d50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d52:	2380      	movs	r3, #128	; 0x80
 8005d54:	025b      	lsls	r3, r3, #9
 8005d56:	429a      	cmp	r2, r3
 8005d58:	d21c      	bcs.n	8005d94 <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d5c:	b29a      	uxth	r2, r3
 8005d5e:	200e      	movs	r0, #14
 8005d60:	2420      	movs	r4, #32
 8005d62:	1903      	adds	r3, r0, r4
 8005d64:	19db      	adds	r3, r3, r7
 8005d66:	210f      	movs	r1, #15
 8005d68:	438a      	bics	r2, r1
 8005d6a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d6e:	085b      	lsrs	r3, r3, #1
 8005d70:	b29b      	uxth	r3, r3
 8005d72:	2207      	movs	r2, #7
 8005d74:	4013      	ands	r3, r2
 8005d76:	b299      	uxth	r1, r3
 8005d78:	1903      	adds	r3, r0, r4
 8005d7a:	19db      	adds	r3, r3, r7
 8005d7c:	1902      	adds	r2, r0, r4
 8005d7e:	19d2      	adds	r2, r2, r7
 8005d80:	8812      	ldrh	r2, [r2, #0]
 8005d82:	430a      	orrs	r2, r1
 8005d84:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	1902      	adds	r2, r0, r4
 8005d8c:	19d2      	adds	r2, r2, r7
 8005d8e:	8812      	ldrh	r2, [r2, #0]
 8005d90:	60da      	str	r2, [r3, #12]
 8005d92:	e05e      	b.n	8005e52 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8005d94:	231a      	movs	r3, #26
 8005d96:	2220      	movs	r2, #32
 8005d98:	189b      	adds	r3, r3, r2
 8005d9a:	19db      	adds	r3, r3, r7
 8005d9c:	2201      	movs	r2, #1
 8005d9e:	701a      	strb	r2, [r3, #0]
 8005da0:	e057      	b.n	8005e52 <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005da2:	231b      	movs	r3, #27
 8005da4:	2220      	movs	r2, #32
 8005da6:	189b      	adds	r3, r3, r2
 8005da8:	19db      	adds	r3, r3, r7
 8005daa:	781b      	ldrb	r3, [r3, #0]
 8005dac:	2b08      	cmp	r3, #8
 8005dae:	d015      	beq.n	8005ddc <UART_SetConfig+0x5f8>
 8005db0:	dc18      	bgt.n	8005de4 <UART_SetConfig+0x600>
 8005db2:	2b04      	cmp	r3, #4
 8005db4:	d00d      	beq.n	8005dd2 <UART_SetConfig+0x5ee>
 8005db6:	dc15      	bgt.n	8005de4 <UART_SetConfig+0x600>
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d002      	beq.n	8005dc2 <UART_SetConfig+0x5de>
 8005dbc:	2b02      	cmp	r3, #2
 8005dbe:	d005      	beq.n	8005dcc <UART_SetConfig+0x5e8>
 8005dc0:	e010      	b.n	8005de4 <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005dc2:	f7fd f951 	bl	8003068 <HAL_RCC_GetPCLK1Freq>
 8005dc6:	0003      	movs	r3, r0
 8005dc8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005dca:	e014      	b.n	8005df6 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005dcc:	4b2e      	ldr	r3, [pc, #184]	; (8005e88 <UART_SetConfig+0x6a4>)
 8005dce:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005dd0:	e011      	b.n	8005df6 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005dd2:	f7fd f8bd 	bl	8002f50 <HAL_RCC_GetSysClockFreq>
 8005dd6:	0003      	movs	r3, r0
 8005dd8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005dda:	e00c      	b.n	8005df6 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ddc:	2380      	movs	r3, #128	; 0x80
 8005dde:	021b      	lsls	r3, r3, #8
 8005de0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005de2:	e008      	b.n	8005df6 <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 8005de4:	2300      	movs	r3, #0
 8005de6:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8005de8:	231a      	movs	r3, #26
 8005dea:	2220      	movs	r2, #32
 8005dec:	189b      	adds	r3, r3, r2
 8005dee:	19db      	adds	r3, r3, r7
 8005df0:	2201      	movs	r2, #1
 8005df2:	701a      	strb	r2, [r3, #0]
        break;
 8005df4:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8005df6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d02a      	beq.n	8005e52 <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dfe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005e00:	4b22      	ldr	r3, [pc, #136]	; (8005e8c <UART_SetConfig+0x6a8>)
 8005e02:	0052      	lsls	r2, r2, #1
 8005e04:	5ad3      	ldrh	r3, [r2, r3]
 8005e06:	0019      	movs	r1, r3
 8005e08:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005e0a:	f7fa f98d 	bl	8000128 <__udivsi3>
 8005e0e:	0003      	movs	r3, r0
 8005e10:	001a      	movs	r2, r3
 8005e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	085b      	lsrs	r3, r3, #1
 8005e18:	18d2      	adds	r2, r2, r3
 8005e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	0019      	movs	r1, r3
 8005e20:	0010      	movs	r0, r2
 8005e22:	f7fa f981 	bl	8000128 <__udivsi3>
 8005e26:	0003      	movs	r3, r0
 8005e28:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e2c:	2b0f      	cmp	r3, #15
 8005e2e:	d90a      	bls.n	8005e46 <UART_SetConfig+0x662>
 8005e30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e32:	2380      	movs	r3, #128	; 0x80
 8005e34:	025b      	lsls	r3, r3, #9
 8005e36:	429a      	cmp	r2, r3
 8005e38:	d205      	bcs.n	8005e46 <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e3c:	b29a      	uxth	r2, r3
 8005e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	60da      	str	r2, [r3, #12]
 8005e44:	e005      	b.n	8005e52 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8005e46:	231a      	movs	r3, #26
 8005e48:	2220      	movs	r2, #32
 8005e4a:	189b      	adds	r3, r3, r2
 8005e4c:	19db      	adds	r3, r3, r7
 8005e4e:	2201      	movs	r2, #1
 8005e50:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e54:	226a      	movs	r2, #106	; 0x6a
 8005e56:	2101      	movs	r1, #1
 8005e58:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8005e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e5c:	2268      	movs	r2, #104	; 0x68
 8005e5e:	2101      	movs	r1, #1
 8005e60:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e64:	2200      	movs	r2, #0
 8005e66:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005e6e:	231a      	movs	r3, #26
 8005e70:	2220      	movs	r2, #32
 8005e72:	189b      	adds	r3, r3, r2
 8005e74:	19db      	adds	r3, r3, r7
 8005e76:	781b      	ldrb	r3, [r3, #0]
}
 8005e78:	0018      	movs	r0, r3
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	b010      	add	sp, #64	; 0x40
 8005e7e:	bdb0      	pop	{r4, r5, r7, pc}
 8005e80:	40008000 	.word	0x40008000
 8005e84:	40008400 	.word	0x40008400
 8005e88:	00f42400 	.word	0x00f42400
 8005e8c:	0800a4a0 	.word	0x0800a4a0

08005e90 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b082      	sub	sp, #8
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e9c:	2208      	movs	r2, #8
 8005e9e:	4013      	ands	r3, r2
 8005ea0:	d00b      	beq.n	8005eba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	685b      	ldr	r3, [r3, #4]
 8005ea8:	4a4a      	ldr	r2, [pc, #296]	; (8005fd4 <UART_AdvFeatureConfig+0x144>)
 8005eaa:	4013      	ands	r3, r2
 8005eac:	0019      	movs	r1, r3
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	430a      	orrs	r2, r1
 8005eb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	4013      	ands	r3, r2
 8005ec2:	d00b      	beq.n	8005edc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	4a43      	ldr	r2, [pc, #268]	; (8005fd8 <UART_AdvFeatureConfig+0x148>)
 8005ecc:	4013      	ands	r3, r2
 8005ece:	0019      	movs	r1, r3
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	430a      	orrs	r2, r1
 8005eda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ee0:	2202      	movs	r2, #2
 8005ee2:	4013      	ands	r3, r2
 8005ee4:	d00b      	beq.n	8005efe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	685b      	ldr	r3, [r3, #4]
 8005eec:	4a3b      	ldr	r2, [pc, #236]	; (8005fdc <UART_AdvFeatureConfig+0x14c>)
 8005eee:	4013      	ands	r3, r2
 8005ef0:	0019      	movs	r1, r3
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	430a      	orrs	r2, r1
 8005efc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f02:	2204      	movs	r2, #4
 8005f04:	4013      	ands	r3, r2
 8005f06:	d00b      	beq.n	8005f20 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	4a34      	ldr	r2, [pc, #208]	; (8005fe0 <UART_AdvFeatureConfig+0x150>)
 8005f10:	4013      	ands	r3, r2
 8005f12:	0019      	movs	r1, r3
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	430a      	orrs	r2, r1
 8005f1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f24:	2210      	movs	r2, #16
 8005f26:	4013      	ands	r3, r2
 8005f28:	d00b      	beq.n	8005f42 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	689b      	ldr	r3, [r3, #8]
 8005f30:	4a2c      	ldr	r2, [pc, #176]	; (8005fe4 <UART_AdvFeatureConfig+0x154>)
 8005f32:	4013      	ands	r3, r2
 8005f34:	0019      	movs	r1, r3
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	430a      	orrs	r2, r1
 8005f40:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f46:	2220      	movs	r2, #32
 8005f48:	4013      	ands	r3, r2
 8005f4a:	d00b      	beq.n	8005f64 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	689b      	ldr	r3, [r3, #8]
 8005f52:	4a25      	ldr	r2, [pc, #148]	; (8005fe8 <UART_AdvFeatureConfig+0x158>)
 8005f54:	4013      	ands	r3, r2
 8005f56:	0019      	movs	r1, r3
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	430a      	orrs	r2, r1
 8005f62:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f68:	2240      	movs	r2, #64	; 0x40
 8005f6a:	4013      	ands	r3, r2
 8005f6c:	d01d      	beq.n	8005faa <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	4a1d      	ldr	r2, [pc, #116]	; (8005fec <UART_AdvFeatureConfig+0x15c>)
 8005f76:	4013      	ands	r3, r2
 8005f78:	0019      	movs	r1, r3
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	430a      	orrs	r2, r1
 8005f84:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f8a:	2380      	movs	r3, #128	; 0x80
 8005f8c:	035b      	lsls	r3, r3, #13
 8005f8e:	429a      	cmp	r2, r3
 8005f90:	d10b      	bne.n	8005faa <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	4a15      	ldr	r2, [pc, #84]	; (8005ff0 <UART_AdvFeatureConfig+0x160>)
 8005f9a:	4013      	ands	r3, r2
 8005f9c:	0019      	movs	r1, r3
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	430a      	orrs	r2, r1
 8005fa8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fae:	2280      	movs	r2, #128	; 0x80
 8005fb0:	4013      	ands	r3, r2
 8005fb2:	d00b      	beq.n	8005fcc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	685b      	ldr	r3, [r3, #4]
 8005fba:	4a0e      	ldr	r2, [pc, #56]	; (8005ff4 <UART_AdvFeatureConfig+0x164>)
 8005fbc:	4013      	ands	r3, r2
 8005fbe:	0019      	movs	r1, r3
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	430a      	orrs	r2, r1
 8005fca:	605a      	str	r2, [r3, #4]
  }
}
 8005fcc:	46c0      	nop			; (mov r8, r8)
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	b002      	add	sp, #8
 8005fd2:	bd80      	pop	{r7, pc}
 8005fd4:	ffff7fff 	.word	0xffff7fff
 8005fd8:	fffdffff 	.word	0xfffdffff
 8005fdc:	fffeffff 	.word	0xfffeffff
 8005fe0:	fffbffff 	.word	0xfffbffff
 8005fe4:	ffffefff 	.word	0xffffefff
 8005fe8:	ffffdfff 	.word	0xffffdfff
 8005fec:	ffefffff 	.word	0xffefffff
 8005ff0:	ff9fffff 	.word	0xff9fffff
 8005ff4:	fff7ffff 	.word	0xfff7ffff

08005ff8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b092      	sub	sp, #72	; 0x48
 8005ffc:	af02      	add	r7, sp, #8
 8005ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2290      	movs	r2, #144	; 0x90
 8006004:	2100      	movs	r1, #0
 8006006:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006008:	f7fb fe3c 	bl	8001c84 <HAL_GetTick>
 800600c:	0003      	movs	r3, r0
 800600e:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	2208      	movs	r2, #8
 8006018:	4013      	ands	r3, r2
 800601a:	2b08      	cmp	r3, #8
 800601c:	d12d      	bne.n	800607a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800601e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006020:	2280      	movs	r2, #128	; 0x80
 8006022:	0391      	lsls	r1, r2, #14
 8006024:	6878      	ldr	r0, [r7, #4]
 8006026:	4a47      	ldr	r2, [pc, #284]	; (8006144 <UART_CheckIdleState+0x14c>)
 8006028:	9200      	str	r2, [sp, #0]
 800602a:	2200      	movs	r2, #0
 800602c:	f000 f88e 	bl	800614c <UART_WaitOnFlagUntilTimeout>
 8006030:	1e03      	subs	r3, r0, #0
 8006032:	d022      	beq.n	800607a <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006034:	f3ef 8310 	mrs	r3, PRIMASK
 8006038:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800603a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800603c:	63bb      	str	r3, [r7, #56]	; 0x38
 800603e:	2301      	movs	r3, #1
 8006040:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006044:	f383 8810 	msr	PRIMASK, r3
}
 8006048:	46c0      	nop			; (mov r8, r8)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	681a      	ldr	r2, [r3, #0]
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	2180      	movs	r1, #128	; 0x80
 8006056:	438a      	bics	r2, r1
 8006058:	601a      	str	r2, [r3, #0]
 800605a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800605c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800605e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006060:	f383 8810 	msr	PRIMASK, r3
}
 8006064:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2288      	movs	r2, #136	; 0x88
 800606a:	2120      	movs	r1, #32
 800606c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2284      	movs	r2, #132	; 0x84
 8006072:	2100      	movs	r1, #0
 8006074:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006076:	2303      	movs	r3, #3
 8006078:	e060      	b.n	800613c <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	2204      	movs	r2, #4
 8006082:	4013      	ands	r3, r2
 8006084:	2b04      	cmp	r3, #4
 8006086:	d146      	bne.n	8006116 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006088:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800608a:	2280      	movs	r2, #128	; 0x80
 800608c:	03d1      	lsls	r1, r2, #15
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	4a2c      	ldr	r2, [pc, #176]	; (8006144 <UART_CheckIdleState+0x14c>)
 8006092:	9200      	str	r2, [sp, #0]
 8006094:	2200      	movs	r2, #0
 8006096:	f000 f859 	bl	800614c <UART_WaitOnFlagUntilTimeout>
 800609a:	1e03      	subs	r3, r0, #0
 800609c:	d03b      	beq.n	8006116 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800609e:	f3ef 8310 	mrs	r3, PRIMASK
 80060a2:	60fb      	str	r3, [r7, #12]
  return(result);
 80060a4:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80060a6:	637b      	str	r3, [r7, #52]	; 0x34
 80060a8:	2301      	movs	r3, #1
 80060aa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060ac:	693b      	ldr	r3, [r7, #16]
 80060ae:	f383 8810 	msr	PRIMASK, r3
}
 80060b2:	46c0      	nop			; (mov r8, r8)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	681a      	ldr	r2, [r3, #0]
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4922      	ldr	r1, [pc, #136]	; (8006148 <UART_CheckIdleState+0x150>)
 80060c0:	400a      	ands	r2, r1
 80060c2:	601a      	str	r2, [r3, #0]
 80060c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060c6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060c8:	697b      	ldr	r3, [r7, #20]
 80060ca:	f383 8810 	msr	PRIMASK, r3
}
 80060ce:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80060d0:	f3ef 8310 	mrs	r3, PRIMASK
 80060d4:	61bb      	str	r3, [r7, #24]
  return(result);
 80060d6:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060d8:	633b      	str	r3, [r7, #48]	; 0x30
 80060da:	2301      	movs	r3, #1
 80060dc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060de:	69fb      	ldr	r3, [r7, #28]
 80060e0:	f383 8810 	msr	PRIMASK, r3
}
 80060e4:	46c0      	nop			; (mov r8, r8)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	689a      	ldr	r2, [r3, #8]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	2101      	movs	r1, #1
 80060f2:	438a      	bics	r2, r1
 80060f4:	609a      	str	r2, [r3, #8]
 80060f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060f8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060fa:	6a3b      	ldr	r3, [r7, #32]
 80060fc:	f383 8810 	msr	PRIMASK, r3
}
 8006100:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	228c      	movs	r2, #140	; 0x8c
 8006106:	2120      	movs	r1, #32
 8006108:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2284      	movs	r2, #132	; 0x84
 800610e:	2100      	movs	r1, #0
 8006110:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006112:	2303      	movs	r3, #3
 8006114:	e012      	b.n	800613c <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2288      	movs	r2, #136	; 0x88
 800611a:	2120      	movs	r1, #32
 800611c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	228c      	movs	r2, #140	; 0x8c
 8006122:	2120      	movs	r1, #32
 8006124:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2200      	movs	r2, #0
 800612a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2200      	movs	r2, #0
 8006130:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2284      	movs	r2, #132	; 0x84
 8006136:	2100      	movs	r1, #0
 8006138:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800613a:	2300      	movs	r3, #0
}
 800613c:	0018      	movs	r0, r3
 800613e:	46bd      	mov	sp, r7
 8006140:	b010      	add	sp, #64	; 0x40
 8006142:	bd80      	pop	{r7, pc}
 8006144:	01ffffff 	.word	0x01ffffff
 8006148:	fffffedf 	.word	0xfffffedf

0800614c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b084      	sub	sp, #16
 8006150:	af00      	add	r7, sp, #0
 8006152:	60f8      	str	r0, [r7, #12]
 8006154:	60b9      	str	r1, [r7, #8]
 8006156:	603b      	str	r3, [r7, #0]
 8006158:	1dfb      	adds	r3, r7, #7
 800615a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800615c:	e051      	b.n	8006202 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800615e:	69bb      	ldr	r3, [r7, #24]
 8006160:	3301      	adds	r3, #1
 8006162:	d04e      	beq.n	8006202 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006164:	f7fb fd8e 	bl	8001c84 <HAL_GetTick>
 8006168:	0002      	movs	r2, r0
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	1ad3      	subs	r3, r2, r3
 800616e:	69ba      	ldr	r2, [r7, #24]
 8006170:	429a      	cmp	r2, r3
 8006172:	d302      	bcc.n	800617a <UART_WaitOnFlagUntilTimeout+0x2e>
 8006174:	69bb      	ldr	r3, [r7, #24]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d101      	bne.n	800617e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800617a:	2303      	movs	r3, #3
 800617c:	e051      	b.n	8006222 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	2204      	movs	r2, #4
 8006186:	4013      	ands	r3, r2
 8006188:	d03b      	beq.n	8006202 <UART_WaitOnFlagUntilTimeout+0xb6>
 800618a:	68bb      	ldr	r3, [r7, #8]
 800618c:	2b80      	cmp	r3, #128	; 0x80
 800618e:	d038      	beq.n	8006202 <UART_WaitOnFlagUntilTimeout+0xb6>
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	2b40      	cmp	r3, #64	; 0x40
 8006194:	d035      	beq.n	8006202 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	69db      	ldr	r3, [r3, #28]
 800619c:	2208      	movs	r2, #8
 800619e:	4013      	ands	r3, r2
 80061a0:	2b08      	cmp	r3, #8
 80061a2:	d111      	bne.n	80061c8 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	2208      	movs	r2, #8
 80061aa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	0018      	movs	r0, r3
 80061b0:	f000 f960 	bl	8006474 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	2290      	movs	r2, #144	; 0x90
 80061b8:	2108      	movs	r1, #8
 80061ba:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	2284      	movs	r2, #132	; 0x84
 80061c0:	2100      	movs	r1, #0
 80061c2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80061c4:	2301      	movs	r3, #1
 80061c6:	e02c      	b.n	8006222 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	69da      	ldr	r2, [r3, #28]
 80061ce:	2380      	movs	r3, #128	; 0x80
 80061d0:	011b      	lsls	r3, r3, #4
 80061d2:	401a      	ands	r2, r3
 80061d4:	2380      	movs	r3, #128	; 0x80
 80061d6:	011b      	lsls	r3, r3, #4
 80061d8:	429a      	cmp	r2, r3
 80061da:	d112      	bne.n	8006202 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	2280      	movs	r2, #128	; 0x80
 80061e2:	0112      	lsls	r2, r2, #4
 80061e4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	0018      	movs	r0, r3
 80061ea:	f000 f943 	bl	8006474 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	2290      	movs	r2, #144	; 0x90
 80061f2:	2120      	movs	r1, #32
 80061f4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	2284      	movs	r2, #132	; 0x84
 80061fa:	2100      	movs	r1, #0
 80061fc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80061fe:	2303      	movs	r3, #3
 8006200:	e00f      	b.n	8006222 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	69db      	ldr	r3, [r3, #28]
 8006208:	68ba      	ldr	r2, [r7, #8]
 800620a:	4013      	ands	r3, r2
 800620c:	68ba      	ldr	r2, [r7, #8]
 800620e:	1ad3      	subs	r3, r2, r3
 8006210:	425a      	negs	r2, r3
 8006212:	4153      	adcs	r3, r2
 8006214:	b2db      	uxtb	r3, r3
 8006216:	001a      	movs	r2, r3
 8006218:	1dfb      	adds	r3, r7, #7
 800621a:	781b      	ldrb	r3, [r3, #0]
 800621c:	429a      	cmp	r2, r3
 800621e:	d09e      	beq.n	800615e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006220:	2300      	movs	r3, #0
}
 8006222:	0018      	movs	r0, r3
 8006224:	46bd      	mov	sp, r7
 8006226:	b004      	add	sp, #16
 8006228:	bd80      	pop	{r7, pc}
	...

0800622c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b098      	sub	sp, #96	; 0x60
 8006230:	af00      	add	r7, sp, #0
 8006232:	60f8      	str	r0, [r7, #12]
 8006234:	60b9      	str	r1, [r7, #8]
 8006236:	1dbb      	adds	r3, r7, #6
 8006238:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	68ba      	ldr	r2, [r7, #8]
 800623e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	1dba      	adds	r2, r7, #6
 8006244:	215c      	movs	r1, #92	; 0x5c
 8006246:	8812      	ldrh	r2, [r2, #0]
 8006248:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	1dba      	adds	r2, r7, #6
 800624e:	215e      	movs	r1, #94	; 0x5e
 8006250:	8812      	ldrh	r2, [r2, #0]
 8006252:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2200      	movs	r2, #0
 8006258:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	689a      	ldr	r2, [r3, #8]
 800625e:	2380      	movs	r3, #128	; 0x80
 8006260:	015b      	lsls	r3, r3, #5
 8006262:	429a      	cmp	r2, r3
 8006264:	d10d      	bne.n	8006282 <UART_Start_Receive_IT+0x56>
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	691b      	ldr	r3, [r3, #16]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d104      	bne.n	8006278 <UART_Start_Receive_IT+0x4c>
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	2260      	movs	r2, #96	; 0x60
 8006272:	497b      	ldr	r1, [pc, #492]	; (8006460 <UART_Start_Receive_IT+0x234>)
 8006274:	5299      	strh	r1, [r3, r2]
 8006276:	e02e      	b.n	80062d6 <UART_Start_Receive_IT+0xaa>
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	2260      	movs	r2, #96	; 0x60
 800627c:	21ff      	movs	r1, #255	; 0xff
 800627e:	5299      	strh	r1, [r3, r2]
 8006280:	e029      	b.n	80062d6 <UART_Start_Receive_IT+0xaa>
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	689b      	ldr	r3, [r3, #8]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d10d      	bne.n	80062a6 <UART_Start_Receive_IT+0x7a>
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	691b      	ldr	r3, [r3, #16]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d104      	bne.n	800629c <UART_Start_Receive_IT+0x70>
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	2260      	movs	r2, #96	; 0x60
 8006296:	21ff      	movs	r1, #255	; 0xff
 8006298:	5299      	strh	r1, [r3, r2]
 800629a:	e01c      	b.n	80062d6 <UART_Start_Receive_IT+0xaa>
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	2260      	movs	r2, #96	; 0x60
 80062a0:	217f      	movs	r1, #127	; 0x7f
 80062a2:	5299      	strh	r1, [r3, r2]
 80062a4:	e017      	b.n	80062d6 <UART_Start_Receive_IT+0xaa>
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	689a      	ldr	r2, [r3, #8]
 80062aa:	2380      	movs	r3, #128	; 0x80
 80062ac:	055b      	lsls	r3, r3, #21
 80062ae:	429a      	cmp	r2, r3
 80062b0:	d10d      	bne.n	80062ce <UART_Start_Receive_IT+0xa2>
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	691b      	ldr	r3, [r3, #16]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d104      	bne.n	80062c4 <UART_Start_Receive_IT+0x98>
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	2260      	movs	r2, #96	; 0x60
 80062be:	217f      	movs	r1, #127	; 0x7f
 80062c0:	5299      	strh	r1, [r3, r2]
 80062c2:	e008      	b.n	80062d6 <UART_Start_Receive_IT+0xaa>
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	2260      	movs	r2, #96	; 0x60
 80062c8:	213f      	movs	r1, #63	; 0x3f
 80062ca:	5299      	strh	r1, [r3, r2]
 80062cc:	e003      	b.n	80062d6 <UART_Start_Receive_IT+0xaa>
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	2260      	movs	r2, #96	; 0x60
 80062d2:	2100      	movs	r1, #0
 80062d4:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	2290      	movs	r2, #144	; 0x90
 80062da:	2100      	movs	r1, #0
 80062dc:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	228c      	movs	r2, #140	; 0x8c
 80062e2:	2122      	movs	r1, #34	; 0x22
 80062e4:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80062e6:	f3ef 8310 	mrs	r3, PRIMASK
 80062ea:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 80062ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80062f0:	2301      	movs	r3, #1
 80062f2:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062f6:	f383 8810 	msr	PRIMASK, r3
}
 80062fa:	46c0      	nop			; (mov r8, r8)
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	689a      	ldr	r2, [r3, #8]
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	2101      	movs	r1, #1
 8006308:	430a      	orrs	r2, r1
 800630a:	609a      	str	r2, [r3, #8]
 800630c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800630e:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006310:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006312:	f383 8810 	msr	PRIMASK, r3
}
 8006316:	46c0      	nop			; (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800631c:	2380      	movs	r3, #128	; 0x80
 800631e:	059b      	lsls	r3, r3, #22
 8006320:	429a      	cmp	r2, r3
 8006322:	d150      	bne.n	80063c6 <UART_Start_Receive_IT+0x19a>
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	2268      	movs	r2, #104	; 0x68
 8006328:	5a9b      	ldrh	r3, [r3, r2]
 800632a:	1dba      	adds	r2, r7, #6
 800632c:	8812      	ldrh	r2, [r2, #0]
 800632e:	429a      	cmp	r2, r3
 8006330:	d349      	bcc.n	80063c6 <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	689a      	ldr	r2, [r3, #8]
 8006336:	2380      	movs	r3, #128	; 0x80
 8006338:	015b      	lsls	r3, r3, #5
 800633a:	429a      	cmp	r2, r3
 800633c:	d107      	bne.n	800634e <UART_Start_Receive_IT+0x122>
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	691b      	ldr	r3, [r3, #16]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d103      	bne.n	800634e <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	4a46      	ldr	r2, [pc, #280]	; (8006464 <UART_Start_Receive_IT+0x238>)
 800634a:	675a      	str	r2, [r3, #116]	; 0x74
 800634c:	e002      	b.n	8006354 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	4a45      	ldr	r2, [pc, #276]	; (8006468 <UART_Start_Receive_IT+0x23c>)
 8006352:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	691b      	ldr	r3, [r3, #16]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d019      	beq.n	8006390 <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800635c:	f3ef 8310 	mrs	r3, PRIMASK
 8006360:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8006362:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006364:	65bb      	str	r3, [r7, #88]	; 0x58
 8006366:	2301      	movs	r3, #1
 8006368:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800636a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800636c:	f383 8810 	msr	PRIMASK, r3
}
 8006370:	46c0      	nop			; (mov r8, r8)
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	681a      	ldr	r2, [r3, #0]
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	2180      	movs	r1, #128	; 0x80
 800637e:	0049      	lsls	r1, r1, #1
 8006380:	430a      	orrs	r2, r1
 8006382:	601a      	str	r2, [r3, #0]
 8006384:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006386:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006388:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800638a:	f383 8810 	msr	PRIMASK, r3
}
 800638e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006390:	f3ef 8310 	mrs	r3, PRIMASK
 8006394:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8006396:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006398:	657b      	str	r3, [r7, #84]	; 0x54
 800639a:	2301      	movs	r3, #1
 800639c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800639e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063a0:	f383 8810 	msr	PRIMASK, r3
}
 80063a4:	46c0      	nop			; (mov r8, r8)
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	689a      	ldr	r2, [r3, #8]
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	2180      	movs	r1, #128	; 0x80
 80063b2:	0549      	lsls	r1, r1, #21
 80063b4:	430a      	orrs	r2, r1
 80063b6:	609a      	str	r2, [r3, #8]
 80063b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80063ba:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063be:	f383 8810 	msr	PRIMASK, r3
}
 80063c2:	46c0      	nop			; (mov r8, r8)
 80063c4:	e047      	b.n	8006456 <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	689a      	ldr	r2, [r3, #8]
 80063ca:	2380      	movs	r3, #128	; 0x80
 80063cc:	015b      	lsls	r3, r3, #5
 80063ce:	429a      	cmp	r2, r3
 80063d0:	d107      	bne.n	80063e2 <UART_Start_Receive_IT+0x1b6>
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	691b      	ldr	r3, [r3, #16]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d103      	bne.n	80063e2 <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	4a23      	ldr	r2, [pc, #140]	; (800646c <UART_Start_Receive_IT+0x240>)
 80063de:	675a      	str	r2, [r3, #116]	; 0x74
 80063e0:	e002      	b.n	80063e8 <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	4a22      	ldr	r2, [pc, #136]	; (8006470 <UART_Start_Receive_IT+0x244>)
 80063e6:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	691b      	ldr	r3, [r3, #16]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d019      	beq.n	8006424 <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80063f0:	f3ef 8310 	mrs	r3, PRIMASK
 80063f4:	61fb      	str	r3, [r7, #28]
  return(result);
 80063f6:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80063f8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80063fa:	2301      	movs	r3, #1
 80063fc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063fe:	6a3b      	ldr	r3, [r7, #32]
 8006400:	f383 8810 	msr	PRIMASK, r3
}
 8006404:	46c0      	nop			; (mov r8, r8)
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	681a      	ldr	r2, [r3, #0]
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	2190      	movs	r1, #144	; 0x90
 8006412:	0049      	lsls	r1, r1, #1
 8006414:	430a      	orrs	r2, r1
 8006416:	601a      	str	r2, [r3, #0]
 8006418:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800641a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800641c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800641e:	f383 8810 	msr	PRIMASK, r3
}
 8006422:	e018      	b.n	8006456 <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006424:	f3ef 8310 	mrs	r3, PRIMASK
 8006428:	613b      	str	r3, [r7, #16]
  return(result);
 800642a:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800642c:	653b      	str	r3, [r7, #80]	; 0x50
 800642e:	2301      	movs	r3, #1
 8006430:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006432:	697b      	ldr	r3, [r7, #20]
 8006434:	f383 8810 	msr	PRIMASK, r3
}
 8006438:	46c0      	nop			; (mov r8, r8)
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	681a      	ldr	r2, [r3, #0]
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	2120      	movs	r1, #32
 8006446:	430a      	orrs	r2, r1
 8006448:	601a      	str	r2, [r3, #0]
 800644a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800644c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800644e:	69bb      	ldr	r3, [r7, #24]
 8006450:	f383 8810 	msr	PRIMASK, r3
}
 8006454:	46c0      	nop			; (mov r8, r8)
    }
  }
  return HAL_OK;
 8006456:	2300      	movs	r3, #0
}
 8006458:	0018      	movs	r0, r3
 800645a:	46bd      	mov	sp, r7
 800645c:	b018      	add	sp, #96	; 0x60
 800645e:	bd80      	pop	{r7, pc}
 8006460:	000001ff 	.word	0x000001ff
 8006464:	08006cbd 	.word	0x08006cbd
 8006468:	08006971 	.word	0x08006971
 800646c:	0800679d 	.word	0x0800679d
 8006470:	080065c9 	.word	0x080065c9

08006474 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b08e      	sub	sp, #56	; 0x38
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800647c:	f3ef 8310 	mrs	r3, PRIMASK
 8006480:	617b      	str	r3, [r7, #20]
  return(result);
 8006482:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006484:	637b      	str	r3, [r7, #52]	; 0x34
 8006486:	2301      	movs	r3, #1
 8006488:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800648a:	69bb      	ldr	r3, [r7, #24]
 800648c:	f383 8810 	msr	PRIMASK, r3
}
 8006490:	46c0      	nop			; (mov r8, r8)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	681a      	ldr	r2, [r3, #0]
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4926      	ldr	r1, [pc, #152]	; (8006538 <UART_EndRxTransfer+0xc4>)
 800649e:	400a      	ands	r2, r1
 80064a0:	601a      	str	r2, [r3, #0]
 80064a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064a4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064a6:	69fb      	ldr	r3, [r7, #28]
 80064a8:	f383 8810 	msr	PRIMASK, r3
}
 80064ac:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80064ae:	f3ef 8310 	mrs	r3, PRIMASK
 80064b2:	623b      	str	r3, [r7, #32]
  return(result);
 80064b4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80064b6:	633b      	str	r3, [r7, #48]	; 0x30
 80064b8:	2301      	movs	r3, #1
 80064ba:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064be:	f383 8810 	msr	PRIMASK, r3
}
 80064c2:	46c0      	nop			; (mov r8, r8)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	689a      	ldr	r2, [r3, #8]
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	491b      	ldr	r1, [pc, #108]	; (800653c <UART_EndRxTransfer+0xc8>)
 80064d0:	400a      	ands	r2, r1
 80064d2:	609a      	str	r2, [r3, #8]
 80064d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064d6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064da:	f383 8810 	msr	PRIMASK, r3
}
 80064de:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064e4:	2b01      	cmp	r3, #1
 80064e6:	d118      	bne.n	800651a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80064e8:	f3ef 8310 	mrs	r3, PRIMASK
 80064ec:	60bb      	str	r3, [r7, #8]
  return(result);
 80064ee:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80064f2:	2301      	movs	r3, #1
 80064f4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	f383 8810 	msr	PRIMASK, r3
}
 80064fc:	46c0      	nop			; (mov r8, r8)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	681a      	ldr	r2, [r3, #0]
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	2110      	movs	r1, #16
 800650a:	438a      	bics	r2, r1
 800650c:	601a      	str	r2, [r3, #0]
 800650e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006510:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006512:	693b      	ldr	r3, [r7, #16]
 8006514:	f383 8810 	msr	PRIMASK, r3
}
 8006518:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	228c      	movs	r2, #140	; 0x8c
 800651e:	2120      	movs	r1, #32
 8006520:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2200      	movs	r2, #0
 8006526:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2200      	movs	r2, #0
 800652c:	675a      	str	r2, [r3, #116]	; 0x74
}
 800652e:	46c0      	nop			; (mov r8, r8)
 8006530:	46bd      	mov	sp, r7
 8006532:	b00e      	add	sp, #56	; 0x38
 8006534:	bd80      	pop	{r7, pc}
 8006536:	46c0      	nop			; (mov r8, r8)
 8006538:	fffffedf 	.word	0xfffffedf
 800653c:	effffffe 	.word	0xeffffffe

08006540 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b084      	sub	sp, #16
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800654c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	225e      	movs	r2, #94	; 0x5e
 8006552:	2100      	movs	r1, #0
 8006554:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2256      	movs	r2, #86	; 0x56
 800655a:	2100      	movs	r1, #0
 800655c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	0018      	movs	r0, r3
 8006562:	f7ff f92b 	bl	80057bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006566:	46c0      	nop			; (mov r8, r8)
 8006568:	46bd      	mov	sp, r7
 800656a:	b004      	add	sp, #16
 800656c:	bd80      	pop	{r7, pc}

0800656e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800656e:	b580      	push	{r7, lr}
 8006570:	b086      	sub	sp, #24
 8006572:	af00      	add	r7, sp, #0
 8006574:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006576:	f3ef 8310 	mrs	r3, PRIMASK
 800657a:	60bb      	str	r3, [r7, #8]
  return(result);
 800657c:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800657e:	617b      	str	r3, [r7, #20]
 8006580:	2301      	movs	r3, #1
 8006582:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	f383 8810 	msr	PRIMASK, r3
}
 800658a:	46c0      	nop			; (mov r8, r8)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	681a      	ldr	r2, [r3, #0]
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	2140      	movs	r1, #64	; 0x40
 8006598:	438a      	bics	r2, r1
 800659a:	601a      	str	r2, [r3, #0]
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065a0:	693b      	ldr	r3, [r7, #16]
 80065a2:	f383 8810 	msr	PRIMASK, r3
}
 80065a6:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2288      	movs	r2, #136	; 0x88
 80065ac:	2120      	movs	r1, #32
 80065ae:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2200      	movs	r2, #0
 80065b4:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	0018      	movs	r0, r3
 80065ba:	f7ff f8f7 	bl	80057ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80065be:	46c0      	nop			; (mov r8, r8)
 80065c0:	46bd      	mov	sp, r7
 80065c2:	b006      	add	sp, #24
 80065c4:	bd80      	pop	{r7, pc}
	...

080065c8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b094      	sub	sp, #80	; 0x50
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80065d0:	204e      	movs	r0, #78	; 0x4e
 80065d2:	183b      	adds	r3, r7, r0
 80065d4:	687a      	ldr	r2, [r7, #4]
 80065d6:	2160      	movs	r1, #96	; 0x60
 80065d8:	5a52      	ldrh	r2, [r2, r1]
 80065da:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	228c      	movs	r2, #140	; 0x8c
 80065e0:	589b      	ldr	r3, [r3, r2]
 80065e2:	2b22      	cmp	r3, #34	; 0x22
 80065e4:	d000      	beq.n	80065e8 <UART_RxISR_8BIT+0x20>
 80065e6:	e0c4      	b.n	8006772 <UART_RxISR_8BIT+0x1aa>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80065ee:	214c      	movs	r1, #76	; 0x4c
 80065f0:	187b      	adds	r3, r7, r1
 80065f2:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80065f4:	187b      	adds	r3, r7, r1
 80065f6:	881b      	ldrh	r3, [r3, #0]
 80065f8:	b2da      	uxtb	r2, r3
 80065fa:	183b      	adds	r3, r7, r0
 80065fc:	881b      	ldrh	r3, [r3, #0]
 80065fe:	b2d9      	uxtb	r1, r3
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006604:	400a      	ands	r2, r1
 8006606:	b2d2      	uxtb	r2, r2
 8006608:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800660e:	1c5a      	adds	r2, r3, #1
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	225e      	movs	r2, #94	; 0x5e
 8006618:	5a9b      	ldrh	r3, [r3, r2]
 800661a:	b29b      	uxth	r3, r3
 800661c:	3b01      	subs	r3, #1
 800661e:	b299      	uxth	r1, r3
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	225e      	movs	r2, #94	; 0x5e
 8006624:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	225e      	movs	r2, #94	; 0x5e
 800662a:	5a9b      	ldrh	r3, [r3, r2]
 800662c:	b29b      	uxth	r3, r3
 800662e:	2b00      	cmp	r3, #0
 8006630:	d000      	beq.n	8006634 <UART_RxISR_8BIT+0x6c>
 8006632:	e0a6      	b.n	8006782 <UART_RxISR_8BIT+0x1ba>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006634:	f3ef 8310 	mrs	r3, PRIMASK
 8006638:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800663a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800663c:	64bb      	str	r3, [r7, #72]	; 0x48
 800663e:	2301      	movs	r3, #1
 8006640:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006644:	f383 8810 	msr	PRIMASK, r3
}
 8006648:	46c0      	nop			; (mov r8, r8)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	681a      	ldr	r2, [r3, #0]
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	494d      	ldr	r1, [pc, #308]	; (800678c <UART_RxISR_8BIT+0x1c4>)
 8006656:	400a      	ands	r2, r1
 8006658:	601a      	str	r2, [r3, #0]
 800665a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800665c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800665e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006660:	f383 8810 	msr	PRIMASK, r3
}
 8006664:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006666:	f3ef 8310 	mrs	r3, PRIMASK
 800666a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800666c:	6b3b      	ldr	r3, [r7, #48]	; 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800666e:	647b      	str	r3, [r7, #68]	; 0x44
 8006670:	2301      	movs	r3, #1
 8006672:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006674:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006676:	f383 8810 	msr	PRIMASK, r3
}
 800667a:	46c0      	nop			; (mov r8, r8)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	689a      	ldr	r2, [r3, #8]
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	2101      	movs	r1, #1
 8006688:	438a      	bics	r2, r1
 800668a:	609a      	str	r2, [r3, #8]
 800668c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800668e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006692:	f383 8810 	msr	PRIMASK, r3
}
 8006696:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	228c      	movs	r2, #140	; 0x8c
 800669c:	2120      	movs	r1, #32
 800669e:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2200      	movs	r2, #0
 80066a4:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2200      	movs	r2, #0
 80066aa:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4a37      	ldr	r2, [pc, #220]	; (8006790 <UART_RxISR_8BIT+0x1c8>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d024      	beq.n	8006700 <UART_RxISR_8BIT+0x138>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4a36      	ldr	r2, [pc, #216]	; (8006794 <UART_RxISR_8BIT+0x1cc>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d01f      	beq.n	8006700 <UART_RxISR_8BIT+0x138>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	685a      	ldr	r2, [r3, #4]
 80066c6:	2380      	movs	r3, #128	; 0x80
 80066c8:	041b      	lsls	r3, r3, #16
 80066ca:	4013      	ands	r3, r2
 80066cc:	d018      	beq.n	8006700 <UART_RxISR_8BIT+0x138>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80066ce:	f3ef 8310 	mrs	r3, PRIMASK
 80066d2:	61bb      	str	r3, [r7, #24]
  return(result);
 80066d4:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80066d6:	643b      	str	r3, [r7, #64]	; 0x40
 80066d8:	2301      	movs	r3, #1
 80066da:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066dc:	69fb      	ldr	r3, [r7, #28]
 80066de:	f383 8810 	msr	PRIMASK, r3
}
 80066e2:	46c0      	nop			; (mov r8, r8)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	681a      	ldr	r2, [r3, #0]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	492a      	ldr	r1, [pc, #168]	; (8006798 <UART_RxISR_8BIT+0x1d0>)
 80066f0:	400a      	ands	r2, r1
 80066f2:	601a      	str	r2, [r3, #0]
 80066f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066f6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066f8:	6a3b      	ldr	r3, [r7, #32]
 80066fa:	f383 8810 	msr	PRIMASK, r3
}
 80066fe:	46c0      	nop			; (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006704:	2b01      	cmp	r3, #1
 8006706:	d12f      	bne.n	8006768 <UART_RxISR_8BIT+0x1a0>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2200      	movs	r2, #0
 800670c:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800670e:	f3ef 8310 	mrs	r3, PRIMASK
 8006712:	60fb      	str	r3, [r7, #12]
  return(result);
 8006714:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006716:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006718:	2301      	movs	r3, #1
 800671a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800671c:	693b      	ldr	r3, [r7, #16]
 800671e:	f383 8810 	msr	PRIMASK, r3
}
 8006722:	46c0      	nop			; (mov r8, r8)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	681a      	ldr	r2, [r3, #0]
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	2110      	movs	r1, #16
 8006730:	438a      	bics	r2, r1
 8006732:	601a      	str	r2, [r3, #0]
 8006734:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006736:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006738:	697b      	ldr	r3, [r7, #20]
 800673a:	f383 8810 	msr	PRIMASK, r3
}
 800673e:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	69db      	ldr	r3, [r3, #28]
 8006746:	2210      	movs	r2, #16
 8006748:	4013      	ands	r3, r2
 800674a:	2b10      	cmp	r3, #16
 800674c:	d103      	bne.n	8006756 <UART_RxISR_8BIT+0x18e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	2210      	movs	r2, #16
 8006754:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	225c      	movs	r2, #92	; 0x5c
 800675a:	5a9a      	ldrh	r2, [r3, r2]
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	0011      	movs	r1, r2
 8006760:	0018      	movs	r0, r3
 8006762:	f7ff f833 	bl	80057cc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006766:	e00c      	b.n	8006782 <UART_RxISR_8BIT+0x1ba>
        HAL_UART_RxCpltCallback(huart);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	0018      	movs	r0, r3
 800676c:	f7fa ff2c 	bl	80015c8 <HAL_UART_RxCpltCallback>
}
 8006770:	e007      	b.n	8006782 <UART_RxISR_8BIT+0x1ba>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	699a      	ldr	r2, [r3, #24]
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	2108      	movs	r1, #8
 800677e:	430a      	orrs	r2, r1
 8006780:	619a      	str	r2, [r3, #24]
}
 8006782:	46c0      	nop			; (mov r8, r8)
 8006784:	46bd      	mov	sp, r7
 8006786:	b014      	add	sp, #80	; 0x50
 8006788:	bd80      	pop	{r7, pc}
 800678a:	46c0      	nop			; (mov r8, r8)
 800678c:	fffffedf 	.word	0xfffffedf
 8006790:	40008000 	.word	0x40008000
 8006794:	40008400 	.word	0x40008400
 8006798:	fbffffff 	.word	0xfbffffff

0800679c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b094      	sub	sp, #80	; 0x50
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80067a4:	204e      	movs	r0, #78	; 0x4e
 80067a6:	183b      	adds	r3, r7, r0
 80067a8:	687a      	ldr	r2, [r7, #4]
 80067aa:	2160      	movs	r1, #96	; 0x60
 80067ac:	5a52      	ldrh	r2, [r2, r1]
 80067ae:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	228c      	movs	r2, #140	; 0x8c
 80067b4:	589b      	ldr	r3, [r3, r2]
 80067b6:	2b22      	cmp	r3, #34	; 0x22
 80067b8:	d000      	beq.n	80067bc <UART_RxISR_16BIT+0x20>
 80067ba:	e0c4      	b.n	8006946 <UART_RxISR_16BIT+0x1aa>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80067c2:	214c      	movs	r1, #76	; 0x4c
 80067c4:	187b      	adds	r3, r7, r1
 80067c6:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067cc:	64bb      	str	r3, [r7, #72]	; 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 80067ce:	187b      	adds	r3, r7, r1
 80067d0:	183a      	adds	r2, r7, r0
 80067d2:	881b      	ldrh	r3, [r3, #0]
 80067d4:	8812      	ldrh	r2, [r2, #0]
 80067d6:	4013      	ands	r3, r2
 80067d8:	b29a      	uxth	r2, r3
 80067da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067dc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067e2:	1c9a      	adds	r2, r3, #2
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	225e      	movs	r2, #94	; 0x5e
 80067ec:	5a9b      	ldrh	r3, [r3, r2]
 80067ee:	b29b      	uxth	r3, r3
 80067f0:	3b01      	subs	r3, #1
 80067f2:	b299      	uxth	r1, r3
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	225e      	movs	r2, #94	; 0x5e
 80067f8:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	225e      	movs	r2, #94	; 0x5e
 80067fe:	5a9b      	ldrh	r3, [r3, r2]
 8006800:	b29b      	uxth	r3, r3
 8006802:	2b00      	cmp	r3, #0
 8006804:	d000      	beq.n	8006808 <UART_RxISR_16BIT+0x6c>
 8006806:	e0a6      	b.n	8006956 <UART_RxISR_16BIT+0x1ba>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006808:	f3ef 8310 	mrs	r3, PRIMASK
 800680c:	623b      	str	r3, [r7, #32]
  return(result);
 800680e:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006810:	647b      	str	r3, [r7, #68]	; 0x44
 8006812:	2301      	movs	r3, #1
 8006814:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006818:	f383 8810 	msr	PRIMASK, r3
}
 800681c:	46c0      	nop			; (mov r8, r8)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	681a      	ldr	r2, [r3, #0]
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	494d      	ldr	r1, [pc, #308]	; (8006960 <UART_RxISR_16BIT+0x1c4>)
 800682a:	400a      	ands	r2, r1
 800682c:	601a      	str	r2, [r3, #0]
 800682e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006830:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006834:	f383 8810 	msr	PRIMASK, r3
}
 8006838:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800683a:	f3ef 8310 	mrs	r3, PRIMASK
 800683e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8006840:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006842:	643b      	str	r3, [r7, #64]	; 0x40
 8006844:	2301      	movs	r3, #1
 8006846:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800684a:	f383 8810 	msr	PRIMASK, r3
}
 800684e:	46c0      	nop			; (mov r8, r8)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	689a      	ldr	r2, [r3, #8]
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	2101      	movs	r1, #1
 800685c:	438a      	bics	r2, r1
 800685e:	609a      	str	r2, [r3, #8]
 8006860:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006862:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006864:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006866:	f383 8810 	msr	PRIMASK, r3
}
 800686a:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	228c      	movs	r2, #140	; 0x8c
 8006870:	2120      	movs	r1, #32
 8006872:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2200      	movs	r2, #0
 8006878:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2200      	movs	r2, #0
 800687e:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	4a37      	ldr	r2, [pc, #220]	; (8006964 <UART_RxISR_16BIT+0x1c8>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d024      	beq.n	80068d4 <UART_RxISR_16BIT+0x138>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4a36      	ldr	r2, [pc, #216]	; (8006968 <UART_RxISR_16BIT+0x1cc>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d01f      	beq.n	80068d4 <UART_RxISR_16BIT+0x138>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	685a      	ldr	r2, [r3, #4]
 800689a:	2380      	movs	r3, #128	; 0x80
 800689c:	041b      	lsls	r3, r3, #16
 800689e:	4013      	ands	r3, r2
 80068a0:	d018      	beq.n	80068d4 <UART_RxISR_16BIT+0x138>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80068a2:	f3ef 8310 	mrs	r3, PRIMASK
 80068a6:	617b      	str	r3, [r7, #20]
  return(result);
 80068a8:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80068aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068ac:	2301      	movs	r3, #1
 80068ae:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068b0:	69bb      	ldr	r3, [r7, #24]
 80068b2:	f383 8810 	msr	PRIMASK, r3
}
 80068b6:	46c0      	nop			; (mov r8, r8)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	681a      	ldr	r2, [r3, #0]
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	492a      	ldr	r1, [pc, #168]	; (800696c <UART_RxISR_16BIT+0x1d0>)
 80068c4:	400a      	ands	r2, r1
 80068c6:	601a      	str	r2, [r3, #0]
 80068c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068ca:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068cc:	69fb      	ldr	r3, [r7, #28]
 80068ce:	f383 8810 	msr	PRIMASK, r3
}
 80068d2:	46c0      	nop			; (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068d8:	2b01      	cmp	r3, #1
 80068da:	d12f      	bne.n	800693c <UART_RxISR_16BIT+0x1a0>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2200      	movs	r2, #0
 80068e0:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80068e2:	f3ef 8310 	mrs	r3, PRIMASK
 80068e6:	60bb      	str	r3, [r7, #8]
  return(result);
 80068e8:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80068ec:	2301      	movs	r3, #1
 80068ee:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	f383 8810 	msr	PRIMASK, r3
}
 80068f6:	46c0      	nop			; (mov r8, r8)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	681a      	ldr	r2, [r3, #0]
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	2110      	movs	r1, #16
 8006904:	438a      	bics	r2, r1
 8006906:	601a      	str	r2, [r3, #0]
 8006908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800690a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800690c:	693b      	ldr	r3, [r7, #16]
 800690e:	f383 8810 	msr	PRIMASK, r3
}
 8006912:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	69db      	ldr	r3, [r3, #28]
 800691a:	2210      	movs	r2, #16
 800691c:	4013      	ands	r3, r2
 800691e:	2b10      	cmp	r3, #16
 8006920:	d103      	bne.n	800692a <UART_RxISR_16BIT+0x18e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	2210      	movs	r2, #16
 8006928:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	225c      	movs	r2, #92	; 0x5c
 800692e:	5a9a      	ldrh	r2, [r3, r2]
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	0011      	movs	r1, r2
 8006934:	0018      	movs	r0, r3
 8006936:	f7fe ff49 	bl	80057cc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800693a:	e00c      	b.n	8006956 <UART_RxISR_16BIT+0x1ba>
        HAL_UART_RxCpltCallback(huart);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	0018      	movs	r0, r3
 8006940:	f7fa fe42 	bl	80015c8 <HAL_UART_RxCpltCallback>
}
 8006944:	e007      	b.n	8006956 <UART_RxISR_16BIT+0x1ba>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	699a      	ldr	r2, [r3, #24]
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	2108      	movs	r1, #8
 8006952:	430a      	orrs	r2, r1
 8006954:	619a      	str	r2, [r3, #24]
}
 8006956:	46c0      	nop			; (mov r8, r8)
 8006958:	46bd      	mov	sp, r7
 800695a:	b014      	add	sp, #80	; 0x50
 800695c:	bd80      	pop	{r7, pc}
 800695e:	46c0      	nop			; (mov r8, r8)
 8006960:	fffffedf 	.word	0xfffffedf
 8006964:	40008000 	.word	0x40008000
 8006968:	40008400 	.word	0x40008400
 800696c:	fbffffff 	.word	0xfbffffff

08006970 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b0a0      	sub	sp, #128	; 0x80
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8006978:	237a      	movs	r3, #122	; 0x7a
 800697a:	18fb      	adds	r3, r7, r3
 800697c:	687a      	ldr	r2, [r7, #4]
 800697e:	2160      	movs	r1, #96	; 0x60
 8006980:	5a52      	ldrh	r2, [r2, r1]
 8006982:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	69db      	ldr	r3, [r3, #28]
 800698a:	67fb      	str	r3, [r7, #124]	; 0x7c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	689b      	ldr	r3, [r3, #8]
 800699a:	673b      	str	r3, [r7, #112]	; 0x70

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	228c      	movs	r2, #140	; 0x8c
 80069a0:	589b      	ldr	r3, [r3, r2]
 80069a2:	2b22      	cmp	r3, #34	; 0x22
 80069a4:	d000      	beq.n	80069a8 <UART_RxISR_8BIT_FIFOEN+0x38>
 80069a6:	e16f      	b.n	8006c88 <UART_RxISR_8BIT_FIFOEN+0x318>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80069a8:	236e      	movs	r3, #110	; 0x6e
 80069aa:	18fb      	adds	r3, r7, r3
 80069ac:	687a      	ldr	r2, [r7, #4]
 80069ae:	2168      	movs	r1, #104	; 0x68
 80069b0:	5a52      	ldrh	r2, [r2, r1]
 80069b2:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80069b4:	e116      	b.n	8006be4 <UART_RxISR_8BIT_FIFOEN+0x274>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80069bc:	216c      	movs	r1, #108	; 0x6c
 80069be:	187b      	adds	r3, r7, r1
 80069c0:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80069c2:	187b      	adds	r3, r7, r1
 80069c4:	881b      	ldrh	r3, [r3, #0]
 80069c6:	b2da      	uxtb	r2, r3
 80069c8:	237a      	movs	r3, #122	; 0x7a
 80069ca:	18fb      	adds	r3, r7, r3
 80069cc:	881b      	ldrh	r3, [r3, #0]
 80069ce:	b2d9      	uxtb	r1, r3
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069d4:	400a      	ands	r2, r1
 80069d6:	b2d2      	uxtb	r2, r2
 80069d8:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069de:	1c5a      	adds	r2, r3, #1
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	225e      	movs	r2, #94	; 0x5e
 80069e8:	5a9b      	ldrh	r3, [r3, r2]
 80069ea:	b29b      	uxth	r3, r3
 80069ec:	3b01      	subs	r3, #1
 80069ee:	b299      	uxth	r1, r3
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	225e      	movs	r2, #94	; 0x5e
 80069f4:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	69db      	ldr	r3, [r3, #28]
 80069fc:	67fb      	str	r3, [r7, #124]	; 0x7c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80069fe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006a00:	2207      	movs	r2, #7
 8006a02:	4013      	ands	r3, r2
 8006a04:	d049      	beq.n	8006a9a <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006a06:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006a08:	2201      	movs	r2, #1
 8006a0a:	4013      	ands	r3, r2
 8006a0c:	d010      	beq.n	8006a30 <UART_RxISR_8BIT_FIFOEN+0xc0>
 8006a0e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8006a10:	2380      	movs	r3, #128	; 0x80
 8006a12:	005b      	lsls	r3, r3, #1
 8006a14:	4013      	ands	r3, r2
 8006a16:	d00b      	beq.n	8006a30 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	2201      	movs	r2, #1
 8006a1e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2290      	movs	r2, #144	; 0x90
 8006a24:	589b      	ldr	r3, [r3, r2]
 8006a26:	2201      	movs	r2, #1
 8006a28:	431a      	orrs	r2, r3
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2190      	movs	r1, #144	; 0x90
 8006a2e:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006a30:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006a32:	2202      	movs	r2, #2
 8006a34:	4013      	ands	r3, r2
 8006a36:	d00f      	beq.n	8006a58 <UART_RxISR_8BIT_FIFOEN+0xe8>
 8006a38:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006a3a:	2201      	movs	r2, #1
 8006a3c:	4013      	ands	r3, r2
 8006a3e:	d00b      	beq.n	8006a58 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	2202      	movs	r2, #2
 8006a46:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2290      	movs	r2, #144	; 0x90
 8006a4c:	589b      	ldr	r3, [r3, r2]
 8006a4e:	2204      	movs	r2, #4
 8006a50:	431a      	orrs	r2, r3
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2190      	movs	r1, #144	; 0x90
 8006a56:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006a58:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006a5a:	2204      	movs	r2, #4
 8006a5c:	4013      	ands	r3, r2
 8006a5e:	d00f      	beq.n	8006a80 <UART_RxISR_8BIT_FIFOEN+0x110>
 8006a60:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006a62:	2201      	movs	r2, #1
 8006a64:	4013      	ands	r3, r2
 8006a66:	d00b      	beq.n	8006a80 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	2204      	movs	r2, #4
 8006a6e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2290      	movs	r2, #144	; 0x90
 8006a74:	589b      	ldr	r3, [r3, r2]
 8006a76:	2202      	movs	r2, #2
 8006a78:	431a      	orrs	r2, r3
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2190      	movs	r1, #144	; 0x90
 8006a7e:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2290      	movs	r2, #144	; 0x90
 8006a84:	589b      	ldr	r3, [r3, r2]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d007      	beq.n	8006a9a <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	0018      	movs	r0, r3
 8006a8e:	f7fe fe95 	bl	80057bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2290      	movs	r2, #144	; 0x90
 8006a96:	2100      	movs	r1, #0
 8006a98:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	225e      	movs	r2, #94	; 0x5e
 8006a9e:	5a9b      	ldrh	r3, [r3, r2]
 8006aa0:	b29b      	uxth	r3, r3
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d000      	beq.n	8006aa8 <UART_RxISR_8BIT_FIFOEN+0x138>
 8006aa6:	e09d      	b.n	8006be4 <UART_RxISR_8BIT_FIFOEN+0x274>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006aa8:	f3ef 8310 	mrs	r3, PRIMASK
 8006aac:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 8006aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006ab0:	66bb      	str	r3, [r7, #104]	; 0x68
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ab6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ab8:	f383 8810 	msr	PRIMASK, r3
}
 8006abc:	46c0      	nop			; (mov r8, r8)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	681a      	ldr	r2, [r3, #0]
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4975      	ldr	r1, [pc, #468]	; (8006ca0 <UART_RxISR_8BIT_FIFOEN+0x330>)
 8006aca:	400a      	ands	r2, r1
 8006acc:	601a      	str	r2, [r3, #0]
 8006ace:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006ad0:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ad2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ad4:	f383 8810 	msr	PRIMASK, r3
}
 8006ad8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ada:	f3ef 8310 	mrs	r3, PRIMASK
 8006ade:	647b      	str	r3, [r7, #68]	; 0x44
  return(result);
 8006ae0:	6c7b      	ldr	r3, [r7, #68]	; 0x44

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006ae2:	667b      	str	r3, [r7, #100]	; 0x64
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ae8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006aea:	f383 8810 	msr	PRIMASK, r3
}
 8006aee:	46c0      	nop			; (mov r8, r8)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	689a      	ldr	r2, [r3, #8]
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	496a      	ldr	r1, [pc, #424]	; (8006ca4 <UART_RxISR_8BIT_FIFOEN+0x334>)
 8006afc:	400a      	ands	r2, r1
 8006afe:	609a      	str	r2, [r3, #8]
 8006b00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006b02:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b06:	f383 8810 	msr	PRIMASK, r3
}
 8006b0a:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	228c      	movs	r2, #140	; 0x8c
 8006b10:	2120      	movs	r1, #32
 8006b12:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2200      	movs	r2, #0
 8006b18:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	4a60      	ldr	r2, [pc, #384]	; (8006ca8 <UART_RxISR_8BIT_FIFOEN+0x338>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d024      	beq.n	8006b74 <UART_RxISR_8BIT_FIFOEN+0x204>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	4a5f      	ldr	r2, [pc, #380]	; (8006cac <UART_RxISR_8BIT_FIFOEN+0x33c>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d01f      	beq.n	8006b74 <UART_RxISR_8BIT_FIFOEN+0x204>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	685a      	ldr	r2, [r3, #4]
 8006b3a:	2380      	movs	r3, #128	; 0x80
 8006b3c:	041b      	lsls	r3, r3, #16
 8006b3e:	4013      	ands	r3, r2
 8006b40:	d018      	beq.n	8006b74 <UART_RxISR_8BIT_FIFOEN+0x204>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b42:	f3ef 8310 	mrs	r3, PRIMASK
 8006b46:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8006b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006b4a:	663b      	str	r3, [r7, #96]	; 0x60
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b52:	f383 8810 	msr	PRIMASK, r3
}
 8006b56:	46c0      	nop			; (mov r8, r8)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	681a      	ldr	r2, [r3, #0]
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	4953      	ldr	r1, [pc, #332]	; (8006cb0 <UART_RxISR_8BIT_FIFOEN+0x340>)
 8006b64:	400a      	ands	r2, r1
 8006b66:	601a      	str	r2, [r3, #0]
 8006b68:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006b6a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b6e:	f383 8810 	msr	PRIMASK, r3
}
 8006b72:	46c0      	nop			; (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b78:	2b01      	cmp	r3, #1
 8006b7a:	d12f      	bne.n	8006bdc <UART_RxISR_8BIT_FIFOEN+0x26c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b82:	f3ef 8310 	mrs	r3, PRIMASK
 8006b86:	623b      	str	r3, [r7, #32]
  return(result);
 8006b88:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b8a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b92:	f383 8810 	msr	PRIMASK, r3
}
 8006b96:	46c0      	nop			; (mov r8, r8)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	681a      	ldr	r2, [r3, #0]
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	2110      	movs	r1, #16
 8006ba4:	438a      	bics	r2, r1
 8006ba6:	601a      	str	r2, [r3, #0]
 8006ba8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006baa:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bae:	f383 8810 	msr	PRIMASK, r3
}
 8006bb2:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	69db      	ldr	r3, [r3, #28]
 8006bba:	2210      	movs	r2, #16
 8006bbc:	4013      	ands	r3, r2
 8006bbe:	2b10      	cmp	r3, #16
 8006bc0:	d103      	bne.n	8006bca <UART_RxISR_8BIT_FIFOEN+0x25a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	2210      	movs	r2, #16
 8006bc8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	225c      	movs	r2, #92	; 0x5c
 8006bce:	5a9a      	ldrh	r2, [r3, r2]
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	0011      	movs	r1, r2
 8006bd4:	0018      	movs	r0, r3
 8006bd6:	f7fe fdf9 	bl	80057cc <HAL_UARTEx_RxEventCallback>
 8006bda:	e003      	b.n	8006be4 <UART_RxISR_8BIT_FIFOEN+0x274>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	0018      	movs	r0, r3
 8006be0:	f7fa fcf2 	bl	80015c8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006be4:	236e      	movs	r3, #110	; 0x6e
 8006be6:	18fb      	adds	r3, r7, r3
 8006be8:	881b      	ldrh	r3, [r3, #0]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d004      	beq.n	8006bf8 <UART_RxISR_8BIT_FIFOEN+0x288>
 8006bee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006bf0:	2220      	movs	r2, #32
 8006bf2:	4013      	ands	r3, r2
 8006bf4:	d000      	beq.n	8006bf8 <UART_RxISR_8BIT_FIFOEN+0x288>
 8006bf6:	e6de      	b.n	80069b6 <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006bf8:	205a      	movs	r0, #90	; 0x5a
 8006bfa:	183b      	adds	r3, r7, r0
 8006bfc:	687a      	ldr	r2, [r7, #4]
 8006bfe:	215e      	movs	r1, #94	; 0x5e
 8006c00:	5a52      	ldrh	r2, [r2, r1]
 8006c02:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006c04:	0001      	movs	r1, r0
 8006c06:	187b      	adds	r3, r7, r1
 8006c08:	881b      	ldrh	r3, [r3, #0]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d044      	beq.n	8006c98 <UART_RxISR_8BIT_FIFOEN+0x328>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2268      	movs	r2, #104	; 0x68
 8006c12:	5a9b      	ldrh	r3, [r3, r2]
 8006c14:	187a      	adds	r2, r7, r1
 8006c16:	8812      	ldrh	r2, [r2, #0]
 8006c18:	429a      	cmp	r2, r3
 8006c1a:	d23d      	bcs.n	8006c98 <UART_RxISR_8BIT_FIFOEN+0x328>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c1c:	f3ef 8310 	mrs	r3, PRIMASK
 8006c20:	60bb      	str	r3, [r7, #8]
  return(result);
 8006c22:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006c24:	657b      	str	r3, [r7, #84]	; 0x54
 8006c26:	2301      	movs	r3, #1
 8006c28:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	f383 8810 	msr	PRIMASK, r3
}
 8006c30:	46c0      	nop			; (mov r8, r8)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	689a      	ldr	r2, [r3, #8]
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	491d      	ldr	r1, [pc, #116]	; (8006cb4 <UART_RxISR_8BIT_FIFOEN+0x344>)
 8006c3e:	400a      	ands	r2, r1
 8006c40:	609a      	str	r2, [r3, #8]
 8006c42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c44:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c46:	693b      	ldr	r3, [r7, #16]
 8006c48:	f383 8810 	msr	PRIMASK, r3
}
 8006c4c:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	4a19      	ldr	r2, [pc, #100]	; (8006cb8 <UART_RxISR_8BIT_FIFOEN+0x348>)
 8006c52:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c54:	f3ef 8310 	mrs	r3, PRIMASK
 8006c58:	617b      	str	r3, [r7, #20]
  return(result);
 8006c5a:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006c5c:	653b      	str	r3, [r7, #80]	; 0x50
 8006c5e:	2301      	movs	r3, #1
 8006c60:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c62:	69bb      	ldr	r3, [r7, #24]
 8006c64:	f383 8810 	msr	PRIMASK, r3
}
 8006c68:	46c0      	nop			; (mov r8, r8)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	681a      	ldr	r2, [r3, #0]
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	2120      	movs	r1, #32
 8006c76:	430a      	orrs	r2, r1
 8006c78:	601a      	str	r2, [r3, #0]
 8006c7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c7c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c7e:	69fb      	ldr	r3, [r7, #28]
 8006c80:	f383 8810 	msr	PRIMASK, r3
}
 8006c84:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006c86:	e007      	b.n	8006c98 <UART_RxISR_8BIT_FIFOEN+0x328>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	699a      	ldr	r2, [r3, #24]
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	2108      	movs	r1, #8
 8006c94:	430a      	orrs	r2, r1
 8006c96:	619a      	str	r2, [r3, #24]
}
 8006c98:	46c0      	nop			; (mov r8, r8)
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	b020      	add	sp, #128	; 0x80
 8006c9e:	bd80      	pop	{r7, pc}
 8006ca0:	fffffeff 	.word	0xfffffeff
 8006ca4:	effffffe 	.word	0xeffffffe
 8006ca8:	40008000 	.word	0x40008000
 8006cac:	40008400 	.word	0x40008400
 8006cb0:	fbffffff 	.word	0xfbffffff
 8006cb4:	efffffff 	.word	0xefffffff
 8006cb8:	080065c9 	.word	0x080065c9

08006cbc <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b0a2      	sub	sp, #136	; 0x88
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8006cc4:	2382      	movs	r3, #130	; 0x82
 8006cc6:	18fb      	adds	r3, r7, r3
 8006cc8:	687a      	ldr	r2, [r7, #4]
 8006cca:	2160      	movs	r1, #96	; 0x60
 8006ccc:	5a52      	ldrh	r2, [r2, r1]
 8006cce:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	69db      	ldr	r3, [r3, #28]
 8006cd6:	2284      	movs	r2, #132	; 0x84
 8006cd8:	18ba      	adds	r2, r7, r2
 8006cda:	6013      	str	r3, [r2, #0]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	67fb      	str	r3, [r7, #124]	; 0x7c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	689b      	ldr	r3, [r3, #8]
 8006cea:	67bb      	str	r3, [r7, #120]	; 0x78

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	228c      	movs	r2, #140	; 0x8c
 8006cf0:	589b      	ldr	r3, [r3, r2]
 8006cf2:	2b22      	cmp	r3, #34	; 0x22
 8006cf4:	d000      	beq.n	8006cf8 <UART_RxISR_16BIT_FIFOEN+0x3c>
 8006cf6:	e179      	b.n	8006fec <UART_RxISR_16BIT_FIFOEN+0x330>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006cf8:	2376      	movs	r3, #118	; 0x76
 8006cfa:	18fb      	adds	r3, r7, r3
 8006cfc:	687a      	ldr	r2, [r7, #4]
 8006cfe:	2168      	movs	r1, #104	; 0x68
 8006d00:	5a52      	ldrh	r2, [r2, r1]
 8006d02:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006d04:	e11e      	b.n	8006f44 <UART_RxISR_16BIT_FIFOEN+0x288>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006d0c:	2174      	movs	r1, #116	; 0x74
 8006d0e:	187b      	adds	r3, r7, r1
 8006d10:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d16:	673b      	str	r3, [r7, #112]	; 0x70
      *tmp = (uint16_t)(uhdata & uhMask);
 8006d18:	187b      	adds	r3, r7, r1
 8006d1a:	2282      	movs	r2, #130	; 0x82
 8006d1c:	18ba      	adds	r2, r7, r2
 8006d1e:	881b      	ldrh	r3, [r3, #0]
 8006d20:	8812      	ldrh	r2, [r2, #0]
 8006d22:	4013      	ands	r3, r2
 8006d24:	b29a      	uxth	r2, r3
 8006d26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006d28:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d2e:	1c9a      	adds	r2, r3, #2
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	225e      	movs	r2, #94	; 0x5e
 8006d38:	5a9b      	ldrh	r3, [r3, r2]
 8006d3a:	b29b      	uxth	r3, r3
 8006d3c:	3b01      	subs	r3, #1
 8006d3e:	b299      	uxth	r1, r3
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	225e      	movs	r2, #94	; 0x5e
 8006d44:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	69db      	ldr	r3, [r3, #28]
 8006d4c:	2184      	movs	r1, #132	; 0x84
 8006d4e:	187a      	adds	r2, r7, r1
 8006d50:	6013      	str	r3, [r2, #0]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006d52:	187b      	adds	r3, r7, r1
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	2207      	movs	r2, #7
 8006d58:	4013      	ands	r3, r2
 8006d5a:	d04e      	beq.n	8006dfa <UART_RxISR_16BIT_FIFOEN+0x13e>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006d5c:	187b      	adds	r3, r7, r1
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	2201      	movs	r2, #1
 8006d62:	4013      	ands	r3, r2
 8006d64:	d010      	beq.n	8006d88 <UART_RxISR_16BIT_FIFOEN+0xcc>
 8006d66:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8006d68:	2380      	movs	r3, #128	; 0x80
 8006d6a:	005b      	lsls	r3, r3, #1
 8006d6c:	4013      	ands	r3, r2
 8006d6e:	d00b      	beq.n	8006d88 <UART_RxISR_16BIT_FIFOEN+0xcc>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	2201      	movs	r2, #1
 8006d76:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2290      	movs	r2, #144	; 0x90
 8006d7c:	589b      	ldr	r3, [r3, r2]
 8006d7e:	2201      	movs	r2, #1
 8006d80:	431a      	orrs	r2, r3
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2190      	movs	r1, #144	; 0x90
 8006d86:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006d88:	2384      	movs	r3, #132	; 0x84
 8006d8a:	18fb      	adds	r3, r7, r3
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	2202      	movs	r2, #2
 8006d90:	4013      	ands	r3, r2
 8006d92:	d00f      	beq.n	8006db4 <UART_RxISR_16BIT_FIFOEN+0xf8>
 8006d94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d96:	2201      	movs	r2, #1
 8006d98:	4013      	ands	r3, r2
 8006d9a:	d00b      	beq.n	8006db4 <UART_RxISR_16BIT_FIFOEN+0xf8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	2202      	movs	r2, #2
 8006da2:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2290      	movs	r2, #144	; 0x90
 8006da8:	589b      	ldr	r3, [r3, r2]
 8006daa:	2204      	movs	r2, #4
 8006dac:	431a      	orrs	r2, r3
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2190      	movs	r1, #144	; 0x90
 8006db2:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006db4:	2384      	movs	r3, #132	; 0x84
 8006db6:	18fb      	adds	r3, r7, r3
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	2204      	movs	r2, #4
 8006dbc:	4013      	ands	r3, r2
 8006dbe:	d00f      	beq.n	8006de0 <UART_RxISR_16BIT_FIFOEN+0x124>
 8006dc0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006dc2:	2201      	movs	r2, #1
 8006dc4:	4013      	ands	r3, r2
 8006dc6:	d00b      	beq.n	8006de0 <UART_RxISR_16BIT_FIFOEN+0x124>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	2204      	movs	r2, #4
 8006dce:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2290      	movs	r2, #144	; 0x90
 8006dd4:	589b      	ldr	r3, [r3, r2]
 8006dd6:	2202      	movs	r2, #2
 8006dd8:	431a      	orrs	r2, r3
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2190      	movs	r1, #144	; 0x90
 8006dde:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2290      	movs	r2, #144	; 0x90
 8006de4:	589b      	ldr	r3, [r3, r2]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d007      	beq.n	8006dfa <UART_RxISR_16BIT_FIFOEN+0x13e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	0018      	movs	r0, r3
 8006dee:	f7fe fce5 	bl	80057bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2290      	movs	r2, #144	; 0x90
 8006df6:	2100      	movs	r1, #0
 8006df8:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	225e      	movs	r2, #94	; 0x5e
 8006dfe:	5a9b      	ldrh	r3, [r3, r2]
 8006e00:	b29b      	uxth	r3, r3
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d000      	beq.n	8006e08 <UART_RxISR_16BIT_FIFOEN+0x14c>
 8006e06:	e09d      	b.n	8006f44 <UART_RxISR_16BIT_FIFOEN+0x288>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e08:	f3ef 8310 	mrs	r3, PRIMASK
 8006e0c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8006e0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006e10:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006e12:	2301      	movs	r3, #1
 8006e14:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e18:	f383 8810 	msr	PRIMASK, r3
}
 8006e1c:	46c0      	nop			; (mov r8, r8)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	681a      	ldr	r2, [r3, #0]
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4976      	ldr	r1, [pc, #472]	; (8007004 <UART_RxISR_16BIT_FIFOEN+0x348>)
 8006e2a:	400a      	ands	r2, r1
 8006e2c:	601a      	str	r2, [r3, #0]
 8006e2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e30:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e34:	f383 8810 	msr	PRIMASK, r3
}
 8006e38:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e3a:	f3ef 8310 	mrs	r3, PRIMASK
 8006e3e:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8006e40:	6cbb      	ldr	r3, [r7, #72]	; 0x48

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006e42:	66bb      	str	r3, [r7, #104]	; 0x68
 8006e44:	2301      	movs	r3, #1
 8006e46:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e4a:	f383 8810 	msr	PRIMASK, r3
}
 8006e4e:	46c0      	nop			; (mov r8, r8)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	689a      	ldr	r2, [r3, #8]
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	496b      	ldr	r1, [pc, #428]	; (8007008 <UART_RxISR_16BIT_FIFOEN+0x34c>)
 8006e5c:	400a      	ands	r2, r1
 8006e5e:	609a      	str	r2, [r3, #8]
 8006e60:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006e62:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e66:	f383 8810 	msr	PRIMASK, r3
}
 8006e6a:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	228c      	movs	r2, #140	; 0x8c
 8006e70:	2120      	movs	r1, #32
 8006e72:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2200      	movs	r2, #0
 8006e78:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	4a61      	ldr	r2, [pc, #388]	; (800700c <UART_RxISR_16BIT_FIFOEN+0x350>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d024      	beq.n	8006ed4 <UART_RxISR_16BIT_FIFOEN+0x218>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	4a60      	ldr	r2, [pc, #384]	; (8007010 <UART_RxISR_16BIT_FIFOEN+0x354>)
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d01f      	beq.n	8006ed4 <UART_RxISR_16BIT_FIFOEN+0x218>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	685a      	ldr	r2, [r3, #4]
 8006e9a:	2380      	movs	r3, #128	; 0x80
 8006e9c:	041b      	lsls	r3, r3, #16
 8006e9e:	4013      	ands	r3, r2
 8006ea0:	d018      	beq.n	8006ed4 <UART_RxISR_16BIT_FIFOEN+0x218>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ea2:	f3ef 8310 	mrs	r3, PRIMASK
 8006ea6:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8006ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006eaa:	667b      	str	r3, [r7, #100]	; 0x64
 8006eac:	2301      	movs	r3, #1
 8006eae:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006eb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006eb2:	f383 8810 	msr	PRIMASK, r3
}
 8006eb6:	46c0      	nop			; (mov r8, r8)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	681a      	ldr	r2, [r3, #0]
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	4954      	ldr	r1, [pc, #336]	; (8007014 <UART_RxISR_16BIT_FIFOEN+0x358>)
 8006ec4:	400a      	ands	r2, r1
 8006ec6:	601a      	str	r2, [r3, #0]
 8006ec8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006eca:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ece:	f383 8810 	msr	PRIMASK, r3
}
 8006ed2:	46c0      	nop			; (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ed8:	2b01      	cmp	r3, #1
 8006eda:	d12f      	bne.n	8006f3c <UART_RxISR_16BIT_FIFOEN+0x280>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2200      	movs	r2, #0
 8006ee0:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ee2:	f3ef 8310 	mrs	r3, PRIMASK
 8006ee6:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006eea:	663b      	str	r3, [r7, #96]	; 0x60
 8006eec:	2301      	movs	r3, #1
 8006eee:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ef2:	f383 8810 	msr	PRIMASK, r3
}
 8006ef6:	46c0      	nop			; (mov r8, r8)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	681a      	ldr	r2, [r3, #0]
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	2110      	movs	r1, #16
 8006f04:	438a      	bics	r2, r1
 8006f06:	601a      	str	r2, [r3, #0]
 8006f08:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f0e:	f383 8810 	msr	PRIMASK, r3
}
 8006f12:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	69db      	ldr	r3, [r3, #28]
 8006f1a:	2210      	movs	r2, #16
 8006f1c:	4013      	ands	r3, r2
 8006f1e:	2b10      	cmp	r3, #16
 8006f20:	d103      	bne.n	8006f2a <UART_RxISR_16BIT_FIFOEN+0x26e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	2210      	movs	r2, #16
 8006f28:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	225c      	movs	r2, #92	; 0x5c
 8006f2e:	5a9a      	ldrh	r2, [r3, r2]
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	0011      	movs	r1, r2
 8006f34:	0018      	movs	r0, r3
 8006f36:	f7fe fc49 	bl	80057cc <HAL_UARTEx_RxEventCallback>
 8006f3a:	e003      	b.n	8006f44 <UART_RxISR_16BIT_FIFOEN+0x288>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	0018      	movs	r0, r3
 8006f40:	f7fa fb42 	bl	80015c8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006f44:	2376      	movs	r3, #118	; 0x76
 8006f46:	18fb      	adds	r3, r7, r3
 8006f48:	881b      	ldrh	r3, [r3, #0]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d006      	beq.n	8006f5c <UART_RxISR_16BIT_FIFOEN+0x2a0>
 8006f4e:	2384      	movs	r3, #132	; 0x84
 8006f50:	18fb      	adds	r3, r7, r3
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	2220      	movs	r2, #32
 8006f56:	4013      	ands	r3, r2
 8006f58:	d000      	beq.n	8006f5c <UART_RxISR_16BIT_FIFOEN+0x2a0>
 8006f5a:	e6d4      	b.n	8006d06 <UART_RxISR_16BIT_FIFOEN+0x4a>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006f5c:	205e      	movs	r0, #94	; 0x5e
 8006f5e:	183b      	adds	r3, r7, r0
 8006f60:	687a      	ldr	r2, [r7, #4]
 8006f62:	215e      	movs	r1, #94	; 0x5e
 8006f64:	5a52      	ldrh	r2, [r2, r1]
 8006f66:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006f68:	0001      	movs	r1, r0
 8006f6a:	187b      	adds	r3, r7, r1
 8006f6c:	881b      	ldrh	r3, [r3, #0]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d044      	beq.n	8006ffc <UART_RxISR_16BIT_FIFOEN+0x340>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2268      	movs	r2, #104	; 0x68
 8006f76:	5a9b      	ldrh	r3, [r3, r2]
 8006f78:	187a      	adds	r2, r7, r1
 8006f7a:	8812      	ldrh	r2, [r2, #0]
 8006f7c:	429a      	cmp	r2, r3
 8006f7e:	d23d      	bcs.n	8006ffc <UART_RxISR_16BIT_FIFOEN+0x340>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f80:	f3ef 8310 	mrs	r3, PRIMASK
 8006f84:	60fb      	str	r3, [r7, #12]
  return(result);
 8006f86:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006f88:	65bb      	str	r3, [r7, #88]	; 0x58
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f8e:	693b      	ldr	r3, [r7, #16]
 8006f90:	f383 8810 	msr	PRIMASK, r3
}
 8006f94:	46c0      	nop			; (mov r8, r8)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	689a      	ldr	r2, [r3, #8]
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	491d      	ldr	r1, [pc, #116]	; (8007018 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 8006fa2:	400a      	ands	r2, r1
 8006fa4:	609a      	str	r2, [r3, #8]
 8006fa6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006fa8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006faa:	697b      	ldr	r3, [r7, #20]
 8006fac:	f383 8810 	msr	PRIMASK, r3
}
 8006fb0:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	4a19      	ldr	r2, [pc, #100]	; (800701c <UART_RxISR_16BIT_FIFOEN+0x360>)
 8006fb6:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006fb8:	f3ef 8310 	mrs	r3, PRIMASK
 8006fbc:	61bb      	str	r3, [r7, #24]
  return(result);
 8006fbe:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006fc0:	657b      	str	r3, [r7, #84]	; 0x54
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006fc6:	69fb      	ldr	r3, [r7, #28]
 8006fc8:	f383 8810 	msr	PRIMASK, r3
}
 8006fcc:	46c0      	nop			; (mov r8, r8)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	681a      	ldr	r2, [r3, #0]
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	2120      	movs	r1, #32
 8006fda:	430a      	orrs	r2, r1
 8006fdc:	601a      	str	r2, [r3, #0]
 8006fde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006fe0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006fe2:	6a3b      	ldr	r3, [r7, #32]
 8006fe4:	f383 8810 	msr	PRIMASK, r3
}
 8006fe8:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006fea:	e007      	b.n	8006ffc <UART_RxISR_16BIT_FIFOEN+0x340>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	699a      	ldr	r2, [r3, #24]
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	2108      	movs	r1, #8
 8006ff8:	430a      	orrs	r2, r1
 8006ffa:	619a      	str	r2, [r3, #24]
}
 8006ffc:	46c0      	nop			; (mov r8, r8)
 8006ffe:	46bd      	mov	sp, r7
 8007000:	b022      	add	sp, #136	; 0x88
 8007002:	bd80      	pop	{r7, pc}
 8007004:	fffffeff 	.word	0xfffffeff
 8007008:	effffffe 	.word	0xeffffffe
 800700c:	40008000 	.word	0x40008000
 8007010:	40008400 	.word	0x40008400
 8007014:	fbffffff 	.word	0xfbffffff
 8007018:	efffffff 	.word	0xefffffff
 800701c:	0800679d 	.word	0x0800679d

08007020 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b082      	sub	sp, #8
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007028:	46c0      	nop			; (mov r8, r8)
 800702a:	46bd      	mov	sp, r7
 800702c:	b002      	add	sp, #8
 800702e:	bd80      	pop	{r7, pc}

08007030 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b082      	sub	sp, #8
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007038:	46c0      	nop			; (mov r8, r8)
 800703a:	46bd      	mov	sp, r7
 800703c:	b002      	add	sp, #8
 800703e:	bd80      	pop	{r7, pc}

08007040 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b082      	sub	sp, #8
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007048:	46c0      	nop			; (mov r8, r8)
 800704a:	46bd      	mov	sp, r7
 800704c:	b002      	add	sp, #8
 800704e:	bd80      	pop	{r7, pc}

08007050 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b084      	sub	sp, #16
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2284      	movs	r2, #132	; 0x84
 800705c:	5c9b      	ldrb	r3, [r3, r2]
 800705e:	2b01      	cmp	r3, #1
 8007060:	d101      	bne.n	8007066 <HAL_UARTEx_DisableFifoMode+0x16>
 8007062:	2302      	movs	r3, #2
 8007064:	e027      	b.n	80070b6 <HAL_UARTEx_DisableFifoMode+0x66>
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2284      	movs	r2, #132	; 0x84
 800706a:	2101      	movs	r1, #1
 800706c:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2288      	movs	r2, #136	; 0x88
 8007072:	2124      	movs	r1, #36	; 0x24
 8007074:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	681a      	ldr	r2, [r3, #0]
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	2101      	movs	r1, #1
 800708a:	438a      	bics	r2, r1
 800708c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	4a0b      	ldr	r2, [pc, #44]	; (80070c0 <HAL_UARTEx_DisableFifoMode+0x70>)
 8007092:	4013      	ands	r3, r2
 8007094:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2200      	movs	r2, #0
 800709a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	68fa      	ldr	r2, [r7, #12]
 80070a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2288      	movs	r2, #136	; 0x88
 80070a8:	2120      	movs	r1, #32
 80070aa:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2284      	movs	r2, #132	; 0x84
 80070b0:	2100      	movs	r1, #0
 80070b2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80070b4:	2300      	movs	r3, #0
}
 80070b6:	0018      	movs	r0, r3
 80070b8:	46bd      	mov	sp, r7
 80070ba:	b004      	add	sp, #16
 80070bc:	bd80      	pop	{r7, pc}
 80070be:	46c0      	nop			; (mov r8, r8)
 80070c0:	dfffffff 	.word	0xdfffffff

080070c4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b084      	sub	sp, #16
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
 80070cc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2284      	movs	r2, #132	; 0x84
 80070d2:	5c9b      	ldrb	r3, [r3, r2]
 80070d4:	2b01      	cmp	r3, #1
 80070d6:	d101      	bne.n	80070dc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80070d8:	2302      	movs	r3, #2
 80070da:	e02e      	b.n	800713a <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2284      	movs	r2, #132	; 0x84
 80070e0:	2101      	movs	r1, #1
 80070e2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2288      	movs	r2, #136	; 0x88
 80070e8:	2124      	movs	r1, #36	; 0x24
 80070ea:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	681a      	ldr	r2, [r3, #0]
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	2101      	movs	r1, #1
 8007100:	438a      	bics	r2, r1
 8007102:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	689b      	ldr	r3, [r3, #8]
 800710a:	00db      	lsls	r3, r3, #3
 800710c:	08d9      	lsrs	r1, r3, #3
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	683a      	ldr	r2, [r7, #0]
 8007114:	430a      	orrs	r2, r1
 8007116:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	0018      	movs	r0, r3
 800711c:	f000 f854 	bl	80071c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	68fa      	ldr	r2, [r7, #12]
 8007126:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2288      	movs	r2, #136	; 0x88
 800712c:	2120      	movs	r1, #32
 800712e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2284      	movs	r2, #132	; 0x84
 8007134:	2100      	movs	r1, #0
 8007136:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007138:	2300      	movs	r3, #0
}
 800713a:	0018      	movs	r0, r3
 800713c:	46bd      	mov	sp, r7
 800713e:	b004      	add	sp, #16
 8007140:	bd80      	pop	{r7, pc}
	...

08007144 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b084      	sub	sp, #16
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
 800714c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2284      	movs	r2, #132	; 0x84
 8007152:	5c9b      	ldrb	r3, [r3, r2]
 8007154:	2b01      	cmp	r3, #1
 8007156:	d101      	bne.n	800715c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007158:	2302      	movs	r3, #2
 800715a:	e02f      	b.n	80071bc <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2284      	movs	r2, #132	; 0x84
 8007160:	2101      	movs	r1, #1
 8007162:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2288      	movs	r2, #136	; 0x88
 8007168:	2124      	movs	r1, #36	; 0x24
 800716a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	681a      	ldr	r2, [r3, #0]
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	2101      	movs	r1, #1
 8007180:	438a      	bics	r2, r1
 8007182:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	689b      	ldr	r3, [r3, #8]
 800718a:	4a0e      	ldr	r2, [pc, #56]	; (80071c4 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800718c:	4013      	ands	r3, r2
 800718e:	0019      	movs	r1, r3
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	683a      	ldr	r2, [r7, #0]
 8007196:	430a      	orrs	r2, r1
 8007198:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	0018      	movs	r0, r3
 800719e:	f000 f813 	bl	80071c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	68fa      	ldr	r2, [r7, #12]
 80071a8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2288      	movs	r2, #136	; 0x88
 80071ae:	2120      	movs	r1, #32
 80071b0:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2284      	movs	r2, #132	; 0x84
 80071b6:	2100      	movs	r1, #0
 80071b8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80071ba:	2300      	movs	r3, #0
}
 80071bc:	0018      	movs	r0, r3
 80071be:	46bd      	mov	sp, r7
 80071c0:	b004      	add	sp, #16
 80071c2:	bd80      	pop	{r7, pc}
 80071c4:	f1ffffff 	.word	0xf1ffffff

080071c8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80071c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80071ca:	b085      	sub	sp, #20
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d108      	bne.n	80071ea <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	226a      	movs	r2, #106	; 0x6a
 80071dc:	2101      	movs	r1, #1
 80071de:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2268      	movs	r2, #104	; 0x68
 80071e4:	2101      	movs	r1, #1
 80071e6:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80071e8:	e043      	b.n	8007272 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80071ea:	260f      	movs	r6, #15
 80071ec:	19bb      	adds	r3, r7, r6
 80071ee:	2208      	movs	r2, #8
 80071f0:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80071f2:	200e      	movs	r0, #14
 80071f4:	183b      	adds	r3, r7, r0
 80071f6:	2208      	movs	r2, #8
 80071f8:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	689b      	ldr	r3, [r3, #8]
 8007200:	0e5b      	lsrs	r3, r3, #25
 8007202:	b2da      	uxtb	r2, r3
 8007204:	240d      	movs	r4, #13
 8007206:	193b      	adds	r3, r7, r4
 8007208:	2107      	movs	r1, #7
 800720a:	400a      	ands	r2, r1
 800720c:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	689b      	ldr	r3, [r3, #8]
 8007214:	0f5b      	lsrs	r3, r3, #29
 8007216:	b2da      	uxtb	r2, r3
 8007218:	250c      	movs	r5, #12
 800721a:	197b      	adds	r3, r7, r5
 800721c:	2107      	movs	r1, #7
 800721e:	400a      	ands	r2, r1
 8007220:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007222:	183b      	adds	r3, r7, r0
 8007224:	781b      	ldrb	r3, [r3, #0]
 8007226:	197a      	adds	r2, r7, r5
 8007228:	7812      	ldrb	r2, [r2, #0]
 800722a:	4914      	ldr	r1, [pc, #80]	; (800727c <UARTEx_SetNbDataToProcess+0xb4>)
 800722c:	5c8a      	ldrb	r2, [r1, r2]
 800722e:	435a      	muls	r2, r3
 8007230:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8007232:	197b      	adds	r3, r7, r5
 8007234:	781b      	ldrb	r3, [r3, #0]
 8007236:	4a12      	ldr	r2, [pc, #72]	; (8007280 <UARTEx_SetNbDataToProcess+0xb8>)
 8007238:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800723a:	0019      	movs	r1, r3
 800723c:	f7f8 fffe 	bl	800023c <__divsi3>
 8007240:	0003      	movs	r3, r0
 8007242:	b299      	uxth	r1, r3
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	226a      	movs	r2, #106	; 0x6a
 8007248:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800724a:	19bb      	adds	r3, r7, r6
 800724c:	781b      	ldrb	r3, [r3, #0]
 800724e:	193a      	adds	r2, r7, r4
 8007250:	7812      	ldrb	r2, [r2, #0]
 8007252:	490a      	ldr	r1, [pc, #40]	; (800727c <UARTEx_SetNbDataToProcess+0xb4>)
 8007254:	5c8a      	ldrb	r2, [r1, r2]
 8007256:	435a      	muls	r2, r3
 8007258:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800725a:	193b      	adds	r3, r7, r4
 800725c:	781b      	ldrb	r3, [r3, #0]
 800725e:	4a08      	ldr	r2, [pc, #32]	; (8007280 <UARTEx_SetNbDataToProcess+0xb8>)
 8007260:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007262:	0019      	movs	r1, r3
 8007264:	f7f8 ffea 	bl	800023c <__divsi3>
 8007268:	0003      	movs	r3, r0
 800726a:	b299      	uxth	r1, r3
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2268      	movs	r2, #104	; 0x68
 8007270:	5299      	strh	r1, [r3, r2]
}
 8007272:	46c0      	nop			; (mov r8, r8)
 8007274:	46bd      	mov	sp, r7
 8007276:	b005      	add	sp, #20
 8007278:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800727a:	46c0      	nop			; (mov r8, r8)
 800727c:	0800a4b8 	.word	0x0800a4b8
 8007280:	0800a4c0 	.word	0x0800a4c0

08007284 <astronode_send_cfg_wr>:
                            bool deep_sleep_mode,
                            bool message_ack_event_pin_mask,
                            bool reset_notification_event_pin_mask,
							bool command_available_event_pin_mask,
							bool message_tx_event_pin_mask)
{
 8007284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007286:	b0e7      	sub	sp, #412	; 0x19c
 8007288:	af00      	add	r7, sp, #0
 800728a:	0005      	movs	r5, r0
 800728c:	000c      	movs	r4, r1
 800728e:	0010      	movs	r0, r2
 8007290:	0019      	movs	r1, r3
 8007292:	4b4b      	ldr	r3, [pc, #300]	; (80073c0 <astronode_send_cfg_wr+0x13c>)
 8007294:	26cc      	movs	r6, #204	; 0xcc
 8007296:	0076      	lsls	r6, r6, #1
 8007298:	199b      	adds	r3, r3, r6
 800729a:	19db      	adds	r3, r3, r7
 800729c:	1c2a      	adds	r2, r5, #0
 800729e:	701a      	strb	r2, [r3, #0]
 80072a0:	4b48      	ldr	r3, [pc, #288]	; (80073c4 <astronode_send_cfg_wr+0x140>)
 80072a2:	0035      	movs	r5, r6
 80072a4:	195b      	adds	r3, r3, r5
 80072a6:	19db      	adds	r3, r3, r7
 80072a8:	1c22      	adds	r2, r4, #0
 80072aa:	701a      	strb	r2, [r3, #0]
 80072ac:	4b46      	ldr	r3, [pc, #280]	; (80073c8 <astronode_send_cfg_wr+0x144>)
 80072ae:	002c      	movs	r4, r5
 80072b0:	191b      	adds	r3, r3, r4
 80072b2:	19db      	adds	r3, r3, r7
 80072b4:	1c02      	adds	r2, r0, #0
 80072b6:	701a      	strb	r2, [r3, #0]
 80072b8:	4b44      	ldr	r3, [pc, #272]	; (80073cc <astronode_send_cfg_wr+0x148>)
 80072ba:	191b      	adds	r3, r3, r4
 80072bc:	19db      	adds	r3, r3, r7
 80072be:	1c0a      	adds	r2, r1, #0
 80072c0:	701a      	strb	r2, [r3, #0]
    astronode_app_msg_t request = {0};
 80072c2:	25d0      	movs	r5, #208	; 0xd0
 80072c4:	197b      	adds	r3, r7, r5
 80072c6:	0018      	movs	r0, r3
 80072c8:	23c6      	movs	r3, #198	; 0xc6
 80072ca:	001a      	movs	r2, r3
 80072cc:	2100      	movs	r1, #0
 80072ce:	f000 ff0d 	bl	80080ec <memset>
    astronode_app_msg_t answer = {0};
 80072d2:	4b3f      	ldr	r3, [pc, #252]	; (80073d0 <astronode_send_cfg_wr+0x14c>)
 80072d4:	191b      	adds	r3, r3, r4
 80072d6:	19db      	adds	r3, r3, r7
 80072d8:	0018      	movs	r0, r3
 80072da:	23c6      	movs	r3, #198	; 0xc6
 80072dc:	001a      	movs	r2, r3
 80072de:	2100      	movs	r1, #0
 80072e0:	f000 ff04 	bl	80080ec <memset>

    request.op_code = ASTRONODE_OP_CODE_CFG_WR;
 80072e4:	0029      	movs	r1, r5
 80072e6:	187b      	adds	r3, r7, r1
 80072e8:	2205      	movs	r2, #5
 80072ea:	701a      	strb	r2, [r3, #0]

    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_CONFIG] = payload_acknowledgment << ASTRONODE_BIT_OFFSET_PAYLOAD_ACK
        | add_geolocation << ASTRONODE_BIT_OFFSET_ADD_GEO
 80072ec:	4b34      	ldr	r3, [pc, #208]	; (80073c0 <astronode_send_cfg_wr+0x13c>)
 80072ee:	191b      	adds	r3, r3, r4
 80072f0:	19db      	adds	r3, r3, r7
 80072f2:	2200      	movs	r2, #0
 80072f4:	569a      	ldrsb	r2, [r3, r2]
 80072f6:	4b33      	ldr	r3, [pc, #204]	; (80073c4 <astronode_send_cfg_wr+0x140>)
 80072f8:	191b      	adds	r3, r3, r4
 80072fa:	19db      	adds	r3, r3, r7
 80072fc:	781b      	ldrb	r3, [r3, #0]
 80072fe:	005b      	lsls	r3, r3, #1
 8007300:	b25b      	sxtb	r3, r3
 8007302:	4313      	orrs	r3, r2
 8007304:	b25a      	sxtb	r2, r3
        | enable_ephemeris << ASTRONODE_BIT_OFFSET_ENABLE_EPH
 8007306:	4b30      	ldr	r3, [pc, #192]	; (80073c8 <astronode_send_cfg_wr+0x144>)
 8007308:	191b      	adds	r3, r3, r4
 800730a:	19db      	adds	r3, r3, r7
 800730c:	781b      	ldrb	r3, [r3, #0]
 800730e:	009b      	lsls	r3, r3, #2
 8007310:	b25b      	sxtb	r3, r3
 8007312:	4313      	orrs	r3, r2
 8007314:	b25a      	sxtb	r2, r3
        | deep_sleep_mode << ASTRONODE_BIT_OFFSET_DEEP_SLEEP_MODE;
 8007316:	4b2d      	ldr	r3, [pc, #180]	; (80073cc <astronode_send_cfg_wr+0x148>)
 8007318:	191b      	adds	r3, r3, r4
 800731a:	19db      	adds	r3, r3, r7
 800731c:	781b      	ldrb	r3, [r3, #0]
 800731e:	00db      	lsls	r3, r3, #3
 8007320:	b25b      	sxtb	r3, r3
 8007322:	4313      	orrs	r3, r2
 8007324:	b25b      	sxtb	r3, r3
 8007326:	b2da      	uxtb	r2, r3
    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_CONFIG] = payload_acknowledgment << ASTRONODE_BIT_OFFSET_PAYLOAD_ACK
 8007328:	187b      	adds	r3, r7, r1
 800732a:	705a      	strb	r2, [r3, #1]

    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_EVT_PIN_MASK] = message_ack_event_pin_mask << ASTRONODE_BIT_OFFSET_MSG_ACK_EVT_PIN_MASK
        | reset_notification_event_pin_mask << ASTRONODE_BIT_OFFSET_RST_NTF_EVT_PIN_MASK
 800732c:	23d4      	movs	r3, #212	; 0xd4
 800732e:	005b      	lsls	r3, r3, #1
 8007330:	2508      	movs	r5, #8
 8007332:	195b      	adds	r3, r3, r5
 8007334:	19db      	adds	r3, r3, r7
 8007336:	2200      	movs	r2, #0
 8007338:	569a      	ldrsb	r2, [r3, r2]
 800733a:	23d6      	movs	r3, #214	; 0xd6
 800733c:	005b      	lsls	r3, r3, #1
 800733e:	195b      	adds	r3, r3, r5
 8007340:	19db      	adds	r3, r3, r7
 8007342:	781b      	ldrb	r3, [r3, #0]
 8007344:	005b      	lsls	r3, r3, #1
 8007346:	b25b      	sxtb	r3, r3
 8007348:	4313      	orrs	r3, r2
 800734a:	b25a      	sxtb	r2, r3
        | command_available_event_pin_mask << ASTRONODE_BIT_OFFSET_CMD_AVA_EVT_PIN_MASK
 800734c:	23d8      	movs	r3, #216	; 0xd8
 800734e:	005b      	lsls	r3, r3, #1
 8007350:	195b      	adds	r3, r3, r5
 8007352:	19db      	adds	r3, r3, r7
 8007354:	781b      	ldrb	r3, [r3, #0]
 8007356:	009b      	lsls	r3, r3, #2
 8007358:	b25b      	sxtb	r3, r3
 800735a:	4313      	orrs	r3, r2
 800735c:	b25a      	sxtb	r2, r3
        | message_tx_event_pin_mask << ASTRONODE_BIT_OFFSET_MSG_TXP_EVT_PIN_MASK;
 800735e:	23da      	movs	r3, #218	; 0xda
 8007360:	005b      	lsls	r3, r3, #1
 8007362:	195b      	adds	r3, r3, r5
 8007364:	19db      	adds	r3, r3, r7
 8007366:	781b      	ldrb	r3, [r3, #0]
 8007368:	00db      	lsls	r3, r3, #3
 800736a:	b25b      	sxtb	r3, r3
 800736c:	4313      	orrs	r3, r2
 800736e:	b25b      	sxtb	r3, r3
 8007370:	b2da      	uxtb	r2, r3
    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_EVT_PIN_MASK] = message_ack_event_pin_mask << ASTRONODE_BIT_OFFSET_MSG_ACK_EVT_PIN_MASK
 8007372:	187b      	adds	r3, r7, r1
 8007374:	70da      	strb	r2, [r3, #3]

    request.payload_len = 3;
 8007376:	0008      	movs	r0, r1
 8007378:	187b      	adds	r3, r7, r1
 800737a:	22c4      	movs	r2, #196	; 0xc4
 800737c:	2103      	movs	r1, #3
 800737e:	5299      	strh	r1, [r3, r2]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8007380:	002b      	movs	r3, r5
 8007382:	18fa      	adds	r2, r7, r3
 8007384:	183b      	adds	r3, r7, r0
 8007386:	0011      	movs	r1, r2
 8007388:	0018      	movs	r0, r3
 800738a:	f000 fb33 	bl	80079f4 <astronode_transport_send_receive>
 800738e:	0003      	movs	r3, r0
 8007390:	2b01      	cmp	r3, #1
 8007392:	d10f      	bne.n	80073b4 <astronode_send_cfg_wr+0x130>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_CFG_WA)
 8007394:	4b0e      	ldr	r3, [pc, #56]	; (80073d0 <astronode_send_cfg_wr+0x14c>)
 8007396:	191b      	adds	r3, r3, r4
 8007398:	19db      	adds	r3, r3, r7
 800739a:	781b      	ldrb	r3, [r3, #0]
 800739c:	2b85      	cmp	r3, #133	; 0x85
 800739e:	d105      	bne.n	80073ac <astronode_send_cfg_wr+0x128>
        {
            send_debug_logs("Astronode configuration successfully set.");
 80073a0:	4b0c      	ldr	r3, [pc, #48]	; (80073d4 <astronode_send_cfg_wr+0x150>)
 80073a2:	0018      	movs	r0, r3
 80073a4:	f7f9 fe90 	bl	80010c8 <send_debug_logs>
            return true ;
 80073a8:	2301      	movs	r3, #1
 80073aa:	e004      	b.n	80073b6 <astronode_send_cfg_wr+0x132>
        }
        else
        {
            send_debug_logs("Failed to set the Astronode configuration.");
 80073ac:	4b0a      	ldr	r3, [pc, #40]	; (80073d8 <astronode_send_cfg_wr+0x154>)
 80073ae:	0018      	movs	r0, r3
 80073b0:	f7f9 fe8a 	bl	80010c8 <send_debug_logs>
        }
    }
    return false ;
 80073b4:	2300      	movs	r3, #0
}
 80073b6:	0018      	movs	r0, r3
 80073b8:	46bd      	mov	sp, r7
 80073ba:	b067      	add	sp, #412	; 0x19c
 80073bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073be:	46c0      	nop			; (mov r8, r8)
 80073c0:	fffffe6f 	.word	0xfffffe6f
 80073c4:	fffffe6e 	.word	0xfffffe6e
 80073c8:	fffffe6d 	.word	0xfffffe6d
 80073cc:	fffffe6c 	.word	0xfffffe6c
 80073d0:	fffffe70 	.word	0xfffffe70
 80073d4:	0800920c 	.word	0x0800920c
 80073d8:	08009238 	.word	0x08009238

080073dc <astronode_send_mpn_rr>:
        }
    }
}

void astronode_send_mpn_rr(void)
{
 80073dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80073de:	b0ed      	sub	sp, #436	; 0x1b4
 80073e0:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 80073e2:	21c8      	movs	r1, #200	; 0xc8
 80073e4:	2318      	movs	r3, #24
 80073e6:	18cb      	adds	r3, r1, r3
 80073e8:	19db      	adds	r3, r3, r7
 80073ea:	0018      	movs	r0, r3
 80073ec:	23c6      	movs	r3, #198	; 0xc6
 80073ee:	001a      	movs	r2, r3
 80073f0:	2100      	movs	r1, #0
 80073f2:	f000 fe7b 	bl	80080ec <memset>
    astronode_app_msg_t answer = {0};
 80073f6:	4b4a      	ldr	r3, [pc, #296]	; (8007520 <astronode_send_mpn_rr+0x144>)
 80073f8:	26cc      	movs	r6, #204	; 0xcc
 80073fa:	0076      	lsls	r6, r6, #1
 80073fc:	199b      	adds	r3, r3, r6
 80073fe:	2218      	movs	r2, #24
 8007400:	4694      	mov	ip, r2
 8007402:	44bc      	add	ip, r7
 8007404:	4463      	add	r3, ip
 8007406:	0018      	movs	r0, r3
 8007408:	23c6      	movs	r3, #198	; 0xc6
 800740a:	001a      	movs	r2, r3
 800740c:	2100      	movs	r1, #0
 800740e:	f000 fe6d 	bl	80080ec <memset>

    request.op_code = ASTRONODE_OP_CODE_MPN_RR;
 8007412:	21c8      	movs	r1, #200	; 0xc8
 8007414:	2318      	movs	r3, #24
 8007416:	18cb      	adds	r3, r1, r3
 8007418:	19db      	adds	r3, r3, r7
 800741a:	221b      	movs	r2, #27
 800741c:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 800741e:	2318      	movs	r3, #24
 8007420:	18fa      	adds	r2, r7, r3
 8007422:	2318      	movs	r3, #24
 8007424:	18cb      	adds	r3, r1, r3
 8007426:	19db      	adds	r3, r3, r7
 8007428:	0011      	movs	r1, r2
 800742a:	0018      	movs	r0, r3
 800742c:	f000 fae2 	bl	80079f4 <astronode_transport_send_receive>
 8007430:	0003      	movs	r3, r0
 8007432:	2b01      	cmp	r3, #1
 8007434:	d16f      	bne.n	8007516 <astronode_send_mpn_rr+0x13a>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_MPN_RA)
 8007436:	4b3a      	ldr	r3, [pc, #232]	; (8007520 <astronode_send_mpn_rr+0x144>)
 8007438:	0032      	movs	r2, r6
 800743a:	189b      	adds	r3, r3, r2
 800743c:	2118      	movs	r1, #24
 800743e:	468c      	mov	ip, r1
 8007440:	44bc      	add	ip, r7
 8007442:	4463      	add	r3, ip
 8007444:	781b      	ldrb	r3, [r3, #0]
 8007446:	2b9b      	cmp	r3, #155	; 0x9b
 8007448:	d161      	bne.n	800750e <astronode_send_mpn_rr+0x132>
        {
 800744a:	466b      	mov	r3, sp
 800744c:	001e      	movs	r6, r3
            char product_number[answer.payload_len];
 800744e:	4b34      	ldr	r3, [pc, #208]	; (8007520 <astronode_send_mpn_rr+0x144>)
 8007450:	189b      	adds	r3, r3, r2
 8007452:	2218      	movs	r2, #24
 8007454:	4694      	mov	ip, r2
 8007456:	44bc      	add	ip, r7
 8007458:	4463      	add	r3, ip
 800745a:	22c4      	movs	r2, #196	; 0xc4
 800745c:	5a9b      	ldrh	r3, [r3, r2]
 800745e:	001a      	movs	r2, r3
 8007460:	3a01      	subs	r2, #1
 8007462:	21ca      	movs	r1, #202	; 0xca
 8007464:	0049      	lsls	r1, r1, #1
 8007466:	2018      	movs	r0, #24
 8007468:	1809      	adds	r1, r1, r0
 800746a:	19c9      	adds	r1, r1, r7
 800746c:	600a      	str	r2, [r1, #0]
 800746e:	001c      	movs	r4, r3
 8007470:	2200      	movs	r2, #0
 8007472:	0015      	movs	r5, r2
 8007474:	0020      	movs	r0, r4
 8007476:	0029      	movs	r1, r5
 8007478:	0004      	movs	r4, r0
 800747a:	0f62      	lsrs	r2, r4, #29
 800747c:	000c      	movs	r4, r1
 800747e:	00e4      	lsls	r4, r4, #3
 8007480:	617c      	str	r4, [r7, #20]
 8007482:	697c      	ldr	r4, [r7, #20]
 8007484:	4314      	orrs	r4, r2
 8007486:	617c      	str	r4, [r7, #20]
 8007488:	0001      	movs	r1, r0
 800748a:	00c9      	lsls	r1, r1, #3
 800748c:	6139      	str	r1, [r7, #16]
 800748e:	603b      	str	r3, [r7, #0]
 8007490:	2200      	movs	r2, #0
 8007492:	607a      	str	r2, [r7, #4]
 8007494:	6838      	ldr	r0, [r7, #0]
 8007496:	6879      	ldr	r1, [r7, #4]
 8007498:	0004      	movs	r4, r0
 800749a:	0f62      	lsrs	r2, r4, #29
 800749c:	000c      	movs	r4, r1
 800749e:	00e4      	lsls	r4, r4, #3
 80074a0:	60fc      	str	r4, [r7, #12]
 80074a2:	68fc      	ldr	r4, [r7, #12]
 80074a4:	4314      	orrs	r4, r2
 80074a6:	60fc      	str	r4, [r7, #12]
 80074a8:	0001      	movs	r1, r0
 80074aa:	00ca      	lsls	r2, r1, #3
 80074ac:	60ba      	str	r2, [r7, #8]
 80074ae:	3307      	adds	r3, #7
 80074b0:	08db      	lsrs	r3, r3, #3
 80074b2:	00db      	lsls	r3, r3, #3
 80074b4:	4669      	mov	r1, sp
 80074b6:	1acb      	subs	r3, r1, r3
 80074b8:	469d      	mov	sp, r3
 80074ba:	466b      	mov	r3, sp
 80074bc:	3300      	adds	r3, #0
 80074be:	24c8      	movs	r4, #200	; 0xc8
 80074c0:	0064      	lsls	r4, r4, #1
 80074c2:	2218      	movs	r2, #24
 80074c4:	18a2      	adds	r2, r4, r2
 80074c6:	19d1      	adds	r1, r2, r7
 80074c8:	600b      	str	r3, [r1, #0]
            send_debug_logs("Module's product number is:");
 80074ca:	4b16      	ldr	r3, [pc, #88]	; (8007524 <astronode_send_mpn_rr+0x148>)
 80074cc:	0018      	movs	r0, r3
 80074ce:	f7f9 fdfb 	bl	80010c8 <send_debug_logs>
            snprintf(product_number, answer.payload_len, "%s", answer.p_payload);
 80074d2:	4b13      	ldr	r3, [pc, #76]	; (8007520 <astronode_send_mpn_rr+0x144>)
 80074d4:	22cc      	movs	r2, #204	; 0xcc
 80074d6:	0052      	lsls	r2, r2, #1
 80074d8:	189b      	adds	r3, r3, r2
 80074da:	2218      	movs	r2, #24
 80074dc:	4694      	mov	ip, r2
 80074de:	44bc      	add	ip, r7
 80074e0:	4463      	add	r3, ip
 80074e2:	22c4      	movs	r2, #196	; 0xc4
 80074e4:	5a9b      	ldrh	r3, [r3, r2]
 80074e6:	0019      	movs	r1, r3
 80074e8:	2318      	movs	r3, #24
 80074ea:	18fb      	adds	r3, r7, r3
 80074ec:	3301      	adds	r3, #1
 80074ee:	4a0e      	ldr	r2, [pc, #56]	; (8007528 <astronode_send_mpn_rr+0x14c>)
 80074f0:	2018      	movs	r0, #24
 80074f2:	1820      	adds	r0, r4, r0
 80074f4:	19c0      	adds	r0, r0, r7
 80074f6:	6800      	ldr	r0, [r0, #0]
 80074f8:	f000 fda4 	bl	8008044 <sniprintf>
            send_debug_logs(product_number);
 80074fc:	2318      	movs	r3, #24
 80074fe:	18e3      	adds	r3, r4, r3
 8007500:	19db      	adds	r3, r3, r7
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	0018      	movs	r0, r3
 8007506:	f7f9 fddf 	bl	80010c8 <send_debug_logs>
 800750a:	46b5      	mov	sp, r6
        else
        {
            send_debug_logs("Failed to read module Serial Number.");
        }
    }
}
 800750c:	e003      	b.n	8007516 <astronode_send_mpn_rr+0x13a>
            send_debug_logs("Failed to read module Serial Number.");
 800750e:	4b07      	ldr	r3, [pc, #28]	; (800752c <astronode_send_mpn_rr+0x150>)
 8007510:	0018      	movs	r0, r3
 8007512:	f7f9 fdd9 	bl	80010c8 <send_debug_logs>
}
 8007516:	46c0      	nop			; (mov r8, r8)
 8007518:	46bd      	mov	sp, r7
 800751a:	b06d      	add	sp, #436	; 0x1b4
 800751c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800751e:	46c0      	nop			; (mov r8, r8)
 8007520:	fffffe68 	.word	0xfffffe68
 8007524:	0800979c 	.word	0x0800979c
 8007528:	080092d4 	.word	0x080092d4
 800752c:	08009310 	.word	0x08009310

08007530 <ascii_to_value>:

//------------------------------------------------------------------------------
// Function definitions
//------------------------------------------------------------------------------
static bool ascii_to_value(const uint8_t ascii, uint8_t *p_value)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b082      	sub	sp, #8
 8007534:	af00      	add	r7, sp, #0
 8007536:	0002      	movs	r2, r0
 8007538:	6039      	str	r1, [r7, #0]
 800753a:	1dfb      	adds	r3, r7, #7
 800753c:	701a      	strb	r2, [r3, #0]
    if (ascii >= '0' && ascii <= '9')
 800753e:	1dfb      	adds	r3, r7, #7
 8007540:	781b      	ldrb	r3, [r3, #0]
 8007542:	2b2f      	cmp	r3, #47	; 0x2f
 8007544:	d90b      	bls.n	800755e <ascii_to_value+0x2e>
 8007546:	1dfb      	adds	r3, r7, #7
 8007548:	781b      	ldrb	r3, [r3, #0]
 800754a:	2b39      	cmp	r3, #57	; 0x39
 800754c:	d807      	bhi.n	800755e <ascii_to_value+0x2e>
    {
        *p_value = ascii - '0';
 800754e:	1dfb      	adds	r3, r7, #7
 8007550:	781b      	ldrb	r3, [r3, #0]
 8007552:	3b30      	subs	r3, #48	; 0x30
 8007554:	b2da      	uxtb	r2, r3
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	701a      	strb	r2, [r3, #0]
        return true;
 800755a:	2301      	movs	r3, #1
 800755c:	e010      	b.n	8007580 <ascii_to_value+0x50>
    }
    else if (ascii >= 'A' && ascii <= 'F')
 800755e:	1dfb      	adds	r3, r7, #7
 8007560:	781b      	ldrb	r3, [r3, #0]
 8007562:	2b40      	cmp	r3, #64	; 0x40
 8007564:	d90b      	bls.n	800757e <ascii_to_value+0x4e>
 8007566:	1dfb      	adds	r3, r7, #7
 8007568:	781b      	ldrb	r3, [r3, #0]
 800756a:	2b46      	cmp	r3, #70	; 0x46
 800756c:	d807      	bhi.n	800757e <ascii_to_value+0x4e>
    {
        *p_value = ascii - 'A' + 10;
 800756e:	1dfb      	adds	r3, r7, #7
 8007570:	781b      	ldrb	r3, [r3, #0]
 8007572:	3b37      	subs	r3, #55	; 0x37
 8007574:	b2da      	uxtb	r2, r3
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	701a      	strb	r2, [r3, #0]
        return true;
 800757a:	2301      	movs	r3, #1
 800757c:	e000      	b.n	8007580 <ascii_to_value+0x50>
    }
    else
    {
        return false;
 800757e:	2300      	movs	r3, #0
    }
}
 8007580:	0018      	movs	r0, r3
 8007582:	46bd      	mov	sp, r7
 8007584:	b002      	add	sp, #8
 8007586:	bd80      	pop	{r7, pc}

08007588 <astronode_create_request_transport>:

static uint16_t astronode_create_request_transport(astronode_app_msg_t *p_source_message, uint8_t *p_destination_buffer)
{
 8007588:	b5f0      	push	{r4, r5, r6, r7, lr}
 800758a:	b085      	sub	sp, #20
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
 8007590:	6039      	str	r1, [r7, #0]
    uint16_t index = 0;
 8007592:	250e      	movs	r5, #14
 8007594:	197b      	adds	r3, r7, r5
 8007596:	2200      	movs	r2, #0
 8007598:	801a      	strh	r2, [r3, #0]

    p_destination_buffer[index++] = ASTRONODE_TRANSPORT_STX;
 800759a:	197b      	adds	r3, r7, r5
 800759c:	881b      	ldrh	r3, [r3, #0]
 800759e:	197a      	adds	r2, r7, r5
 80075a0:	1c59      	adds	r1, r3, #1
 80075a2:	8011      	strh	r1, [r2, #0]
 80075a4:	001a      	movs	r2, r3
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	189b      	adds	r3, r3, r2
 80075aa:	2202      	movs	r2, #2
 80075ac:	701a      	strb	r2, [r3, #0]

    uint16_t crc = calculate_crc((const uint8_t *)&p_source_message->op_code, 1, 0xFFFF);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	260a      	movs	r6, #10
 80075b2:	19bc      	adds	r4, r7, r6
 80075b4:	4a44      	ldr	r2, [pc, #272]	; (80076c8 <astronode_create_request_transport+0x140>)
 80075b6:	2101      	movs	r1, #1
 80075b8:	0018      	movs	r0, r3
 80075ba:	f000 fa7d 	bl	8007ab8 <calculate_crc>
 80075be:	0003      	movs	r3, r0
 80075c0:	8023      	strh	r3, [r4, #0]
    crc = calculate_crc((const uint8_t *)&p_source_message->p_payload, p_source_message->payload_len, crc);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	1c58      	adds	r0, r3, #1
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	22c4      	movs	r2, #196	; 0xc4
 80075ca:	5a99      	ldrh	r1, [r3, r2]
 80075cc:	19bc      	adds	r4, r7, r6
 80075ce:	19bb      	adds	r3, r7, r6
 80075d0:	881b      	ldrh	r3, [r3, #0]
 80075d2:	001a      	movs	r2, r3
 80075d4:	f000 fa70 	bl	8007ab8 <calculate_crc>
 80075d8:	0003      	movs	r3, r0
 80075da:	8023      	strh	r3, [r4, #0]
    crc = ((crc << 8) & 0xff00) | ((crc >> 8) & 0x00ff);
 80075dc:	19bb      	adds	r3, r7, r6
 80075de:	881b      	ldrh	r3, [r3, #0]
 80075e0:	021b      	lsls	r3, r3, #8
 80075e2:	b21a      	sxth	r2, r3
 80075e4:	0031      	movs	r1, r6
 80075e6:	19bb      	adds	r3, r7, r6
 80075e8:	881b      	ldrh	r3, [r3, #0]
 80075ea:	0a1b      	lsrs	r3, r3, #8
 80075ec:	b29b      	uxth	r3, r3
 80075ee:	b21b      	sxth	r3, r3
 80075f0:	4313      	orrs	r3, r2
 80075f2:	b21a      	sxth	r2, r3
 80075f4:	187b      	adds	r3, r7, r1
 80075f6:	801a      	strh	r2, [r3, #0]

    uint8_to_ascii_buffer(p_source_message->op_code, &p_destination_buffer[index]);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	7818      	ldrb	r0, [r3, #0]
 80075fc:	197b      	adds	r3, r7, r5
 80075fe:	881b      	ldrh	r3, [r3, #0]
 8007600:	683a      	ldr	r2, [r7, #0]
 8007602:	18d3      	adds	r3, r2, r3
 8007604:	0019      	movs	r1, r3
 8007606:	f000 fbeb 	bl	8007de0 <uint8_to_ascii_buffer>
    index += 2;
 800760a:	197b      	adds	r3, r7, r5
 800760c:	197a      	adds	r2, r7, r5
 800760e:	8812      	ldrh	r2, [r2, #0]
 8007610:	3202      	adds	r2, #2
 8007612:	801a      	strh	r2, [r3, #0]

    for (uint16_t i = 0; i < p_source_message->payload_len; i++)
 8007614:	230c      	movs	r3, #12
 8007616:	18fb      	adds	r3, r7, r3
 8007618:	2200      	movs	r2, #0
 800761a:	801a      	strh	r2, [r3, #0]
 800761c:	e017      	b.n	800764e <astronode_create_request_transport+0xc6>
    {
        uint8_to_ascii_buffer(p_source_message->p_payload[i], &p_destination_buffer[index]);
 800761e:	240c      	movs	r4, #12
 8007620:	193b      	adds	r3, r7, r4
 8007622:	881b      	ldrh	r3, [r3, #0]
 8007624:	687a      	ldr	r2, [r7, #4]
 8007626:	18d3      	adds	r3, r2, r3
 8007628:	7858      	ldrb	r0, [r3, #1]
 800762a:	250e      	movs	r5, #14
 800762c:	197b      	adds	r3, r7, r5
 800762e:	881b      	ldrh	r3, [r3, #0]
 8007630:	683a      	ldr	r2, [r7, #0]
 8007632:	18d3      	adds	r3, r2, r3
 8007634:	0019      	movs	r1, r3
 8007636:	f000 fbd3 	bl	8007de0 <uint8_to_ascii_buffer>
        index += 2;
 800763a:	197b      	adds	r3, r7, r5
 800763c:	197a      	adds	r2, r7, r5
 800763e:	8812      	ldrh	r2, [r2, #0]
 8007640:	3202      	adds	r2, #2
 8007642:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < p_source_message->payload_len; i++)
 8007644:	193b      	adds	r3, r7, r4
 8007646:	881a      	ldrh	r2, [r3, #0]
 8007648:	193b      	adds	r3, r7, r4
 800764a:	3201      	adds	r2, #1
 800764c:	801a      	strh	r2, [r3, #0]
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	22c4      	movs	r2, #196	; 0xc4
 8007652:	5a9b      	ldrh	r3, [r3, r2]
 8007654:	220c      	movs	r2, #12
 8007656:	18ba      	adds	r2, r7, r2
 8007658:	8812      	ldrh	r2, [r2, #0]
 800765a:	429a      	cmp	r2, r3
 800765c:	d3df      	bcc.n	800761e <astronode_create_request_transport+0x96>
    }

    uint8_to_ascii_buffer(crc >> 8, &p_destination_buffer[index]);
 800765e:	250a      	movs	r5, #10
 8007660:	197b      	adds	r3, r7, r5
 8007662:	881b      	ldrh	r3, [r3, #0]
 8007664:	0a1b      	lsrs	r3, r3, #8
 8007666:	b29b      	uxth	r3, r3
 8007668:	b2d8      	uxtb	r0, r3
 800766a:	240e      	movs	r4, #14
 800766c:	193b      	adds	r3, r7, r4
 800766e:	881b      	ldrh	r3, [r3, #0]
 8007670:	683a      	ldr	r2, [r7, #0]
 8007672:	18d3      	adds	r3, r2, r3
 8007674:	0019      	movs	r1, r3
 8007676:	f000 fbb3 	bl	8007de0 <uint8_to_ascii_buffer>
    index += 2;
 800767a:	0021      	movs	r1, r4
 800767c:	187b      	adds	r3, r7, r1
 800767e:	187a      	adds	r2, r7, r1
 8007680:	8812      	ldrh	r2, [r2, #0]
 8007682:	3202      	adds	r2, #2
 8007684:	801a      	strh	r2, [r3, #0]
    uint8_to_ascii_buffer(crc & 0xFF, &p_destination_buffer[index]);
 8007686:	197b      	adds	r3, r7, r5
 8007688:	881b      	ldrh	r3, [r3, #0]
 800768a:	b2d8      	uxtb	r0, r3
 800768c:	000c      	movs	r4, r1
 800768e:	187b      	adds	r3, r7, r1
 8007690:	881b      	ldrh	r3, [r3, #0]
 8007692:	683a      	ldr	r2, [r7, #0]
 8007694:	18d3      	adds	r3, r2, r3
 8007696:	0019      	movs	r1, r3
 8007698:	f000 fba2 	bl	8007de0 <uint8_to_ascii_buffer>
    index += 2;
 800769c:	0020      	movs	r0, r4
 800769e:	183b      	adds	r3, r7, r0
 80076a0:	183a      	adds	r2, r7, r0
 80076a2:	8812      	ldrh	r2, [r2, #0]
 80076a4:	3202      	adds	r2, #2
 80076a6:	801a      	strh	r2, [r3, #0]

    p_destination_buffer[index++] = ASTRONODE_TRANSPORT_ETX;
 80076a8:	183b      	adds	r3, r7, r0
 80076aa:	881b      	ldrh	r3, [r3, #0]
 80076ac:	183a      	adds	r2, r7, r0
 80076ae:	1c59      	adds	r1, r3, #1
 80076b0:	8011      	strh	r1, [r2, #0]
 80076b2:	001a      	movs	r2, r3
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	189b      	adds	r3, r3, r2
 80076b8:	2203      	movs	r2, #3
 80076ba:	701a      	strb	r2, [r3, #0]

    return index;
 80076bc:	183b      	adds	r3, r7, r0
 80076be:	881b      	ldrh	r3, [r3, #0]
}
 80076c0:	0018      	movs	r0, r3
 80076c2:	46bd      	mov	sp, r7
 80076c4:	b005      	add	sp, #20
 80076c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80076c8:	0000ffff 	.word	0x0000ffff

080076cc <astronode_decode_answer_transport>:

static return_status_t astronode_decode_answer_transport(uint8_t *p_source_buffer, uint16_t length_buffer, astronode_app_msg_t *p_destination_message)
{
 80076cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80076ce:	b089      	sub	sp, #36	; 0x24
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	60f8      	str	r0, [r7, #12]
 80076d4:	607a      	str	r2, [r7, #4]
 80076d6:	230a      	movs	r3, #10
 80076d8:	18fb      	adds	r3, r7, r3
 80076da:	1c0a      	adds	r2, r1, #0
 80076dc:	801a      	strh	r2, [r3, #0]
    if (p_source_buffer[0] != ASTRONODE_TRANSPORT_STX)
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	781b      	ldrb	r3, [r3, #0]
 80076e2:	2b02      	cmp	r3, #2
 80076e4:	d005      	beq.n	80076f2 <astronode_decode_answer_transport+0x26>
    {
        send_debug_logs("ERROR : Message received from the Astronode does not start with STX character.");
 80076e6:	4bbd      	ldr	r3, [pc, #756]	; (80079dc <astronode_decode_answer_transport+0x310>)
 80076e8:	0018      	movs	r0, r3
 80076ea:	f7f9 fced 	bl	80010c8 <send_debug_logs>
        return RS_FAILURE;
 80076ee:	2300      	movs	r3, #0
 80076f0:	e170      	b.n	80079d4 <astronode_decode_answer_transport+0x308>
    }

    if (length_buffer % 2 == 1 || length_buffer < 8) // 8: STX, ETX, 2 x opcode, 4 x CRC
 80076f2:	210a      	movs	r1, #10
 80076f4:	187b      	adds	r3, r7, r1
 80076f6:	881b      	ldrh	r3, [r3, #0]
 80076f8:	2201      	movs	r2, #1
 80076fa:	4013      	ands	r3, r2
 80076fc:	b29b      	uxth	r3, r3
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d103      	bne.n	800770a <astronode_decode_answer_transport+0x3e>
 8007702:	187b      	adds	r3, r7, r1
 8007704:	881b      	ldrh	r3, [r3, #0]
 8007706:	2b07      	cmp	r3, #7
 8007708:	d805      	bhi.n	8007716 <astronode_decode_answer_transport+0x4a>
    {
        send_debug_logs("ERROR : Message received from the Astronode is missing at least one character.");
 800770a:	4bb5      	ldr	r3, [pc, #724]	; (80079e0 <astronode_decode_answer_transport+0x314>)
 800770c:	0018      	movs	r0, r3
 800770e:	f7f9 fcdb 	bl	80010c8 <send_debug_logs>
        return RS_FAILURE;
 8007712:	2300      	movs	r3, #0
 8007714:	e15e      	b.n	80079d4 <astronode_decode_answer_transport+0x308>
    }

    p_destination_message->payload_len = (length_buffer - 8) / 2;
 8007716:	230a      	movs	r3, #10
 8007718:	18fb      	adds	r3, r7, r3
 800771a:	881b      	ldrh	r3, [r3, #0]
 800771c:	3b08      	subs	r3, #8
 800771e:	2b00      	cmp	r3, #0
 8007720:	da00      	bge.n	8007724 <astronode_decode_answer_transport+0x58>
 8007722:	3301      	adds	r3, #1
 8007724:	105b      	asrs	r3, r3, #1
 8007726:	b299      	uxth	r1, r3
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	22c4      	movs	r2, #196	; 0xc4
 800772c:	5299      	strh	r1, [r3, r2]

    if (p_source_buffer[length_buffer - 1] != ASTRONODE_TRANSPORT_ETX)
 800772e:	230a      	movs	r3, #10
 8007730:	18fb      	adds	r3, r7, r3
 8007732:	881b      	ldrh	r3, [r3, #0]
 8007734:	3b01      	subs	r3, #1
 8007736:	68fa      	ldr	r2, [r7, #12]
 8007738:	18d3      	adds	r3, r2, r3
 800773a:	781b      	ldrb	r3, [r3, #0]
 800773c:	2b03      	cmp	r3, #3
 800773e:	d005      	beq.n	800774c <astronode_decode_answer_transport+0x80>
    {
        send_debug_logs("ERROR : Message received from the Astronode does not end with ETX character.");
 8007740:	4ba8      	ldr	r3, [pc, #672]	; (80079e4 <astronode_decode_answer_transport+0x318>)
 8007742:	0018      	movs	r0, r3
 8007744:	f7f9 fcc0 	bl	80010c8 <send_debug_logs>
        return RS_FAILURE;
 8007748:	2300      	movs	r3, #0
 800774a:	e143      	b.n	80079d4 <astronode_decode_answer_transport+0x308>
    }

    uint8_t nibble_high = 0;
 800774c:	2117      	movs	r1, #23
 800774e:	187b      	adds	r3, r7, r1
 8007750:	2200      	movs	r2, #0
 8007752:	701a      	strb	r2, [r3, #0]
    uint8_t nibble_low = 0;
 8007754:	2416      	movs	r4, #22
 8007756:	193b      	adds	r3, r7, r4
 8007758:	2200      	movs	r2, #0
 800775a:	701a      	strb	r2, [r3, #0]

    // Op code
    if (ascii_to_value(p_source_buffer[1], &nibble_high) == false
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	3301      	adds	r3, #1
 8007760:	781b      	ldrb	r3, [r3, #0]
 8007762:	187a      	adds	r2, r7, r1
 8007764:	0011      	movs	r1, r2
 8007766:	0018      	movs	r0, r3
 8007768:	f7ff fee2 	bl	8007530 <ascii_to_value>
 800776c:	0003      	movs	r3, r0
 800776e:	001a      	movs	r2, r3
 8007770:	2301      	movs	r3, #1
 8007772:	4053      	eors	r3, r2
 8007774:	b2db      	uxtb	r3, r3
 8007776:	2b00      	cmp	r3, #0
 8007778:	d10e      	bne.n	8007798 <astronode_decode_answer_transport+0xcc>
        || ascii_to_value(p_source_buffer[2], &nibble_low) == false)
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	3302      	adds	r3, #2
 800777e:	781b      	ldrb	r3, [r3, #0]
 8007780:	193a      	adds	r2, r7, r4
 8007782:	0011      	movs	r1, r2
 8007784:	0018      	movs	r0, r3
 8007786:	f7ff fed3 	bl	8007530 <ascii_to_value>
 800778a:	0003      	movs	r3, r0
 800778c:	001a      	movs	r2, r3
 800778e:	2301      	movs	r3, #1
 8007790:	4053      	eors	r3, r2
 8007792:	b2db      	uxtb	r3, r3
 8007794:	2b00      	cmp	r3, #0
 8007796:	d005      	beq.n	80077a4 <astronode_decode_answer_transport+0xd8>
    {
        send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 8007798:	4b93      	ldr	r3, [pc, #588]	; (80079e8 <astronode_decode_answer_transport+0x31c>)
 800779a:	0018      	movs	r0, r3
 800779c:	f7f9 fc94 	bl	80010c8 <send_debug_logs>
        return RS_FAILURE;
 80077a0:	2300      	movs	r3, #0
 80077a2:	e117      	b.n	80079d4 <astronode_decode_answer_transport+0x308>
    }

    p_destination_message->op_code = (nibble_high << 4) + nibble_low;
 80077a4:	2317      	movs	r3, #23
 80077a6:	18fb      	adds	r3, r7, r3
 80077a8:	781b      	ldrb	r3, [r3, #0]
 80077aa:	011b      	lsls	r3, r3, #4
 80077ac:	b2da      	uxtb	r2, r3
 80077ae:	2316      	movs	r3, #22
 80077b0:	18fb      	adds	r3, r7, r3
 80077b2:	781b      	ldrb	r3, [r3, #0]
 80077b4:	18d3      	adds	r3, r2, r3
 80077b6:	b2da      	uxtb	r2, r3
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	701a      	strb	r2, [r3, #0]

    // Payload
    for (uint16_t i = 3, j = 0; i < length_buffer - 5; i += 2)
 80077bc:	231e      	movs	r3, #30
 80077be:	18fb      	adds	r3, r7, r3
 80077c0:	2203      	movs	r2, #3
 80077c2:	801a      	strh	r2, [r3, #0]
 80077c4:	231c      	movs	r3, #28
 80077c6:	18fb      	adds	r3, r7, r3
 80077c8:	2200      	movs	r2, #0
 80077ca:	801a      	strh	r2, [r3, #0]
 80077cc:	e045      	b.n	800785a <astronode_decode_answer_transport+0x18e>
    {
        if (ascii_to_value(p_source_buffer[i], &nibble_high) == false
 80077ce:	241e      	movs	r4, #30
 80077d0:	193b      	adds	r3, r7, r4
 80077d2:	881b      	ldrh	r3, [r3, #0]
 80077d4:	68fa      	ldr	r2, [r7, #12]
 80077d6:	18d3      	adds	r3, r2, r3
 80077d8:	781b      	ldrb	r3, [r3, #0]
 80077da:	2217      	movs	r2, #23
 80077dc:	18ba      	adds	r2, r7, r2
 80077de:	0011      	movs	r1, r2
 80077e0:	0018      	movs	r0, r3
 80077e2:	f7ff fea5 	bl	8007530 <ascii_to_value>
 80077e6:	0003      	movs	r3, r0
 80077e8:	001a      	movs	r2, r3
 80077ea:	2301      	movs	r3, #1
 80077ec:	4053      	eors	r3, r2
 80077ee:	b2db      	uxtb	r3, r3
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d112      	bne.n	800781a <astronode_decode_answer_transport+0x14e>
            || ascii_to_value(p_source_buffer[i + 1], &nibble_low) == false)
 80077f4:	193b      	adds	r3, r7, r4
 80077f6:	881b      	ldrh	r3, [r3, #0]
 80077f8:	3301      	adds	r3, #1
 80077fa:	68fa      	ldr	r2, [r7, #12]
 80077fc:	18d3      	adds	r3, r2, r3
 80077fe:	781b      	ldrb	r3, [r3, #0]
 8007800:	2216      	movs	r2, #22
 8007802:	18ba      	adds	r2, r7, r2
 8007804:	0011      	movs	r1, r2
 8007806:	0018      	movs	r0, r3
 8007808:	f7ff fe92 	bl	8007530 <ascii_to_value>
 800780c:	0003      	movs	r3, r0
 800780e:	001a      	movs	r2, r3
 8007810:	2301      	movs	r3, #1
 8007812:	4053      	eors	r3, r2
 8007814:	b2db      	uxtb	r3, r3
 8007816:	2b00      	cmp	r3, #0
 8007818:	d005      	beq.n	8007826 <astronode_decode_answer_transport+0x15a>
        {
            send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 800781a:	4b73      	ldr	r3, [pc, #460]	; (80079e8 <astronode_decode_answer_transport+0x31c>)
 800781c:	0018      	movs	r0, r3
 800781e:	f7f9 fc53 	bl	80010c8 <send_debug_logs>
            return RS_FAILURE;
 8007822:	2300      	movs	r3, #0
 8007824:	e0d6      	b.n	80079d4 <astronode_decode_answer_transport+0x308>
        }

        p_destination_message->p_payload[j++] = (nibble_high << 4) + nibble_low;
 8007826:	2317      	movs	r3, #23
 8007828:	18fb      	adds	r3, r7, r3
 800782a:	781b      	ldrb	r3, [r3, #0]
 800782c:	011b      	lsls	r3, r3, #4
 800782e:	b2d9      	uxtb	r1, r3
 8007830:	2316      	movs	r3, #22
 8007832:	18fb      	adds	r3, r7, r3
 8007834:	781a      	ldrb	r2, [r3, #0]
 8007836:	201c      	movs	r0, #28
 8007838:	183b      	adds	r3, r7, r0
 800783a:	881b      	ldrh	r3, [r3, #0]
 800783c:	1838      	adds	r0, r7, r0
 800783e:	1c5c      	adds	r4, r3, #1
 8007840:	8004      	strh	r4, [r0, #0]
 8007842:	0018      	movs	r0, r3
 8007844:	188b      	adds	r3, r1, r2
 8007846:	b2da      	uxtb	r2, r3
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	181b      	adds	r3, r3, r0
 800784c:	705a      	strb	r2, [r3, #1]
    for (uint16_t i = 3, j = 0; i < length_buffer - 5; i += 2)
 800784e:	221e      	movs	r2, #30
 8007850:	18bb      	adds	r3, r7, r2
 8007852:	18ba      	adds	r2, r7, r2
 8007854:	8812      	ldrh	r2, [r2, #0]
 8007856:	3202      	adds	r2, #2
 8007858:	801a      	strh	r2, [r3, #0]
 800785a:	231e      	movs	r3, #30
 800785c:	18fb      	adds	r3, r7, r3
 800785e:	881a      	ldrh	r2, [r3, #0]
 8007860:	260a      	movs	r6, #10
 8007862:	19bb      	adds	r3, r7, r6
 8007864:	881b      	ldrh	r3, [r3, #0]
 8007866:	3b05      	subs	r3, #5
 8007868:	429a      	cmp	r2, r3
 800786a:	dbb0      	blt.n	80077ce <astronode_decode_answer_transport+0x102>
    }

    // CRC
    uint16_t crc_calculated = calculate_crc((const uint8_t *)&p_destination_message->op_code, 1, 0xFFFF);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	251a      	movs	r5, #26
 8007870:	197c      	adds	r4, r7, r5
 8007872:	4a5e      	ldr	r2, [pc, #376]	; (80079ec <astronode_decode_answer_transport+0x320>)
 8007874:	2101      	movs	r1, #1
 8007876:	0018      	movs	r0, r3
 8007878:	f000 f91e 	bl	8007ab8 <calculate_crc>
 800787c:	0003      	movs	r3, r0
 800787e:	8023      	strh	r3, [r4, #0]
    crc_calculated = calculate_crc((const uint8_t *)&p_destination_message->p_payload, p_destination_message->payload_len, crc_calculated);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	1c58      	adds	r0, r3, #1
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	22c4      	movs	r2, #196	; 0xc4
 8007888:	5a99      	ldrh	r1, [r3, r2]
 800788a:	197c      	adds	r4, r7, r5
 800788c:	197b      	adds	r3, r7, r5
 800788e:	881b      	ldrh	r3, [r3, #0]
 8007890:	001a      	movs	r2, r3
 8007892:	f000 f911 	bl	8007ab8 <calculate_crc>
 8007896:	0003      	movs	r3, r0
 8007898:	8023      	strh	r3, [r4, #0]
    crc_calculated = ((crc_calculated << 8) & 0xff00) | ((crc_calculated >> 8) & 0x00ff);
 800789a:	197b      	adds	r3, r7, r5
 800789c:	881b      	ldrh	r3, [r3, #0]
 800789e:	021b      	lsls	r3, r3, #8
 80078a0:	b21a      	sxth	r2, r3
 80078a2:	0029      	movs	r1, r5
 80078a4:	197b      	adds	r3, r7, r5
 80078a6:	881b      	ldrh	r3, [r3, #0]
 80078a8:	0a1b      	lsrs	r3, r3, #8
 80078aa:	b29b      	uxth	r3, r3
 80078ac:	b21b      	sxth	r3, r3
 80078ae:	4313      	orrs	r3, r2
 80078b0:	b21a      	sxth	r2, r3
 80078b2:	187b      	adds	r3, r7, r1
 80078b4:	801a      	strh	r2, [r3, #0]


    if (ascii_to_value(p_source_buffer[length_buffer - 5], &nibble_high) == false
 80078b6:	19bb      	adds	r3, r7, r6
 80078b8:	881b      	ldrh	r3, [r3, #0]
 80078ba:	3b05      	subs	r3, #5
 80078bc:	68fa      	ldr	r2, [r7, #12]
 80078be:	18d3      	adds	r3, r2, r3
 80078c0:	781b      	ldrb	r3, [r3, #0]
 80078c2:	2217      	movs	r2, #23
 80078c4:	18ba      	adds	r2, r7, r2
 80078c6:	0011      	movs	r1, r2
 80078c8:	0018      	movs	r0, r3
 80078ca:	f7ff fe31 	bl	8007530 <ascii_to_value>
 80078ce:	0003      	movs	r3, r0
 80078d0:	001a      	movs	r2, r3
 80078d2:	2301      	movs	r3, #1
 80078d4:	4053      	eors	r3, r2
 80078d6:	b2db      	uxtb	r3, r3
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d112      	bne.n	8007902 <astronode_decode_answer_transport+0x236>
        || ascii_to_value(p_source_buffer[length_buffer - 4], &nibble_low) == false)
 80078dc:	19bb      	adds	r3, r7, r6
 80078de:	881b      	ldrh	r3, [r3, #0]
 80078e0:	3b04      	subs	r3, #4
 80078e2:	68fa      	ldr	r2, [r7, #12]
 80078e4:	18d3      	adds	r3, r2, r3
 80078e6:	781b      	ldrb	r3, [r3, #0]
 80078e8:	2216      	movs	r2, #22
 80078ea:	18ba      	adds	r2, r7, r2
 80078ec:	0011      	movs	r1, r2
 80078ee:	0018      	movs	r0, r3
 80078f0:	f7ff fe1e 	bl	8007530 <ascii_to_value>
 80078f4:	0003      	movs	r3, r0
 80078f6:	001a      	movs	r2, r3
 80078f8:	2301      	movs	r3, #1
 80078fa:	4053      	eors	r3, r2
 80078fc:	b2db      	uxtb	r3, r3
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d005      	beq.n	800790e <astronode_decode_answer_transport+0x242>
    {
        send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 8007902:	4b39      	ldr	r3, [pc, #228]	; (80079e8 <astronode_decode_answer_transport+0x31c>)
 8007904:	0018      	movs	r0, r3
 8007906:	f7f9 fbdf 	bl	80010c8 <send_debug_logs>
        return RS_FAILURE;
 800790a:	2300      	movs	r3, #0
 800790c:	e062      	b.n	80079d4 <astronode_decode_answer_transport+0x308>
    }

    uint16_t crc_received = (nibble_high << 12) + (nibble_low << 8);
 800790e:	2017      	movs	r0, #23
 8007910:	183b      	adds	r3, r7, r0
 8007912:	781b      	ldrb	r3, [r3, #0]
 8007914:	b29b      	uxth	r3, r3
 8007916:	031b      	lsls	r3, r3, #12
 8007918:	b299      	uxth	r1, r3
 800791a:	2416      	movs	r4, #22
 800791c:	193b      	adds	r3, r7, r4
 800791e:	781b      	ldrb	r3, [r3, #0]
 8007920:	b29b      	uxth	r3, r3
 8007922:	021b      	lsls	r3, r3, #8
 8007924:	b29a      	uxth	r2, r3
 8007926:	2318      	movs	r3, #24
 8007928:	18fb      	adds	r3, r7, r3
 800792a:	188a      	adds	r2, r1, r2
 800792c:	801a      	strh	r2, [r3, #0]

    if (ascii_to_value(p_source_buffer[length_buffer - 3], &nibble_high) == false
 800792e:	250a      	movs	r5, #10
 8007930:	197b      	adds	r3, r7, r5
 8007932:	881b      	ldrh	r3, [r3, #0]
 8007934:	3b03      	subs	r3, #3
 8007936:	68fa      	ldr	r2, [r7, #12]
 8007938:	18d3      	adds	r3, r2, r3
 800793a:	781b      	ldrb	r3, [r3, #0]
 800793c:	183a      	adds	r2, r7, r0
 800793e:	0011      	movs	r1, r2
 8007940:	0018      	movs	r0, r3
 8007942:	f7ff fdf5 	bl	8007530 <ascii_to_value>
 8007946:	0003      	movs	r3, r0
 8007948:	001a      	movs	r2, r3
 800794a:	2301      	movs	r3, #1
 800794c:	4053      	eors	r3, r2
 800794e:	b2db      	uxtb	r3, r3
 8007950:	2b00      	cmp	r3, #0
 8007952:	d111      	bne.n	8007978 <astronode_decode_answer_transport+0x2ac>
        || ascii_to_value(p_source_buffer[length_buffer - 2], &nibble_low) == false)
 8007954:	197b      	adds	r3, r7, r5
 8007956:	881b      	ldrh	r3, [r3, #0]
 8007958:	3b02      	subs	r3, #2
 800795a:	68fa      	ldr	r2, [r7, #12]
 800795c:	18d3      	adds	r3, r2, r3
 800795e:	781b      	ldrb	r3, [r3, #0]
 8007960:	193a      	adds	r2, r7, r4
 8007962:	0011      	movs	r1, r2
 8007964:	0018      	movs	r0, r3
 8007966:	f7ff fde3 	bl	8007530 <ascii_to_value>
 800796a:	0003      	movs	r3, r0
 800796c:	001a      	movs	r2, r3
 800796e:	2301      	movs	r3, #1
 8007970:	4053      	eors	r3, r2
 8007972:	b2db      	uxtb	r3, r3
 8007974:	2b00      	cmp	r3, #0
 8007976:	d005      	beq.n	8007984 <astronode_decode_answer_transport+0x2b8>
    {
        send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 8007978:	4b1b      	ldr	r3, [pc, #108]	; (80079e8 <astronode_decode_answer_transport+0x31c>)
 800797a:	0018      	movs	r0, r3
 800797c:	f7f9 fba4 	bl	80010c8 <send_debug_logs>
        return RS_FAILURE;
 8007980:	2300      	movs	r3, #0
 8007982:	e027      	b.n	80079d4 <astronode_decode_answer_transport+0x308>
    }

    crc_received += (nibble_high << 4) + nibble_low;
 8007984:	2317      	movs	r3, #23
 8007986:	18fb      	adds	r3, r7, r3
 8007988:	781b      	ldrb	r3, [r3, #0]
 800798a:	b29b      	uxth	r3, r3
 800798c:	011b      	lsls	r3, r3, #4
 800798e:	b29a      	uxth	r2, r3
 8007990:	2316      	movs	r3, #22
 8007992:	18fb      	adds	r3, r7, r3
 8007994:	781b      	ldrb	r3, [r3, #0]
 8007996:	b29b      	uxth	r3, r3
 8007998:	18d3      	adds	r3, r2, r3
 800799a:	b299      	uxth	r1, r3
 800799c:	2018      	movs	r0, #24
 800799e:	183b      	adds	r3, r7, r0
 80079a0:	183a      	adds	r2, r7, r0
 80079a2:	8812      	ldrh	r2, [r2, #0]
 80079a4:	188a      	adds	r2, r1, r2
 80079a6:	801a      	strh	r2, [r3, #0]

    if (crc_received != crc_calculated)
 80079a8:	183a      	adds	r2, r7, r0
 80079aa:	231a      	movs	r3, #26
 80079ac:	18fb      	adds	r3, r7, r3
 80079ae:	8812      	ldrh	r2, [r2, #0]
 80079b0:	881b      	ldrh	r3, [r3, #0]
 80079b2:	429a      	cmp	r2, r3
 80079b4:	d005      	beq.n	80079c2 <astronode_decode_answer_transport+0x2f6>
    {
        send_debug_logs("ERROR : CRC sent by the Astronode does not match the expected CRC");
 80079b6:	4b0e      	ldr	r3, [pc, #56]	; (80079f0 <astronode_decode_answer_transport+0x324>)
 80079b8:	0018      	movs	r0, r3
 80079ba:	f7f9 fb85 	bl	80010c8 <send_debug_logs>
        return RS_FAILURE;
 80079be:	2300      	movs	r3, #0
 80079c0:	e008      	b.n	80079d4 <astronode_decode_answer_transport+0x308>
    }

    if (p_destination_message->op_code == ASTRONODE_OP_CODE_ERROR)
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	781b      	ldrb	r3, [r3, #0]
 80079c6:	2bff      	cmp	r3, #255	; 0xff
 80079c8:	d103      	bne.n	80079d2 <astronode_decode_answer_transport+0x306>
    {
        check_for_error(p_destination_message);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	0018      	movs	r0, r3
 80079ce:	f000 f8c3 	bl	8007b58 <check_for_error>
    }

    return RS_SUCCESS;
 80079d2:	2301      	movs	r3, #1
}
 80079d4:	0018      	movs	r0, r3
 80079d6:	46bd      	mov	sp, r7
 80079d8:	b009      	add	sp, #36	; 0x24
 80079da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80079dc:	08009d80 	.word	0x08009d80
 80079e0:	08009dd0 	.word	0x08009dd0
 80079e4:	08009e20 	.word	0x08009e20
 80079e8:	08009e70 	.word	0x08009e70
 80079ec:	0000ffff 	.word	0x0000ffff
 80079f0:	08009ebc 	.word	0x08009ebc

080079f4 <astronode_transport_send_receive>:

return_status_t astronode_transport_send_receive(astronode_app_msg_t *p_request, astronode_app_msg_t *p_answer)
{
 80079f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80079f6:	4c2b      	ldr	r4, [pc, #172]	; (8007aa4 <astronode_transport_send_receive+0xb0>)
 80079f8:	44a5      	add	sp, r4
 80079fa:	af00      	add	r7, sp, #0
 80079fc:	6078      	str	r0, [r7, #4]
 80079fe:	6039      	str	r1, [r7, #0]
    uint8_t request_transport[ASTRONODE_TRANSPORT_MSG_MAX_LEN_BYTES] = {0};
 8007a00:	4b29      	ldr	r3, [pc, #164]	; (8007aa8 <astronode_transport_send_receive+0xb4>)
 8007a02:	25ca      	movs	r5, #202	; 0xca
 8007a04:	00ad      	lsls	r5, r5, #2
 8007a06:	195b      	adds	r3, r3, r5
 8007a08:	19db      	adds	r3, r3, r7
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	601a      	str	r2, [r3, #0]
 8007a0e:	3304      	adds	r3, #4
 8007a10:	22c4      	movs	r2, #196	; 0xc4
 8007a12:	0052      	lsls	r2, r2, #1
 8007a14:	2100      	movs	r1, #0
 8007a16:	0018      	movs	r0, r3
 8007a18:	f000 fb68 	bl	80080ec <memset>
    uint8_t answer_transport[ASTRONODE_TRANSPORT_MSG_MAX_LEN_BYTES] = {0};
 8007a1c:	4b23      	ldr	r3, [pc, #140]	; (8007aac <astronode_transport_send_receive+0xb8>)
 8007a1e:	195b      	adds	r3, r3, r5
 8007a20:	19db      	adds	r3, r3, r7
 8007a22:	2200      	movs	r2, #0
 8007a24:	601a      	str	r2, [r3, #0]
 8007a26:	3304      	adds	r3, #4
 8007a28:	22c4      	movs	r2, #196	; 0xc4
 8007a2a:	0052      	lsls	r2, r2, #1
 8007a2c:	2100      	movs	r1, #0
 8007a2e:	0018      	movs	r0, r3
 8007a30:	f000 fb5c 	bl	80080ec <memset>
    uint16_t answer_length =  0;
 8007a34:	4b1e      	ldr	r3, [pc, #120]	; (8007ab0 <astronode_transport_send_receive+0xbc>)
 8007a36:	195b      	adds	r3, r3, r5
 8007a38:	19db      	adds	r3, r3, r7
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	801a      	strh	r2, [r3, #0]

    uint16_t request_length = astronode_create_request_transport(p_request, request_transport);
 8007a3e:	4e1d      	ldr	r6, [pc, #116]	; (8007ab4 <astronode_transport_send_receive+0xc0>)
 8007a40:	19bc      	adds	r4, r7, r6
 8007a42:	23cc      	movs	r3, #204	; 0xcc
 8007a44:	005b      	lsls	r3, r3, #1
 8007a46:	18fa      	adds	r2, r7, r3
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	0011      	movs	r1, r2
 8007a4c:	0018      	movs	r0, r3
 8007a4e:	f7ff fd9b 	bl	8007588 <astronode_create_request_transport>
 8007a52:	0003      	movs	r3, r0
 8007a54:	8023      	strh	r3, [r4, #0]

    send_astronode_request(request_transport, request_length);
 8007a56:	19bb      	adds	r3, r7, r6
 8007a58:	881a      	ldrh	r2, [r3, #0]
 8007a5a:	23cc      	movs	r3, #204	; 0xcc
 8007a5c:	005b      	lsls	r3, r3, #1
 8007a5e:	18fb      	adds	r3, r7, r3
 8007a60:	0011      	movs	r1, r2
 8007a62:	0018      	movs	r0, r3
 8007a64:	f7f9 fc6e 	bl	8001344 <send_astronode_request>
    if(receive_astronode_answer(answer_transport, &answer_length) == RS_SUCCESS)
 8007a68:	230a      	movs	r3, #10
 8007a6a:	18fa      	adds	r2, r7, r3
 8007a6c:	240c      	movs	r4, #12
 8007a6e:	193b      	adds	r3, r7, r4
 8007a70:	0011      	movs	r1, r2
 8007a72:	0018      	movs	r0, r3
 8007a74:	f000 f92c 	bl	8007cd0 <receive_astronode_answer>
 8007a78:	0003      	movs	r3, r0
 8007a7a:	2b01      	cmp	r3, #1
 8007a7c:	d10a      	bne.n	8007a94 <astronode_transport_send_receive+0xa0>
    {
        return astronode_decode_answer_transport(answer_transport, answer_length, p_answer);
 8007a7e:	4b0c      	ldr	r3, [pc, #48]	; (8007ab0 <astronode_transport_send_receive+0xbc>)
 8007a80:	195b      	adds	r3, r3, r5
 8007a82:	19db      	adds	r3, r3, r7
 8007a84:	8819      	ldrh	r1, [r3, #0]
 8007a86:	683a      	ldr	r2, [r7, #0]
 8007a88:	193b      	adds	r3, r7, r4
 8007a8a:	0018      	movs	r0, r3
 8007a8c:	f7ff fe1e 	bl	80076cc <astronode_decode_answer_transport>
 8007a90:	0003      	movs	r3, r0
 8007a92:	e000      	b.n	8007a96 <astronode_transport_send_receive+0xa2>
    }
    else
    {
        return RS_FAILURE;
 8007a94:	2300      	movs	r3, #0
    }
}
 8007a96:	0018      	movs	r0, r3
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	23cb      	movs	r3, #203	; 0xcb
 8007a9c:	009b      	lsls	r3, r3, #2
 8007a9e:	449d      	add	sp, r3
 8007aa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007aa2:	46c0      	nop			; (mov r8, r8)
 8007aa4:	fffffcd4 	.word	0xfffffcd4
 8007aa8:	fffffe70 	.word	0xfffffe70
 8007aac:	fffffce4 	.word	0xfffffce4
 8007ab0:	fffffce2 	.word	0xfffffce2
 8007ab4:	00000326 	.word	0x00000326

08007ab8 <calculate_crc>:

static uint16_t calculate_crc(const uint8_t *p_data, uint16_t data_len, uint16_t init_value)
{
 8007ab8:	b590      	push	{r4, r7, lr}
 8007aba:	b085      	sub	sp, #20
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
 8007ac0:	0008      	movs	r0, r1
 8007ac2:	0011      	movs	r1, r2
 8007ac4:	1cbb      	adds	r3, r7, #2
 8007ac6:	1c02      	adds	r2, r0, #0
 8007ac8:	801a      	strh	r2, [r3, #0]
 8007aca:	003b      	movs	r3, r7
 8007acc:	1c0a      	adds	r2, r1, #0
 8007ace:	801a      	strh	r2, [r3, #0]
    uint16_t crc = init_value;
 8007ad0:	230e      	movs	r3, #14
 8007ad2:	18fb      	adds	r3, r7, r3
 8007ad4:	003a      	movs	r2, r7
 8007ad6:	8812      	ldrh	r2, [r2, #0]
 8007ad8:	801a      	strh	r2, [r3, #0]

    while (data_len--)
 8007ada:	e02e      	b.n	8007b3a <calculate_crc+0x82>
    {
        uint16_t x = crc >> 8 ^ *p_data++;
 8007adc:	240e      	movs	r4, #14
 8007ade:	193b      	adds	r3, r7, r4
 8007ae0:	881b      	ldrh	r3, [r3, #0]
 8007ae2:	0a1b      	lsrs	r3, r3, #8
 8007ae4:	b299      	uxth	r1, r3
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	1c5a      	adds	r2, r3, #1
 8007aea:	607a      	str	r2, [r7, #4]
 8007aec:	781b      	ldrb	r3, [r3, #0]
 8007aee:	b29a      	uxth	r2, r3
 8007af0:	200c      	movs	r0, #12
 8007af2:	183b      	adds	r3, r7, r0
 8007af4:	404a      	eors	r2, r1
 8007af6:	801a      	strh	r2, [r3, #0]
        x ^= x >> 4;
 8007af8:	183b      	adds	r3, r7, r0
 8007afa:	881b      	ldrh	r3, [r3, #0]
 8007afc:	091b      	lsrs	r3, r3, #4
 8007afe:	b299      	uxth	r1, r3
 8007b00:	183b      	adds	r3, r7, r0
 8007b02:	183a      	adds	r2, r7, r0
 8007b04:	8812      	ldrh	r2, [r2, #0]
 8007b06:	404a      	eors	r2, r1
 8007b08:	801a      	strh	r2, [r3, #0]
        crc = (crc << 8) ^ (x << 12) ^ (x << 5) ^ (x);
 8007b0a:	0021      	movs	r1, r4
 8007b0c:	187b      	adds	r3, r7, r1
 8007b0e:	881b      	ldrh	r3, [r3, #0]
 8007b10:	021b      	lsls	r3, r3, #8
 8007b12:	b21a      	sxth	r2, r3
 8007b14:	183b      	adds	r3, r7, r0
 8007b16:	881b      	ldrh	r3, [r3, #0]
 8007b18:	031b      	lsls	r3, r3, #12
 8007b1a:	b21b      	sxth	r3, r3
 8007b1c:	4053      	eors	r3, r2
 8007b1e:	b21a      	sxth	r2, r3
 8007b20:	183b      	adds	r3, r7, r0
 8007b22:	881b      	ldrh	r3, [r3, #0]
 8007b24:	015b      	lsls	r3, r3, #5
 8007b26:	b21b      	sxth	r3, r3
 8007b28:	4053      	eors	r3, r2
 8007b2a:	b21a      	sxth	r2, r3
 8007b2c:	183b      	adds	r3, r7, r0
 8007b2e:	2000      	movs	r0, #0
 8007b30:	5e1b      	ldrsh	r3, [r3, r0]
 8007b32:	4053      	eors	r3, r2
 8007b34:	b21a      	sxth	r2, r3
 8007b36:	187b      	adds	r3, r7, r1
 8007b38:	801a      	strh	r2, [r3, #0]
    while (data_len--)
 8007b3a:	1cbb      	adds	r3, r7, #2
 8007b3c:	881b      	ldrh	r3, [r3, #0]
 8007b3e:	1cba      	adds	r2, r7, #2
 8007b40:	1e59      	subs	r1, r3, #1
 8007b42:	8011      	strh	r1, [r2, #0]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d1c9      	bne.n	8007adc <calculate_crc+0x24>
    }
    return crc;
 8007b48:	230e      	movs	r3, #14
 8007b4a:	18fb      	adds	r3, r7, r3
 8007b4c:	881b      	ldrh	r3, [r3, #0]
}
 8007b4e:	0018      	movs	r0, r3
 8007b50:	46bd      	mov	sp, r7
 8007b52:	b005      	add	sp, #20
 8007b54:	bd90      	pop	{r4, r7, pc}
	...

08007b58 <check_for_error>:

static void check_for_error(astronode_app_msg_t *p_answer)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b084      	sub	sp, #16
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
    uint16_t error_code = p_answer->p_payload[0] + (p_answer->p_payload[1] << 8);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	785b      	ldrb	r3, [r3, #1]
 8007b64:	b299      	uxth	r1, r3
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	789b      	ldrb	r3, [r3, #2]
 8007b6a:	b29b      	uxth	r3, r3
 8007b6c:	021b      	lsls	r3, r3, #8
 8007b6e:	b29a      	uxth	r2, r3
 8007b70:	200e      	movs	r0, #14
 8007b72:	183b      	adds	r3, r7, r0
 8007b74:	188a      	adds	r2, r1, r2
 8007b76:	801a      	strh	r2, [r3, #0]

    switch (error_code)
 8007b78:	183b      	adds	r3, r7, r0
 8007b7a:	881b      	ldrh	r3, [r3, #0]
 8007b7c:	4a40      	ldr	r2, [pc, #256]	; (8007c80 <check_for_error+0x128>)
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	d100      	bne.n	8007b84 <check_for_error+0x2c>
 8007b82:	e06f      	b.n	8007c64 <check_for_error+0x10c>
 8007b84:	4a3e      	ldr	r2, [pc, #248]	; (8007c80 <check_for_error+0x128>)
 8007b86:	4293      	cmp	r3, r2
 8007b88:	dd00      	ble.n	8007b8c <check_for_error+0x34>
 8007b8a:	e070      	b.n	8007c6e <check_for_error+0x116>
 8007b8c:	4a3d      	ldr	r2, [pc, #244]	; (8007c84 <check_for_error+0x12c>)
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	d100      	bne.n	8007b94 <check_for_error+0x3c>
 8007b92:	e062      	b.n	8007c5a <check_for_error+0x102>
 8007b94:	4a3b      	ldr	r2, [pc, #236]	; (8007c84 <check_for_error+0x12c>)
 8007b96:	4293      	cmp	r3, r2
 8007b98:	dd00      	ble.n	8007b9c <check_for_error+0x44>
 8007b9a:	e068      	b.n	8007c6e <check_for_error+0x116>
 8007b9c:	4a3a      	ldr	r2, [pc, #232]	; (8007c88 <check_for_error+0x130>)
 8007b9e:	4293      	cmp	r3, r2
 8007ba0:	d056      	beq.n	8007c50 <check_for_error+0xf8>
 8007ba2:	4a39      	ldr	r2, [pc, #228]	; (8007c88 <check_for_error+0x130>)
 8007ba4:	4293      	cmp	r3, r2
 8007ba6:	dd00      	ble.n	8007baa <check_for_error+0x52>
 8007ba8:	e061      	b.n	8007c6e <check_for_error+0x116>
 8007baa:	4a38      	ldr	r2, [pc, #224]	; (8007c8c <check_for_error+0x134>)
 8007bac:	4293      	cmp	r3, r2
 8007bae:	d04a      	beq.n	8007c46 <check_for_error+0xee>
 8007bb0:	4a36      	ldr	r2, [pc, #216]	; (8007c8c <check_for_error+0x134>)
 8007bb2:	4293      	cmp	r3, r2
 8007bb4:	dc5b      	bgt.n	8007c6e <check_for_error+0x116>
 8007bb6:	4a36      	ldr	r2, [pc, #216]	; (8007c90 <check_for_error+0x138>)
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	d03f      	beq.n	8007c3c <check_for_error+0xe4>
 8007bbc:	4a34      	ldr	r2, [pc, #208]	; (8007c90 <check_for_error+0x138>)
 8007bbe:	4293      	cmp	r3, r2
 8007bc0:	dc55      	bgt.n	8007c6e <check_for_error+0x116>
 8007bc2:	4a34      	ldr	r2, [pc, #208]	; (8007c94 <check_for_error+0x13c>)
 8007bc4:	4293      	cmp	r3, r2
 8007bc6:	d034      	beq.n	8007c32 <check_for_error+0xda>
 8007bc8:	4a32      	ldr	r2, [pc, #200]	; (8007c94 <check_for_error+0x13c>)
 8007bca:	4293      	cmp	r3, r2
 8007bcc:	dc4f      	bgt.n	8007c6e <check_for_error+0x116>
 8007bce:	4a32      	ldr	r2, [pc, #200]	; (8007c98 <check_for_error+0x140>)
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	d029      	beq.n	8007c28 <check_for_error+0xd0>
 8007bd4:	4a30      	ldr	r2, [pc, #192]	; (8007c98 <check_for_error+0x140>)
 8007bd6:	4293      	cmp	r3, r2
 8007bd8:	dc49      	bgt.n	8007c6e <check_for_error+0x116>
 8007bda:	4a30      	ldr	r2, [pc, #192]	; (8007c9c <check_for_error+0x144>)
 8007bdc:	4293      	cmp	r3, r2
 8007bde:	d01e      	beq.n	8007c1e <check_for_error+0xc6>
 8007be0:	4a2e      	ldr	r2, [pc, #184]	; (8007c9c <check_for_error+0x144>)
 8007be2:	4293      	cmp	r3, r2
 8007be4:	dc43      	bgt.n	8007c6e <check_for_error+0x116>
 8007be6:	2222      	movs	r2, #34	; 0x22
 8007be8:	32ff      	adds	r2, #255	; 0xff
 8007bea:	4293      	cmp	r3, r2
 8007bec:	d012      	beq.n	8007c14 <check_for_error+0xbc>
 8007bee:	2291      	movs	r2, #145	; 0x91
 8007bf0:	0052      	lsls	r2, r2, #1
 8007bf2:	4293      	cmp	r3, r2
 8007bf4:	da3b      	bge.n	8007c6e <check_for_error+0x116>
 8007bf6:	2b01      	cmp	r3, #1
 8007bf8:	d002      	beq.n	8007c00 <check_for_error+0xa8>
 8007bfa:	2b11      	cmp	r3, #17
 8007bfc:	d005      	beq.n	8007c0a <check_for_error+0xb2>
 8007bfe:	e036      	b.n	8007c6e <check_for_error+0x116>
    {
        case ASTRONODE_ERR_CODE_CRC_NOT_VALID:
            send_debug_logs("[ERROR] CRC_NOT_VALID : Discrepancy between provided CRC and expected CRC.");
 8007c00:	4b27      	ldr	r3, [pc, #156]	; (8007ca0 <check_for_error+0x148>)
 8007c02:	0018      	movs	r0, r3
 8007c04:	f7f9 fa60 	bl	80010c8 <send_debug_logs>
            break;
 8007c08:	e036      	b.n	8007c78 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_LENGTH_NOT_VALID:
            send_debug_logs("[ERROR] LENGTH_NOT_VALID : Message exceeds the maximum length allowed by the given operation code.");
 8007c0a:	4b26      	ldr	r3, [pc, #152]	; (8007ca4 <check_for_error+0x14c>)
 8007c0c:	0018      	movs	r0, r3
 8007c0e:	f7f9 fa5b 	bl	80010c8 <send_debug_logs>
            break;
 8007c12:	e031      	b.n	8007c78 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_OPCODE_NOT_VALID:
            send_debug_logs("[ERROR] OPCODE_NOT_VALID : Invalid operation code used.");
 8007c14:	4b24      	ldr	r3, [pc, #144]	; (8007ca8 <check_for_error+0x150>)
 8007c16:	0018      	movs	r0, r3
 8007c18:	f7f9 fa56 	bl	80010c8 <send_debug_logs>
            break;
 8007c1c:	e02c      	b.n	8007c78 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_FORMAT_NOT_VALID:
            send_debug_logs("[ERROR] FORMAT_NOT_VALID : At least one of the fields (SSID, password, token) is not composed of exclusively printable standard ASCII characters (0x20 to 0x7E).");
 8007c1e:	4b23      	ldr	r3, [pc, #140]	; (8007cac <check_for_error+0x154>)
 8007c20:	0018      	movs	r0, r3
 8007c22:	f7f9 fa51 	bl	80010c8 <send_debug_logs>
            break;
 8007c26:	e027      	b.n	8007c78 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_FLASH_WRITING_FAILED:
            send_debug_logs("[ERROR] FLASH_WRITING_FAILED : Failed to write the Wi-Fi settings (SSID, password, token) to the flash.");
 8007c28:	4b21      	ldr	r3, [pc, #132]	; (8007cb0 <check_for_error+0x158>)
 8007c2a:	0018      	movs	r0, r3
 8007c2c:	f7f9 fa4c 	bl	80010c8 <send_debug_logs>
            break;
 8007c30:	e022      	b.n	8007c78 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_BUFFER_FULL:
            send_debug_logs("[ERROR] BUFFER_FULL : Failed to queue the payload because the sending queue is already full.");
 8007c32:	4b20      	ldr	r3, [pc, #128]	; (8007cb4 <check_for_error+0x15c>)
 8007c34:	0018      	movs	r0, r3
 8007c36:	f7f9 fa47 	bl	80010c8 <send_debug_logs>
            break;
 8007c3a:	e01d      	b.n	8007c78 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_DUPLICATE_ID:
            send_debug_logs("[ERROR] DUPLICATE_ID : Failed to queue the payload because the Payload ID provided by the asset is already in use in the Astronode queue.");
 8007c3c:	4b1e      	ldr	r3, [pc, #120]	; (8007cb8 <check_for_error+0x160>)
 8007c3e:	0018      	movs	r0, r3
 8007c40:	f7f9 fa42 	bl	80010c8 <send_debug_logs>
            break;
 8007c44:	e018      	b.n	8007c78 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_BUFFER_EMPTY:
            send_debug_logs("[ERROR] BUFFER_EMPTY : Failed to dequeue a payload from the buffer because the buffer is empty.");
 8007c46:	4b1d      	ldr	r3, [pc, #116]	; (8007cbc <check_for_error+0x164>)
 8007c48:	0018      	movs	r0, r3
 8007c4a:	f7f9 fa3d 	bl	80010c8 <send_debug_logs>
            break;
 8007c4e:	e013      	b.n	8007c78 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_INVALID_POS:
            send_debug_logs("[ERROR] INVALID_POS : Failed to update the geolocation information. Latitude and longitude fields must in the range [-90,90] degrees and [-180,180] degrees, respectively.");
 8007c50:	4b1b      	ldr	r3, [pc, #108]	; (8007cc0 <check_for_error+0x168>)
 8007c52:	0018      	movs	r0, r3
 8007c54:	f7f9 fa38 	bl	80010c8 <send_debug_logs>
            break;
 8007c58:	e00e      	b.n	8007c78 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_NO_ACK:
            send_debug_logs("[ERROR] NO_ACK : No satellite acknowledgement available for any payload.");
 8007c5a:	4b1a      	ldr	r3, [pc, #104]	; (8007cc4 <check_for_error+0x16c>)
 8007c5c:	0018      	movs	r0, r3
 8007c5e:	f7f9 fa33 	bl	80010c8 <send_debug_logs>
            break;
 8007c62:	e009      	b.n	8007c78 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_NO_CLEAR:
            send_debug_logs("[ERROR] NO_CLEAR : No payload ack to clear, or it was already cleared.");
 8007c64:	4b18      	ldr	r3, [pc, #96]	; (8007cc8 <check_for_error+0x170>)
 8007c66:	0018      	movs	r0, r3
 8007c68:	f7f9 fa2e 	bl	80010c8 <send_debug_logs>
            break;
 8007c6c:	e004      	b.n	8007c78 <check_for_error+0x120>

        default:
            send_debug_logs("[ERROR] error_code is not defined.");
 8007c6e:	4b17      	ldr	r3, [pc, #92]	; (8007ccc <check_for_error+0x174>)
 8007c70:	0018      	movs	r0, r3
 8007c72:	f7f9 fa29 	bl	80010c8 <send_debug_logs>
            break;
 8007c76:	46c0      	nop			; (mov r8, r8)
    }
}
 8007c78:	46c0      	nop			; (mov r8, r8)
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	b004      	add	sp, #16
 8007c7e:	bd80      	pop	{r7, pc}
 8007c80:	00004601 	.word	0x00004601
 8007c84:	00004501 	.word	0x00004501
 8007c88:	00003501 	.word	0x00003501
 8007c8c:	00002601 	.word	0x00002601
 8007c90:	00002511 	.word	0x00002511
 8007c94:	00002501 	.word	0x00002501
 8007c98:	00000611 	.word	0x00000611
 8007c9c:	00000601 	.word	0x00000601
 8007ca0:	08009f00 	.word	0x08009f00
 8007ca4:	08009f4c 	.word	0x08009f4c
 8007ca8:	08009fb0 	.word	0x08009fb0
 8007cac:	08009fe8 	.word	0x08009fe8
 8007cb0:	0800a08c 	.word	0x0800a08c
 8007cb4:	0800a0f4 	.word	0x0800a0f4
 8007cb8:	0800a154 	.word	0x0800a154
 8007cbc:	0800a1e0 	.word	0x0800a1e0
 8007cc0:	0800a240 	.word	0x0800a240
 8007cc4:	0800a2ec 	.word	0x0800a2ec
 8007cc8:	0800a338 	.word	0x0800a338
 8007ccc:	0800a380 	.word	0x0800a380

08007cd0 <receive_astronode_answer>:

static return_status_t receive_astronode_answer(uint8_t *p_rx_buffer, uint16_t *p_buffer_length)
{
 8007cd0:	b5b0      	push	{r4, r5, r7, lr}
 8007cd2:	b086      	sub	sp, #24
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
 8007cd8:	6039      	str	r1, [r7, #0]
    uint8_t rx_char = 0;
 8007cda:	230f      	movs	r3, #15
 8007cdc:	18fb      	adds	r3, r7, r3
 8007cde:	2200      	movs	r2, #0
 8007ce0:	701a      	strb	r2, [r3, #0]
    uint16_t length = 0;
 8007ce2:	2316      	movs	r3, #22
 8007ce4:	18fb      	adds	r3, r7, r3
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	801a      	strh	r2, [r3, #0]
    uint32_t timeout_answer_received = get_systick();
 8007cea:	f7f9 fb49 	bl	8001380 <get_systick>
 8007cee:	0003      	movs	r3, r0
 8007cf0:	613b      	str	r3, [r7, #16]
    bool is_answer_received = false;
 8007cf2:	2315      	movs	r3, #21
 8007cf4:	18fb      	adds	r3, r7, r3
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	701a      	strb	r2, [r3, #0]

    while (is_answer_received == false)
 8007cfa:	e054      	b.n	8007da6 <receive_astronode_answer+0xd6>
    {
        if (is_systick_timeout_over(timeout_answer_received, ASTRONODE_ANSWER_TIMEOUT_MS))
 8007cfc:	4a34      	ldr	r2, [pc, #208]	; (8007dd0 <receive_astronode_answer+0x100>)
 8007cfe:	693b      	ldr	r3, [r7, #16]
 8007d00:	0011      	movs	r1, r2
 8007d02:	0018      	movs	r0, r3
 8007d04:	f7f9 fb44 	bl	8001390 <is_systick_timeout_over>
 8007d08:	1e03      	subs	r3, r0, #0
 8007d0a:	d005      	beq.n	8007d18 <receive_astronode_answer+0x48>
        {
            send_debug_logs("ERROR : Received answer timeout..");
 8007d0c:	4b31      	ldr	r3, [pc, #196]	; (8007dd4 <receive_astronode_answer+0x104>)
 8007d0e:	0018      	movs	r0, r3
 8007d10:	f7f9 f9da 	bl	80010c8 <send_debug_logs>
            return RS_FAILURE;
 8007d14:	2300      	movs	r3, #0
 8007d16:	e057      	b.n	8007dc8 <receive_astronode_answer+0xf8>
        }
        if (is_astronode_character_received(&rx_char))
 8007d18:	250f      	movs	r5, #15
 8007d1a:	197b      	adds	r3, r7, r5
 8007d1c:	0018      	movs	r0, r3
 8007d1e:	f7f9 fb4d 	bl	80013bc <is_astronode_character_received>
 8007d22:	0003      	movs	r3, r0
 8007d24:	0019      	movs	r1, r3
 8007d26:	2016      	movs	r0, #22
 8007d28:	183b      	adds	r3, r7, r0
 8007d2a:	183a      	adds	r2, r7, r0
 8007d2c:	8812      	ldrh	r2, [r2, #0]
 8007d2e:	801a      	strh	r2, [r3, #0]
 8007d30:	2415      	movs	r4, #21
 8007d32:	193b      	adds	r3, r7, r4
 8007d34:	193a      	adds	r2, r7, r4
 8007d36:	7812      	ldrb	r2, [r2, #0]
 8007d38:	701a      	strb	r2, [r3, #0]
 8007d3a:	2900      	cmp	r1, #0
 8007d3c:	d033      	beq.n	8007da6 <receive_astronode_answer+0xd6>
        {
            if (rx_char == ASTRONODE_TRANSPORT_STX)
 8007d3e:	197b      	adds	r3, r7, r5
 8007d40:	781b      	ldrb	r3, [r3, #0]
 8007d42:	2b02      	cmp	r3, #2
 8007d44:	d105      	bne.n	8007d52 <receive_astronode_answer+0x82>
            {
                is_answer_received = false;
 8007d46:	193b      	adds	r3, r7, r4
 8007d48:	2200      	movs	r2, #0
 8007d4a:	701a      	strb	r2, [r3, #0]
                length = 0;
 8007d4c:	183b      	adds	r3, r7, r0
 8007d4e:	2200      	movs	r2, #0
 8007d50:	801a      	strh	r2, [r3, #0]
            }

            p_rx_buffer[length] = rx_char;
 8007d52:	2116      	movs	r1, #22
 8007d54:	187b      	adds	r3, r7, r1
 8007d56:	881b      	ldrh	r3, [r3, #0]
 8007d58:	687a      	ldr	r2, [r7, #4]
 8007d5a:	18d3      	adds	r3, r2, r3
 8007d5c:	220f      	movs	r2, #15
 8007d5e:	18ba      	adds	r2, r7, r2
 8007d60:	7812      	ldrb	r2, [r2, #0]
 8007d62:	701a      	strb	r2, [r3, #0]
            length++;
 8007d64:	187b      	adds	r3, r7, r1
 8007d66:	881a      	ldrh	r2, [r3, #0]
 8007d68:	187b      	adds	r3, r7, r1
 8007d6a:	3201      	adds	r2, #1
 8007d6c:	801a      	strh	r2, [r3, #0]

            if (length > ASTRONODE_MAX_LENGTH_RESPONSE)
 8007d6e:	187b      	adds	r3, r7, r1
 8007d70:	881b      	ldrh	r3, [r3, #0]
 8007d72:	2bb2      	cmp	r3, #178	; 0xb2
 8007d74:	d905      	bls.n	8007d82 <receive_astronode_answer+0xb2>
            {
                send_debug_logs("ERROR : Message received from the Astronode exceed maximum length allowed.");
 8007d76:	4b18      	ldr	r3, [pc, #96]	; (8007dd8 <receive_astronode_answer+0x108>)
 8007d78:	0018      	movs	r0, r3
 8007d7a:	f7f9 f9a5 	bl	80010c8 <send_debug_logs>
                return RS_FAILURE;
 8007d7e:	2300      	movs	r3, #0
 8007d80:	e022      	b.n	8007dc8 <receive_astronode_answer+0xf8>
            }

            if (rx_char == ASTRONODE_TRANSPORT_ETX)
 8007d82:	230f      	movs	r3, #15
 8007d84:	18fb      	adds	r3, r7, r3
 8007d86:	781b      	ldrb	r3, [r3, #0]
 8007d88:	2b03      	cmp	r3, #3
 8007d8a:	d10c      	bne.n	8007da6 <receive_astronode_answer+0xd6>
            {
                if (length > 1)
 8007d8c:	2216      	movs	r2, #22
 8007d8e:	18bb      	adds	r3, r7, r2
 8007d90:	881b      	ldrh	r3, [r3, #0]
 8007d92:	2b01      	cmp	r3, #1
 8007d94:	d907      	bls.n	8007da6 <receive_astronode_answer+0xd6>
                {
                    *p_buffer_length = length;
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	18ba      	adds	r2, r7, r2
 8007d9a:	8812      	ldrh	r2, [r2, #0]
 8007d9c:	801a      	strh	r2, [r3, #0]
                    is_answer_received = true;
 8007d9e:	2315      	movs	r3, #21
 8007da0:	18fb      	adds	r3, r7, r3
 8007da2:	2201      	movs	r2, #1
 8007da4:	701a      	strb	r2, [r3, #0]
    while (is_answer_received == false)
 8007da6:	2315      	movs	r3, #21
 8007da8:	18fb      	adds	r3, r7, r3
 8007daa:	781b      	ldrb	r3, [r3, #0]
 8007dac:	2201      	movs	r2, #1
 8007dae:	4053      	eors	r3, r2
 8007db0:	b2db      	uxtb	r3, r3
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d1a2      	bne.n	8007cfc <receive_astronode_answer+0x2c>
                }
            }
        }
    }
    send_debug_logs("Message received from the Astronode <-- ");
 8007db6:	4b09      	ldr	r3, [pc, #36]	; (8007ddc <receive_astronode_answer+0x10c>)
 8007db8:	0018      	movs	r0, r3
 8007dba:	f7f9 f985 	bl	80010c8 <send_debug_logs>
    send_debug_logs((char *) p_rx_buffer);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	0018      	movs	r0, r3
 8007dc2:	f7f9 f981 	bl	80010c8 <send_debug_logs>

    return RS_SUCCESS;
 8007dc6:	2301      	movs	r3, #1
}
 8007dc8:	0018      	movs	r0, r3
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	b006      	add	sp, #24
 8007dce:	bdb0      	pop	{r4, r5, r7, pc}
 8007dd0:	000005dc 	.word	0x000005dc
 8007dd4:	0800a3a4 	.word	0x0800a3a4
 8007dd8:	0800a3c8 	.word	0x0800a3c8
 8007ddc:	0800a414 	.word	0x0800a414

08007de0 <uint8_to_ascii_buffer>:

static void uint8_to_ascii_buffer(const uint8_t value, uint8_t *p_target_buffer)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b082      	sub	sp, #8
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	0002      	movs	r2, r0
 8007de8:	6039      	str	r1, [r7, #0]
 8007dea:	1dfb      	adds	r3, r7, #7
 8007dec:	701a      	strb	r2, [r3, #0]
    p_target_buffer[0] = g_ascii_lookup[value >> 4];
 8007dee:	1dfb      	adds	r3, r7, #7
 8007df0:	781b      	ldrb	r3, [r3, #0]
 8007df2:	091b      	lsrs	r3, r3, #4
 8007df4:	b2db      	uxtb	r3, r3
 8007df6:	001a      	movs	r2, r3
 8007df8:	4b08      	ldr	r3, [pc, #32]	; (8007e1c <uint8_to_ascii_buffer+0x3c>)
 8007dfa:	5c9a      	ldrb	r2, [r3, r2]
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	701a      	strb	r2, [r3, #0]
    p_target_buffer[1] = g_ascii_lookup[value & 0x0F];
 8007e00:	1dfb      	adds	r3, r7, #7
 8007e02:	781b      	ldrb	r3, [r3, #0]
 8007e04:	220f      	movs	r2, #15
 8007e06:	401a      	ands	r2, r3
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	3301      	adds	r3, #1
 8007e0c:	4903      	ldr	r1, [pc, #12]	; (8007e1c <uint8_to_ascii_buffer+0x3c>)
 8007e0e:	5c8a      	ldrb	r2, [r1, r2]
 8007e10:	701a      	strb	r2, [r3, #0]
}
 8007e12:	46c0      	nop			; (mov r8, r8)
 8007e14:	46bd      	mov	sp, r7
 8007e16:	b002      	add	sp, #8
 8007e18:	bd80      	pop	{r7, pc}
 8007e1a:	46c0      	nop			; (mov r8, r8)
 8007e1c:	0800a4c8 	.word	0x0800a4c8

08007e20 <lis2dw12_read_reg>:
  *
  */
int32_t __weak lis2dw12_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 8007e20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e22:	b087      	sub	sp, #28
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	60f8      	str	r0, [r7, #12]
 8007e28:	0008      	movs	r0, r1
 8007e2a:	607a      	str	r2, [r7, #4]
 8007e2c:	0019      	movs	r1, r3
 8007e2e:	260b      	movs	r6, #11
 8007e30:	19bb      	adds	r3, r7, r6
 8007e32:	1c02      	adds	r2, r0, #0
 8007e34:	701a      	strb	r2, [r3, #0]
 8007e36:	2508      	movs	r5, #8
 8007e38:	197b      	adds	r3, r7, r5
 8007e3a:	1c0a      	adds	r2, r1, #0
 8007e3c:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	685c      	ldr	r4, [r3, #4]
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	68d8      	ldr	r0, [r3, #12]
 8007e46:	197b      	adds	r3, r7, r5
 8007e48:	881d      	ldrh	r5, [r3, #0]
 8007e4a:	687a      	ldr	r2, [r7, #4]
 8007e4c:	19bb      	adds	r3, r7, r6
 8007e4e:	7819      	ldrb	r1, [r3, #0]
 8007e50:	002b      	movs	r3, r5
 8007e52:	47a0      	blx	r4
 8007e54:	0003      	movs	r3, r0
 8007e56:	617b      	str	r3, [r7, #20]

  return ret;
 8007e58:	697b      	ldr	r3, [r7, #20]
}
 8007e5a:	0018      	movs	r0, r3
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	b007      	add	sp, #28
 8007e60:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007e62 <lis2dw12_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8007e62:	b580      	push	{r7, lr}
 8007e64:	b084      	sub	sp, #16
 8007e66:	af00      	add	r7, sp, #0
 8007e68:	6078      	str	r0, [r7, #4]
 8007e6a:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_WHO_AM_I, buff, 1);
 8007e6c:	683a      	ldr	r2, [r7, #0]
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	2301      	movs	r3, #1
 8007e72:	210f      	movs	r1, #15
 8007e74:	f7ff ffd4 	bl	8007e20 <lis2dw12_read_reg>
 8007e78:	0003      	movs	r3, r0
 8007e7a:	60fb      	str	r3, [r7, #12]

  return ret;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
}
 8007e7e:	0018      	movs	r0, r3
 8007e80:	46bd      	mov	sp, r7
 8007e82:	b004      	add	sp, #16
 8007e84:	bd80      	pop	{r7, pc}

08007e86 <my_lis2dw12_init>:
 */

#include "my_lis2dw12.h"

bool my_lis2dw12_init ( stmdev_ctx_t* ctx )
{
 8007e86:	b580      	push	{r7, lr}
 8007e88:	b084      	sub	sp, #16
 8007e8a:	af00      	add	r7, sp, #0
 8007e8c:	6078      	str	r0, [r7, #4]
	uint8_t rst = 1 ;
 8007e8e:	230f      	movs	r3, #15
 8007e90:	18fb      	adds	r3, r7, r3
 8007e92:	2201      	movs	r2, #1
 8007e94:	701a      	strb	r2, [r3, #0]
	/*Restore default configuration */
//	lis2dw12_reset_set ( ctx , PROPERTY_ENABLE ) ;
//	do {
//		lis2dw12_reset_get ( ctx, &rst ) ;
//	} while ( rst ) ;
	if ( my_lis2dw12_get_id ( ctx ) == LIS2DW12_ID )
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	0018      	movs	r0, r3
 8007e9a:	f000 f80a 	bl	8007eb2 <my_lis2dw12_get_id>
 8007e9e:	0003      	movs	r3, r0
 8007ea0:	2b33      	cmp	r3, #51	; 0x33
 8007ea2:	d101      	bne.n	8007ea8 <my_lis2dw12_init+0x22>
//		lis2dw12_power_mode_set 	( ctx , LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit ) ;
//		lis2dw12_data_rate_set 		( ctx , LIS2DW12_XL_ODR_200Hz ) ;
//		lis2dw12_filter_path_set 	( ctx , LIS2DW12_HIGH_PASS_ON_OUT ) ;
//		lis2dw12_wkup_dur_set		( ctx , 0 ) ;
//		lis2dw12_wkup_threshold_set	( ctx, 2 ) ;
		return true ;
 8007ea4:	2301      	movs	r3, #1
 8007ea6:	e000      	b.n	8007eaa <my_lis2dw12_init+0x24>
	}
	return 0 ;
 8007ea8:	2300      	movs	r3, #0
}
 8007eaa:	0018      	movs	r0, r3
 8007eac:	46bd      	mov	sp, r7
 8007eae:	b004      	add	sp, #16
 8007eb0:	bd80      	pop	{r7, pc}

08007eb2 <my_lis2dw12_get_id>:

uint8_t my_lis2dw12_get_id ( stmdev_ctx_t* ctx )
{
 8007eb2:	b590      	push	{r4, r7, lr}
 8007eb4:	b085      	sub	sp, #20
 8007eb6:	af00      	add	r7, sp, #0
 8007eb8:	6078      	str	r0, [r7, #4]
	uint8_t id = 0 ;
 8007eba:	210f      	movs	r1, #15
 8007ebc:	187b      	adds	r3, r7, r1
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	701a      	strb	r2, [r3, #0]
	lis2dw12_device_id_get ( ctx , &id ) ;
 8007ec2:	000c      	movs	r4, r1
 8007ec4:	187a      	adds	r2, r7, r1
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	0011      	movs	r1, r2
 8007eca:	0018      	movs	r0, r3
 8007ecc:	f7ff ffc9 	bl	8007e62 <lis2dw12_device_id_get>
	return id ;
 8007ed0:	193b      	adds	r3, r7, r4
 8007ed2:	781b      	ldrb	r3, [r3, #0]
}
 8007ed4:	0018      	movs	r0, r3
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	b005      	add	sp, #20
 8007eda:	bd90      	pop	{r4, r7, pc}

08007edc <sbrk_aligned>:
 8007edc:	b570      	push	{r4, r5, r6, lr}
 8007ede:	4e0f      	ldr	r6, [pc, #60]	; (8007f1c <sbrk_aligned+0x40>)
 8007ee0:	000d      	movs	r5, r1
 8007ee2:	6831      	ldr	r1, [r6, #0]
 8007ee4:	0004      	movs	r4, r0
 8007ee6:	2900      	cmp	r1, #0
 8007ee8:	d102      	bne.n	8007ef0 <sbrk_aligned+0x14>
 8007eea:	f000 f907 	bl	80080fc <_sbrk_r>
 8007eee:	6030      	str	r0, [r6, #0]
 8007ef0:	0029      	movs	r1, r5
 8007ef2:	0020      	movs	r0, r4
 8007ef4:	f000 f902 	bl	80080fc <_sbrk_r>
 8007ef8:	1c43      	adds	r3, r0, #1
 8007efa:	d00a      	beq.n	8007f12 <sbrk_aligned+0x36>
 8007efc:	2303      	movs	r3, #3
 8007efe:	1cc5      	adds	r5, r0, #3
 8007f00:	439d      	bics	r5, r3
 8007f02:	42a8      	cmp	r0, r5
 8007f04:	d007      	beq.n	8007f16 <sbrk_aligned+0x3a>
 8007f06:	1a29      	subs	r1, r5, r0
 8007f08:	0020      	movs	r0, r4
 8007f0a:	f000 f8f7 	bl	80080fc <_sbrk_r>
 8007f0e:	3001      	adds	r0, #1
 8007f10:	d101      	bne.n	8007f16 <sbrk_aligned+0x3a>
 8007f12:	2501      	movs	r5, #1
 8007f14:	426d      	negs	r5, r5
 8007f16:	0028      	movs	r0, r5
 8007f18:	bd70      	pop	{r4, r5, r6, pc}
 8007f1a:	46c0      	nop			; (mov r8, r8)
 8007f1c:	20001440 	.word	0x20001440

08007f20 <_malloc_r>:
 8007f20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007f22:	2203      	movs	r2, #3
 8007f24:	1ccb      	adds	r3, r1, #3
 8007f26:	4393      	bics	r3, r2
 8007f28:	3308      	adds	r3, #8
 8007f2a:	0006      	movs	r6, r0
 8007f2c:	001f      	movs	r7, r3
 8007f2e:	2b0c      	cmp	r3, #12
 8007f30:	d238      	bcs.n	8007fa4 <_malloc_r+0x84>
 8007f32:	270c      	movs	r7, #12
 8007f34:	42b9      	cmp	r1, r7
 8007f36:	d837      	bhi.n	8007fa8 <_malloc_r+0x88>
 8007f38:	0030      	movs	r0, r6
 8007f3a:	f000 f873 	bl	8008024 <__malloc_lock>
 8007f3e:	4b38      	ldr	r3, [pc, #224]	; (8008020 <_malloc_r+0x100>)
 8007f40:	9300      	str	r3, [sp, #0]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	001c      	movs	r4, r3
 8007f46:	2c00      	cmp	r4, #0
 8007f48:	d133      	bne.n	8007fb2 <_malloc_r+0x92>
 8007f4a:	0039      	movs	r1, r7
 8007f4c:	0030      	movs	r0, r6
 8007f4e:	f7ff ffc5 	bl	8007edc <sbrk_aligned>
 8007f52:	0004      	movs	r4, r0
 8007f54:	1c43      	adds	r3, r0, #1
 8007f56:	d15e      	bne.n	8008016 <_malloc_r+0xf6>
 8007f58:	9b00      	ldr	r3, [sp, #0]
 8007f5a:	681c      	ldr	r4, [r3, #0]
 8007f5c:	0025      	movs	r5, r4
 8007f5e:	2d00      	cmp	r5, #0
 8007f60:	d14e      	bne.n	8008000 <_malloc_r+0xe0>
 8007f62:	2c00      	cmp	r4, #0
 8007f64:	d051      	beq.n	800800a <_malloc_r+0xea>
 8007f66:	6823      	ldr	r3, [r4, #0]
 8007f68:	0029      	movs	r1, r5
 8007f6a:	18e3      	adds	r3, r4, r3
 8007f6c:	0030      	movs	r0, r6
 8007f6e:	9301      	str	r3, [sp, #4]
 8007f70:	f000 f8c4 	bl	80080fc <_sbrk_r>
 8007f74:	9b01      	ldr	r3, [sp, #4]
 8007f76:	4283      	cmp	r3, r0
 8007f78:	d147      	bne.n	800800a <_malloc_r+0xea>
 8007f7a:	6823      	ldr	r3, [r4, #0]
 8007f7c:	0030      	movs	r0, r6
 8007f7e:	1aff      	subs	r7, r7, r3
 8007f80:	0039      	movs	r1, r7
 8007f82:	f7ff ffab 	bl	8007edc <sbrk_aligned>
 8007f86:	3001      	adds	r0, #1
 8007f88:	d03f      	beq.n	800800a <_malloc_r+0xea>
 8007f8a:	6823      	ldr	r3, [r4, #0]
 8007f8c:	19db      	adds	r3, r3, r7
 8007f8e:	6023      	str	r3, [r4, #0]
 8007f90:	9b00      	ldr	r3, [sp, #0]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d040      	beq.n	800801a <_malloc_r+0xfa>
 8007f98:	685a      	ldr	r2, [r3, #4]
 8007f9a:	42a2      	cmp	r2, r4
 8007f9c:	d133      	bne.n	8008006 <_malloc_r+0xe6>
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	605a      	str	r2, [r3, #4]
 8007fa2:	e014      	b.n	8007fce <_malloc_r+0xae>
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	dac5      	bge.n	8007f34 <_malloc_r+0x14>
 8007fa8:	230c      	movs	r3, #12
 8007faa:	2500      	movs	r5, #0
 8007fac:	6033      	str	r3, [r6, #0]
 8007fae:	0028      	movs	r0, r5
 8007fb0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007fb2:	6821      	ldr	r1, [r4, #0]
 8007fb4:	1bc9      	subs	r1, r1, r7
 8007fb6:	d420      	bmi.n	8007ffa <_malloc_r+0xda>
 8007fb8:	290b      	cmp	r1, #11
 8007fba:	d918      	bls.n	8007fee <_malloc_r+0xce>
 8007fbc:	19e2      	adds	r2, r4, r7
 8007fbe:	6027      	str	r7, [r4, #0]
 8007fc0:	42a3      	cmp	r3, r4
 8007fc2:	d112      	bne.n	8007fea <_malloc_r+0xca>
 8007fc4:	9b00      	ldr	r3, [sp, #0]
 8007fc6:	601a      	str	r2, [r3, #0]
 8007fc8:	6863      	ldr	r3, [r4, #4]
 8007fca:	6011      	str	r1, [r2, #0]
 8007fcc:	6053      	str	r3, [r2, #4]
 8007fce:	0030      	movs	r0, r6
 8007fd0:	0025      	movs	r5, r4
 8007fd2:	f000 f82f 	bl	8008034 <__malloc_unlock>
 8007fd6:	2207      	movs	r2, #7
 8007fd8:	350b      	adds	r5, #11
 8007fda:	1d23      	adds	r3, r4, #4
 8007fdc:	4395      	bics	r5, r2
 8007fde:	1aea      	subs	r2, r5, r3
 8007fe0:	429d      	cmp	r5, r3
 8007fe2:	d0e4      	beq.n	8007fae <_malloc_r+0x8e>
 8007fe4:	1b5b      	subs	r3, r3, r5
 8007fe6:	50a3      	str	r3, [r4, r2]
 8007fe8:	e7e1      	b.n	8007fae <_malloc_r+0x8e>
 8007fea:	605a      	str	r2, [r3, #4]
 8007fec:	e7ec      	b.n	8007fc8 <_malloc_r+0xa8>
 8007fee:	6862      	ldr	r2, [r4, #4]
 8007ff0:	42a3      	cmp	r3, r4
 8007ff2:	d1d5      	bne.n	8007fa0 <_malloc_r+0x80>
 8007ff4:	9b00      	ldr	r3, [sp, #0]
 8007ff6:	601a      	str	r2, [r3, #0]
 8007ff8:	e7e9      	b.n	8007fce <_malloc_r+0xae>
 8007ffa:	0023      	movs	r3, r4
 8007ffc:	6864      	ldr	r4, [r4, #4]
 8007ffe:	e7a2      	b.n	8007f46 <_malloc_r+0x26>
 8008000:	002c      	movs	r4, r5
 8008002:	686d      	ldr	r5, [r5, #4]
 8008004:	e7ab      	b.n	8007f5e <_malloc_r+0x3e>
 8008006:	0013      	movs	r3, r2
 8008008:	e7c4      	b.n	8007f94 <_malloc_r+0x74>
 800800a:	230c      	movs	r3, #12
 800800c:	0030      	movs	r0, r6
 800800e:	6033      	str	r3, [r6, #0]
 8008010:	f000 f810 	bl	8008034 <__malloc_unlock>
 8008014:	e7cb      	b.n	8007fae <_malloc_r+0x8e>
 8008016:	6027      	str	r7, [r4, #0]
 8008018:	e7d9      	b.n	8007fce <_malloc_r+0xae>
 800801a:	605b      	str	r3, [r3, #4]
 800801c:	deff      	udf	#255	; 0xff
 800801e:	46c0      	nop			; (mov r8, r8)
 8008020:	2000143c 	.word	0x2000143c

08008024 <__malloc_lock>:
 8008024:	b510      	push	{r4, lr}
 8008026:	4802      	ldr	r0, [pc, #8]	; (8008030 <__malloc_lock+0xc>)
 8008028:	f000 f8a4 	bl	8008174 <__retarget_lock_acquire_recursive>
 800802c:	bd10      	pop	{r4, pc}
 800802e:	46c0      	nop			; (mov r8, r8)
 8008030:	20001580 	.word	0x20001580

08008034 <__malloc_unlock>:
 8008034:	b510      	push	{r4, lr}
 8008036:	4802      	ldr	r0, [pc, #8]	; (8008040 <__malloc_unlock+0xc>)
 8008038:	f000 f89d 	bl	8008176 <__retarget_lock_release_recursive>
 800803c:	bd10      	pop	{r4, pc}
 800803e:	46c0      	nop			; (mov r8, r8)
 8008040:	20001580 	.word	0x20001580

08008044 <sniprintf>:
 8008044:	b40c      	push	{r2, r3}
 8008046:	b530      	push	{r4, r5, lr}
 8008048:	4b17      	ldr	r3, [pc, #92]	; (80080a8 <sniprintf+0x64>)
 800804a:	000c      	movs	r4, r1
 800804c:	681d      	ldr	r5, [r3, #0]
 800804e:	b09d      	sub	sp, #116	; 0x74
 8008050:	2900      	cmp	r1, #0
 8008052:	da08      	bge.n	8008066 <sniprintf+0x22>
 8008054:	238b      	movs	r3, #139	; 0x8b
 8008056:	2001      	movs	r0, #1
 8008058:	602b      	str	r3, [r5, #0]
 800805a:	4240      	negs	r0, r0
 800805c:	b01d      	add	sp, #116	; 0x74
 800805e:	bc30      	pop	{r4, r5}
 8008060:	bc08      	pop	{r3}
 8008062:	b002      	add	sp, #8
 8008064:	4718      	bx	r3
 8008066:	2382      	movs	r3, #130	; 0x82
 8008068:	466a      	mov	r2, sp
 800806a:	009b      	lsls	r3, r3, #2
 800806c:	8293      	strh	r3, [r2, #20]
 800806e:	2300      	movs	r3, #0
 8008070:	9002      	str	r0, [sp, #8]
 8008072:	9006      	str	r0, [sp, #24]
 8008074:	4299      	cmp	r1, r3
 8008076:	d000      	beq.n	800807a <sniprintf+0x36>
 8008078:	1e4b      	subs	r3, r1, #1
 800807a:	9304      	str	r3, [sp, #16]
 800807c:	9307      	str	r3, [sp, #28]
 800807e:	2301      	movs	r3, #1
 8008080:	466a      	mov	r2, sp
 8008082:	425b      	negs	r3, r3
 8008084:	82d3      	strh	r3, [r2, #22]
 8008086:	0028      	movs	r0, r5
 8008088:	ab21      	add	r3, sp, #132	; 0x84
 800808a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800808c:	a902      	add	r1, sp, #8
 800808e:	9301      	str	r3, [sp, #4]
 8008090:	f000 f928 	bl	80082e4 <_svfiprintf_r>
 8008094:	1c43      	adds	r3, r0, #1
 8008096:	da01      	bge.n	800809c <sniprintf+0x58>
 8008098:	238b      	movs	r3, #139	; 0x8b
 800809a:	602b      	str	r3, [r5, #0]
 800809c:	2c00      	cmp	r4, #0
 800809e:	d0dd      	beq.n	800805c <sniprintf+0x18>
 80080a0:	2200      	movs	r2, #0
 80080a2:	9b02      	ldr	r3, [sp, #8]
 80080a4:	701a      	strb	r2, [r3, #0]
 80080a6:	e7d9      	b.n	800805c <sniprintf+0x18>
 80080a8:	2000005c 	.word	0x2000005c

080080ac <siprintf>:
 80080ac:	b40e      	push	{r1, r2, r3}
 80080ae:	b500      	push	{lr}
 80080b0:	490b      	ldr	r1, [pc, #44]	; (80080e0 <siprintf+0x34>)
 80080b2:	b09c      	sub	sp, #112	; 0x70
 80080b4:	ab1d      	add	r3, sp, #116	; 0x74
 80080b6:	9002      	str	r0, [sp, #8]
 80080b8:	9006      	str	r0, [sp, #24]
 80080ba:	9107      	str	r1, [sp, #28]
 80080bc:	9104      	str	r1, [sp, #16]
 80080be:	4809      	ldr	r0, [pc, #36]	; (80080e4 <siprintf+0x38>)
 80080c0:	4909      	ldr	r1, [pc, #36]	; (80080e8 <siprintf+0x3c>)
 80080c2:	cb04      	ldmia	r3!, {r2}
 80080c4:	9105      	str	r1, [sp, #20]
 80080c6:	6800      	ldr	r0, [r0, #0]
 80080c8:	a902      	add	r1, sp, #8
 80080ca:	9301      	str	r3, [sp, #4]
 80080cc:	f000 f90a 	bl	80082e4 <_svfiprintf_r>
 80080d0:	2200      	movs	r2, #0
 80080d2:	9b02      	ldr	r3, [sp, #8]
 80080d4:	701a      	strb	r2, [r3, #0]
 80080d6:	b01c      	add	sp, #112	; 0x70
 80080d8:	bc08      	pop	{r3}
 80080da:	b003      	add	sp, #12
 80080dc:	4718      	bx	r3
 80080de:	46c0      	nop			; (mov r8, r8)
 80080e0:	7fffffff 	.word	0x7fffffff
 80080e4:	2000005c 	.word	0x2000005c
 80080e8:	ffff0208 	.word	0xffff0208

080080ec <memset>:
 80080ec:	0003      	movs	r3, r0
 80080ee:	1882      	adds	r2, r0, r2
 80080f0:	4293      	cmp	r3, r2
 80080f2:	d100      	bne.n	80080f6 <memset+0xa>
 80080f4:	4770      	bx	lr
 80080f6:	7019      	strb	r1, [r3, #0]
 80080f8:	3301      	adds	r3, #1
 80080fa:	e7f9      	b.n	80080f0 <memset+0x4>

080080fc <_sbrk_r>:
 80080fc:	2300      	movs	r3, #0
 80080fe:	b570      	push	{r4, r5, r6, lr}
 8008100:	4d06      	ldr	r5, [pc, #24]	; (800811c <_sbrk_r+0x20>)
 8008102:	0004      	movs	r4, r0
 8008104:	0008      	movs	r0, r1
 8008106:	602b      	str	r3, [r5, #0]
 8008108:	f7f9 fcda 	bl	8001ac0 <_sbrk>
 800810c:	1c43      	adds	r3, r0, #1
 800810e:	d103      	bne.n	8008118 <_sbrk_r+0x1c>
 8008110:	682b      	ldr	r3, [r5, #0]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d000      	beq.n	8008118 <_sbrk_r+0x1c>
 8008116:	6023      	str	r3, [r4, #0]
 8008118:	bd70      	pop	{r4, r5, r6, pc}
 800811a:	46c0      	nop			; (mov r8, r8)
 800811c:	2000157c 	.word	0x2000157c

08008120 <__errno>:
 8008120:	4b01      	ldr	r3, [pc, #4]	; (8008128 <__errno+0x8>)
 8008122:	6818      	ldr	r0, [r3, #0]
 8008124:	4770      	bx	lr
 8008126:	46c0      	nop			; (mov r8, r8)
 8008128:	2000005c 	.word	0x2000005c

0800812c <__libc_init_array>:
 800812c:	b570      	push	{r4, r5, r6, lr}
 800812e:	2600      	movs	r6, #0
 8008130:	4c0c      	ldr	r4, [pc, #48]	; (8008164 <__libc_init_array+0x38>)
 8008132:	4d0d      	ldr	r5, [pc, #52]	; (8008168 <__libc_init_array+0x3c>)
 8008134:	1b64      	subs	r4, r4, r5
 8008136:	10a4      	asrs	r4, r4, #2
 8008138:	42a6      	cmp	r6, r4
 800813a:	d109      	bne.n	8008150 <__libc_init_array+0x24>
 800813c:	2600      	movs	r6, #0
 800813e:	f000 fba7 	bl	8008890 <_init>
 8008142:	4c0a      	ldr	r4, [pc, #40]	; (800816c <__libc_init_array+0x40>)
 8008144:	4d0a      	ldr	r5, [pc, #40]	; (8008170 <__libc_init_array+0x44>)
 8008146:	1b64      	subs	r4, r4, r5
 8008148:	10a4      	asrs	r4, r4, #2
 800814a:	42a6      	cmp	r6, r4
 800814c:	d105      	bne.n	800815a <__libc_init_array+0x2e>
 800814e:	bd70      	pop	{r4, r5, r6, pc}
 8008150:	00b3      	lsls	r3, r6, #2
 8008152:	58eb      	ldr	r3, [r5, r3]
 8008154:	4798      	blx	r3
 8008156:	3601      	adds	r6, #1
 8008158:	e7ee      	b.n	8008138 <__libc_init_array+0xc>
 800815a:	00b3      	lsls	r3, r6, #2
 800815c:	58eb      	ldr	r3, [r5, r3]
 800815e:	4798      	blx	r3
 8008160:	3601      	adds	r6, #1
 8008162:	e7f2      	b.n	800814a <__libc_init_array+0x1e>
 8008164:	0800a514 	.word	0x0800a514
 8008168:	0800a514 	.word	0x0800a514
 800816c:	0800a518 	.word	0x0800a518
 8008170:	0800a514 	.word	0x0800a514

08008174 <__retarget_lock_acquire_recursive>:
 8008174:	4770      	bx	lr

08008176 <__retarget_lock_release_recursive>:
 8008176:	4770      	bx	lr

08008178 <memcpy>:
 8008178:	2300      	movs	r3, #0
 800817a:	b510      	push	{r4, lr}
 800817c:	429a      	cmp	r2, r3
 800817e:	d100      	bne.n	8008182 <memcpy+0xa>
 8008180:	bd10      	pop	{r4, pc}
 8008182:	5ccc      	ldrb	r4, [r1, r3]
 8008184:	54c4      	strb	r4, [r0, r3]
 8008186:	3301      	adds	r3, #1
 8008188:	e7f8      	b.n	800817c <memcpy+0x4>
	...

0800818c <_free_r>:
 800818c:	b570      	push	{r4, r5, r6, lr}
 800818e:	0005      	movs	r5, r0
 8008190:	2900      	cmp	r1, #0
 8008192:	d010      	beq.n	80081b6 <_free_r+0x2a>
 8008194:	1f0c      	subs	r4, r1, #4
 8008196:	6823      	ldr	r3, [r4, #0]
 8008198:	2b00      	cmp	r3, #0
 800819a:	da00      	bge.n	800819e <_free_r+0x12>
 800819c:	18e4      	adds	r4, r4, r3
 800819e:	0028      	movs	r0, r5
 80081a0:	f7ff ff40 	bl	8008024 <__malloc_lock>
 80081a4:	4a1d      	ldr	r2, [pc, #116]	; (800821c <_free_r+0x90>)
 80081a6:	6813      	ldr	r3, [r2, #0]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d105      	bne.n	80081b8 <_free_r+0x2c>
 80081ac:	6063      	str	r3, [r4, #4]
 80081ae:	6014      	str	r4, [r2, #0]
 80081b0:	0028      	movs	r0, r5
 80081b2:	f7ff ff3f 	bl	8008034 <__malloc_unlock>
 80081b6:	bd70      	pop	{r4, r5, r6, pc}
 80081b8:	42a3      	cmp	r3, r4
 80081ba:	d908      	bls.n	80081ce <_free_r+0x42>
 80081bc:	6820      	ldr	r0, [r4, #0]
 80081be:	1821      	adds	r1, r4, r0
 80081c0:	428b      	cmp	r3, r1
 80081c2:	d1f3      	bne.n	80081ac <_free_r+0x20>
 80081c4:	6819      	ldr	r1, [r3, #0]
 80081c6:	685b      	ldr	r3, [r3, #4]
 80081c8:	1809      	adds	r1, r1, r0
 80081ca:	6021      	str	r1, [r4, #0]
 80081cc:	e7ee      	b.n	80081ac <_free_r+0x20>
 80081ce:	001a      	movs	r2, r3
 80081d0:	685b      	ldr	r3, [r3, #4]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d001      	beq.n	80081da <_free_r+0x4e>
 80081d6:	42a3      	cmp	r3, r4
 80081d8:	d9f9      	bls.n	80081ce <_free_r+0x42>
 80081da:	6811      	ldr	r1, [r2, #0]
 80081dc:	1850      	adds	r0, r2, r1
 80081de:	42a0      	cmp	r0, r4
 80081e0:	d10b      	bne.n	80081fa <_free_r+0x6e>
 80081e2:	6820      	ldr	r0, [r4, #0]
 80081e4:	1809      	adds	r1, r1, r0
 80081e6:	1850      	adds	r0, r2, r1
 80081e8:	6011      	str	r1, [r2, #0]
 80081ea:	4283      	cmp	r3, r0
 80081ec:	d1e0      	bne.n	80081b0 <_free_r+0x24>
 80081ee:	6818      	ldr	r0, [r3, #0]
 80081f0:	685b      	ldr	r3, [r3, #4]
 80081f2:	1841      	adds	r1, r0, r1
 80081f4:	6011      	str	r1, [r2, #0]
 80081f6:	6053      	str	r3, [r2, #4]
 80081f8:	e7da      	b.n	80081b0 <_free_r+0x24>
 80081fa:	42a0      	cmp	r0, r4
 80081fc:	d902      	bls.n	8008204 <_free_r+0x78>
 80081fe:	230c      	movs	r3, #12
 8008200:	602b      	str	r3, [r5, #0]
 8008202:	e7d5      	b.n	80081b0 <_free_r+0x24>
 8008204:	6820      	ldr	r0, [r4, #0]
 8008206:	1821      	adds	r1, r4, r0
 8008208:	428b      	cmp	r3, r1
 800820a:	d103      	bne.n	8008214 <_free_r+0x88>
 800820c:	6819      	ldr	r1, [r3, #0]
 800820e:	685b      	ldr	r3, [r3, #4]
 8008210:	1809      	adds	r1, r1, r0
 8008212:	6021      	str	r1, [r4, #0]
 8008214:	6063      	str	r3, [r4, #4]
 8008216:	6054      	str	r4, [r2, #4]
 8008218:	e7ca      	b.n	80081b0 <_free_r+0x24>
 800821a:	46c0      	nop			; (mov r8, r8)
 800821c:	2000143c 	.word	0x2000143c

08008220 <__ssputs_r>:
 8008220:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008222:	b085      	sub	sp, #20
 8008224:	9301      	str	r3, [sp, #4]
 8008226:	9203      	str	r2, [sp, #12]
 8008228:	688e      	ldr	r6, [r1, #8]
 800822a:	9a01      	ldr	r2, [sp, #4]
 800822c:	0007      	movs	r7, r0
 800822e:	000c      	movs	r4, r1
 8008230:	680b      	ldr	r3, [r1, #0]
 8008232:	4296      	cmp	r6, r2
 8008234:	d831      	bhi.n	800829a <__ssputs_r+0x7a>
 8008236:	898a      	ldrh	r2, [r1, #12]
 8008238:	2190      	movs	r1, #144	; 0x90
 800823a:	00c9      	lsls	r1, r1, #3
 800823c:	420a      	tst	r2, r1
 800823e:	d029      	beq.n	8008294 <__ssputs_r+0x74>
 8008240:	2003      	movs	r0, #3
 8008242:	6921      	ldr	r1, [r4, #16]
 8008244:	1a5b      	subs	r3, r3, r1
 8008246:	9302      	str	r3, [sp, #8]
 8008248:	6963      	ldr	r3, [r4, #20]
 800824a:	4343      	muls	r3, r0
 800824c:	0fdd      	lsrs	r5, r3, #31
 800824e:	18ed      	adds	r5, r5, r3
 8008250:	9b01      	ldr	r3, [sp, #4]
 8008252:	9802      	ldr	r0, [sp, #8]
 8008254:	3301      	adds	r3, #1
 8008256:	181b      	adds	r3, r3, r0
 8008258:	106d      	asrs	r5, r5, #1
 800825a:	42ab      	cmp	r3, r5
 800825c:	d900      	bls.n	8008260 <__ssputs_r+0x40>
 800825e:	001d      	movs	r5, r3
 8008260:	0552      	lsls	r2, r2, #21
 8008262:	d529      	bpl.n	80082b8 <__ssputs_r+0x98>
 8008264:	0029      	movs	r1, r5
 8008266:	0038      	movs	r0, r7
 8008268:	f7ff fe5a 	bl	8007f20 <_malloc_r>
 800826c:	1e06      	subs	r6, r0, #0
 800826e:	d02d      	beq.n	80082cc <__ssputs_r+0xac>
 8008270:	9a02      	ldr	r2, [sp, #8]
 8008272:	6921      	ldr	r1, [r4, #16]
 8008274:	f7ff ff80 	bl	8008178 <memcpy>
 8008278:	89a2      	ldrh	r2, [r4, #12]
 800827a:	4b19      	ldr	r3, [pc, #100]	; (80082e0 <__ssputs_r+0xc0>)
 800827c:	401a      	ands	r2, r3
 800827e:	2380      	movs	r3, #128	; 0x80
 8008280:	4313      	orrs	r3, r2
 8008282:	81a3      	strh	r3, [r4, #12]
 8008284:	9b02      	ldr	r3, [sp, #8]
 8008286:	6126      	str	r6, [r4, #16]
 8008288:	18f6      	adds	r6, r6, r3
 800828a:	6026      	str	r6, [r4, #0]
 800828c:	6165      	str	r5, [r4, #20]
 800828e:	9e01      	ldr	r6, [sp, #4]
 8008290:	1aed      	subs	r5, r5, r3
 8008292:	60a5      	str	r5, [r4, #8]
 8008294:	9b01      	ldr	r3, [sp, #4]
 8008296:	429e      	cmp	r6, r3
 8008298:	d900      	bls.n	800829c <__ssputs_r+0x7c>
 800829a:	9e01      	ldr	r6, [sp, #4]
 800829c:	0032      	movs	r2, r6
 800829e:	9903      	ldr	r1, [sp, #12]
 80082a0:	6820      	ldr	r0, [r4, #0]
 80082a2:	f000 fa9f 	bl	80087e4 <memmove>
 80082a6:	2000      	movs	r0, #0
 80082a8:	68a3      	ldr	r3, [r4, #8]
 80082aa:	1b9b      	subs	r3, r3, r6
 80082ac:	60a3      	str	r3, [r4, #8]
 80082ae:	6823      	ldr	r3, [r4, #0]
 80082b0:	199b      	adds	r3, r3, r6
 80082b2:	6023      	str	r3, [r4, #0]
 80082b4:	b005      	add	sp, #20
 80082b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80082b8:	002a      	movs	r2, r5
 80082ba:	0038      	movs	r0, r7
 80082bc:	f000 fab0 	bl	8008820 <_realloc_r>
 80082c0:	1e06      	subs	r6, r0, #0
 80082c2:	d1df      	bne.n	8008284 <__ssputs_r+0x64>
 80082c4:	0038      	movs	r0, r7
 80082c6:	6921      	ldr	r1, [r4, #16]
 80082c8:	f7ff ff60 	bl	800818c <_free_r>
 80082cc:	230c      	movs	r3, #12
 80082ce:	2001      	movs	r0, #1
 80082d0:	603b      	str	r3, [r7, #0]
 80082d2:	89a2      	ldrh	r2, [r4, #12]
 80082d4:	3334      	adds	r3, #52	; 0x34
 80082d6:	4313      	orrs	r3, r2
 80082d8:	81a3      	strh	r3, [r4, #12]
 80082da:	4240      	negs	r0, r0
 80082dc:	e7ea      	b.n	80082b4 <__ssputs_r+0x94>
 80082de:	46c0      	nop			; (mov r8, r8)
 80082e0:	fffffb7f 	.word	0xfffffb7f

080082e4 <_svfiprintf_r>:
 80082e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80082e6:	b0a1      	sub	sp, #132	; 0x84
 80082e8:	9003      	str	r0, [sp, #12]
 80082ea:	001d      	movs	r5, r3
 80082ec:	898b      	ldrh	r3, [r1, #12]
 80082ee:	000f      	movs	r7, r1
 80082f0:	0016      	movs	r6, r2
 80082f2:	061b      	lsls	r3, r3, #24
 80082f4:	d511      	bpl.n	800831a <_svfiprintf_r+0x36>
 80082f6:	690b      	ldr	r3, [r1, #16]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d10e      	bne.n	800831a <_svfiprintf_r+0x36>
 80082fc:	2140      	movs	r1, #64	; 0x40
 80082fe:	f7ff fe0f 	bl	8007f20 <_malloc_r>
 8008302:	6038      	str	r0, [r7, #0]
 8008304:	6138      	str	r0, [r7, #16]
 8008306:	2800      	cmp	r0, #0
 8008308:	d105      	bne.n	8008316 <_svfiprintf_r+0x32>
 800830a:	230c      	movs	r3, #12
 800830c:	9a03      	ldr	r2, [sp, #12]
 800830e:	3801      	subs	r0, #1
 8008310:	6013      	str	r3, [r2, #0]
 8008312:	b021      	add	sp, #132	; 0x84
 8008314:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008316:	2340      	movs	r3, #64	; 0x40
 8008318:	617b      	str	r3, [r7, #20]
 800831a:	2300      	movs	r3, #0
 800831c:	ac08      	add	r4, sp, #32
 800831e:	6163      	str	r3, [r4, #20]
 8008320:	3320      	adds	r3, #32
 8008322:	7663      	strb	r3, [r4, #25]
 8008324:	3310      	adds	r3, #16
 8008326:	76a3      	strb	r3, [r4, #26]
 8008328:	9507      	str	r5, [sp, #28]
 800832a:	0035      	movs	r5, r6
 800832c:	782b      	ldrb	r3, [r5, #0]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d001      	beq.n	8008336 <_svfiprintf_r+0x52>
 8008332:	2b25      	cmp	r3, #37	; 0x25
 8008334:	d148      	bne.n	80083c8 <_svfiprintf_r+0xe4>
 8008336:	1bab      	subs	r3, r5, r6
 8008338:	9305      	str	r3, [sp, #20]
 800833a:	42b5      	cmp	r5, r6
 800833c:	d00b      	beq.n	8008356 <_svfiprintf_r+0x72>
 800833e:	0032      	movs	r2, r6
 8008340:	0039      	movs	r1, r7
 8008342:	9803      	ldr	r0, [sp, #12]
 8008344:	f7ff ff6c 	bl	8008220 <__ssputs_r>
 8008348:	3001      	adds	r0, #1
 800834a:	d100      	bne.n	800834e <_svfiprintf_r+0x6a>
 800834c:	e0af      	b.n	80084ae <_svfiprintf_r+0x1ca>
 800834e:	6963      	ldr	r3, [r4, #20]
 8008350:	9a05      	ldr	r2, [sp, #20]
 8008352:	189b      	adds	r3, r3, r2
 8008354:	6163      	str	r3, [r4, #20]
 8008356:	782b      	ldrb	r3, [r5, #0]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d100      	bne.n	800835e <_svfiprintf_r+0x7a>
 800835c:	e0a7      	b.n	80084ae <_svfiprintf_r+0x1ca>
 800835e:	2201      	movs	r2, #1
 8008360:	2300      	movs	r3, #0
 8008362:	4252      	negs	r2, r2
 8008364:	6062      	str	r2, [r4, #4]
 8008366:	a904      	add	r1, sp, #16
 8008368:	3254      	adds	r2, #84	; 0x54
 800836a:	1852      	adds	r2, r2, r1
 800836c:	1c6e      	adds	r6, r5, #1
 800836e:	6023      	str	r3, [r4, #0]
 8008370:	60e3      	str	r3, [r4, #12]
 8008372:	60a3      	str	r3, [r4, #8]
 8008374:	7013      	strb	r3, [r2, #0]
 8008376:	65a3      	str	r3, [r4, #88]	; 0x58
 8008378:	4b55      	ldr	r3, [pc, #340]	; (80084d0 <_svfiprintf_r+0x1ec>)
 800837a:	2205      	movs	r2, #5
 800837c:	0018      	movs	r0, r3
 800837e:	7831      	ldrb	r1, [r6, #0]
 8008380:	9305      	str	r3, [sp, #20]
 8008382:	f000 fa42 	bl	800880a <memchr>
 8008386:	1c75      	adds	r5, r6, #1
 8008388:	2800      	cmp	r0, #0
 800838a:	d11f      	bne.n	80083cc <_svfiprintf_r+0xe8>
 800838c:	6822      	ldr	r2, [r4, #0]
 800838e:	06d3      	lsls	r3, r2, #27
 8008390:	d504      	bpl.n	800839c <_svfiprintf_r+0xb8>
 8008392:	2353      	movs	r3, #83	; 0x53
 8008394:	a904      	add	r1, sp, #16
 8008396:	185b      	adds	r3, r3, r1
 8008398:	2120      	movs	r1, #32
 800839a:	7019      	strb	r1, [r3, #0]
 800839c:	0713      	lsls	r3, r2, #28
 800839e:	d504      	bpl.n	80083aa <_svfiprintf_r+0xc6>
 80083a0:	2353      	movs	r3, #83	; 0x53
 80083a2:	a904      	add	r1, sp, #16
 80083a4:	185b      	adds	r3, r3, r1
 80083a6:	212b      	movs	r1, #43	; 0x2b
 80083a8:	7019      	strb	r1, [r3, #0]
 80083aa:	7833      	ldrb	r3, [r6, #0]
 80083ac:	2b2a      	cmp	r3, #42	; 0x2a
 80083ae:	d016      	beq.n	80083de <_svfiprintf_r+0xfa>
 80083b0:	0035      	movs	r5, r6
 80083b2:	2100      	movs	r1, #0
 80083b4:	200a      	movs	r0, #10
 80083b6:	68e3      	ldr	r3, [r4, #12]
 80083b8:	782a      	ldrb	r2, [r5, #0]
 80083ba:	1c6e      	adds	r6, r5, #1
 80083bc:	3a30      	subs	r2, #48	; 0x30
 80083be:	2a09      	cmp	r2, #9
 80083c0:	d94e      	bls.n	8008460 <_svfiprintf_r+0x17c>
 80083c2:	2900      	cmp	r1, #0
 80083c4:	d111      	bne.n	80083ea <_svfiprintf_r+0x106>
 80083c6:	e017      	b.n	80083f8 <_svfiprintf_r+0x114>
 80083c8:	3501      	adds	r5, #1
 80083ca:	e7af      	b.n	800832c <_svfiprintf_r+0x48>
 80083cc:	9b05      	ldr	r3, [sp, #20]
 80083ce:	6822      	ldr	r2, [r4, #0]
 80083d0:	1ac0      	subs	r0, r0, r3
 80083d2:	2301      	movs	r3, #1
 80083d4:	4083      	lsls	r3, r0
 80083d6:	4313      	orrs	r3, r2
 80083d8:	002e      	movs	r6, r5
 80083da:	6023      	str	r3, [r4, #0]
 80083dc:	e7cc      	b.n	8008378 <_svfiprintf_r+0x94>
 80083de:	9b07      	ldr	r3, [sp, #28]
 80083e0:	1d19      	adds	r1, r3, #4
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	9107      	str	r1, [sp, #28]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	db01      	blt.n	80083ee <_svfiprintf_r+0x10a>
 80083ea:	930b      	str	r3, [sp, #44]	; 0x2c
 80083ec:	e004      	b.n	80083f8 <_svfiprintf_r+0x114>
 80083ee:	425b      	negs	r3, r3
 80083f0:	60e3      	str	r3, [r4, #12]
 80083f2:	2302      	movs	r3, #2
 80083f4:	4313      	orrs	r3, r2
 80083f6:	6023      	str	r3, [r4, #0]
 80083f8:	782b      	ldrb	r3, [r5, #0]
 80083fa:	2b2e      	cmp	r3, #46	; 0x2e
 80083fc:	d10a      	bne.n	8008414 <_svfiprintf_r+0x130>
 80083fe:	786b      	ldrb	r3, [r5, #1]
 8008400:	2b2a      	cmp	r3, #42	; 0x2a
 8008402:	d135      	bne.n	8008470 <_svfiprintf_r+0x18c>
 8008404:	9b07      	ldr	r3, [sp, #28]
 8008406:	3502      	adds	r5, #2
 8008408:	1d1a      	adds	r2, r3, #4
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	9207      	str	r2, [sp, #28]
 800840e:	2b00      	cmp	r3, #0
 8008410:	db2b      	blt.n	800846a <_svfiprintf_r+0x186>
 8008412:	9309      	str	r3, [sp, #36]	; 0x24
 8008414:	4e2f      	ldr	r6, [pc, #188]	; (80084d4 <_svfiprintf_r+0x1f0>)
 8008416:	2203      	movs	r2, #3
 8008418:	0030      	movs	r0, r6
 800841a:	7829      	ldrb	r1, [r5, #0]
 800841c:	f000 f9f5 	bl	800880a <memchr>
 8008420:	2800      	cmp	r0, #0
 8008422:	d006      	beq.n	8008432 <_svfiprintf_r+0x14e>
 8008424:	2340      	movs	r3, #64	; 0x40
 8008426:	1b80      	subs	r0, r0, r6
 8008428:	4083      	lsls	r3, r0
 800842a:	6822      	ldr	r2, [r4, #0]
 800842c:	3501      	adds	r5, #1
 800842e:	4313      	orrs	r3, r2
 8008430:	6023      	str	r3, [r4, #0]
 8008432:	7829      	ldrb	r1, [r5, #0]
 8008434:	2206      	movs	r2, #6
 8008436:	4828      	ldr	r0, [pc, #160]	; (80084d8 <_svfiprintf_r+0x1f4>)
 8008438:	1c6e      	adds	r6, r5, #1
 800843a:	7621      	strb	r1, [r4, #24]
 800843c:	f000 f9e5 	bl	800880a <memchr>
 8008440:	2800      	cmp	r0, #0
 8008442:	d03c      	beq.n	80084be <_svfiprintf_r+0x1da>
 8008444:	4b25      	ldr	r3, [pc, #148]	; (80084dc <_svfiprintf_r+0x1f8>)
 8008446:	2b00      	cmp	r3, #0
 8008448:	d125      	bne.n	8008496 <_svfiprintf_r+0x1b2>
 800844a:	2207      	movs	r2, #7
 800844c:	9b07      	ldr	r3, [sp, #28]
 800844e:	3307      	adds	r3, #7
 8008450:	4393      	bics	r3, r2
 8008452:	3308      	adds	r3, #8
 8008454:	9307      	str	r3, [sp, #28]
 8008456:	6963      	ldr	r3, [r4, #20]
 8008458:	9a04      	ldr	r2, [sp, #16]
 800845a:	189b      	adds	r3, r3, r2
 800845c:	6163      	str	r3, [r4, #20]
 800845e:	e764      	b.n	800832a <_svfiprintf_r+0x46>
 8008460:	4343      	muls	r3, r0
 8008462:	0035      	movs	r5, r6
 8008464:	2101      	movs	r1, #1
 8008466:	189b      	adds	r3, r3, r2
 8008468:	e7a6      	b.n	80083b8 <_svfiprintf_r+0xd4>
 800846a:	2301      	movs	r3, #1
 800846c:	425b      	negs	r3, r3
 800846e:	e7d0      	b.n	8008412 <_svfiprintf_r+0x12e>
 8008470:	2300      	movs	r3, #0
 8008472:	200a      	movs	r0, #10
 8008474:	001a      	movs	r2, r3
 8008476:	3501      	adds	r5, #1
 8008478:	6063      	str	r3, [r4, #4]
 800847a:	7829      	ldrb	r1, [r5, #0]
 800847c:	1c6e      	adds	r6, r5, #1
 800847e:	3930      	subs	r1, #48	; 0x30
 8008480:	2909      	cmp	r1, #9
 8008482:	d903      	bls.n	800848c <_svfiprintf_r+0x1a8>
 8008484:	2b00      	cmp	r3, #0
 8008486:	d0c5      	beq.n	8008414 <_svfiprintf_r+0x130>
 8008488:	9209      	str	r2, [sp, #36]	; 0x24
 800848a:	e7c3      	b.n	8008414 <_svfiprintf_r+0x130>
 800848c:	4342      	muls	r2, r0
 800848e:	0035      	movs	r5, r6
 8008490:	2301      	movs	r3, #1
 8008492:	1852      	adds	r2, r2, r1
 8008494:	e7f1      	b.n	800847a <_svfiprintf_r+0x196>
 8008496:	aa07      	add	r2, sp, #28
 8008498:	9200      	str	r2, [sp, #0]
 800849a:	0021      	movs	r1, r4
 800849c:	003a      	movs	r2, r7
 800849e:	4b10      	ldr	r3, [pc, #64]	; (80084e0 <_svfiprintf_r+0x1fc>)
 80084a0:	9803      	ldr	r0, [sp, #12]
 80084a2:	e000      	b.n	80084a6 <_svfiprintf_r+0x1c2>
 80084a4:	bf00      	nop
 80084a6:	9004      	str	r0, [sp, #16]
 80084a8:	9b04      	ldr	r3, [sp, #16]
 80084aa:	3301      	adds	r3, #1
 80084ac:	d1d3      	bne.n	8008456 <_svfiprintf_r+0x172>
 80084ae:	89bb      	ldrh	r3, [r7, #12]
 80084b0:	980d      	ldr	r0, [sp, #52]	; 0x34
 80084b2:	065b      	lsls	r3, r3, #25
 80084b4:	d400      	bmi.n	80084b8 <_svfiprintf_r+0x1d4>
 80084b6:	e72c      	b.n	8008312 <_svfiprintf_r+0x2e>
 80084b8:	2001      	movs	r0, #1
 80084ba:	4240      	negs	r0, r0
 80084bc:	e729      	b.n	8008312 <_svfiprintf_r+0x2e>
 80084be:	aa07      	add	r2, sp, #28
 80084c0:	9200      	str	r2, [sp, #0]
 80084c2:	0021      	movs	r1, r4
 80084c4:	003a      	movs	r2, r7
 80084c6:	4b06      	ldr	r3, [pc, #24]	; (80084e0 <_svfiprintf_r+0x1fc>)
 80084c8:	9803      	ldr	r0, [sp, #12]
 80084ca:	f000 f87b 	bl	80085c4 <_printf_i>
 80084ce:	e7ea      	b.n	80084a6 <_svfiprintf_r+0x1c2>
 80084d0:	0800a4d8 	.word	0x0800a4d8
 80084d4:	0800a4de 	.word	0x0800a4de
 80084d8:	0800a4e2 	.word	0x0800a4e2
 80084dc:	00000000 	.word	0x00000000
 80084e0:	08008221 	.word	0x08008221

080084e4 <_printf_common>:
 80084e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80084e6:	0016      	movs	r6, r2
 80084e8:	9301      	str	r3, [sp, #4]
 80084ea:	688a      	ldr	r2, [r1, #8]
 80084ec:	690b      	ldr	r3, [r1, #16]
 80084ee:	000c      	movs	r4, r1
 80084f0:	9000      	str	r0, [sp, #0]
 80084f2:	4293      	cmp	r3, r2
 80084f4:	da00      	bge.n	80084f8 <_printf_common+0x14>
 80084f6:	0013      	movs	r3, r2
 80084f8:	0022      	movs	r2, r4
 80084fa:	6033      	str	r3, [r6, #0]
 80084fc:	3243      	adds	r2, #67	; 0x43
 80084fe:	7812      	ldrb	r2, [r2, #0]
 8008500:	2a00      	cmp	r2, #0
 8008502:	d001      	beq.n	8008508 <_printf_common+0x24>
 8008504:	3301      	adds	r3, #1
 8008506:	6033      	str	r3, [r6, #0]
 8008508:	6823      	ldr	r3, [r4, #0]
 800850a:	069b      	lsls	r3, r3, #26
 800850c:	d502      	bpl.n	8008514 <_printf_common+0x30>
 800850e:	6833      	ldr	r3, [r6, #0]
 8008510:	3302      	adds	r3, #2
 8008512:	6033      	str	r3, [r6, #0]
 8008514:	6822      	ldr	r2, [r4, #0]
 8008516:	2306      	movs	r3, #6
 8008518:	0015      	movs	r5, r2
 800851a:	401d      	ands	r5, r3
 800851c:	421a      	tst	r2, r3
 800851e:	d027      	beq.n	8008570 <_printf_common+0x8c>
 8008520:	0023      	movs	r3, r4
 8008522:	3343      	adds	r3, #67	; 0x43
 8008524:	781b      	ldrb	r3, [r3, #0]
 8008526:	1e5a      	subs	r2, r3, #1
 8008528:	4193      	sbcs	r3, r2
 800852a:	6822      	ldr	r2, [r4, #0]
 800852c:	0692      	lsls	r2, r2, #26
 800852e:	d430      	bmi.n	8008592 <_printf_common+0xae>
 8008530:	0022      	movs	r2, r4
 8008532:	9901      	ldr	r1, [sp, #4]
 8008534:	9800      	ldr	r0, [sp, #0]
 8008536:	9d08      	ldr	r5, [sp, #32]
 8008538:	3243      	adds	r2, #67	; 0x43
 800853a:	47a8      	blx	r5
 800853c:	3001      	adds	r0, #1
 800853e:	d025      	beq.n	800858c <_printf_common+0xa8>
 8008540:	2206      	movs	r2, #6
 8008542:	6823      	ldr	r3, [r4, #0]
 8008544:	2500      	movs	r5, #0
 8008546:	4013      	ands	r3, r2
 8008548:	2b04      	cmp	r3, #4
 800854a:	d105      	bne.n	8008558 <_printf_common+0x74>
 800854c:	6833      	ldr	r3, [r6, #0]
 800854e:	68e5      	ldr	r5, [r4, #12]
 8008550:	1aed      	subs	r5, r5, r3
 8008552:	43eb      	mvns	r3, r5
 8008554:	17db      	asrs	r3, r3, #31
 8008556:	401d      	ands	r5, r3
 8008558:	68a3      	ldr	r3, [r4, #8]
 800855a:	6922      	ldr	r2, [r4, #16]
 800855c:	4293      	cmp	r3, r2
 800855e:	dd01      	ble.n	8008564 <_printf_common+0x80>
 8008560:	1a9b      	subs	r3, r3, r2
 8008562:	18ed      	adds	r5, r5, r3
 8008564:	2600      	movs	r6, #0
 8008566:	42b5      	cmp	r5, r6
 8008568:	d120      	bne.n	80085ac <_printf_common+0xc8>
 800856a:	2000      	movs	r0, #0
 800856c:	e010      	b.n	8008590 <_printf_common+0xac>
 800856e:	3501      	adds	r5, #1
 8008570:	68e3      	ldr	r3, [r4, #12]
 8008572:	6832      	ldr	r2, [r6, #0]
 8008574:	1a9b      	subs	r3, r3, r2
 8008576:	42ab      	cmp	r3, r5
 8008578:	ddd2      	ble.n	8008520 <_printf_common+0x3c>
 800857a:	0022      	movs	r2, r4
 800857c:	2301      	movs	r3, #1
 800857e:	9901      	ldr	r1, [sp, #4]
 8008580:	9800      	ldr	r0, [sp, #0]
 8008582:	9f08      	ldr	r7, [sp, #32]
 8008584:	3219      	adds	r2, #25
 8008586:	47b8      	blx	r7
 8008588:	3001      	adds	r0, #1
 800858a:	d1f0      	bne.n	800856e <_printf_common+0x8a>
 800858c:	2001      	movs	r0, #1
 800858e:	4240      	negs	r0, r0
 8008590:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008592:	2030      	movs	r0, #48	; 0x30
 8008594:	18e1      	adds	r1, r4, r3
 8008596:	3143      	adds	r1, #67	; 0x43
 8008598:	7008      	strb	r0, [r1, #0]
 800859a:	0021      	movs	r1, r4
 800859c:	1c5a      	adds	r2, r3, #1
 800859e:	3145      	adds	r1, #69	; 0x45
 80085a0:	7809      	ldrb	r1, [r1, #0]
 80085a2:	18a2      	adds	r2, r4, r2
 80085a4:	3243      	adds	r2, #67	; 0x43
 80085a6:	3302      	adds	r3, #2
 80085a8:	7011      	strb	r1, [r2, #0]
 80085aa:	e7c1      	b.n	8008530 <_printf_common+0x4c>
 80085ac:	0022      	movs	r2, r4
 80085ae:	2301      	movs	r3, #1
 80085b0:	9901      	ldr	r1, [sp, #4]
 80085b2:	9800      	ldr	r0, [sp, #0]
 80085b4:	9f08      	ldr	r7, [sp, #32]
 80085b6:	321a      	adds	r2, #26
 80085b8:	47b8      	blx	r7
 80085ba:	3001      	adds	r0, #1
 80085bc:	d0e6      	beq.n	800858c <_printf_common+0xa8>
 80085be:	3601      	adds	r6, #1
 80085c0:	e7d1      	b.n	8008566 <_printf_common+0x82>
	...

080085c4 <_printf_i>:
 80085c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80085c6:	b08b      	sub	sp, #44	; 0x2c
 80085c8:	9206      	str	r2, [sp, #24]
 80085ca:	000a      	movs	r2, r1
 80085cc:	3243      	adds	r2, #67	; 0x43
 80085ce:	9307      	str	r3, [sp, #28]
 80085d0:	9005      	str	r0, [sp, #20]
 80085d2:	9204      	str	r2, [sp, #16]
 80085d4:	7e0a      	ldrb	r2, [r1, #24]
 80085d6:	000c      	movs	r4, r1
 80085d8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80085da:	2a78      	cmp	r2, #120	; 0x78
 80085dc:	d809      	bhi.n	80085f2 <_printf_i+0x2e>
 80085de:	2a62      	cmp	r2, #98	; 0x62
 80085e0:	d80b      	bhi.n	80085fa <_printf_i+0x36>
 80085e2:	2a00      	cmp	r2, #0
 80085e4:	d100      	bne.n	80085e8 <_printf_i+0x24>
 80085e6:	e0be      	b.n	8008766 <_printf_i+0x1a2>
 80085e8:	497c      	ldr	r1, [pc, #496]	; (80087dc <_printf_i+0x218>)
 80085ea:	9103      	str	r1, [sp, #12]
 80085ec:	2a58      	cmp	r2, #88	; 0x58
 80085ee:	d100      	bne.n	80085f2 <_printf_i+0x2e>
 80085f0:	e093      	b.n	800871a <_printf_i+0x156>
 80085f2:	0026      	movs	r6, r4
 80085f4:	3642      	adds	r6, #66	; 0x42
 80085f6:	7032      	strb	r2, [r6, #0]
 80085f8:	e022      	b.n	8008640 <_printf_i+0x7c>
 80085fa:	0010      	movs	r0, r2
 80085fc:	3863      	subs	r0, #99	; 0x63
 80085fe:	2815      	cmp	r0, #21
 8008600:	d8f7      	bhi.n	80085f2 <_printf_i+0x2e>
 8008602:	f7f7 fd87 	bl	8000114 <__gnu_thumb1_case_shi>
 8008606:	0016      	.short	0x0016
 8008608:	fff6001f 	.word	0xfff6001f
 800860c:	fff6fff6 	.word	0xfff6fff6
 8008610:	001ffff6 	.word	0x001ffff6
 8008614:	fff6fff6 	.word	0xfff6fff6
 8008618:	fff6fff6 	.word	0xfff6fff6
 800861c:	003600a3 	.word	0x003600a3
 8008620:	fff60083 	.word	0xfff60083
 8008624:	00b4fff6 	.word	0x00b4fff6
 8008628:	0036fff6 	.word	0x0036fff6
 800862c:	fff6fff6 	.word	0xfff6fff6
 8008630:	0087      	.short	0x0087
 8008632:	0026      	movs	r6, r4
 8008634:	681a      	ldr	r2, [r3, #0]
 8008636:	3642      	adds	r6, #66	; 0x42
 8008638:	1d11      	adds	r1, r2, #4
 800863a:	6019      	str	r1, [r3, #0]
 800863c:	6813      	ldr	r3, [r2, #0]
 800863e:	7033      	strb	r3, [r6, #0]
 8008640:	2301      	movs	r3, #1
 8008642:	e0a2      	b.n	800878a <_printf_i+0x1c6>
 8008644:	6818      	ldr	r0, [r3, #0]
 8008646:	6809      	ldr	r1, [r1, #0]
 8008648:	1d02      	adds	r2, r0, #4
 800864a:	060d      	lsls	r5, r1, #24
 800864c:	d50b      	bpl.n	8008666 <_printf_i+0xa2>
 800864e:	6805      	ldr	r5, [r0, #0]
 8008650:	601a      	str	r2, [r3, #0]
 8008652:	2d00      	cmp	r5, #0
 8008654:	da03      	bge.n	800865e <_printf_i+0x9a>
 8008656:	232d      	movs	r3, #45	; 0x2d
 8008658:	9a04      	ldr	r2, [sp, #16]
 800865a:	426d      	negs	r5, r5
 800865c:	7013      	strb	r3, [r2, #0]
 800865e:	4b5f      	ldr	r3, [pc, #380]	; (80087dc <_printf_i+0x218>)
 8008660:	270a      	movs	r7, #10
 8008662:	9303      	str	r3, [sp, #12]
 8008664:	e01b      	b.n	800869e <_printf_i+0xda>
 8008666:	6805      	ldr	r5, [r0, #0]
 8008668:	601a      	str	r2, [r3, #0]
 800866a:	0649      	lsls	r1, r1, #25
 800866c:	d5f1      	bpl.n	8008652 <_printf_i+0x8e>
 800866e:	b22d      	sxth	r5, r5
 8008670:	e7ef      	b.n	8008652 <_printf_i+0x8e>
 8008672:	680d      	ldr	r5, [r1, #0]
 8008674:	6819      	ldr	r1, [r3, #0]
 8008676:	1d08      	adds	r0, r1, #4
 8008678:	6018      	str	r0, [r3, #0]
 800867a:	062e      	lsls	r6, r5, #24
 800867c:	d501      	bpl.n	8008682 <_printf_i+0xbe>
 800867e:	680d      	ldr	r5, [r1, #0]
 8008680:	e003      	b.n	800868a <_printf_i+0xc6>
 8008682:	066d      	lsls	r5, r5, #25
 8008684:	d5fb      	bpl.n	800867e <_printf_i+0xba>
 8008686:	680d      	ldr	r5, [r1, #0]
 8008688:	b2ad      	uxth	r5, r5
 800868a:	4b54      	ldr	r3, [pc, #336]	; (80087dc <_printf_i+0x218>)
 800868c:	2708      	movs	r7, #8
 800868e:	9303      	str	r3, [sp, #12]
 8008690:	2a6f      	cmp	r2, #111	; 0x6f
 8008692:	d000      	beq.n	8008696 <_printf_i+0xd2>
 8008694:	3702      	adds	r7, #2
 8008696:	0023      	movs	r3, r4
 8008698:	2200      	movs	r2, #0
 800869a:	3343      	adds	r3, #67	; 0x43
 800869c:	701a      	strb	r2, [r3, #0]
 800869e:	6863      	ldr	r3, [r4, #4]
 80086a0:	60a3      	str	r3, [r4, #8]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	db03      	blt.n	80086ae <_printf_i+0xea>
 80086a6:	2104      	movs	r1, #4
 80086a8:	6822      	ldr	r2, [r4, #0]
 80086aa:	438a      	bics	r2, r1
 80086ac:	6022      	str	r2, [r4, #0]
 80086ae:	2d00      	cmp	r5, #0
 80086b0:	d102      	bne.n	80086b8 <_printf_i+0xf4>
 80086b2:	9e04      	ldr	r6, [sp, #16]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d00c      	beq.n	80086d2 <_printf_i+0x10e>
 80086b8:	9e04      	ldr	r6, [sp, #16]
 80086ba:	0028      	movs	r0, r5
 80086bc:	0039      	movs	r1, r7
 80086be:	f7f7 fdb9 	bl	8000234 <__aeabi_uidivmod>
 80086c2:	9b03      	ldr	r3, [sp, #12]
 80086c4:	3e01      	subs	r6, #1
 80086c6:	5c5b      	ldrb	r3, [r3, r1]
 80086c8:	7033      	strb	r3, [r6, #0]
 80086ca:	002b      	movs	r3, r5
 80086cc:	0005      	movs	r5, r0
 80086ce:	429f      	cmp	r7, r3
 80086d0:	d9f3      	bls.n	80086ba <_printf_i+0xf6>
 80086d2:	2f08      	cmp	r7, #8
 80086d4:	d109      	bne.n	80086ea <_printf_i+0x126>
 80086d6:	6823      	ldr	r3, [r4, #0]
 80086d8:	07db      	lsls	r3, r3, #31
 80086da:	d506      	bpl.n	80086ea <_printf_i+0x126>
 80086dc:	6862      	ldr	r2, [r4, #4]
 80086de:	6923      	ldr	r3, [r4, #16]
 80086e0:	429a      	cmp	r2, r3
 80086e2:	dc02      	bgt.n	80086ea <_printf_i+0x126>
 80086e4:	2330      	movs	r3, #48	; 0x30
 80086e6:	3e01      	subs	r6, #1
 80086e8:	7033      	strb	r3, [r6, #0]
 80086ea:	9b04      	ldr	r3, [sp, #16]
 80086ec:	1b9b      	subs	r3, r3, r6
 80086ee:	6123      	str	r3, [r4, #16]
 80086f0:	9b07      	ldr	r3, [sp, #28]
 80086f2:	0021      	movs	r1, r4
 80086f4:	9300      	str	r3, [sp, #0]
 80086f6:	9805      	ldr	r0, [sp, #20]
 80086f8:	9b06      	ldr	r3, [sp, #24]
 80086fa:	aa09      	add	r2, sp, #36	; 0x24
 80086fc:	f7ff fef2 	bl	80084e4 <_printf_common>
 8008700:	3001      	adds	r0, #1
 8008702:	d147      	bne.n	8008794 <_printf_i+0x1d0>
 8008704:	2001      	movs	r0, #1
 8008706:	4240      	negs	r0, r0
 8008708:	b00b      	add	sp, #44	; 0x2c
 800870a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800870c:	2220      	movs	r2, #32
 800870e:	6809      	ldr	r1, [r1, #0]
 8008710:	430a      	orrs	r2, r1
 8008712:	6022      	str	r2, [r4, #0]
 8008714:	2278      	movs	r2, #120	; 0x78
 8008716:	4932      	ldr	r1, [pc, #200]	; (80087e0 <_printf_i+0x21c>)
 8008718:	9103      	str	r1, [sp, #12]
 800871a:	0021      	movs	r1, r4
 800871c:	3145      	adds	r1, #69	; 0x45
 800871e:	700a      	strb	r2, [r1, #0]
 8008720:	6819      	ldr	r1, [r3, #0]
 8008722:	6822      	ldr	r2, [r4, #0]
 8008724:	c920      	ldmia	r1!, {r5}
 8008726:	0610      	lsls	r0, r2, #24
 8008728:	d402      	bmi.n	8008730 <_printf_i+0x16c>
 800872a:	0650      	lsls	r0, r2, #25
 800872c:	d500      	bpl.n	8008730 <_printf_i+0x16c>
 800872e:	b2ad      	uxth	r5, r5
 8008730:	6019      	str	r1, [r3, #0]
 8008732:	07d3      	lsls	r3, r2, #31
 8008734:	d502      	bpl.n	800873c <_printf_i+0x178>
 8008736:	2320      	movs	r3, #32
 8008738:	4313      	orrs	r3, r2
 800873a:	6023      	str	r3, [r4, #0]
 800873c:	2710      	movs	r7, #16
 800873e:	2d00      	cmp	r5, #0
 8008740:	d1a9      	bne.n	8008696 <_printf_i+0xd2>
 8008742:	2220      	movs	r2, #32
 8008744:	6823      	ldr	r3, [r4, #0]
 8008746:	4393      	bics	r3, r2
 8008748:	6023      	str	r3, [r4, #0]
 800874a:	e7a4      	b.n	8008696 <_printf_i+0xd2>
 800874c:	681a      	ldr	r2, [r3, #0]
 800874e:	680d      	ldr	r5, [r1, #0]
 8008750:	1d10      	adds	r0, r2, #4
 8008752:	6949      	ldr	r1, [r1, #20]
 8008754:	6018      	str	r0, [r3, #0]
 8008756:	6813      	ldr	r3, [r2, #0]
 8008758:	062e      	lsls	r6, r5, #24
 800875a:	d501      	bpl.n	8008760 <_printf_i+0x19c>
 800875c:	6019      	str	r1, [r3, #0]
 800875e:	e002      	b.n	8008766 <_printf_i+0x1a2>
 8008760:	066d      	lsls	r5, r5, #25
 8008762:	d5fb      	bpl.n	800875c <_printf_i+0x198>
 8008764:	8019      	strh	r1, [r3, #0]
 8008766:	2300      	movs	r3, #0
 8008768:	9e04      	ldr	r6, [sp, #16]
 800876a:	6123      	str	r3, [r4, #16]
 800876c:	e7c0      	b.n	80086f0 <_printf_i+0x12c>
 800876e:	681a      	ldr	r2, [r3, #0]
 8008770:	1d11      	adds	r1, r2, #4
 8008772:	6019      	str	r1, [r3, #0]
 8008774:	6816      	ldr	r6, [r2, #0]
 8008776:	2100      	movs	r1, #0
 8008778:	0030      	movs	r0, r6
 800877a:	6862      	ldr	r2, [r4, #4]
 800877c:	f000 f845 	bl	800880a <memchr>
 8008780:	2800      	cmp	r0, #0
 8008782:	d001      	beq.n	8008788 <_printf_i+0x1c4>
 8008784:	1b80      	subs	r0, r0, r6
 8008786:	6060      	str	r0, [r4, #4]
 8008788:	6863      	ldr	r3, [r4, #4]
 800878a:	6123      	str	r3, [r4, #16]
 800878c:	2300      	movs	r3, #0
 800878e:	9a04      	ldr	r2, [sp, #16]
 8008790:	7013      	strb	r3, [r2, #0]
 8008792:	e7ad      	b.n	80086f0 <_printf_i+0x12c>
 8008794:	0032      	movs	r2, r6
 8008796:	6923      	ldr	r3, [r4, #16]
 8008798:	9906      	ldr	r1, [sp, #24]
 800879a:	9805      	ldr	r0, [sp, #20]
 800879c:	9d07      	ldr	r5, [sp, #28]
 800879e:	47a8      	blx	r5
 80087a0:	3001      	adds	r0, #1
 80087a2:	d0af      	beq.n	8008704 <_printf_i+0x140>
 80087a4:	6823      	ldr	r3, [r4, #0]
 80087a6:	079b      	lsls	r3, r3, #30
 80087a8:	d415      	bmi.n	80087d6 <_printf_i+0x212>
 80087aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087ac:	68e0      	ldr	r0, [r4, #12]
 80087ae:	4298      	cmp	r0, r3
 80087b0:	daaa      	bge.n	8008708 <_printf_i+0x144>
 80087b2:	0018      	movs	r0, r3
 80087b4:	e7a8      	b.n	8008708 <_printf_i+0x144>
 80087b6:	0022      	movs	r2, r4
 80087b8:	2301      	movs	r3, #1
 80087ba:	9906      	ldr	r1, [sp, #24]
 80087bc:	9805      	ldr	r0, [sp, #20]
 80087be:	9e07      	ldr	r6, [sp, #28]
 80087c0:	3219      	adds	r2, #25
 80087c2:	47b0      	blx	r6
 80087c4:	3001      	adds	r0, #1
 80087c6:	d09d      	beq.n	8008704 <_printf_i+0x140>
 80087c8:	3501      	adds	r5, #1
 80087ca:	68e3      	ldr	r3, [r4, #12]
 80087cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80087ce:	1a9b      	subs	r3, r3, r2
 80087d0:	42ab      	cmp	r3, r5
 80087d2:	dcf0      	bgt.n	80087b6 <_printf_i+0x1f2>
 80087d4:	e7e9      	b.n	80087aa <_printf_i+0x1e6>
 80087d6:	2500      	movs	r5, #0
 80087d8:	e7f7      	b.n	80087ca <_printf_i+0x206>
 80087da:	46c0      	nop			; (mov r8, r8)
 80087dc:	0800a4e9 	.word	0x0800a4e9
 80087e0:	0800a4fa 	.word	0x0800a4fa

080087e4 <memmove>:
 80087e4:	b510      	push	{r4, lr}
 80087e6:	4288      	cmp	r0, r1
 80087e8:	d902      	bls.n	80087f0 <memmove+0xc>
 80087ea:	188b      	adds	r3, r1, r2
 80087ec:	4298      	cmp	r0, r3
 80087ee:	d303      	bcc.n	80087f8 <memmove+0x14>
 80087f0:	2300      	movs	r3, #0
 80087f2:	e007      	b.n	8008804 <memmove+0x20>
 80087f4:	5c8b      	ldrb	r3, [r1, r2]
 80087f6:	5483      	strb	r3, [r0, r2]
 80087f8:	3a01      	subs	r2, #1
 80087fa:	d2fb      	bcs.n	80087f4 <memmove+0x10>
 80087fc:	bd10      	pop	{r4, pc}
 80087fe:	5ccc      	ldrb	r4, [r1, r3]
 8008800:	54c4      	strb	r4, [r0, r3]
 8008802:	3301      	adds	r3, #1
 8008804:	429a      	cmp	r2, r3
 8008806:	d1fa      	bne.n	80087fe <memmove+0x1a>
 8008808:	e7f8      	b.n	80087fc <memmove+0x18>

0800880a <memchr>:
 800880a:	b2c9      	uxtb	r1, r1
 800880c:	1882      	adds	r2, r0, r2
 800880e:	4290      	cmp	r0, r2
 8008810:	d101      	bne.n	8008816 <memchr+0xc>
 8008812:	2000      	movs	r0, #0
 8008814:	4770      	bx	lr
 8008816:	7803      	ldrb	r3, [r0, #0]
 8008818:	428b      	cmp	r3, r1
 800881a:	d0fb      	beq.n	8008814 <memchr+0xa>
 800881c:	3001      	adds	r0, #1
 800881e:	e7f6      	b.n	800880e <memchr+0x4>

08008820 <_realloc_r>:
 8008820:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008822:	0007      	movs	r7, r0
 8008824:	000e      	movs	r6, r1
 8008826:	0014      	movs	r4, r2
 8008828:	2900      	cmp	r1, #0
 800882a:	d105      	bne.n	8008838 <_realloc_r+0x18>
 800882c:	0011      	movs	r1, r2
 800882e:	f7ff fb77 	bl	8007f20 <_malloc_r>
 8008832:	0005      	movs	r5, r0
 8008834:	0028      	movs	r0, r5
 8008836:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008838:	2a00      	cmp	r2, #0
 800883a:	d103      	bne.n	8008844 <_realloc_r+0x24>
 800883c:	f7ff fca6 	bl	800818c <_free_r>
 8008840:	0025      	movs	r5, r4
 8008842:	e7f7      	b.n	8008834 <_realloc_r+0x14>
 8008844:	f000 f81b 	bl	800887e <_malloc_usable_size_r>
 8008848:	9001      	str	r0, [sp, #4]
 800884a:	4284      	cmp	r4, r0
 800884c:	d803      	bhi.n	8008856 <_realloc_r+0x36>
 800884e:	0035      	movs	r5, r6
 8008850:	0843      	lsrs	r3, r0, #1
 8008852:	42a3      	cmp	r3, r4
 8008854:	d3ee      	bcc.n	8008834 <_realloc_r+0x14>
 8008856:	0021      	movs	r1, r4
 8008858:	0038      	movs	r0, r7
 800885a:	f7ff fb61 	bl	8007f20 <_malloc_r>
 800885e:	1e05      	subs	r5, r0, #0
 8008860:	d0e8      	beq.n	8008834 <_realloc_r+0x14>
 8008862:	9b01      	ldr	r3, [sp, #4]
 8008864:	0022      	movs	r2, r4
 8008866:	429c      	cmp	r4, r3
 8008868:	d900      	bls.n	800886c <_realloc_r+0x4c>
 800886a:	001a      	movs	r2, r3
 800886c:	0031      	movs	r1, r6
 800886e:	0028      	movs	r0, r5
 8008870:	f7ff fc82 	bl	8008178 <memcpy>
 8008874:	0031      	movs	r1, r6
 8008876:	0038      	movs	r0, r7
 8008878:	f7ff fc88 	bl	800818c <_free_r>
 800887c:	e7da      	b.n	8008834 <_realloc_r+0x14>

0800887e <_malloc_usable_size_r>:
 800887e:	1f0b      	subs	r3, r1, #4
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	1f18      	subs	r0, r3, #4
 8008884:	2b00      	cmp	r3, #0
 8008886:	da01      	bge.n	800888c <_malloc_usable_size_r+0xe>
 8008888:	580b      	ldr	r3, [r1, r0]
 800888a:	18c0      	adds	r0, r0, r3
 800888c:	4770      	bx	lr
	...

08008890 <_init>:
 8008890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008892:	46c0      	nop			; (mov r8, r8)
 8008894:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008896:	bc08      	pop	{r3}
 8008898:	469e      	mov	lr, r3
 800889a:	4770      	bx	lr

0800889c <_fini>:
 800889c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800889e:	46c0      	nop			; (mov r8, r8)
 80088a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088a2:	bc08      	pop	{r3}
 80088a4:	469e      	mov	lr, r3
 80088a6:	4770      	bx	lr
